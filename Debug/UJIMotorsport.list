
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007f68  08007f68  00017f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f84  08007f84  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f8c  08007f8c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008dc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6cc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd0  00000000  00000000  0003c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00040460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  00041638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025384  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169f8  00000000  00000000  00067a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da100  00000000  00000000  0007e424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158524  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  00158578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f50 	.word	0x08007f50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007f50 	.word	0x08007f50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <initializeLEDS+0x30>)
 80004ce:	f001 fdcb 	bl	8002068 <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 80004d2:	2100      	movs	r1, #0
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f001 fb64 	bl	8001ba2 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 80004da:	2300      	movs	r3, #0
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f001 fbb0 	bl	8001c46 <HAL_DAC_SetValue>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020c00 	.word	0x40020c00

080004f4 <setLEDS>:
  *         the configuration information for the specified DAC.
  * @param  n_led The number of leds to turn on (0-10).
  * @retval None
  */

void setLEDS(DAC_HandleTypeDef *hdac, uint32_t n_led){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	if (n_led > 10){
		assert_param(n_led);
	}

	uint32_t output = n_led * (4000/10) + 90;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	335a      	adds	r3, #90	; 0x5a
 800050a:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(hdac, LED_DAC, DAC_ALIGN_12B_R, output);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fb97 	bl	8001c46 <HAL_DAC_SetValue>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fe16 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f842 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 fa1a 	bl	8000964 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000530:	f000 f958 	bl	80007e4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000534:	f007 f8fa 	bl	800772c <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000538:	f000 f92a 	bl	8000790 <MX_DAC_Init>
  MX_ADC1_Init();
 800053c:	f000 f8a2 	bl	8000684 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000540:	f000 f8f2 	bl	8000728 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000544:	f000 f984 	bl	8000850 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000548:	f000 f9b8 	bl	80008bc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800054c:	f000 f9e0 	bl	8000910 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  initializeLEDS(&hdac);
 8000550:	4813      	ldr	r0, [pc, #76]	; (80005a0 <main+0x80>)
 8000552:	f7ff ffb5 	bl	80004c0 <initializeLEDS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = 11;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <main+0x84>)
 8000558:	220b      	movs	r2, #11
 800055a:	601a      	str	r2, [r3, #0]
	  setLEDS(&hdac,i);
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0x84>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	480f      	ldr	r0, [pc, #60]	; (80005a0 <main+0x80>)
 8000564:	f7ff ffc6 	bl	80004f4 <setLEDS>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <main+0x88>)
 800056e:	f001 fd94 	bl	800209a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f000 fe5f 	bl	8001238 <HAL_Delay>
	  i=(i+1)%11;
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <main+0x84>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	1c59      	adds	r1, r3, #1
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <main+0x8c>)
 8000582:	fba3 2301 	umull	r2, r3, r3, r1
 8000586:	08da      	lsrs	r2, r3, #3
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	1aca      	subs	r2, r1, r3
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <main+0x84>)
 8000596:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000598:	f007 f8ee 	bl	8007778 <MX_USB_HOST_Process>
	  i = 11;
 800059c:	e7db      	b.n	8000556 <main+0x36>
 800059e:	bf00      	nop
 80005a0:	200001a4 	.word	0x200001a4
 80005a4:	200000ac 	.word	0x200000ac
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	ba2e8ba3 	.word	0xba2e8ba3

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fbf6 	bl	8007db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f003 faba 	bl	8003bb0 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000642:	f000 fa8d 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000652:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fd1b 	bl	80040a0 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 fa76 	bl	8000b60 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC1_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_ADC1_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC1_Init+0x98>)
 800069e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC1_Init+0x98>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC1_Init+0xa0>)
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC1_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x98>)
 80006e6:	f000 fdcb 	bl	8001280 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 fa36 	bl	8000b60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC1_Init+0x98>)
 8000706:	f000 fdff 	bl	8001308 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000710:	f000 fa26 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000015c 	.word	0x2000015c
 8000720:	40012000 	.word	0x40012000
 8000724:	0f000001 	.word	0x0f000001

08000728 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_CAN1_Init+0x60>)
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_CAN1_Init+0x64>)
 8000730:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_CAN1_Init+0x60>)
 8000734:	2210      	movs	r2, #16
 8000736:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_CAN1_Init+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_CAN1_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_CAN1_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_CAN1_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_CAN1_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_CAN1_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_CAN1_Init+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_CAN1_Init+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_CAN1_Init+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_CAN1_Init+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_CAN1_Init+0x60>)
 8000776:	f000 ffe5 	bl	8001744 <HAL_CAN_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 f9ee 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000254 	.word	0x20000254
 800078c:	40006400 	.word	0x40006400

08000790 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_DAC_Init+0x4c>)
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_DAC_Init+0x50>)
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_DAC_Init+0x4c>)
 80007a6:	f001 f9da 	bl	8001b5e <HAL_DAC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007b0:	f000 f9d6 	bl	8000b60 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_DAC_Init+0x4c>)
 80007c4:	f001 fa64 	bl	8001c90 <HAL_DAC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007ce:	f000 f9c7 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001a4 	.word	0x200001a4
 80007e0:	40007400 	.word	0x40007400

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f003 fe2f 	bl	8004498 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 f98e 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001fc 	.word	0x200001fc
 800084c:	40013000 	.word	0x40013000

08000850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI2_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI2_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI2_Init+0x64>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI2_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI2_Init+0x64>)
 80008a2:	f003 fdf9 	bl	8004498 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 f958 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000c0 	.word	0x200000c0
 80008b8:	40003800 	.word	0x40003800

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART3_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008f4:	f003 fe59 	bl	80045aa <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f92f 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000118 	.word	0x20000118
 800090c:	40004800 	.word	0x40004800

08000910 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_USART6_UART_Init+0x50>)
 8000918:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_USART6_UART_Init+0x4c>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART6_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART6_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USART6_UART_Init+0x4c>)
 8000948:	f003 fe2f 	bl	80045aa <HAL_UART_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000952:	f000 f905 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200001b8 	.word	0x200001b8
 8000960:	40011400 	.word	0x40011400

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	4b72      	ldr	r3, [pc, #456]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a71      	ldr	r2, [pc, #452]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b6f      	ldr	r3, [pc, #444]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a6a      	ldr	r2, [pc, #424]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a5c      	ldr	r2, [pc, #368]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2108      	movs	r1, #8
 8000a26:	4849      	ldr	r0, [pc, #292]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000a28:	f001 fb1e 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4847      	ldr	r0, [pc, #284]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a32:	f001 fb19 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000a36:	2200      	movs	r2, #0
 8000a38:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8000a3c:	4845      	ldr	r0, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000a3e:	f001 fb13 	bl	8002068 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a42:	2308      	movs	r3, #8
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	483c      	ldr	r0, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000a5a:	f001 f969 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4836      	ldr	r0, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a76:	f001 f95b 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482e      	ldr	r0, [pc, #184]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000a96:	f001 f94b 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <MX_GPIO_Init+0x1f4>)
 8000ab0:	f001 f93e 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <MX_GPIO_Init+0x1f8>)
 8000ac8:	f001 f932 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481c      	ldr	r0, [pc, #112]	; (8000b5c <MX_GPIO_Init+0x1f8>)
 8000aea:	f001 f921 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000aee:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000af2:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000b08:	f001 f912 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000b20:	f001 f906 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000b3a:	f001 f8f9 	bl	8001d30 <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 ff96 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <HAL_ADC_MspInit+0xe4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d15b      	bne.n	8000c96 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c4e:	2332      	movs	r3, #50	; 0x32
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c62:	f001 f865 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230e      	movs	r3, #14
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c7a:	f001 f859 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <HAL_ADC_MspInit+0xf4>)
 8000c92:	f001 f84d 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	; 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_CAN_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_CAN_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d1e:	2309      	movs	r3, #9
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_CAN_MspInit+0x8c>)
 8000d2a:	f001 f801 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40006400 	.word	0x40006400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_DAC_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d127      	bne.n	8000db6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_DAC_MspInit+0x80>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_DAC_MspInit+0x84>)
 8000db2:	f000 ffbd 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40007400 	.word	0x40007400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <HAL_SPI_MspInit+0xe8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12c      	bne.n	8000e48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e26:	23e0      	movs	r3, #224	; 0xe0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e36:	2305      	movs	r3, #5
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_SPI_MspInit+0xf0>)
 8000e42:	f000 ff75 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e46:	e031      	b.n	8000eac <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <HAL_SPI_MspInit+0xf4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12c      	bne.n	8000eac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_SPI_MspInit+0xec>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_MISO_Pin|CAN_MOSI_Pin;
 8000e8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <HAL_SPI_MspInit+0xf8>)
 8000ea8:	f000 ff42 	bl	8001d30 <HAL_GPIO_Init>
}
 8000eac:	bf00      	nop
 8000eae:	3730      	adds	r7, #48	; 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <HAL_UART_MspInit+0x128>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d14c      	bne.n	8000f84 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a39      	ldr	r2, [pc, #228]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f50:	2307      	movs	r3, #7
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <HAL_UART_MspInit+0x130>)
 8000f5c:	f000 fee8 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f72:	2307      	movs	r3, #7
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <HAL_UART_MspInit+0x134>)
 8000f7e:	f000 fed7 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f82:	e030      	b.n	8000fe6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_UART_MspInit+0x138>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_MspInit+0x12c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_UART_MspInit+0x13c>)
 8000fe2:	f000 fea5 	bl	8001d30 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40011400 	.word	0x40011400
 8001004:	40020800 	.word	0x40020800

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f8d0 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <OTG_FS_IRQHandler+0x10>)
 8001062:	f001 fa9f 	bl	80025a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000658 	.word	0x20000658

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f006 fe4c 	bl	8007d3c <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20020000 	.word	0x20020000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	200000b0 	.word	0x200000b0
 80010d8:	20000970 	.word	0x20000970

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001106:	490e      	ldr	r1, [pc, #56]	; (8001140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800111c:	4c0b      	ldr	r4, [pc, #44]	; (800114c <LoopFillZerobss+0x26>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112a:	f7ff ffd7 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112e:	f006 fe0b 	bl	8007d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff f9f5 	bl	8000520 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001144:	08007f94 	.word	0x08007f94
  ldr r2, =_sbss
 8001148:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800114c:	2000096c 	.word	0x2000096c

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fcad 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fcf0 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fcc5 	bl	8001b46 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 fc8d 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	2000027c 	.word	0x2000027c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000027c 	.word	0x2000027c

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fc8c 	bl	8000bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f93a 	bl	800154c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e105      	b.n	8001530 <HAL_ADC_ConfigChannel+0x228>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_ADC_ConfigChannel+0x234>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_ADC_ConfigChannel+0x238>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d109      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1cc>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d105      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_ADC_ConfigChannel+0x238>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d123      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x1e6>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d11b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d111      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_ADC_ConfigChannel+0x23c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_ADC_ConfigChannel+0x240>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9a      	lsrs	r2, r3, #18
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001518:	e002      	b.n	8001520 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3b01      	subs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40012300 	.word	0x40012300
 8001540:	40012000 	.word	0x40012000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001554:	4b79      	ldr	r3, [pc, #484]	; (800173c <ADC_Init+0x1f0>)
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	431a      	orrs	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	021a      	lsls	r2, r3, #8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <ADC_Init+0x1f4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d022      	beq.n	800162a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e00f      	b.n	800164a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001648:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0202 	bic.w	r2, r2, #2
 8001658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6899      	ldr	r1, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7e1b      	ldrb	r3, [r3, #24]
 8001664:	005a      	lsls	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001686:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	035a      	lsls	r2, r3, #13
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	e007      	b.n	80016c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	3b01      	subs	r3, #1
 80016dc:	051a      	lsls	r2, r3, #20
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001702:	025a      	lsls	r2, r3, #9
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6899      	ldr	r1, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	029a      	lsls	r2, r3, #10
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40012300 	.word	0x40012300
 8001740:	0f000001 	.word	0x0f000001

08001744 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0ed      	b.n	8001932 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff faa6 	bl	8000cb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001778:	f7ff fd52 	bl	8001220 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800177e:	e012      	b.n	80017a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001780:	f7ff fd4e 	bl	8001220 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d90b      	bls.n	80017a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0c5      	b.n	8001932 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0e5      	beq.n	8001780 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0202 	bic.w	r2, r2, #2
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fd2c 	bl	8001220 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ca:	e012      	b.n	80017f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017cc:	f7ff fd28 	bl	8001220 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d90b      	bls.n	80017f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e09f      	b.n	8001932 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e5      	bne.n	80017cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e007      	b.n	800182a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7e5b      	ldrb	r3, [r3, #25]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e007      	b.n	8001854 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001852:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7e9b      	ldrb	r3, [r3, #26]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e007      	b.n	800187e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0220 	bic.w	r2, r2, #32
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7edb      	ldrb	r3, [r3, #27]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0210 	bic.w	r2, r2, #16
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0210 	orr.w	r2, r2, #16
 80018a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0208 	orr.w	r2, r2, #8
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0208 	bic.w	r2, r2, #8
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7f5b      	ldrb	r3, [r3, #29]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0204 	orr.w	r2, r2, #4
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e007      	b.n	80018fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	ea42 0103 	orr.w	r1, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	1e5a      	subs	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e014      	b.n	8001b9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff f8df 	bl	8000d44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	795b      	ldrb	r3, [r3, #5]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DAC_Start+0x16>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e040      	b.n	8001c3a <HAL_DAC_Start+0x98>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001bec:	2b3c      	cmp	r3, #60	; 0x3c
 8001bee:	d11d      	bne.n	8001c2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	e014      	b.n	8001c2c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	213c      	movs	r1, #60	; 0x3c
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0202 	orr.w	r2, r2, #2
 8001c2a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e004      	b.n	8001c7a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	3314      	adds	r3, #20
 8001c78:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DAC_ConfigChannel+0x18>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e03c      	b.n	8001d22 <HAL_DAC_ConfigChannel+0x92>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	22c0      	movs	r2, #192	; 0xc0
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e16b      	b.n	8002024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 815a 	bne.w	800201e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80b4 	beq.w	800201e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a5f      	ldr	r2, [pc, #380]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_GPIO_Init+0x314>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x318>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a50      	ldr	r2, [pc, #320]	; (800204c <HAL_GPIO_Init+0x31c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x320>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x328>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x32c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x20a>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9a:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_GPIO_Init+0x334>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae90 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	041a      	lsls	r2, r3, #16
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	400b      	ands	r3, r1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d0:	b08f      	sub	sp, #60	; 0x3c
 80020d2:	af0a      	add	r7, sp, #40	; 0x28
 80020d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e054      	b.n	800218a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 fb74 	bl	80077e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2203      	movs	r2, #3
 8002104:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fcca 	bl	8004ab8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	687e      	ldr	r6, [r7, #4]
 800212c:	466d      	mov	r5, sp
 800212e:	f106 0410 	add.w	r4, r6, #16
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002142:	1d33      	adds	r3, r6, #4
 8002144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f002 fc44 	bl	80049d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fcc1 	bl	8004ada <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	687e      	ldr	r6, [r7, #4]
 8002160:	466d      	mov	r5, sp
 8002162:	f106 0410 	add.w	r4, r6, #16
 8002166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002172:	e885 0003 	stmia.w	r5, {r0, r1}
 8002176:	1d33      	adds	r3, r6, #4
 8002178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	f002 fe28 	bl	8004dd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002192 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002192:	b590      	push	{r4, r7, lr}
 8002194:	b089      	sub	sp, #36	; 0x24
 8002196:	af04      	add	r7, sp, #16
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	4608      	mov	r0, r1
 800219c:	4611      	mov	r1, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	70fb      	strb	r3, [r7, #3]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70bb      	strb	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_HCD_HC_Init+0x28>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e076      	b.n	80022a8 <HAL_HCD_HC_Init+0x116>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	333d      	adds	r3, #61	; 0x3d
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3338      	adds	r3, #56	; 0x38
 80021e2:	787a      	ldrb	r2, [r7, #1]
 80021e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3340      	adds	r3, #64	; 0x40
 80021f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021f6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3339      	adds	r3, #57	; 0x39
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333f      	adds	r3, #63	; 0x3f
 8002218:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800221c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	78ba      	ldrb	r2, [r7, #2]
 8002222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002226:	b2d0      	uxtb	r0, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	333a      	adds	r3, #58	; 0x3a
 8002234:	4602      	mov	r2, r0
 8002236:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da09      	bge.n	8002254 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	333b      	adds	r3, #59	; 0x3b
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e008      	b.n	8002266 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	333b      	adds	r3, #59	; 0x3b
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	333c      	adds	r3, #60	; 0x3c
 8002274:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002278:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	787c      	ldrb	r4, [r7, #1]
 8002280:	78ba      	ldrb	r2, [r7, #2]
 8002282:	78f9      	ldrb	r1, [r7, #3]
 8002284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4623      	mov	r3, r4
 8002296:	f002 ff15 	bl	80050c4 <USB_HC_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}

080022b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_HCD_HC_Halt+0x1e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e00f      	b.n	80022ee <HAL_HCD_HC_Halt+0x3e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 f951 	bl	8005586 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	70fb      	strb	r3, [r7, #3]
 800230a:	460b      	mov	r3, r1
 800230c:	70bb      	strb	r3, [r7, #2]
 800230e:	4613      	mov	r3, r2
 8002310:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	333b      	adds	r3, #59	; 0x3b
 8002320:	78ba      	ldrb	r2, [r7, #2]
 8002322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	787a      	ldrb	r2, [r7, #1]
 8002334:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002336:	7c3b      	ldrb	r3, [r7, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d112      	bne.n	8002362 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3342      	adds	r3, #66	; 0x42
 800234a:	2203      	movs	r2, #3
 800234c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	333d      	adds	r3, #61	; 0x3d
 800235c:	7f3a      	ldrb	r2, [r7, #28]
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e008      	b.n	8002374 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3342      	adds	r3, #66	; 0x42
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b03      	cmp	r3, #3
 8002378:	f200 80c6 	bhi.w	8002508 <HAL_HCD_HC_SubmitRequest+0x210>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	080024f5 	.word	0x080024f5
 800238c:	080023f9 	.word	0x080023f9
 8002390:	08002477 	.word	0x08002477
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002394:	7c3b      	ldrb	r3, [r7, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	f040 80b8 	bne.w	800250c <HAL_HCD_HC_SubmitRequest+0x214>
 800239c:	78bb      	ldrb	r3, [r7, #2]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80b4 	bne.w	800250c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80023a4:	8b3b      	ldrh	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3355      	adds	r3, #85	; 0x55
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3355      	adds	r3, #85	; 0x55
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3342      	adds	r3, #66	; 0x42
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023e2:	e093      	b.n	800250c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3342      	adds	r3, #66	; 0x42
 80023f2:	2202      	movs	r2, #2
 80023f4:	701a      	strb	r2, [r3, #0]
      break;
 80023f6:	e089      	b.n	800250c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023f8:	78bb      	ldrb	r3, [r7, #2]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11d      	bne.n	800243a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3355      	adds	r3, #85	; 0x55
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3342      	adds	r3, #66	; 0x42
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002424:	e073      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3342      	adds	r3, #66	; 0x42
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
      break;
 8002438:	e069      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3354      	adds	r3, #84	; 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3342      	adds	r3, #66	; 0x42
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
      break;
 8002460:	e055      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3342      	adds	r3, #66	; 0x42
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	e04b      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11d      	bne.n	80024b8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3355      	adds	r3, #85	; 0x55
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3342      	adds	r3, #66	; 0x42
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024a2:	e034      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3342      	adds	r3, #66	; 0x42
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
      break;
 80024b6:	e02a      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3354      	adds	r3, #84	; 0x54
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3342      	adds	r3, #66	; 0x42
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      break;
 80024de:	e016      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3342      	adds	r3, #66	; 0x42
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
      break;
 80024f2:	e00c      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3342      	adds	r3, #66	; 0x42
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
      break;
 8002506:	e002      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800250c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3344      	adds	r3, #68	; 0x44
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	8b3a      	ldrh	r2, [r7, #24]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	202c      	movs	r0, #44	; 0x2c
 8002528:	fb00 f303 	mul.w	r3, r0, r3
 800252c:	440b      	add	r3, r1
 800252e:	334c      	adds	r3, #76	; 0x4c
 8002530:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3350      	adds	r3, #80	; 0x50
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3339      	adds	r3, #57	; 0x39
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3361      	adds	r3, #97	; 0x61
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	222c      	movs	r2, #44	; 0x2c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	3338      	adds	r3, #56	; 0x38
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	18d1      	adds	r1, r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	f002 fea4 	bl	80052e0 <USB_HC_StartXfer>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop

080025a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fbc7 	bl	8004d4e <USB_GetMode>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 80f6 	bne.w	80027b4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fbab 	bl	8004d28 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80ec 	beq.w	80027b2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fba2 	bl	8004d28 <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ee:	d104      	bne.n	80025fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fb92 	bl	8004d28 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800260e:	d104      	bne.n	800261a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002618:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fb82 	bl	8004d28 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800262a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800262e:	d104      	bne.n	800263a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fb72 	bl	8004d28 <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d103      	bne.n	8002656 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2202      	movs	r2, #2
 8002654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fb64 	bl	8004d28 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266a:	d11c      	bne.n	80026a6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002674:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002686:	2110      	movs	r1, #16
 8002688:	6938      	ldr	r0, [r7, #16]
 800268a:	f002 fa73 	bl	8004b74 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800268e:	6938      	ldr	r0, [r7, #16]
 8002690:	f002 fa94 	bl	8004bbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fc4c 	bl	8004f38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f005 f91f 	bl	80078e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fb3c 	bl	8004d28 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ba:	d102      	bne.n	80026c2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f001 fa03 	bl	8003ac8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fb2e 	bl	8004d28 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d106      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f005 f8e8 	bl	80078ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2208      	movs	r2, #8
 80026e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fb1d 	bl	8004d28 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d101      	bne.n	80026fc <HAL_HCD_IRQHandler+0x158>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_HCD_IRQHandler+0x15a>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0210 	bic.w	r2, r2, #16
 8002710:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f001 f906 	bl	8003924 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0210 	orr.w	r2, r2, #16
 8002726:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fafb 	bl	8004d28 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273c:	d13a      	bne.n	80027b4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f002 ff0e 	bl	8005564 <USB_HC_ReadInterrupt>
 8002748:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e025      	b.n	800279c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277a:	d106      	bne.n	800278a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8ab 	bl	80028de <HCD_HC_IN_IRQHandler>
 8002788:	e005      	b.n	8002796 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fcc6 	bl	8003122 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3d4      	bcc.n	8002750 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	615a      	str	r2, [r3, #20]
 80027b0:	e000      	b.n	80027b4 <HAL_HCD_IRQHandler+0x210>
      return;
 80027b2:	bf00      	nop
    }
  }
}
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_HCD_Start+0x16>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e013      	b.n	80027f8 <HAL_HCD_Start+0x3e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fc0e 	bl	8005000 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 f954 	bl	8004a96 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_HCD_Stop+0x16>
 8002812:	2302      	movs	r3, #2
 8002814:	e00d      	b.n	8002832 <HAL_HCD_Stop+0x32>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f808 	bl	8005838 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fbb0 	bl	8004fac <USB_ResetPort>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	781b      	ldrb	r3, [r3, #0]
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3350      	adds	r3, #80	; 0x50
 8002898:	681b      	ldr	r3, [r3, #0]
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fbf4 	bl	80050a0 <USB_GetCurrentFrame>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fbcf 	bl	8005072 <USB_GetHostSpeed>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d119      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2304      	movs	r3, #4
 800291e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
 8002940:	e101      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	d12b      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3361      	adds	r3, #97	; 0x61
 800297c:	2207      	movs	r2, #7
 800297e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	0151      	lsls	r1, r2, #5
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	440a      	add	r2, r1
 8002996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fdeb 	bl	8005586 <USB_HC_Halt>
 80029b0:	e0c9      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d109      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2320      	movs	r3, #32
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e0b4      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d133      	bne.n	8002a5a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	0151      	lsls	r1, r2, #5
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	440a      	add	r2, r1
 8002a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3361      	adds	r3, #97	; 0x61
 8002a20:	2205      	movs	r2, #5
 8002a22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	2310      	movs	r3, #16
 8002a34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	461a      	mov	r2, r3
 8002a44:	2308      	movs	r3, #8
 8002a46:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fd97 	bl	8005586 <USB_HC_Halt>
 8002a58:	e075      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d134      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	0151      	lsls	r1, r2, #5
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	440a      	add	r2, r1
 8002a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3361      	adds	r3, #97	; 0x61
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fd56 	bl	8005586 <USB_HC_Halt>
 8002ada:	e034      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d129      	bne.n	8002b46 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3361      	adds	r3, #97	; 0x61
 8002b20:	2206      	movs	r2, #6
 8002b22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 fd29 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d122      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	0151      	lsls	r1, r2, #5
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	440a      	add	r2, r1
 8002b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fcfc 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ba2:	e2ba      	b.n	800311a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f040 811b 	bne.w	8002df2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d019      	beq.n	8002bf8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3348      	adds	r3, #72	; 0x48
 8002bd2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	202c      	movs	r0, #44	; 0x2c
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3361      	adds	r3, #97	; 0x61
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	333f      	adds	r3, #63	; 0x3f
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	333f      	adds	r3, #63	; 0x3f
 8002c50:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d121      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fc80 	bl	8005586 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	2310      	movs	r3, #16
 8002c96:	6093      	str	r3, [r2, #8]
 8002c98:	e066      	b.n	8002d68 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	333f      	adds	r3, #63	; 0x3f
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d127      	bne.n	8002cfe <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3360      	adds	r3, #96	; 0x60
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	202c      	movs	r0, #44	; 0x2c
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3360      	adds	r3, #96	; 0x60
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f004 fe02 	bl	8007900 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cfc:	e034      	b.n	8002d68 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	333f      	adds	r3, #63	; 0x3f
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d12a      	bne.n	8002d68 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3360      	adds	r3, #96	; 0x60
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3354      	adds	r3, #84	; 0x54
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f083 0301 	eor.w	r3, r3, #1
 8002d38:	b2d8      	uxtb	r0, r3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3354      	adds	r3, #84	; 0x54
 8002d48:	4602      	mov	r2, r0
 8002d4a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	202c      	movs	r0, #44	; 0x2c
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f004 fdcc 	bl	8007900 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d12b      	bne.n	8002dc8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3348      	adds	r3, #72	; 0x48
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	202c      	movs	r0, #44	; 0x2c
 8002d86:	fb00 f202 	mul.w	r2, r0, r2
 8002d8a:	440a      	add	r2, r1
 8002d8c:	3240      	adds	r2, #64	; 0x40
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 81be 	beq.w	800311a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3354      	adds	r3, #84	; 0x54
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3354      	adds	r3, #84	; 0x54
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
}
 8002dc6:	e1a8      	b.n	800311a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3354      	adds	r3, #84	; 0x54
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3354      	adds	r3, #84	; 0x54
 8002dec:	4602      	mov	r2, r0
 8002dee:	701a      	strb	r2, [r3, #0]
}
 8002df0:	e193      	b.n	800311a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f040 8106 	bne.w	8003016 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	0151      	lsls	r1, r2, #5
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	440a      	add	r2, r1
 8002e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e24:	f023 0302 	bic.w	r3, r3, #2
 8002e28:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3361      	adds	r3, #97	; 0x61
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d109      	bne.n	8002e52 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3360      	adds	r3, #96	; 0x60
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e0c9      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3361      	adds	r3, #97	; 0x61
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d109      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	2205      	movs	r2, #5
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e0b5      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3361      	adds	r3, #97	; 0x61
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d009      	beq.n	8002ea2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d150      	bne.n	8002f44 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	335c      	adds	r3, #92	; 0x5c
 8002ec2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	335c      	adds	r3, #92	; 0x5c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d912      	bls.n	8002efe <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	335c      	adds	r3, #92	; 0x5c
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	2204      	movs	r2, #4
 8002efa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002efc:	e073      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3360      	adds	r3, #96	; 0x60
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f26:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f2e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f42:	e050      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3361      	adds	r3, #97	; 0x61
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d122      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3360      	adds	r3, #96	; 0x60
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f80:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f88:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e023      	b.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3361      	adds	r3, #97	; 0x61
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d119      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	335c      	adds	r3, #92	; 0x5c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	202c      	movs	r0, #44	; 0x2c
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	440b      	add	r3, r1
 8002fd0:	335c      	adds	r3, #92	; 0x5c
 8002fd2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3360      	adds	r3, #96	; 0x60
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b2d9      	uxtb	r1, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	202c      	movs	r0, #44	; 0x2c
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f004 fc76 	bl	8007900 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003014:	e081      	b.n	800311a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b10      	cmp	r3, #16
 800302a:	d176      	bne.n	800311a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	333f      	adds	r3, #63	; 0x3f
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d121      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	335c      	adds	r3, #92	; 0x5c
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	0151      	lsls	r1, r2, #5
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	440a      	add	r2, r1
 8003068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fa82 	bl	8005586 <USB_HC_Halt>
 8003082:	e041      	b.n	8003108 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	333f      	adds	r3, #63	; 0x3f
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	333f      	adds	r3, #63	; 0x3f
 80030a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d12d      	bne.n	8003108 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	335c      	adds	r3, #92	; 0x5c
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d120      	bne.n	8003108 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	2203      	movs	r2, #3
 80030d6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fa3f 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2310      	movs	r3, #16
 8003118:	6093      	str	r3, [r2, #8]
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d119      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	2304      	movs	r3, #4
 8003162:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	440a      	add	r2, r1
 800317a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003184:	e3ca      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d13e      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2320      	movs	r3, #32
 80031ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333d      	adds	r3, #61	; 0x3d
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 83ac 	bne.w	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	333d      	adds	r3, #61	; 0x3d
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3360      	adds	r3, #96	; 0x60
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 f9b7 	bl	8005586 <USB_HC_Halt>
}
 8003218:	e380      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003230:	d122      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f002 f992 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	6093      	str	r3, [r2, #8]
}
 8003276:	e351      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d150      	bne.n	8003330 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d111      	bne.n	80032da <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333d      	adds	r3, #61	; 0x3d
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2340      	movs	r3, #64	; 0x40
 80032d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	0151      	lsls	r1, r2, #5
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	440a      	add	r2, r1
 80032f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f002 f93e 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2301      	movs	r3, #1
 800331a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3361      	adds	r3, #97	; 0x61
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
}
 800332e:	e2f5      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d13c      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3361      	adds	r3, #97	; 0x61
 8003354:	2204      	movs	r2, #4
 8003356:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	333d      	adds	r3, #61	; 0x3d
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	335c      	adds	r3, #92	; 0x5c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	440a      	add	r2, r1
 8003392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 f8ed 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2340      	movs	r3, #64	; 0x40
 80033bc:	6093      	str	r3, [r2, #8]
}
 80033be:	e2ad      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d12a      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	2308      	movs	r3, #8
 80033e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	0151      	lsls	r1, r2, #5
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	440a      	add	r2, r1
 80033fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f002 f8b7 	bl	8005586 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3361      	adds	r3, #97	; 0x61
 8003426:	2205      	movs	r2, #5
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	e277      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d150      	bne.n	80034e4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	335c      	adds	r3, #92	; 0x5c
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3361      	adds	r3, #97	; 0x61
 8003462:	2203      	movs	r2, #3
 8003464:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	333d      	adds	r3, #61	; 0x3d
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d112      	bne.n	80034a0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	333c      	adds	r3, #60	; 0x3c
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	333d      	adds	r3, #61	; 0x3d
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 f85b 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2310      	movs	r3, #16
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	e21b      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d174      	bne.n	80035e4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d121      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3361      	adds	r3, #97	; 0x61
 8003510:	2206      	movs	r2, #6
 8003512:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	440a      	add	r2, r1
 800352a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f002 f821 	bl	8005586 <USB_HC_Halt>
 8003544:	e044      	b.n	80035d0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	335c      	adds	r3, #92	; 0x5c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	202c      	movs	r0, #44	; 0x2c
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	440b      	add	r3, r1
 8003564:	335c      	adds	r3, #92	; 0x5c
 8003566:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	335c      	adds	r3, #92	; 0x5c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d920      	bls.n	80035be <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	335c      	adds	r3, #92	; 0x5c
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3360      	adds	r3, #96	; 0x60
 800359c:	2204      	movs	r2, #4
 800359e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	b2d9      	uxtb	r1, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	202c      	movs	r0, #44	; 0x2c
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3360      	adds	r3, #96	; 0x60
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f004 f9a2 	bl	8007900 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035bc:	e008      	b.n	80035d0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	3360      	adds	r3, #96	; 0x60
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	6093      	str	r3, [r2, #8]
}
 80035e2:	e19b      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d134      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	440a      	add	r2, r1
 8003612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f001 ffad 	bl	8005586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	461a      	mov	r2, r3
 800363a:	2310      	movs	r3, #16
 800363c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003650:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3361      	adds	r3, #97	; 0x61
 8003660:	2208      	movs	r2, #8
 8003662:	701a      	strb	r2, [r3, #0]
}
 8003664:	e15a      	b.n	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 814f 	bne.w	800391c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	440a      	add	r2, r1
 8003694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3361      	adds	r3, #97	; 0x61
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d17d      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3360      	adds	r3, #96	; 0x60
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	333f      	adds	r3, #63	; 0x3f
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d00a      	beq.n	80036ee <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333f      	adds	r3, #63	; 0x3f
 80036e6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	f040 8100 	bne.w	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3355      	adds	r3, #85	; 0x55
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f083 0301 	eor.w	r3, r3, #1
 800370a:	b2d8      	uxtb	r0, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3355      	adds	r3, #85	; 0x55
 800371a:	4602      	mov	r2, r0
 800371c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	f040 80e3 	bne.w	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	334c      	adds	r3, #76	; 0x4c
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80d8 	beq.w	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	334c      	adds	r3, #76	; 0x4c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	202c      	movs	r0, #44	; 0x2c
 8003754:	fb00 f202 	mul.w	r2, r0, r2
 8003758:	440a      	add	r2, r1
 800375a:	3240      	adds	r2, #64	; 0x40
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	4413      	add	r3, r2
 8003760:	3b01      	subs	r3, #1
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	202c      	movs	r0, #44	; 0x2c
 8003768:	fb00 f202 	mul.w	r2, r0, r2
 800376c:	440a      	add	r2, r1
 800376e:	3240      	adds	r2, #64	; 0x40
 8003770:	8812      	ldrh	r2, [r2, #0]
 8003772:	fbb3 f3f2 	udiv	r3, r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80b5 	beq.w	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3355      	adds	r3, #85	; 0x55
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3355      	adds	r3, #85	; 0x55
 80037a8:	4602      	mov	r2, r0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e09f      	b.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3361      	adds	r3, #97	; 0x61
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d109      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3360      	adds	r3, #96	; 0x60
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e08b      	b.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3361      	adds	r3, #97	; 0x61
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d109      	bne.n	80037fe <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3360      	adds	r3, #96	; 0x60
 80037f8:	2202      	movs	r2, #2
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e077      	b.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	212c      	movs	r1, #44	; 0x2c
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	3361      	adds	r3, #97	; 0x61
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b05      	cmp	r3, #5
 8003810:	d109      	bne.n	8003826 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	3360      	adds	r3, #96	; 0x60
 8003820:	2205      	movs	r2, #5
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e063      	b.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3361      	adds	r3, #97	; 0x61
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d009      	beq.n	800384e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	3361      	adds	r3, #97	; 0x61
 8003848:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800384a:	2b08      	cmp	r3, #8
 800384c:	d14f      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	335c      	adds	r3, #92	; 0x5c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	202c      	movs	r0, #44	; 0x2c
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	440b      	add	r3, r1
 800386c:	335c      	adds	r3, #92	; 0x5c
 800386e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	335c      	adds	r3, #92	; 0x5c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d912      	bls.n	80038aa <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	335c      	adds	r3, #92	; 0x5c
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3360      	adds	r3, #96	; 0x60
 80038a4:	2204      	movs	r2, #4
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e021      	b.n	80038ee <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038d2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038da:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	2302      	movs	r3, #2
 80038fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	b2d9      	uxtb	r1, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	202c      	movs	r0, #44	; 0x2c
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	4413      	add	r3, r2
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f003 fff2 	bl	8007900 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800391c:	bf00      	nop
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	0c5b      	lsrs	r3, r3, #17
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d004      	beq.n	800396a <HCD_RXQLVL_IRQHandler+0x46>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b05      	cmp	r3, #5
 8003964:	f000 80a9 	beq.w	8003aba <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003968:	e0aa      	b.n	8003ac0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a6 	beq.w	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3344      	adds	r3, #68	; 0x44
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809b 	beq.w	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3350      	adds	r3, #80	; 0x50
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	441a      	add	r2, r3
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	202c      	movs	r0, #44	; 0x2c
 80039a2:	fb00 f303 	mul.w	r3, r0, r3
 80039a6:	440b      	add	r3, r1
 80039a8:	334c      	adds	r3, #76	; 0x4c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d87a      	bhi.n	8003aa6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3344      	adds	r3, #68	; 0x44
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	b292      	uxth	r2, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	f001 f955 	bl	8004c78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3344      	adds	r3, #68	; 0x44
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	441a      	add	r2, r3
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	202c      	movs	r0, #44	; 0x2c
 80039e8:	fb00 f303 	mul.w	r3, r0, r3
 80039ec:	440b      	add	r3, r1
 80039ee:	3344      	adds	r3, #68	; 0x44
 80039f0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3350      	adds	r3, #80	; 0x50
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	441a      	add	r2, r3
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	202c      	movs	r0, #44	; 0x2c
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	440b      	add	r3, r1
 8003a12:	3350      	adds	r3, #80	; 0x50
 8003a14:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	0cdb      	lsrs	r3, r3, #19
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3340      	adds	r3, #64	; 0x40
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d13c      	bne.n	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d039      	beq.n	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a60:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a68:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3354      	adds	r3, #84	; 0x54
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f083 0301 	eor.w	r3, r3, #1
 8003a90:	b2d8      	uxtb	r0, r3
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3354      	adds	r3, #84	; 0x54
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	701a      	strb	r2, [r3, #0]
      break;
 8003aa4:	e00b      	b.n	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	701a      	strb	r2, [r3, #0]
      break;
 8003ab8:	e001      	b.n	8003abe <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003abe:	bf00      	nop
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003af4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d10b      	bne.n	8003b18 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f003 fedc 	bl	80078c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d132      	bne.n	8003b88 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d126      	bne.n	8003b82 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d113      	bne.n	8003b64 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b46:	d106      	bne.n	8003b56 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f9f2 	bl	8004f38 <USB_InitFSLSPClkSel>
 8003b54:	e011      	b.n	8003b7a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f9eb 	bl	8004f38 <USB_InitFSLSPClkSel>
 8003b62:	e00a      	b.n	8003b7a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b72:	461a      	mov	r2, r3
 8003b74:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b78:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f003 fece 	bl	800791c <HAL_HCD_PortEnabled_Callback>
 8003b80:	e002      	b.n	8003b88 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f003 fed8 	bl	8007938 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d103      	bne.n	8003b9a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6013      	str	r3, [r2, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e264      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	4ba3      	ldr	r3, [pc, #652]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4ba0      	ldr	r3, [pc, #640]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b9d      	ldr	r3, [pc, #628]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e23f      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b91      	ldr	r3, [pc, #580]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a8a      	ldr	r2, [pc, #552]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a83      	ldr	r2, [pc, #524]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fada 	bl	8001220 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fad6 	bl	8001220 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e204      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd fac6 	bl	8001220 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fac2 	bl	8001220 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1f0      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1c4      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4952      	ldr	r1, [pc, #328]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fa7b 	bl	8001220 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd fa77 	bl	8001220 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1a5      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4940      	ldr	r1, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd fa5a 	bl	8001220 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fd fa56 	bl	8001220 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e184      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd fa3a 	bl	8001220 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fd fa36 	bl	8001220 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e164      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e015      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fa23 	bl	8001220 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fd fa1f 	bl	8001220 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e14d      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a0 	beq.w	8003f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d121      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fd f9e5 	bl	8001220 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	e011      	b.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470000 	.word	0x42470000
 8003e64:	42470e80 	.word	0x42470e80
 8003e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd f9d8 	bl	8001220 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e106      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCC_OscConfig+0x4e4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2f0>
 8003e92:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a80      	ldr	r2, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x312>
 8003ea8:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a7a      	ldr	r2, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	4b78      	ldr	r3, [pc, #480]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a77      	ldr	r2, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ec2:	4b75      	ldr	r3, [pc, #468]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a74      	ldr	r2, [pc, #464]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b72      	ldr	r3, [pc, #456]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a71      	ldr	r2, [pc, #452]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fd f99d 	bl	8001220 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd f999 	bl	8001220 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0c5      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b65      	ldr	r3, [pc, #404]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x33a>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd f987 	bl	8001220 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd f983 	bl	8001220 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0af      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b5a      	ldr	r3, [pc, #360]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b56      	ldr	r3, [pc, #344]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a55      	ldr	r2, [pc, #340]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 809b 	beq.w	800408a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d05c      	beq.n	800401a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d141      	bne.n	8003fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x4ec>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fd f957 	bl	8001220 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fd f953 	bl	8001220 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e081      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	4937      	ldr	r1, [pc, #220]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbe:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x4ec>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd f92c 	bl	8001220 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd f928 	bl	8001220 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e056      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x41c>
 8003fea:	e04e      	b.n	800408a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x4ec>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fd f915 	bl	8001220 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fd f911 	bl	8001220 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03f      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	4b22      	ldr	r3, [pc, #136]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x44a>
 8004018:	e037      	b.n	800408a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e032      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d028      	beq.n	8004086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d121      	bne.n	8004086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d11a      	bne.n	8004086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800405e:	4293      	cmp	r3, r2
 8004060:	d111      	bne.n	8004086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	3b01      	subs	r3, #1
 8004070:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40007000 	.word	0x40007000
 8004098:	40023800 	.word	0x40023800
 800409c:	42470060 	.word	0x42470060

080040a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0cc      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b68      	ldr	r3, [pc, #416]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d90c      	bls.n	80040dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a52      	ldr	r2, [pc, #328]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d119      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b3f      	ldr	r3, [pc, #252]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e067      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4934      	ldr	r1, [pc, #208]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd f846 	bl	8001220 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd f842 	bl	8001220 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e04f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20c      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b22      	ldr	r3, [pc, #136]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc ffa6 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	08007f6c 	.word	0x08007f6c
 8004264:	20000000 	.word	0x20000000
 8004268:	20000004 	.word	0x20000004

0800426c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004284:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d00d      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x40>
 8004290:	2b08      	cmp	r3, #8
 8004292:	f200 80bd 	bhi.w	8004410 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x34>
 800429a:	2b04      	cmp	r3, #4
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800429e:	e0b7      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042a2:	60bb      	str	r3, [r7, #8]
       break;
 80042a4:	e0b7      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a6:	4b61      	ldr	r3, [pc, #388]	; (800442c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042a8:	60bb      	str	r3, [r7, #8]
      break;
 80042aa:	e0b4      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ac:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b6:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d04d      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c2:	4b58      	ldr	r3, [pc, #352]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	461a      	mov	r2, r3
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	ea02 0800 	and.w	r8, r2, r0
 80042da:	ea03 0901 	and.w	r9, r3, r1
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	014b      	lsls	r3, r1, #5
 80042ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042f0:	0142      	lsls	r2, r0, #5
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	ebb0 0008 	subs.w	r0, r0, r8
 80042fa:	eb61 0109 	sbc.w	r1, r1, r9
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	018b      	lsls	r3, r1, #6
 8004308:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800430c:	0182      	lsls	r2, r0, #6
 800430e:	1a12      	subs	r2, r2, r0
 8004310:	eb63 0301 	sbc.w	r3, r3, r1
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	00d9      	lsls	r1, r3, #3
 800431e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004322:	00d0      	lsls	r0, r2, #3
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	eb12 0208 	adds.w	r2, r2, r8
 800432c:	eb43 0309 	adc.w	r3, r3, r9
 8004330:	f04f 0000 	mov.w	r0, #0
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	0259      	lsls	r1, r3, #9
 800433a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800433e:	0250      	lsls	r0, r2, #9
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	f7fb ff3a 	bl	80001c8 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e04a      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	ea02 0400 	and.w	r4, r2, r0
 8004376:	ea03 0501 	and.w	r5, r3, r1
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	014b      	lsls	r3, r1, #5
 8004388:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800438c:	0142      	lsls	r2, r0, #5
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	1b00      	subs	r0, r0, r4
 8004394:	eb61 0105 	sbc.w	r1, r1, r5
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	018b      	lsls	r3, r1, #6
 80043a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043a6:	0182      	lsls	r2, r0, #6
 80043a8:	1a12      	subs	r2, r2, r0
 80043aa:	eb63 0301 	sbc.w	r3, r3, r1
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	00d9      	lsls	r1, r3, #3
 80043b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043bc:	00d0      	lsls	r0, r2, #3
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	1912      	adds	r2, r2, r4
 80043c4:	eb45 0303 	adc.w	r3, r5, r3
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	0299      	lsls	r1, r3, #10
 80043d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043d6:	0290      	lsls	r0, r2, #10
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	f7fb feee 	bl	80001c8 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4613      	mov	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	60bb      	str	r3, [r7, #8]
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004412:	60bb      	str	r3, [r7, #8]
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	68bb      	ldr	r3, [r7, #8]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a9b      	lsrs	r3, r3, #10
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	08007f7c 	.word	0x08007f7c

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004474:	f7ff ffdc 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0b5b      	lsrs	r3, r3, #13
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08007f7c 	.word	0x08007f7c

08004498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07b      	b.n	80045a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ba:	d009      	beq.n	80044d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	61da      	str	r2, [r3, #28]
 80044c2:	e005      	b.n	80044d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fc6e 	bl	8000dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	ea42 0103 	orr.w	r1, r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0104 	and.w	r1, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0210 	and.w	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e03f      	b.n	800463c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fc fc79 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2224      	movs	r2, #36	; 0x24
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f828 	bl	8004644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004602:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004612:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004622:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	b09f      	sub	sp, #124	; 0x7c
 800464a:	af00      	add	r7, sp, #0
 800464c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	ea40 0301 	orr.w	r3, r0, r1
 8004664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	431a      	orrs	r2, r3
 8004670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	431a      	orrs	r2, r3
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4313      	orrs	r3, r2
 800467c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800467e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004688:	f021 010c 	bic.w	r1, r1, #12
 800468c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004692:	430b      	orrs	r3, r1
 8004694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	6999      	ldr	r1, [r3, #24]
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	ea40 0301 	orr.w	r3, r0, r1
 80046ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4bc5      	ldr	r3, [pc, #788]	; (80049c8 <UART_SetConfig+0x384>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d004      	beq.n	80046c2 <UART_SetConfig+0x7e>
 80046b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4bc3      	ldr	r3, [pc, #780]	; (80049cc <UART_SetConfig+0x388>)
 80046be:	429a      	cmp	r2, r3
 80046c0:	d103      	bne.n	80046ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c2:	f7ff fed5 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 80046c6:	6778      	str	r0, [r7, #116]	; 0x74
 80046c8:	e002      	b.n	80046d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ca:	f7ff febd 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 80046ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d8:	f040 80b6 	bne.w	8004848 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046de:	461c      	mov	r4, r3
 80046e0:	f04f 0500 	mov.w	r5, #0
 80046e4:	4622      	mov	r2, r4
 80046e6:	462b      	mov	r3, r5
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	6439      	str	r1, [r7, #64]	; 0x40
 80046ec:	415b      	adcs	r3, r3
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
 80046f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046f4:	1912      	adds	r2, r2, r4
 80046f6:	eb45 0303 	adc.w	r3, r5, r3
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	00d9      	lsls	r1, r3, #3
 8004704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004708:	00d0      	lsls	r0, r2, #3
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	1911      	adds	r1, r2, r4
 8004710:	6639      	str	r1, [r7, #96]	; 0x60
 8004712:	416b      	adcs	r3, r5
 8004714:	667b      	str	r3, [r7, #100]	; 0x64
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	1891      	adds	r1, r2, r2
 8004722:	63b9      	str	r1, [r7, #56]	; 0x38
 8004724:	415b      	adcs	r3, r3
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800472c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004730:	f7fb fd4a 	bl	80001c8 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4ba5      	ldr	r3, [pc, #660]	; (80049d0 <UART_SetConfig+0x38c>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011e      	lsls	r6, r3, #4
 8004742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004744:	461c      	mov	r4, r3
 8004746:	f04f 0500 	mov.w	r5, #0
 800474a:	4622      	mov	r2, r4
 800474c:	462b      	mov	r3, r5
 800474e:	1891      	adds	r1, r2, r2
 8004750:	6339      	str	r1, [r7, #48]	; 0x30
 8004752:	415b      	adcs	r3, r3
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
 8004756:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800475a:	1912      	adds	r2, r2, r4
 800475c:	eb45 0303 	adc.w	r3, r5, r3
 8004760:	f04f 0000 	mov.w	r0, #0
 8004764:	f04f 0100 	mov.w	r1, #0
 8004768:	00d9      	lsls	r1, r3, #3
 800476a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476e:	00d0      	lsls	r0, r2, #3
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	1911      	adds	r1, r2, r4
 8004776:	65b9      	str	r1, [r7, #88]	; 0x58
 8004778:	416b      	adcs	r3, r5
 800477a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800477c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	1891      	adds	r1, r2, r2
 8004788:	62b9      	str	r1, [r7, #40]	; 0x28
 800478a:	415b      	adcs	r3, r3
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004792:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004796:	f7fb fd17 	bl	80001c8 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4b8c      	ldr	r3, [pc, #560]	; (80049d0 <UART_SetConfig+0x38c>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	; 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a87      	ldr	r2, [pc, #540]	; (80049d0 <UART_SetConfig+0x38c>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047c0:	441e      	add	r6, r3
 80047c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c4:	4618      	mov	r0, r3
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	1894      	adds	r4, r2, r2
 80047d0:	623c      	str	r4, [r7, #32]
 80047d2:	415b      	adcs	r3, r3
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
 80047d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047da:	1812      	adds	r2, r2, r0
 80047dc:	eb41 0303 	adc.w	r3, r1, r3
 80047e0:	f04f 0400 	mov.w	r4, #0
 80047e4:	f04f 0500 	mov.w	r5, #0
 80047e8:	00dd      	lsls	r5, r3, #3
 80047ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047ee:	00d4      	lsls	r4, r2, #3
 80047f0:	4622      	mov	r2, r4
 80047f2:	462b      	mov	r3, r5
 80047f4:	1814      	adds	r4, r2, r0
 80047f6:	653c      	str	r4, [r7, #80]	; 0x50
 80047f8:	414b      	adcs	r3, r1
 80047fa:	657b      	str	r3, [r7, #84]	; 0x54
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	461a      	mov	r2, r3
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	1891      	adds	r1, r2, r2
 8004808:	61b9      	str	r1, [r7, #24]
 800480a:	415b      	adcs	r3, r3
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004812:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004816:	f7fb fcd7 	bl	80001c8 <__aeabi_uldivmod>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <UART_SetConfig+0x38c>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	2164      	movs	r1, #100	; 0x64
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3332      	adds	r3, #50	; 0x32
 8004832:	4a67      	ldr	r2, [pc, #412]	; (80049d0 <UART_SetConfig+0x38c>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	f003 0207 	and.w	r2, r3, #7
 800483e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4432      	add	r2, r6
 8004844:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004846:	e0b9      	b.n	80049bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484a:	461c      	mov	r4, r3
 800484c:	f04f 0500 	mov.w	r5, #0
 8004850:	4622      	mov	r2, r4
 8004852:	462b      	mov	r3, r5
 8004854:	1891      	adds	r1, r2, r2
 8004856:	6139      	str	r1, [r7, #16]
 8004858:	415b      	adcs	r3, r3
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004860:	1912      	adds	r2, r2, r4
 8004862:	eb45 0303 	adc.w	r3, r5, r3
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	00d9      	lsls	r1, r3, #3
 8004870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004874:	00d0      	lsls	r0, r2, #3
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	eb12 0804 	adds.w	r8, r2, r4
 800487e:	eb43 0905 	adc.w	r9, r3, r5
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	008b      	lsls	r3, r1, #2
 8004896:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800489a:	0082      	lsls	r2, r0, #2
 800489c:	4640      	mov	r0, r8
 800489e:	4649      	mov	r1, r9
 80048a0:	f7fb fc92 	bl	80001c8 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <UART_SetConfig+0x38c>)
 80048aa:	fba3 2302 	umull	r2, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	011e      	lsls	r6, r3, #4
 80048b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b4:	4618      	mov	r0, r3
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	1894      	adds	r4, r2, r2
 80048c0:	60bc      	str	r4, [r7, #8]
 80048c2:	415b      	adcs	r3, r3
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ca:	1812      	adds	r2, r2, r0
 80048cc:	eb41 0303 	adc.w	r3, r1, r3
 80048d0:	f04f 0400 	mov.w	r4, #0
 80048d4:	f04f 0500 	mov.w	r5, #0
 80048d8:	00dd      	lsls	r5, r3, #3
 80048da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048de:	00d4      	lsls	r4, r2, #3
 80048e0:	4622      	mov	r2, r4
 80048e2:	462b      	mov	r3, r5
 80048e4:	1814      	adds	r4, r2, r0
 80048e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80048e8:	414b      	adcs	r3, r1
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	008b      	lsls	r3, r1, #2
 8004900:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004904:	0082      	lsls	r2, r0, #2
 8004906:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800490a:	f7fb fc5d 	bl	80001c8 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <UART_SetConfig+0x38c>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <UART_SetConfig+0x38c>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004932:	441e      	add	r6, r3
 8004934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004936:	4618      	mov	r0, r3
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	1894      	adds	r4, r2, r2
 8004942:	603c      	str	r4, [r7, #0]
 8004944:	415b      	adcs	r3, r3
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800494c:	1812      	adds	r2, r2, r0
 800494e:	eb41 0303 	adc.w	r3, r1, r3
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	f04f 0500 	mov.w	r5, #0
 800495a:	00dd      	lsls	r5, r3, #3
 800495c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004960:	00d4      	lsls	r4, r2, #3
 8004962:	4622      	mov	r2, r4
 8004964:	462b      	mov	r3, r5
 8004966:	eb12 0a00 	adds.w	sl, r2, r0
 800496a:	eb43 0b01 	adc.w	fp, r3, r1
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f04f 0100 	mov.w	r1, #0
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	008b      	lsls	r3, r1, #2
 8004982:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004986:	0082      	lsls	r2, r0, #2
 8004988:	4650      	mov	r0, sl
 800498a:	4659      	mov	r1, fp
 800498c:	f7fb fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <UART_SetConfig+0x38c>)
 8004996:	fba3 1302 	umull	r1, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2164      	movs	r1, #100	; 0x64
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	; 0x32
 80049a8:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <UART_SetConfig+0x38c>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4432      	add	r2, r6
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	377c      	adds	r7, #124	; 0x7c
 80049c0:	46bd      	mov	sp, r7
 80049c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c6:	bf00      	nop
 80049c8:	40011000 	.word	0x40011000
 80049cc:	40011400 	.word	0x40011400
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049d4:	b084      	sub	sp, #16
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	f107 001c 	add.w	r0, r7, #28
 80049e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d122      	bne.n	8004a32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d105      	bne.n	8004a26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9a0 	bl	8004d6c <USB_CoreReset>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e01a      	b.n	8004a68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f994 	bl	8004d6c <USB_CoreReset>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
 8004a5a:	e005      	b.n	8004a68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d10b      	bne.n	8004a86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f043 0206 	orr.w	r2, r3, #6
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a92:	b004      	add	sp, #16
 8004a94:	4770      	bx	lr

08004a96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 0201 	bic.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d115      	bne.n	8004b28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7fc fb95 	bl	8001238 <HAL_Delay>
      ms++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f91a 	bl	8004d4e <USB_GetMode>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d01e      	beq.n	8004b5e <USB_SetCurrentMode+0x84>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b31      	cmp	r3, #49	; 0x31
 8004b24:	d9f0      	bls.n	8004b08 <USB_SetCurrentMode+0x2e>
 8004b26:	e01a      	b.n	8004b5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d115      	bne.n	8004b5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7fc fb7c 	bl	8001238 <HAL_Delay>
      ms++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f901 	bl	8004d4e <USB_GetMode>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <USB_SetCurrentMode+0x84>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b31      	cmp	r3, #49	; 0x31
 8004b56:	d9f0      	bls.n	8004b3a <USB_SetCurrentMode+0x60>
 8004b58:	e001      	b.n	8004b5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e005      	b.n	8004b6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b32      	cmp	r3, #50	; 0x32
 8004b62:	d101      	bne.n	8004b68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <USB_FlushTxFifo+0x44>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e006      	b.n	8004bac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d0f1      	beq.n	8004b8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	00030d40 	.word	0x00030d40

08004bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2210      	movs	r2, #16
 8004bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <USB_FlushRxFifo+0x3c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e006      	b.n	8004bec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d0f1      	beq.n	8004bce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	00030d40 	.word	0x00030d40

08004bfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	71fb      	strb	r3, [r7, #7]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d123      	bne.n	8004c6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c22:	88bb      	ldrh	r3, [r7, #4]
 8004c24:	3303      	adds	r3, #3
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e018      	b.n	8004c62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	031a      	lsls	r2, r3, #12
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3e2      	bcc.n	8004c30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3724      	adds	r7, #36	; 0x24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b08b      	sub	sp, #44	; 0x2c
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	e014      	b.n	8004cce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3e6      	bcc.n	8004ca4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cd6:	8bfb      	ldrh	r3, [r7, #30]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	701a      	strb	r2, [r3, #0]
      i++;
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	3301      	adds	r3, #1
 8004d06:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d0e:	8bfb      	ldrh	r3, [r7, #30]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ea      	bne.n	8004cf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	372c      	adds	r7, #44	; 0x2c
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d40:	68fb      	ldr	r3, [r7, #12]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <USB_CoreReset+0x60>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e01a      	b.n	8004dbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	daf3      	bge.n	8004d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f043 0201 	orr.w	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <USB_CoreReset+0x60>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e006      	b.n	8004dbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d0f1      	beq.n	8004da0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	00030d40 	.word	0x00030d40

08004dd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	f107 001c 	add.w	r0, r7, #28
 8004dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dec:	461a      	mov	r2, r3
 8004dee:	2300      	movs	r3, #0
 8004df0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d018      	beq.n	8004e54 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10a      	bne.n	8004e3e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e36:	f043 0304 	orr.w	r3, r3, #4
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	e014      	b.n	8004e68 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e009      	b.n	8004e68 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e62:	f023 0304 	bic.w	r3, r3, #4
 8004e66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004e68:	2110      	movs	r1, #16
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe82 	bl	8004b74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fea3 	bl	8004bbc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e015      	b.n	8004ea8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d3e5      	bcc.n	8004e7c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ebc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <USB_HostInit+0x154>)
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <USB_HostInit+0x158>)
 8004edc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ee0:	e009      	b.n	8004ef6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2280      	movs	r2, #128	; 0x80
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <USB_HostInit+0x15c>)
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <USB_HostInit+0x160>)
 8004ef2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <USB_HostInit+0x164>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f20:	b004      	add	sp, #16
 8004f22:	4770      	bx	lr
 8004f24:	01000200 	.word	0x01000200
 8004f28:	00e00300 	.word	0x00e00300
 8004f2c:	00600080 	.word	0x00600080
 8004f30:	004000e0 	.word	0x004000e0
 8004f34:	a3200008 	.word	0xa3200008

08004f38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f80:	461a      	mov	r2, r3
 8004f82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	e009      	b.n	8004f9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d106      	bne.n	8004f9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f96:	461a      	mov	r2, r3
 8004f98:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004fdc:	2064      	movs	r0, #100	; 0x64
 8004fde:	f7fc f92b 	bl	8001238 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ff0:	200a      	movs	r0, #10
 8004ff2:	f7fc f921 	bl	8001238 <HAL_Delay>

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005024:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <USB_DriveVbus+0x44>
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d106      	bne.n	8005044 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800503e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005042:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d109      	bne.n	8005064 <USB_DriveVbus+0x64>
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800505e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005062:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	0c5b      	lsrs	r3, r3, #17
 8005090:	f003 0303 	and.w	r3, r3, #3
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	b29b      	uxth	r3, r3
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	461a      	mov	r2, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	70fb      	strb	r3, [r7, #3]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70bb      	strb	r3, [r7, #2]
 80050da:	4613      	mov	r3, r2
 80050dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	461a      	mov	r2, r3
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80050fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d87e      	bhi.n	8005200 <USB_HC_Init+0x13c>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <USB_HC_Init+0x44>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005119 	.word	0x08005119
 800510c:	080051c3 	.word	0x080051c3
 8005110:	08005119 	.word	0x08005119
 8005114:	08005185 	.word	0x08005185
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	461a      	mov	r2, r3
 8005126:	f240 439d 	movw	r3, #1181	; 0x49d
 800512a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800512c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da10      	bge.n	8005156 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	440a      	add	r2, r1
 800514a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005152:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005154:	e057      	b.n	8005206 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d051      	beq.n	8005206 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	440a      	add	r2, r1
 8005178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005180:	60d3      	str	r3, [r2, #12]
      break;
 8005182:	e040      	b.n	8005206 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	461a      	mov	r2, r3
 8005192:	f240 639d 	movw	r3, #1693	; 0x69d
 8005196:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005198:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800519c:	2b00      	cmp	r3, #0
 800519e:	da34      	bge.n	800520a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80051c0:	e023      	b.n	800520a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	461a      	mov	r2, r3
 80051d0:	f240 2325 	movw	r3, #549	; 0x225
 80051d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da17      	bge.n	800520e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80051fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051fe:	e006      	b.n	800520e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	77fb      	strb	r3, [r7, #31]
      break;
 8005204:	e004      	b.n	8005210 <USB_HC_Init+0x14c>
      break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <USB_HC_Init+0x14c>
      break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <USB_HC_Init+0x14c>
      break;
 800520e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	6939      	ldr	r1, [r7, #16]
 8005226:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800522a:	4313      	orrs	r3, r2
 800522c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800523a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800523e:	2b00      	cmp	r3, #0
 8005240:	da03      	bge.n	800524a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e001      	b.n	800524e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff0f 	bl	8005072 <USB_GetHostSpeed>
 8005254:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800525a:	2b02      	cmp	r3, #2
 800525c:	d106      	bne.n	800526c <USB_HC_Init+0x1a8>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d003      	beq.n	800526c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e001      	b.n	8005270 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005270:	787b      	ldrb	r3, [r7, #1]
 8005272:	059b      	lsls	r3, r3, #22
 8005274:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005278:	78bb      	ldrb	r3, [r7, #2]
 800527a:	02db      	lsls	r3, r3, #11
 800527c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005280:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005282:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005286:	049b      	lsls	r3, r3, #18
 8005288:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800528c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800528e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005290:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005294:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	0159      	lsls	r1, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052ac:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80052ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d10f      	bne.n	80052d6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	; 0x30
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80052f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02d      	beq.n	8005366 <USB_HC_StartXfer+0x86>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	791b      	ldrb	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d129      	bne.n	8005366 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d117      	bne.n	8005348 <USB_HC_StartXfer+0x68>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	79db      	ldrb	r3, [r3, #7]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <USB_HC_StartXfer+0x48>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	79db      	ldrb	r3, [r3, #7]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d10f      	bne.n	8005348 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	440a      	add	r2, r1
 800533e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <USB_HC_StartXfer+0x86>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	795b      	ldrb	r3, [r3, #5]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	4619      	mov	r1, r3
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fa2f 	bl	80057c0 <USB_DoPing>
      return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e0f8      	b.n	8005558 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	8912      	ldrh	r2, [r2, #8]
 8005376:	4413      	add	r3, r2
 8005378:	3b01      	subs	r3, #1
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	8912      	ldrh	r2, [r2, #8]
 800537e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005382:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005386:	8b7b      	ldrh	r3, [r7, #26]
 8005388:	429a      	cmp	r2, r3
 800538a:	d90b      	bls.n	80053a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	8912      	ldrh	r2, [r2, #8]
 8005396:	fb02 f203 	mul.w	r2, r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e001      	b.n	80053a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	8912      	ldrh	r2, [r2, #8]
 80053b2:	fb02 f203 	mul.w	r2, r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e003      	b.n	80053c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ce:	04d9      	lsls	r1, r3, #19
 80053d0:	4b63      	ldr	r3, [pc, #396]	; (8005560 <USB_HC_StartXfer+0x280>)
 80053d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	7a9b      	ldrb	r3, [r3, #10]
 80053da:	075b      	lsls	r3, r3, #29
 80053dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	0148      	lsls	r0, r1, #5
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	4401      	add	r1, r0
 80053e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68d9      	ldr	r1, [r3, #12]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	460a      	mov	r2, r1
 8005408:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	6a3a      	ldr	r2, [r7, #32]
 8005436:	440a      	add	r2, r1
 8005438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005440:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	7e7b      	ldrb	r3, [r7, #25]
 8005452:	075b      	lsls	r3, r3, #29
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	0148      	lsls	r0, r1, #5
 8005458:	6a39      	ldr	r1, [r7, #32]
 800545a:	4401      	add	r1, r0
 800545c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800547a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e003      	b.n	8005496 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005494:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	461a      	mov	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e04e      	b.n	8005558 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d149      	bne.n	8005556 <USB_HC_StartXfer+0x276>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d045      	beq.n	8005556 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	79db      	ldrb	r3, [r3, #7]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d830      	bhi.n	8005534 <USB_HC_StartXfer+0x254>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <USB_HC_StartXfer+0x1f8>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	0800550d 	.word	0x0800550d
 80054e0:	080054e9 	.word	0x080054e9
 80054e4:	0800550d 	.word	0x0800550d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	3303      	adds	r3, #3
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054f2:	8afa      	ldrh	r2, [r7, #22]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d91c      	bls.n	8005538 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	619a      	str	r2, [r3, #24]
        }
        break;
 800550a:	e015      	b.n	8005538 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	3303      	adds	r3, #3
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005516:	8afa      	ldrh	r2, [r7, #22]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	b29b      	uxth	r3, r3
 8005522:	429a      	cmp	r2, r3
 8005524:	d90a      	bls.n	800553c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	619a      	str	r2, [r3, #24]
        }
        break;
 8005532:	e003      	b.n	800553c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <USB_HC_StartXfer+0x25e>
        break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <USB_HC_StartXfer+0x25e>
        break;
 800553c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68d9      	ldr	r1, [r3, #12]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785a      	ldrb	r2, [r3, #1]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	b29b      	uxth	r3, r3
 800554c:	2000      	movs	r0, #0
 800554e:	9000      	str	r0, [sp, #0]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff fb53 	bl	8004bfc <USB_WritePacket>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	1ff80000 	.word	0x1ff80000

08005564 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	b29b      	uxth	r3, r3
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005586:	b480      	push	{r7}
 8005588:	b089      	sub	sp, #36	; 0x24
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	0c9b      	lsrs	r3, r3, #18
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	0fdb      	lsrs	r3, r3, #31
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d104      	bne.n	80055e0 <USB_HC_Halt+0x5a>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	e0e8      	b.n	80057b2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <USB_HC_Halt+0x66>
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d173      	bne.n	80056d4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	440a      	add	r2, r1
 8005602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	f040 80cb 	bne.w	80057b0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d143      	bne.n	80056ae <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	440a      	add	r2, r1
 800563c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005644:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	440a      	add	r2, r1
 800565c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005664:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005684:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3301      	adds	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005692:	d81d      	bhi.n	80056d0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056aa:	d0ec      	beq.n	8005686 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056ac:	e080      	b.n	80057b0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056ce:	e06f      	b.n	80057b0 <USB_HC_Halt+0x22a>
            break;
 80056d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056d2:	e06d      	b.n	80057b0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d143      	bne.n	800578c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	440a      	add	r2, r1
 800571a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005722:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	440a      	add	r2, r1
 800573a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005742:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	440a      	add	r2, r1
 800575a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005762:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005770:	d81d      	bhi.n	80057ae <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005788:	d0ec      	beq.n	8005764 <USB_HC_Halt+0x1de>
 800578a:	e011      	b.n	80057b0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e000      	b.n	80057b0 <USB_HC_Halt+0x22a>
          break;
 80057ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3724      	adds	r7, #36	; 0x24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80057d4:	2301      	movs	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	04da      	lsls	r2, r3, #19
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <USB_DoPing+0x74>)
 80057de:	4013      	ands	r3, r2
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005808:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005810:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	461a      	mov	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	1ff80000 	.word	0x1ff80000

08005838 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff f935 	bl	8004ab8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800584e:	2110      	movs	r1, #16
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff f98f 	bl	8004b74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff f9b0 	bl	8004bbc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	e01f      	b.n	80058a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005878:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005880:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005888:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	461a      	mov	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	3301      	adds	r3, #1
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b0f      	cmp	r3, #15
 80058a6:	d9dc      	bls.n	8005862 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e034      	b.n	8005918 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	461a      	mov	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058f4:	d80c      	bhi.n	8005910 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590c:	d0ec      	beq.n	80058e8 <USB_StopHost+0xb0>
 800590e:	e000      	b.n	8005912 <USB_StopHost+0xda>
        break;
 8005910:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3301      	adds	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d9c7      	bls.n	80058ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005924:	461a      	mov	r2, r3
 8005926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800592a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005932:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff f8ae 	bl	8004a96 <USB_EnableGlobalInt>

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005944:	b590      	push	{r4, r7, lr}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af04      	add	r7, sp, #16
 800594a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800594c:	2301      	movs	r3, #1
 800594e:	2202      	movs	r2, #2
 8005950:	2102      	movs	r1, #2
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fc66 	bl	8006224 <USBH_FindInterface>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2bff      	cmp	r3, #255	; 0xff
 8005960:	d002      	beq.n	8005968 <USBH_CDC_InterfaceInit+0x24>
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d901      	bls.n	800596c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005968:	2302      	movs	r3, #2
 800596a:	e13d      	b.n	8005be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fc3b 	bl	80061ec <USBH_SelectInterface>
 8005976:	4603      	mov	r3, r0
 8005978:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005980:	2302      	movs	r3, #2
 8005982:	e131      	b.n	8005be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800598a:	2050      	movs	r0, #80	; 0x50
 800598c:	f002 fa00 	bl	8007d90 <malloc>
 8005990:	4603      	mov	r3, r0
 8005992:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80059a4:	2302      	movs	r3, #2
 80059a6:	e11f      	b.n	8005be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80059a8:	2250      	movs	r2, #80	; 0x50
 80059aa:	2100      	movs	r1, #0
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	f002 f9ff 	bl	8007db0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	211a      	movs	r1, #26
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	4413      	add	r3, r2
 80059be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da15      	bge.n	80059f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	211a      	movs	r1, #26
 80059d0:	fb01 f303 	mul.w	r3, r1, r3
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	211a      	movs	r1, #26
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059f0:	881a      	ldrh	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fe32 	bl	8007666 <USBH_AllocPipe>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	7819      	ldrb	r1, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	7858      	ldrb	r0, [r3, #1]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	8952      	ldrh	r2, [r2, #10]
 8005a22:	9202      	str	r2, [sp, #8]
 8005a24:	2203      	movs	r2, #3
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fdea 	bl	8007608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f002 f8f9 	bl	8007c34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005a42:	2300      	movs	r3, #0
 8005a44:	2200      	movs	r2, #0
 8005a46:	210a      	movs	r1, #10
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fbeb 	bl	8006224 <USBH_FindInterface>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2bff      	cmp	r3, #255	; 0xff
 8005a56:	d002      	beq.n	8005a5e <USBH_CDC_InterfaceInit+0x11a>
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d901      	bls.n	8005a62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0c2      	b.n	8005be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	211a      	movs	r1, #26
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da16      	bge.n	8005aa8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	211a      	movs	r1, #26
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	211a      	movs	r1, #26
 8005a96:	fb01 f303 	mul.w	r3, r1, r3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	835a      	strh	r2, [r3, #26]
 8005aa6:	e015      	b.n	8005ad4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	211a      	movs	r1, #26
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	211a      	movs	r1, #26
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	211a      	movs	r1, #26
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b25b      	sxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da16      	bge.n	8005b1a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	211a      	movs	r1, #26
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	211a      	movs	r1, #26
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b12:	881a      	ldrh	r2, [r3, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	835a      	strh	r2, [r3, #26]
 8005b18:	e015      	b.n	8005b46 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	211a      	movs	r1, #26
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	211a      	movs	r1, #26
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b40:	881a      	ldrh	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	7b9b      	ldrb	r3, [r3, #14]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fd8a 	bl	8007666 <USBH_AllocPipe>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	7bdb      	ldrb	r3, [r3, #15]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fd80 	bl	8007666 <USBH_AllocPipe>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	7b59      	ldrb	r1, [r3, #13]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	7b98      	ldrb	r0, [r3, #14]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	8b12      	ldrh	r2, [r2, #24]
 8005b86:	9202      	str	r2, [sp, #8]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	9201      	str	r2, [sp, #4]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	4623      	mov	r3, r4
 8005b90:	4602      	mov	r2, r0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fd38 	bl	8007608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	7b19      	ldrb	r1, [r3, #12]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	7bd8      	ldrb	r0, [r3, #15]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	8b52      	ldrh	r2, [r2, #26]
 8005bb0:	9202      	str	r2, [sp, #8]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	9201      	str	r2, [sp, #4]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4623      	mov	r3, r4
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fd23 	bl	8007608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	7b5b      	ldrb	r3, [r3, #13]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f002 f82e 	bl	8007c34 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	7b1b      	ldrb	r3, [r3, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 f827 	bl	8007c34 <USBH_LL_SetToggle>

  return USBH_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd90      	pop	{r4, r7, pc}

08005bf0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fd18 	bl	8007646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fd43 	bl	80076a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	7b1b      	ldrb	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	7b1b      	ldrb	r3, [r3, #12]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fd05 	bl	8007646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7b1b      	ldrb	r3, [r3, #12]
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fd30 	bl	80076a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	7b5b      	ldrb	r3, [r3, #13]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	7b5b      	ldrb	r3, [r3, #13]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fcf2 	bl	8007646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	7b5b      	ldrb	r3, [r3, #13]
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 fd1d 	bl	80076a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f002 f889 	bl	8007da0 <free>
    phost->pActiveClass->pData = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c94:	2200      	movs	r2, #0
 8005c96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3340      	adds	r3, #64	; 0x40
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f8b1 	bl	8005e22 <GetLineCoding>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d877      	bhi.n	8005df4 <USBH_CDC_Process+0x114>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <USBH_CDC_Process+0x2c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d21 	.word	0x08005d21
 8005d10:	08005d27 	.word	0x08005d27
 8005d14:	08005d57 	.word	0x08005d57
 8005d18:	08005dcb 	.word	0x08005dcb
 8005d1c:	08005dd9 	.word	0x08005dd9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e06d      	b.n	8005e02 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f897 	bl	8005e60 <SetLineCoding>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d44:	e058      	b.n	8005df8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d055      	beq.n	8005df8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d54:	e050      	b.n	8005df8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	3340      	adds	r3, #64	; 0x40
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f860 	bl	8005e22 <GetLineCoding>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d126      	bne.n	8005dba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d13b      	bne.n	8005dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d133      	bne.n	8005dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d12b      	bne.n	8005dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d124      	bne.n	8005dfc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f958 	bl	8006068 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005db8:	e020      	b.n	8005dfc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d01d      	beq.n	8005dfc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005dc8:	e018      	b.n	8005dfc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f867 	bl	8005e9e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8da 	bl	8005f8a <CDC_ProcessReception>
      break;
 8005dd6:	e014      	b.n	8005e02 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 ffe3 	bl	8006da6 <USBH_ClrFeature>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005df2:	e005      	b.n	8005e00 <USBH_CDC_Process+0x120>

    default:
      break;
 8005df4:	bf00      	nop
 8005df6:	e004      	b.n	8005e02 <USBH_CDC_Process+0x122>
      break;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <USBH_CDC_Process+0x122>
      break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <USBH_CDC_Process+0x122>
      break;
 8005e00:	bf00      	nop

  }

  return status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	22a1      	movs	r2, #161	; 0xa1
 8005e30:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2221      	movs	r2, #33	; 0x21
 8005e36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2207      	movs	r2, #7
 8005e48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2207      	movs	r2, #7
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 f988 	bl	8007166 <USBH_CtlReq>
 8005e56:	4603      	mov	r3, r0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2221      	movs	r2, #33	; 0x21
 8005e6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2207      	movs	r2, #7
 8005e86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 f969 	bl	8007166 <USBH_CtlReq>
 8005e94:	4603      	mov	r3, r0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af02      	add	r7, sp, #8
 8005ea4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d002      	beq.n	8005ec4 <CDC_ProcessTransmission+0x26>
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d023      	beq.n	8005f0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005ec2:	e05e      	b.n	8005f82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	8b12      	ldrh	r2, [r2, #24]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d90b      	bls.n	8005ee8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	69d9      	ldr	r1, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8b1a      	ldrh	r2, [r3, #24]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	7b5b      	ldrb	r3, [r3, #13]
 8005edc:	2001      	movs	r0, #1
 8005ede:	9000      	str	r0, [sp, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fb4e 	bl	8007582 <USBH_BulkSendData>
 8005ee6:	e00b      	b.n	8005f00 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	7b5b      	ldrb	r3, [r3, #13]
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	9000      	str	r0, [sp, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fb41 	bl	8007582 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f08:	e03b      	b.n	8005f82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	7b5b      	ldrb	r3, [r3, #13]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fe65 	bl	8007be0 <USBH_LL_GetURBState>
 8005f16:	4603      	mov	r3, r0
 8005f18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d128      	bne.n	8005f72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	8b12      	ldrh	r2, [r2, #24]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d90e      	bls.n	8005f4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	8b12      	ldrh	r2, [r2, #24]
 8005f34:	1a9a      	subs	r2, r3, r2
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	8b12      	ldrh	r2, [r2, #24]
 8005f42:	441a      	add	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	61da      	str	r2, [r3, #28]
 8005f48:	e002      	b.n	8005f50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f60:	e00e      	b.n	8005f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f868 	bl	8006040 <USBH_CDC_TransmitCallback>
      break;
 8005f70:	e006      	b.n	8005f80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d103      	bne.n	8005f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f80:	bf00      	nop
  }
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d002      	beq.n	8005fb0 <CDC_ProcessReception+0x26>
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d00e      	beq.n	8005fcc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005fae:	e043      	b.n	8006038 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	6a19      	ldr	r1, [r3, #32]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	8b5a      	ldrh	r2, [r3, #26]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	7b1b      	ldrb	r3, [r3, #12]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fb05 	bl	80075cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005fca:	e035      	b.n	8006038 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	7b1b      	ldrb	r3, [r3, #12]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fe04 	bl	8007be0 <USBH_LL_GetURBState>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d129      	bne.n	8006036 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	7b1b      	ldrb	r3, [r3, #12]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fd67 	bl	8007abc <USBH_LL_GetLastXferSize>
 8005fee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d016      	beq.n	8006028 <CDC_ProcessReception+0x9e>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	8b5b      	ldrh	r3, [r3, #26]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4293      	cmp	r3, r2
 8006004:	d910      	bls.n	8006028 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	441a      	add	r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006026:	e006      	b.n	8006036 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f80f 	bl	8006054 <USBH_CDC_ReceiveCallback>
      break;
 8006036:	bf00      	nop
  }
}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006090:	2302      	movs	r3, #2
 8006092:	e029      	b.n	80060e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	79fa      	ldrb	r2, [r7, #7]
 8006098:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f81f 	bl	80060f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 fc37 	bl	8007954 <USBH_LL_Init>

  return USBH_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e009      	b.n	8006116 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	33e0      	adds	r3, #224	; 0xe0
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b0e      	cmp	r3, #14
 800611a:	d9f2      	bls.n	8006102 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e009      	b.n	8006136 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d3f1      	bcc.n	8006122 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2240      	movs	r2, #64	; 0x40
 8006162:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10e      	bne.n	80061d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	33de      	adds	r3, #222	; 0xde
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
 80061d2:	e004      	b.n	80061de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80061d4:	2302      	movs	r3, #2
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e001      	b.n	80061de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80061da:	2302      	movs	r3, #2
 80061dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	429a      	cmp	r2, r3
 8006206:	d204      	bcs.n	8006212 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006210:	e001      	b.n	8006216 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006212:	2302      	movs	r3, #2
 8006214:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	70fb      	strb	r3, [r7, #3]
 8006236:	460b      	mov	r3, r1
 8006238:	70bb      	strb	r3, [r7, #2]
 800623a:	4613      	mov	r3, r2
 800623c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800624c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800624e:	e025      	b.n	800629c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	221a      	movs	r2, #26
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	3308      	adds	r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	3302      	adds	r3, #2
 8006260:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	429a      	cmp	r2, r3
 800626a:	d002      	beq.n	8006272 <USBH_FindInterface+0x4e>
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	2bff      	cmp	r3, #255	; 0xff
 8006270:	d111      	bne.n	8006296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006276:	78ba      	ldrb	r2, [r7, #2]
 8006278:	429a      	cmp	r2, r3
 800627a:	d002      	beq.n	8006282 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800627c:	78bb      	ldrb	r3, [r7, #2]
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d109      	bne.n	8006296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006286:	787a      	ldrb	r2, [r7, #1]
 8006288:	429a      	cmp	r2, r3
 800628a:	d002      	beq.n	8006292 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800628c:	787b      	ldrb	r3, [r7, #1]
 800628e:	2bff      	cmp	r3, #255	; 0xff
 8006290:	d101      	bne.n	8006296 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	e006      	b.n	80062a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	3301      	adds	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d9d6      	bls.n	8006250 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80062a2:	23ff      	movs	r3, #255	; 0xff
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 fb87 	bl	80079cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80062be:	2101      	movs	r1, #1
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fca0 	bl	8007c06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af04      	add	r7, sp, #16
 80062d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80062d8:	2302      	movs	r3, #2
 80062da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d102      	bne.n	80062f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2203      	movs	r2, #3
 80062f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b0b      	cmp	r3, #11
 80062fa:	f200 81b3 	bhi.w	8006664 <USBH_Process+0x394>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USBH_Process+0x34>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006335 	.word	0x08006335
 8006308:	08006367 	.word	0x08006367
 800630c:	080063cf 	.word	0x080063cf
 8006310:	080065ff 	.word	0x080065ff
 8006314:	08006665 	.word	0x08006665
 8006318:	08006473 	.word	0x08006473
 800631c:	080065a5 	.word	0x080065a5
 8006320:	080064a9 	.word	0x080064a9
 8006324:	080064c9 	.word	0x080064c9
 8006328:	080064e9 	.word	0x080064e9
 800632c:	08006517 	.word	0x08006517
 8006330:	080065e7 	.word	0x080065e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8193 	beq.w	8006668 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006348:	20c8      	movs	r0, #200	; 0xc8
 800634a:	f001 fca3 	bl	8007c94 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fb99 	bl	8007a86 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006364:	e180      	b.n	8006668 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800637e:	e182      	b.n	8006686 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638a:	d914      	bls.n	80063b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006392:	3301      	adds	r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d903      	bls.n	80063ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	220d      	movs	r2, #13
 80063aa:	701a      	strb	r2, [r3, #0]
      break;
 80063ac:	e16b      	b.n	8006686 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
      break;
 80063b4:	e167      	b.n	8006686 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063bc:	f103 020a 	add.w	r2, r3, #10
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80063c6:	200a      	movs	r0, #10
 80063c8:	f001 fc64 	bl	8007c94 <USBH_Delay>
      break;
 80063cc:	e15b      	b.n	8006686 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063de:	2104      	movs	r1, #4
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80063e4:	2064      	movs	r0, #100	; 0x64
 80063e6:	f001 fc55 	bl	8007c94 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fb24 	bl	8007a38 <USBH_LL_GetSpeed>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461a      	mov	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2205      	movs	r2, #5
 80063fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f92f 	bl	8007666 <USBH_AllocPipe>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006410:	2180      	movs	r1, #128	; 0x80
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f927 	bl	8007666 <USBH_AllocPipe>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7919      	ldrb	r1, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006434:	b292      	uxth	r2, r2
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	2200      	movs	r2, #0
 800643a:	9201      	str	r2, [sp, #4]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4603      	mov	r3, r0
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f8e0 	bl	8007608 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7959      	ldrb	r1, [r3, #5]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800645c:	b292      	uxth	r2, r2
 800645e:	9202      	str	r2, [sp, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	9201      	str	r2, [sp, #4]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4603      	mov	r3, r0
 8006468:	2200      	movs	r2, #0
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f8cc 	bl	8007608 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006470:	e109      	b.n	8006686 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f90c 	bl	8006690 <USBH_HandleEnum>
 8006478:	4603      	mov	r3, r0
 800647a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 80f3 	bne.w	800666c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006494:	2b01      	cmp	r3, #1
 8006496:	d103      	bne.n	80064a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2208      	movs	r2, #8
 800649c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800649e:	e0e5      	b.n	800666c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2207      	movs	r2, #7
 80064a4:	701a      	strb	r2, [r3, #0]
      break;
 80064a6:	e0e1      	b.n	800666c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80de 	beq.w	8006670 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2208      	movs	r2, #8
 80064c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80064c6:	e0d3      	b.n	8006670 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fc20 	bl	8006d18 <USBH_SetCfg>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 80ca 	bne.w	8006674 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2209      	movs	r2, #9
 80064e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064e6:	e0c5      	b.n	8006674 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc30 	bl	8006d5e <USBH_SetFeature>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 80b9 	bne.w	8006678 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	220a      	movs	r2, #10
 800650a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800650c:	e0b4      	b.n	8006678 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	220a      	movs	r2, #10
 8006512:	701a      	strb	r2, [r3, #0]
      break;
 8006514:	e0b0      	b.n	8006678 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80ad 	beq.w	800667c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	e016      	b.n	800655e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	32de      	adds	r2, #222	; 0xde
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	791a      	ldrb	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006542:	429a      	cmp	r2, r3
 8006544:	d108      	bne.n	8006558 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006546:	7bfa      	ldrb	r2, [r7, #15]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	32de      	adds	r2, #222	; 0xde
 800654c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006556:	e005      	b.n	8006564 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	3301      	adds	r3, #1
 800655c:	73fb      	strb	r3, [r7, #15]
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0e5      	beq.n	8006530 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d016      	beq.n	800659c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2206      	movs	r2, #6
 8006584:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800658c:	2103      	movs	r1, #3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006592:	e073      	b.n	800667c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	220d      	movs	r2, #13
 8006598:	701a      	strb	r2, [r3, #0]
      break;
 800659a:	e06f      	b.n	800667c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	220d      	movs	r2, #13
 80065a0:	701a      	strb	r2, [r3, #0]
      break;
 80065a2:	e06b      	b.n	800667c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d017      	beq.n	80065de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220b      	movs	r2, #11
 80065ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065cc:	e058      	b.n	8006680 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d154      	bne.n	8006680 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	220d      	movs	r2, #13
 80065da:	701a      	strb	r2, [r3, #0]
      break;
 80065dc:	e050      	b.n	8006680 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	220d      	movs	r2, #13
 80065e2:	701a      	strb	r2, [r3, #0]
      break;
 80065e4:	e04c      	b.n	8006680 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d049      	beq.n	8006684 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	4798      	blx	r3
      }
      break;
 80065fc:	e042      	b.n	8006684 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff fd72 	bl	80060f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800663a:	2105      	movs	r1, #5
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff fe2b 	bl	80062b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800665a:	e014      	b.n	8006686 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f9b5 	bl	80079cc <USBH_LL_Start>
      break;
 8006662:	e010      	b.n	8006686 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006664:	bf00      	nop
 8006666:	e00e      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 8006668:	bf00      	nop
 800666a:	e00c      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 800666c:	bf00      	nop
 800666e:	e00a      	b.n	8006686 <USBH_Process+0x3b6>
    break;
 8006670:	bf00      	nop
 8006672:	e008      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 8006674:	bf00      	nop
 8006676:	e006      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 8006678:	bf00      	nop
 800667a:	e004      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 800667c:	bf00      	nop
 800667e:	e002      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 8006680:	bf00      	nop
 8006682:	e000      	b.n	8006686 <USBH_Process+0x3b6>
      break;
 8006684:	bf00      	nop
  }
  return USBH_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af04      	add	r7, sp, #16
 8006696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800669c:	2301      	movs	r3, #1
 800669e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	f200 81c1 	bhi.w	8006a2c <USBH_HandleEnum+0x39c>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USBH_HandleEnum+0x20>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	0800678f 	.word	0x0800678f
 80066b8:	080067f9 	.word	0x080067f9
 80066bc:	08006887 	.word	0x08006887
 80066c0:	080068f1 	.word	0x080068f1
 80066c4:	08006961 	.word	0x08006961
 80066c8:	080069a7 	.word	0x080069a7
 80066cc:	080069ed 	.word	0x080069ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80066d0:	2108      	movs	r1, #8
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa50 	bl	8006b78 <USBH_Get_DevDesc>
 80066d8:	4603      	mov	r3, r0
 80066da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d130      	bne.n	8006744 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	7919      	ldrb	r1, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006706:	b292      	uxth	r2, r2
 8006708:	9202      	str	r2, [sp, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	9201      	str	r2, [sp, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4603      	mov	r3, r0
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 ff77 	bl	8007608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7959      	ldrb	r1, [r3, #5]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800672e:	b292      	uxth	r2, r2
 8006730:	9202      	str	r2, [sp, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	9201      	str	r2, [sp, #4]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	4603      	mov	r3, r0
 800673a:	2200      	movs	r2, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 ff63 	bl	8007608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006742:	e175      	b.n	8006a30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b03      	cmp	r3, #3
 8006748:	f040 8172 	bne.w	8006a30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006752:	3301      	adds	r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006762:	2b03      	cmp	r3, #3
 8006764:	d903      	bls.n	800676e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	220d      	movs	r2, #13
 800676a:	701a      	strb	r2, [r3, #0]
      break;
 800676c:	e160      	b.n	8006a30 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	795b      	ldrb	r3, [r3, #5]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 ff97 	bl	80076a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	791b      	ldrb	r3, [r3, #4]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 ff91 	bl	80076a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
      break;
 800678c:	e150      	b.n	8006a30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800678e:	2112      	movs	r1, #18
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f9f1 	bl	8006b78 <USBH_Get_DevDesc>
 8006796:	4603      	mov	r3, r0
 8006798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067a6:	e145      	b.n	8006a34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	f040 8142 	bne.w	8006a34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067b6:	3301      	adds	r3, #1
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d903      	bls.n	80067d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	220d      	movs	r2, #13
 80067ce:	701a      	strb	r2, [r3, #0]
      break;
 80067d0:	e130      	b.n	8006a34 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	795b      	ldrb	r3, [r3, #5]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 ff65 	bl	80076a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ff5f 	bl	80076a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
      break;
 80067f6:	e11d      	b.n	8006a34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80067f8:	2101      	movs	r1, #1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa68 	bl	8006cd0 <USBH_SetAddress>
 8006800:	4603      	mov	r3, r0
 8006802:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d132      	bne.n	8006870 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800680a:	2002      	movs	r0, #2
 800680c:	f001 fa42 	bl	8007c94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2203      	movs	r2, #3
 800681c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7919      	ldrb	r1, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006832:	b292      	uxth	r2, r2
 8006834:	9202      	str	r2, [sp, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	9201      	str	r2, [sp, #4]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	4603      	mov	r3, r0
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fee1 	bl	8007608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7959      	ldrb	r1, [r3, #5]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800685a:	b292      	uxth	r2, r2
 800685c:	9202      	str	r2, [sp, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	9201      	str	r2, [sp, #4]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4603      	mov	r3, r0
 8006866:	2200      	movs	r2, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fecd 	bl	8007608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800686e:	e0e3      	b.n	8006a38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	2b03      	cmp	r3, #3
 8006874:	f040 80e0 	bne.w	8006a38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	220d      	movs	r2, #13
 800687c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	705a      	strb	r2, [r3, #1]
      break;
 8006884:	e0d8      	b.n	8006a38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006886:	2109      	movs	r1, #9
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f99d 	bl	8006bc8 <USBH_Get_CfgDesc>
 800688e:	4603      	mov	r3, r0
 8006890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2204      	movs	r2, #4
 800689c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800689e:	e0cd      	b.n	8006a3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	f040 80ca 	bne.w	8006a3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068ae:	3301      	adds	r3, #1
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d903      	bls.n	80068ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	220d      	movs	r2, #13
 80068c6:	701a      	strb	r2, [r3, #0]
      break;
 80068c8:	e0b8      	b.n	8006a3c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	795b      	ldrb	r3, [r3, #5]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fee9 	bl	80076a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fee3 	bl	80076a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
      break;
 80068ee:	e0a5      	b.n	8006a3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f965 	bl	8006bc8 <USBH_Get_CfgDesc>
 80068fe:	4603      	mov	r3, r0
 8006900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2205      	movs	r2, #5
 800690c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800690e:	e097      	b.n	8006a40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b03      	cmp	r3, #3
 8006914:	f040 8094 	bne.w	8006a40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800691e:	3301      	adds	r3, #1
 8006920:	b2da      	uxtb	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800692e:	2b03      	cmp	r3, #3
 8006930:	d903      	bls.n	800693a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	220d      	movs	r2, #13
 8006936:	701a      	strb	r2, [r3, #0]
      break;
 8006938:	e082      	b.n	8006a40 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	795b      	ldrb	r3, [r3, #5]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 feb1 	bl	80076a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	791b      	ldrb	r3, [r3, #4]
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 feab 	bl	80076a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
      break;
 800695e:	e06f      	b.n	8006a40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006966:	2b00      	cmp	r3, #0
 8006968:	d019      	beq.n	800699e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006976:	23ff      	movs	r3, #255	; 0xff
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f949 	bl	8006c10 <USBH_Get_StringDesc>
 800697e:	4603      	mov	r3, r0
 8006980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2206      	movs	r2, #6
 800698c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800698e:	e059      	b.n	8006a44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	2b03      	cmp	r3, #3
 8006994:	d156      	bne.n	8006a44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2206      	movs	r2, #6
 800699a:	705a      	strb	r2, [r3, #1]
      break;
 800699c:	e052      	b.n	8006a44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2206      	movs	r2, #6
 80069a2:	705a      	strb	r2, [r3, #1]
      break;
 80069a4:	e04e      	b.n	8006a44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d019      	beq.n	80069e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069bc:	23ff      	movs	r3, #255	; 0xff
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f926 	bl	8006c10 <USBH_Get_StringDesc>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2207      	movs	r2, #7
 80069d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069d4:	e038      	b.n	8006a48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d135      	bne.n	8006a48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2207      	movs	r2, #7
 80069e0:	705a      	strb	r2, [r3, #1]
      break;
 80069e2:	e031      	b.n	8006a48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2207      	movs	r2, #7
 80069e8:	705a      	strb	r2, [r3, #1]
      break;
 80069ea:	e02d      	b.n	8006a48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a02:	23ff      	movs	r3, #255	; 0xff
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f903 	bl	8006c10 <USBH_Get_StringDesc>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006a18:	e018      	b.n	8006a4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d115      	bne.n	8006a4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
      break;
 8006a24:	e012      	b.n	8006a4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2a:	e00f      	b.n	8006a4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006a2c:	bf00      	nop
 8006a2e:	e00e      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a30:	bf00      	nop
 8006a32:	e00c      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a34:	bf00      	nop
 8006a36:	e00a      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a38:	bf00      	nop
 8006a3a:	e008      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a3c:	bf00      	nop
 8006a3e:	e006      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a40:	bf00      	nop
 8006a42:	e004      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a44:	bf00      	nop
 8006a46:	e002      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <USBH_HandleEnum+0x3be>
      break;
 8006a4c:	bf00      	nop
  }
  return Status;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f804 	bl	8006a9a <USBH_HandleSof>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b0b      	cmp	r3, #11
 8006aaa:	d10a      	bne.n	8006ac2 <USBH_HandleSof+0x28>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006ada:	bf00      	nop
}
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006af6:	bf00      	nop
}
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff56 	bl	8007a02 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	791b      	ldrb	r3, [r3, #4]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fda3 	bl	80076a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	795b      	ldrb	r3, [r3, #5]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fd9d 	bl	80076a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b96:	2100      	movs	r1, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f864 	bl	8006c66 <USBH_GetDescriptor>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f000 f918 	bl	8006dee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	331c      	adds	r3, #28
 8006bd8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f83d 	bl	8006c66 <USBH_GetDescriptor>
 8006bec:	4603      	mov	r3, r0
 8006bee:	72fb      	strb	r3, [r7, #11]
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d107      	bne.n	8006c06 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006bfc:	887a      	ldrh	r2, [r7, #2]
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f964 	bl	8006ece <USBH_ParseCfgDesc>
  }

  return status;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	72fb      	strb	r3, [r7, #11]
 8006c20:	4613      	mov	r3, r2
 8006c22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c2c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f812 	bl	8006c66 <USBH_GetDescriptor>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c52:	893a      	ldrh	r2, [r7, #8]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fa37 	bl	80070ca <USBH_ParseStringDesc>
  }

  return status;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	607b      	str	r3, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	72fb      	strb	r3, [r7, #11]
 8006c74:	4613      	mov	r3, r2
 8006c76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	789b      	ldrb	r3, [r3, #2]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11c      	bne.n	8006cba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2206      	movs	r2, #6
 8006c90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	893a      	ldrh	r2, [r7, #8]
 8006c96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d104      	bne.n	8006cae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f240 4209 	movw	r2, #1033	; 0x409
 8006caa:	829a      	strh	r2, [r3, #20]
 8006cac:	e002      	b.n	8006cb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8b3a      	ldrh	r2, [r7, #24]
 8006cb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006cba:	8b3b      	ldrh	r3, [r7, #24]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fa50 	bl	8007166 <USBH_CtlReq>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	789b      	ldrb	r3, [r3, #2]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d10f      	bne.n	8006d04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2205      	movs	r2, #5
 8006cee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa2c 	bl	8007166 <USBH_CtlReq>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	789b      	ldrb	r3, [r3, #2]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10e      	bne.n	8006d4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2209      	movs	r2, #9
 8006d36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	887a      	ldrh	r2, [r7, #2]
 8006d3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa09 	bl	8007166 <USBH_CtlReq>
 8006d54:	4603      	mov	r3, r0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10f      	bne.n	8006d92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d92:	2200      	movs	r2, #0
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9e5 	bl	8007166 <USBH_CtlReq>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	789b      	ldrb	r3, [r3, #2]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d10f      	bne.n	8006dda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9c1 	bl	8007166 <USBH_CtlReq>
 8006de4:	4603      	mov	r3, r0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	785a      	ldrb	r2, [r3, #1]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3302      	adds	r3, #2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3303      	adds	r3, #3
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	791a      	ldrb	r2, [r3, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	795a      	ldrb	r2, [r3, #5]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	799a      	ldrb	r2, [r3, #6]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	79da      	ldrb	r2, [r3, #7]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d939      	bls.n	8006ec2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3308      	adds	r3, #8
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3309      	adds	r3, #9
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	330a      	adds	r3, #10
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	330b      	adds	r3, #11
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	330d      	adds	r3, #13
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7b9a      	ldrb	r2, [r3, #14]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	7bda      	ldrb	r2, [r3, #15]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7c1a      	ldrb	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	7c5a      	ldrb	r2, [r3, #17]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	745a      	strb	r2, [r3, #17]
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b08a      	sub	sp, #40	; 0x28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	785a      	ldrb	r2, [r3, #1]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3302      	adds	r3, #2
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3303      	adds	r3, #3
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	791a      	ldrb	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	795a      	ldrb	r2, [r3, #5]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	799a      	ldrb	r2, [r3, #6]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	79da      	ldrb	r2, [r3, #7]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	7a1a      	ldrb	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b09      	cmp	r3, #9
 8006f48:	d95f      	bls.n	800700a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f4a:	2309      	movs	r3, #9
 8006f4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f52:	e051      	b.n	8006ff8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f54:	f107 0316 	add.w	r3, r7, #22
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f5c:	f000 f8e8 	bl	8007130 <USBH_GetNextDesc>
 8006f60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d146      	bne.n	8006ff8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f6e:	221a      	movs	r2, #26
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	3308      	adds	r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f80:	69f8      	ldr	r0, [r7, #28]
 8006f82:	f000 f846 	bl	8007012 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f90:	e022      	b.n	8006fd8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f92:	f107 0316 	add.w	r3, r7, #22
 8006f96:	4619      	mov	r1, r3
 8006f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f9a:	f000 f8c9 	bl	8007130 <USBH_GetNextDesc>
 8006f9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	d117      	bne.n	8006fd8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fb0:	3201      	adds	r2, #1
 8006fb2:	00d2      	lsls	r2, r2, #3
 8006fb4:	211a      	movs	r1, #26
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc8:	69b8      	ldr	r0, [r7, #24]
 8006fca:	f000 f851 	bl	8007070 <USBH_ParseEPDesc>
            ep_ix++;
 8006fce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d204      	bcs.n	8006fee <USBH_ParseCfgDesc+0x120>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	885a      	ldrh	r2, [r3, #2]
 8006fe8:	8afb      	ldrh	r3, [r7, #22]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d8d1      	bhi.n	8006f92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d804      	bhi.n	800700a <USBH_ParseCfgDesc+0x13c>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	885a      	ldrh	r2, [r3, #2]
 8007004:	8afb      	ldrh	r3, [r7, #22]
 8007006:	429a      	cmp	r2, r3
 8007008:	d8a4      	bhi.n	8006f54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800700a:	bf00      	nop
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	785a      	ldrb	r2, [r3, #1]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	789a      	ldrb	r2, [r3, #2]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	78da      	ldrb	r2, [r3, #3]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	791a      	ldrb	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	795a      	ldrb	r2, [r3, #5]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	799a      	ldrb	r2, [r3, #6]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	79da      	ldrb	r2, [r3, #7]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	7a1a      	ldrb	r2, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	721a      	strb	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	785a      	ldrb	r2, [r3, #1]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	789a      	ldrb	r2, [r3, #2]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	78da      	ldrb	r2, [r3, #3]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	3304      	adds	r3, #4
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3305      	adds	r3, #5
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	799a      	ldrb	r2, [r3, #6]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	719a      	strb	r2, [r3, #6]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	4613      	mov	r3, r2
 80070d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d120      	bne.n	8007124 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	1e9a      	subs	r2, r3, #2
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bf28      	it	cs
 80070ee:	4613      	movcs	r3, r2
 80070f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3302      	adds	r3, #2
 80070f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80070f8:	2300      	movs	r3, #0
 80070fa:	82fb      	strh	r3, [r7, #22]
 80070fc:	e00b      	b.n	8007116 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80070fe:	8afb      	ldrh	r3, [r7, #22]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	701a      	strb	r2, [r3, #0]
      pdest++;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3301      	adds	r3, #1
 800710e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	3302      	adds	r3, #2
 8007114:	82fb      	strh	r3, [r7, #22]
 8007116:	8afa      	ldrh	r2, [r7, #22]
 8007118:	8abb      	ldrh	r3, [r7, #20]
 800711a:	429a      	cmp	r2, r3
 800711c:	d3ef      	bcc.n	80070fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
  }
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	881a      	ldrh	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	4413      	add	r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007158:	68fb      	ldr	r3, [r7, #12]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b086      	sub	sp, #24
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	789b      	ldrb	r3, [r3, #2]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d002      	beq.n	8007186 <USBH_CtlReq+0x20>
 8007180:	2b02      	cmp	r3, #2
 8007182:	d00f      	beq.n	80071a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007184:	e027      	b.n	80071d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2202      	movs	r2, #2
 800719c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      break;
 80071a2:	e018      	b.n	80071d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f81b 	bl	80071e0 <USBH_HandleControl>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <USBH_CtlReq+0x54>
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d106      	bne.n	80071c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	761a      	strb	r2, [r3, #24]
      break;
 80071c6:	e005      	b.n	80071d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d102      	bne.n	80071d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	709a      	strb	r2, [r3, #2]
      break;
 80071d4:	bf00      	nop
  }
  return status;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7e1b      	ldrb	r3, [r3, #24]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	2b0a      	cmp	r3, #10
 80071f8:	f200 8156 	bhi.w	80074a8 <USBH_HandleControl+0x2c8>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBH_HandleControl+0x24>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007231 	.word	0x08007231
 8007208:	0800724b 	.word	0x0800724b
 800720c:	080072b5 	.word	0x080072b5
 8007210:	080072db 	.word	0x080072db
 8007214:	08007313 	.word	0x08007313
 8007218:	0800733d 	.word	0x0800733d
 800721c:	0800738f 	.word	0x0800738f
 8007220:	080073b1 	.word	0x080073b1
 8007224:	080073ed 	.word	0x080073ed
 8007228:	08007413 	.word	0x08007413
 800722c:	08007451 	.word	0x08007451
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f103 0110 	add.w	r1, r3, #16
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	795b      	ldrb	r3, [r3, #5]
 800723a:	461a      	mov	r2, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f943 	bl	80074c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	761a      	strb	r2, [r3, #24]
      break;
 8007248:	e139      	b.n	80074be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	795b      	ldrb	r3, [r3, #5]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fcc5 	bl	8007be0 <USBH_LL_GetURBState>
 8007256:	4603      	mov	r3, r0
 8007258:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d11e      	bne.n	800729e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7c1b      	ldrb	r3, [r3, #16]
 8007264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007268:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8adb      	ldrh	r3, [r3, #22]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007272:	7b7b      	ldrb	r3, [r7, #13]
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d103      	bne.n	8007280 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2203      	movs	r2, #3
 800727c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800727e:	e115      	b.n	80074ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2205      	movs	r2, #5
 8007284:	761a      	strb	r2, [r3, #24]
      break;
 8007286:	e111      	b.n	80074ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007288:	7b7b      	ldrb	r3, [r7, #13]
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d103      	bne.n	8007296 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2209      	movs	r2, #9
 8007292:	761a      	strb	r2, [r3, #24]
      break;
 8007294:	e10a      	b.n	80074ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2207      	movs	r2, #7
 800729a:	761a      	strb	r2, [r3, #24]
      break;
 800729c:	e106      	b.n	80074ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d003      	beq.n	80072ac <USBH_HandleControl+0xcc>
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	f040 8100 	bne.w	80074ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	220b      	movs	r2, #11
 80072b0:	761a      	strb	r2, [r3, #24]
      break;
 80072b2:	e0fb      	b.n	80074ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6899      	ldr	r1, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	899a      	ldrh	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	791b      	ldrb	r3, [r3, #4]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f93a 	bl	8007546 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2204      	movs	r2, #4
 80072d6:	761a      	strb	r2, [r3, #24]
      break;
 80072d8:	e0f1      	b.n	80074be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	791b      	ldrb	r3, [r3, #4]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fc7d 	bl	8007be0 <USBH_LL_GetURBState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d102      	bne.n	80072f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2209      	movs	r2, #9
 80072f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b05      	cmp	r3, #5
 80072fa:	d102      	bne.n	8007302 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80072fc:	2303      	movs	r3, #3
 80072fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007300:	e0d6      	b.n	80074b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b04      	cmp	r3, #4
 8007306:	f040 80d3 	bne.w	80074b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	220b      	movs	r2, #11
 800730e:	761a      	strb	r2, [r3, #24]
      break;
 8007310:	e0ce      	b.n	80074b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6899      	ldr	r1, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	899a      	ldrh	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	795b      	ldrb	r3, [r3, #5]
 800731e:	2001      	movs	r0, #1
 8007320:	9000      	str	r0, [sp, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8ea 	bl	80074fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2206      	movs	r2, #6
 8007338:	761a      	strb	r2, [r3, #24]
      break;
 800733a:	e0c0      	b.n	80074be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	795b      	ldrb	r3, [r3, #5]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc4c 	bl	8007be0 <USBH_LL_GetURBState>
 8007348:	4603      	mov	r3, r0
 800734a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d103      	bne.n	800735a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2207      	movs	r2, #7
 8007356:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007358:	e0ac      	b.n	80074b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d105      	bne.n	800736c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	220c      	movs	r2, #12
 8007364:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e0a3      	b.n	80074b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d103      	bne.n	800737a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2205      	movs	r2, #5
 8007376:	761a      	strb	r2, [r3, #24]
      break;
 8007378:	e09c      	b.n	80074b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b04      	cmp	r3, #4
 800737e:	f040 8099 	bne.w	80074b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220b      	movs	r2, #11
 8007386:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007388:	2302      	movs	r3, #2
 800738a:	73fb      	strb	r3, [r7, #15]
      break;
 800738c:	e092      	b.n	80074b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	791b      	ldrb	r3, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f8d5 	bl	8007546 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2208      	movs	r2, #8
 80073ac:	761a      	strb	r2, [r3, #24]

      break;
 80073ae:	e086      	b.n	80074be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fc12 	bl	8007be0 <USBH_LL_GetURBState>
 80073bc:	4603      	mov	r3, r0
 80073be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d105      	bne.n	80073d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220d      	movs	r2, #13
 80073ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80073d0:	e072      	b.n	80074b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d103      	bne.n	80073e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	220b      	movs	r2, #11
 80073dc:	761a      	strb	r2, [r3, #24]
      break;
 80073de:	e06b      	b.n	80074b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d168      	bne.n	80074b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80073e6:	2303      	movs	r3, #3
 80073e8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ea:	e065      	b.n	80074b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	795b      	ldrb	r3, [r3, #5]
 80073f0:	2201      	movs	r2, #1
 80073f2:	9200      	str	r2, [sp, #0]
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f87f 	bl	80074fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220a      	movs	r2, #10
 800740e:	761a      	strb	r2, [r3, #24]
      break;
 8007410:	e055      	b.n	80074be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	795b      	ldrb	r3, [r3, #5]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fbe1 	bl	8007be0 <USBH_LL_GetURBState>
 800741e:	4603      	mov	r3, r0
 8007420:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d105      	bne.n	8007434 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220d      	movs	r2, #13
 8007430:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007432:	e043      	b.n	80074bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d103      	bne.n	8007442 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2209      	movs	r2, #9
 800743e:	761a      	strb	r2, [r3, #24]
      break;
 8007440:	e03c      	b.n	80074bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d139      	bne.n	80074bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	220b      	movs	r2, #11
 800744c:	761a      	strb	r2, [r3, #24]
      break;
 800744e:	e035      	b.n	80074bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7e5b      	ldrb	r3, [r3, #25]
 8007454:	3301      	adds	r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	765a      	strb	r2, [r3, #25]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7e5b      	ldrb	r3, [r3, #25]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d806      	bhi.n	8007472 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007470:	e025      	b.n	80074be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007478:	2106      	movs	r1, #6
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	795b      	ldrb	r3, [r3, #5]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f90c 	bl	80076a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	791b      	ldrb	r3, [r3, #4]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f906 	bl	80076a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074a2:	2302      	movs	r3, #2
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e00a      	b.n	80074be <USBH_HandleControl+0x2de>

    default:
      break;
 80074a8:	bf00      	nop
 80074aa:	e008      	b.n	80074be <USBH_HandleControl+0x2de>
      break;
 80074ac:	bf00      	nop
 80074ae:	e006      	b.n	80074be <USBH_HandleControl+0x2de>
      break;
 80074b0:	bf00      	nop
 80074b2:	e004      	b.n	80074be <USBH_HandleControl+0x2de>
      break;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <USBH_HandleControl+0x2de>
      break;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <USBH_HandleControl+0x2de>
      break;
 80074bc:	bf00      	nop
  }

  return status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af04      	add	r7, sp, #16
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074d6:	79f9      	ldrb	r1, [r7, #7]
 80074d8:	2300      	movs	r3, #0
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	2308      	movs	r3, #8
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fb46 	bl	8007b7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af04      	add	r7, sp, #16
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4611      	mov	r1, r2
 8007508:	461a      	mov	r2, r3
 800750a:	460b      	mov	r3, r1
 800750c:	80fb      	strh	r3, [r7, #6]
 800750e:	4613      	mov	r3, r2
 8007510:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007520:	7979      	ldrb	r1, [r7, #5]
 8007522:	7e3b      	ldrb	r3, [r7, #24]
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	2301      	movs	r3, #1
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	2200      	movs	r2, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fb21 	bl	8007b7e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af04      	add	r7, sp, #16
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	4611      	mov	r1, r2
 8007552:	461a      	mov	r2, r3
 8007554:	460b      	mov	r3, r1
 8007556:	80fb      	strh	r3, [r7, #6]
 8007558:	4613      	mov	r3, r2
 800755a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800755c:	7979      	ldrb	r1, [r7, #5]
 800755e:	2300      	movs	r3, #0
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	9302      	str	r3, [sp, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	2301      	movs	r3, #1
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	2300      	movs	r3, #0
 8007570:	2201      	movs	r2, #1
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fb03 	bl	8007b7e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007578:	2300      	movs	r3, #0

}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b088      	sub	sp, #32
 8007586:	af04      	add	r7, sp, #16
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4611      	mov	r1, r2
 800758e:	461a      	mov	r2, r3
 8007590:	460b      	mov	r3, r1
 8007592:	80fb      	strh	r3, [r7, #6]
 8007594:	4613      	mov	r3, r2
 8007596:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075a6:	7979      	ldrb	r1, [r7, #5]
 80075a8:	7e3b      	ldrb	r3, [r7, #24]
 80075aa:	9303      	str	r3, [sp, #12]
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	9302      	str	r3, [sp, #8]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	2301      	movs	r3, #1
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	2302      	movs	r3, #2
 80075ba:	2200      	movs	r2, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fade 	bl	8007b7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	460b      	mov	r3, r1
 80075dc:	80fb      	strh	r3, [r7, #6]
 80075de:	4613      	mov	r3, r2
 80075e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075e2:	7979      	ldrb	r1, [r7, #5]
 80075e4:	2300      	movs	r3, #0
 80075e6:	9303      	str	r3, [sp, #12]
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	9302      	str	r3, [sp, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	2301      	movs	r3, #1
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2302      	movs	r3, #2
 80075f6:	2201      	movs	r2, #1
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fac0 	bl	8007b7e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af04      	add	r7, sp, #16
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	70fb      	strb	r3, [r7, #3]
 800761a:	460b      	mov	r3, r1
 800761c:	70bb      	strb	r3, [r7, #2]
 800761e:	4613      	mov	r3, r2
 8007620:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007622:	7878      	ldrb	r0, [r7, #1]
 8007624:	78ba      	ldrb	r2, [r7, #2]
 8007626:	78f9      	ldrb	r1, [r7, #3]
 8007628:	8b3b      	ldrh	r3, [r7, #24]
 800762a:	9302      	str	r3, [sp, #8]
 800762c:	7d3b      	ldrb	r3, [r7, #20]
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	7c3b      	ldrb	r3, [r7, #16]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa53 	bl	8007ae2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa72 	bl	8007b40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f836 	bl	80076e4 <USBH_GetFreePipe>
 8007678:	4603      	mov	r3, r0
 800767a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800767c:	89fb      	ldrh	r3, [r7, #14]
 800767e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007682:	4293      	cmp	r3, r2
 8007684:	d00a      	beq.n	800769c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	33e0      	adds	r3, #224	; 0xe0
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	b2db      	uxtb	r3, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b0a      	cmp	r3, #10
 80076b8:	d80d      	bhi.n	80076d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	33e0      	adds	r3, #224	; 0xe0
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	33e0      	adds	r3, #224	; 0xe0
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e00f      	b.n	8007716 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	33e0      	adds	r3, #224	; 0xe0
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d102      	bne.n	8007710 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	b29b      	uxth	r3, r3
 800770e:	e007      	b.n	8007720 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	3301      	adds	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b0a      	cmp	r3, #10
 800771a:	d9ec      	bls.n	80076f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800771c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007730:	2201      	movs	r2, #1
 8007732:	490e      	ldr	r1, [pc, #56]	; (800776c <MX_USB_HOST_Init+0x40>)
 8007734:	480e      	ldr	r0, [pc, #56]	; (8007770 <MX_USB_HOST_Init+0x44>)
 8007736:	f7fe fca1 	bl	800607c <USBH_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007740:	f7f9 fa0e 	bl	8000b60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007744:	490b      	ldr	r1, [pc, #44]	; (8007774 <MX_USB_HOST_Init+0x48>)
 8007746:	480a      	ldr	r0, [pc, #40]	; (8007770 <MX_USB_HOST_Init+0x44>)
 8007748:	f7fe fd26 	bl	8006198 <USBH_RegisterClass>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007752:	f7f9 fa05 	bl	8000b60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007756:	4806      	ldr	r0, [pc, #24]	; (8007770 <MX_USB_HOST_Init+0x44>)
 8007758:	f7fe fdaa 	bl	80062b0 <USBH_Start>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007762:	f7f9 f9fd 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007766:	bf00      	nop
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	0800778d 	.word	0x0800778d
 8007770:	20000280 	.word	0x20000280
 8007774:	2000000c 	.word	0x2000000c

08007778 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800777c:	4802      	ldr	r0, [pc, #8]	; (8007788 <MX_USB_HOST_Process+0x10>)
 800777e:	f7fe fda7 	bl	80062d0 <USBH_Process>
}
 8007782:	bf00      	nop
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000280 	.word	0x20000280

0800778c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	3b01      	subs	r3, #1
 800779c:	2b04      	cmp	r3, #4
 800779e:	d819      	bhi.n	80077d4 <USBH_UserProcess+0x48>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBH_UserProcess+0x1c>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	080077cd 	.word	0x080077cd
 80077b8:	080077bd 	.word	0x080077bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <USBH_UserProcess+0x58>)
 80077be:	2203      	movs	r2, #3
 80077c0:	701a      	strb	r2, [r3, #0]
  break;
 80077c2:	e008      	b.n	80077d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <USBH_UserProcess+0x58>)
 80077c6:	2202      	movs	r2, #2
 80077c8:	701a      	strb	r2, [r3, #0]
  break;
 80077ca:	e004      	b.n	80077d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <USBH_UserProcess+0x58>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
  break;
 80077d2:	e000      	b.n	80077d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80077d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	200000b4 	.word	0x200000b4

080077e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f0:	f107 0314 	add.w	r3, r7, #20
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	60da      	str	r2, [r3, #12]
 80077fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007808:	d147      	bne.n	800789a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	4a24      	ldr	r2, [pc, #144]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007814:	f043 0301 	orr.w	r3, r3, #1
 8007818:	6313      	str	r3, [r2, #48]	; 0x30
 800781a:	4b22      	ldr	r3, [pc, #136]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	4619      	mov	r1, r3
 800783a:	481b      	ldr	r0, [pc, #108]	; (80078a8 <HAL_HCD_MspInit+0xc0>)
 800783c:	f7fa fa78 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007846:	2302      	movs	r3, #2
 8007848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784e:	2300      	movs	r3, #0
 8007850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007852:	230a      	movs	r3, #10
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007856:	f107 0314 	add.w	r3, r7, #20
 800785a:	4619      	mov	r1, r3
 800785c:	4812      	ldr	r0, [pc, #72]	; (80078a8 <HAL_HCD_MspInit+0xc0>)
 800785e:	f7fa fa67 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007862:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	4a0f      	ldr	r2, [pc, #60]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	6353      	str	r3, [r2, #52]	; 0x34
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007876:	4a0b      	ldr	r2, [pc, #44]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800787c:	6453      	str	r3, [r2, #68]	; 0x44
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <HAL_HCD_MspInit+0xbc>)
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800788a:	2200      	movs	r2, #0
 800788c:	2100      	movs	r1, #0
 800788e:	2043      	movs	r0, #67	; 0x43
 8007890:	f7fa f92f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007894:	2043      	movs	r0, #67	; 0x43
 8007896:	f7fa f948 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800789a:	bf00      	nop
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	40023800 	.word	0x40023800
 80078a8:	40020000 	.word	0x40020000

080078ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff f8db 	bl	8006a76 <USBH_LL_IncTimer>
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff f913 	bl	8006b02 <USBH_LL_Connect>
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff f91c 	bl	8006b30 <USBH_LL_Disconnect>
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
 800790c:	4613      	mov	r3, r2
 800790e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff f8cd 	bl	8006aca <USBH_LL_PortEnabled>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff f8cd 	bl	8006ae6 <USBH_LL_PortDisabled>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007962:	2b01      	cmp	r3, #1
 8007964:	d12a      	bne.n	80079bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <USBH_LL_Init+0x74>)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <USBH_LL_Init+0x74>)
 8007972:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <USBH_LL_Init+0x74>)
 8007978:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800797c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800797e:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <USBH_LL_Init+0x74>)
 8007980:	2208      	movs	r2, #8
 8007982:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007984:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <USBH_LL_Init+0x74>)
 8007986:	2201      	movs	r2, #1
 8007988:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800798a:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <USBH_LL_Init+0x74>)
 800798c:	2200      	movs	r2, #0
 800798e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007990:	4b0d      	ldr	r3, [pc, #52]	; (80079c8 <USBH_LL_Init+0x74>)
 8007992:	2202      	movs	r2, #2
 8007994:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <USBH_LL_Init+0x74>)
 8007998:	2200      	movs	r2, #0
 800799a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800799c:	480a      	ldr	r0, [pc, #40]	; (80079c8 <USBH_LL_Init+0x74>)
 800799e:	f7fa fb96 	bl	80020ce <HAL_HCD_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079a8:	f7f9 f8da 	bl	8000b60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079ac:	4806      	ldr	r0, [pc, #24]	; (80079c8 <USBH_LL_Init+0x74>)
 80079ae:	f7fa ff7a 	bl	80028a6 <HAL_HCD_GetCurrentFrame>
 80079b2:	4603      	mov	r3, r0
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff f84e 	bl	8006a58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000658 	.word	0x20000658

080079cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fa fee9 	bl	80027ba <HAL_HCD_Start>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f95c 	bl	8007cac <USBH_Get_USB_Status>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fa fef1 	bl	8002800 <HAL_HCD_Stop>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 f941 	bl	8007cac <USBH_Get_USB_Status>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fa ff39 	bl	80028c2 <HAL_HCD_GetCurrentSpeed>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d00c      	beq.n	8007a70 <USBH_LL_GetSpeed+0x38>
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d80d      	bhi.n	8007a76 <USBH_LL_GetSpeed+0x3e>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <USBH_LL_GetSpeed+0x2c>
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d003      	beq.n	8007a6a <USBH_LL_GetSpeed+0x32>
 8007a62:	e008      	b.n	8007a76 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
    break;
 8007a68:	e008      	b.n	8007a7c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6e:	e005      	b.n	8007a7c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007a70:	2302      	movs	r3, #2
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	e002      	b.n	8007a7c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007a76:	2301      	movs	r3, #1
 8007a78:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7a:	bf00      	nop
  }
  return  speed;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fa fecc 	bl	800283a <HAL_HCD_ResetPort>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 f8ff 	bl	8007cac <USBH_Get_USB_Status>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fa fed3 	bl	800287e <HAL_HCD_HC_GetXferCount>
 8007ad8:	4603      	mov	r3, r0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ae2:	b590      	push	{r4, r7, lr}
 8007ae4:	b089      	sub	sp, #36	; 0x24
 8007ae6:	af04      	add	r7, sp, #16
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	461a      	mov	r2, r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	70fb      	strb	r3, [r7, #3]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70bb      	strb	r3, [r7, #2]
 8007af8:	4613      	mov	r3, r2
 8007afa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b0a:	787c      	ldrb	r4, [r7, #1]
 8007b0c:	78ba      	ldrb	r2, [r7, #2]
 8007b0e:	78f9      	ldrb	r1, [r7, #3]
 8007b10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4623      	mov	r3, r4
 8007b22:	f7fa fb36 	bl	8002192 <HAL_HCD_HC_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 f8bd 	bl	8007cac <USBH_Get_USB_Status>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd90      	pop	{r4, r7, pc}

08007b40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b5a:	78fa      	ldrb	r2, [r7, #3]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fa fba6 	bl	80022b0 <HAL_HCD_HC_Halt>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f89e 	bl	8007cac <USBH_Get_USB_Status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b7e:	b590      	push	{r4, r7, lr}
 8007b80:	b089      	sub	sp, #36	; 0x24
 8007b82:	af04      	add	r7, sp, #16
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	70fb      	strb	r3, [r7, #3]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70bb      	strb	r3, [r7, #2]
 8007b94:	4613      	mov	r3, r2
 8007b96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ba6:	787c      	ldrb	r4, [r7, #1]
 8007ba8:	78ba      	ldrb	r2, [r7, #2]
 8007baa:	78f9      	ldrb	r1, [r7, #3]
 8007bac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	f7fa fb99 	bl	80022f8 <HAL_HCD_HC_SubmitRequest>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f86d 	bl	8007cac <USBH_Get_USB_Status>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd90      	pop	{r4, r7, pc}

08007be0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fa fe2d 	bl	8002856 <HAL_HCD_HC_GetURBState>
 8007bfc:	4603      	mov	r3, r0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d103      	bne.n	8007c24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f870 	bl	8007d04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c24:	20c8      	movs	r0, #200	; 0xc8
 8007c26:	f7f9 fb07 	bl	8001238 <HAL_Delay>
  return USBH_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	4613      	mov	r3, r2
 8007c42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	212c      	movs	r1, #44	; 0x2c
 8007c52:	fb01 f303 	mul.w	r3, r1, r3
 8007c56:	4413      	add	r3, r2
 8007c58:	333b      	adds	r3, #59	; 0x3b
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	212c      	movs	r1, #44	; 0x2c
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3354      	adds	r3, #84	; 0x54
 8007c6e:	78ba      	ldrb	r2, [r7, #2]
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e008      	b.n	8007c86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	212c      	movs	r1, #44	; 0x2c
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	3355      	adds	r3, #85	; 0x55
 8007c82:	78ba      	ldrb	r2, [r7, #2]
 8007c84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7f9 facb 	bl	8001238 <HAL_Delay>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d817      	bhi.n	8007cf0 <USBH_Get_USB_Status+0x44>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <USBH_Get_USB_Status+0x1c>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007cdf 	.word	0x08007cdf
 8007cd0:	08007ce5 	.word	0x08007ce5
 8007cd4:	08007ceb 	.word	0x08007ceb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
    break;
 8007cdc:	e00b      	b.n	8007cf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce2:	e008      	b.n	8007cf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce8:	e005      	b.n	8007cf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007cea:	2302      	movs	r3, #2
 8007cec:	73fb      	strb	r3, [r7, #15]
    break;
 8007cee:	e002      	b.n	8007cf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf4:	bf00      	nop
  }
  return usb_status;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
 8007d1c:	e001      	b.n	8007d22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	461a      	mov	r2, r3
 8007d26:	2101      	movs	r1, #1
 8007d28:	4803      	ldr	r0, [pc, #12]	; (8007d38 <MX_DriverVbusFS+0x34>)
 8007d2a:	f7fa f99d 	bl	8002068 <HAL_GPIO_WritePin>
}
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40020800 	.word	0x40020800

08007d3c <__errno>:
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <__errno+0x8>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	2000002c 	.word	0x2000002c

08007d48 <__libc_init_array>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	4d0d      	ldr	r5, [pc, #52]	; (8007d80 <__libc_init_array+0x38>)
 8007d4c:	4c0d      	ldr	r4, [pc, #52]	; (8007d84 <__libc_init_array+0x3c>)
 8007d4e:	1b64      	subs	r4, r4, r5
 8007d50:	10a4      	asrs	r4, r4, #2
 8007d52:	2600      	movs	r6, #0
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	d109      	bne.n	8007d6c <__libc_init_array+0x24>
 8007d58:	4d0b      	ldr	r5, [pc, #44]	; (8007d88 <__libc_init_array+0x40>)
 8007d5a:	4c0c      	ldr	r4, [pc, #48]	; (8007d8c <__libc_init_array+0x44>)
 8007d5c:	f000 f8f8 	bl	8007f50 <_init>
 8007d60:	1b64      	subs	r4, r4, r5
 8007d62:	10a4      	asrs	r4, r4, #2
 8007d64:	2600      	movs	r6, #0
 8007d66:	42a6      	cmp	r6, r4
 8007d68:	d105      	bne.n	8007d76 <__libc_init_array+0x2e>
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d70:	4798      	blx	r3
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7ee      	b.n	8007d54 <__libc_init_array+0xc>
 8007d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7a:	4798      	blx	r3
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	e7f2      	b.n	8007d66 <__libc_init_array+0x1e>
 8007d80:	08007f8c 	.word	0x08007f8c
 8007d84:	08007f8c 	.word	0x08007f8c
 8007d88:	08007f8c 	.word	0x08007f8c
 8007d8c:	08007f90 	.word	0x08007f90

08007d90 <malloc>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <malloc+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f000 b863 	b.w	8007e60 <_malloc_r>
 8007d9a:	bf00      	nop
 8007d9c:	2000002c 	.word	0x2000002c

08007da0 <free>:
 8007da0:	4b02      	ldr	r3, [pc, #8]	; (8007dac <free+0xc>)
 8007da2:	4601      	mov	r1, r0
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f000 b80b 	b.w	8007dc0 <_free_r>
 8007daa:	bf00      	nop
 8007dac:	2000002c 	.word	0x2000002c

08007db0 <memset>:
 8007db0:	4402      	add	r2, r0
 8007db2:	4603      	mov	r3, r0
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d100      	bne.n	8007dba <memset+0xa>
 8007db8:	4770      	bx	lr
 8007dba:	f803 1b01 	strb.w	r1, [r3], #1
 8007dbe:	e7f9      	b.n	8007db4 <memset+0x4>

08007dc0 <_free_r>:
 8007dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dc2:	2900      	cmp	r1, #0
 8007dc4:	d048      	beq.n	8007e58 <_free_r+0x98>
 8007dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dca:	9001      	str	r0, [sp, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f1a1 0404 	sub.w	r4, r1, #4
 8007dd2:	bfb8      	it	lt
 8007dd4:	18e4      	addlt	r4, r4, r3
 8007dd6:	f000 f8ad 	bl	8007f34 <__malloc_lock>
 8007dda:	4a20      	ldr	r2, [pc, #128]	; (8007e5c <_free_r+0x9c>)
 8007ddc:	9801      	ldr	r0, [sp, #4]
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	4615      	mov	r5, r2
 8007de2:	b933      	cbnz	r3, 8007df2 <_free_r+0x32>
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6014      	str	r4, [r2, #0]
 8007de8:	b003      	add	sp, #12
 8007dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dee:	f000 b8a7 	b.w	8007f40 <__malloc_unlock>
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	d90b      	bls.n	8007e0e <_free_r+0x4e>
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	1862      	adds	r2, r4, r1
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bf04      	itt	eq
 8007dfe:	681a      	ldreq	r2, [r3, #0]
 8007e00:	685b      	ldreq	r3, [r3, #4]
 8007e02:	6063      	str	r3, [r4, #4]
 8007e04:	bf04      	itt	eq
 8007e06:	1852      	addeq	r2, r2, r1
 8007e08:	6022      	streq	r2, [r4, #0]
 8007e0a:	602c      	str	r4, [r5, #0]
 8007e0c:	e7ec      	b.n	8007de8 <_free_r+0x28>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b10b      	cbz	r3, 8007e18 <_free_r+0x58>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d9fa      	bls.n	8007e0e <_free_r+0x4e>
 8007e18:	6811      	ldr	r1, [r2, #0]
 8007e1a:	1855      	adds	r5, r2, r1
 8007e1c:	42a5      	cmp	r5, r4
 8007e1e:	d10b      	bne.n	8007e38 <_free_r+0x78>
 8007e20:	6824      	ldr	r4, [r4, #0]
 8007e22:	4421      	add	r1, r4
 8007e24:	1854      	adds	r4, r2, r1
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	d1dd      	bne.n	8007de8 <_free_r+0x28>
 8007e2c:	681c      	ldr	r4, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	6053      	str	r3, [r2, #4]
 8007e32:	4421      	add	r1, r4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	e7d7      	b.n	8007de8 <_free_r+0x28>
 8007e38:	d902      	bls.n	8007e40 <_free_r+0x80>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	e7d3      	b.n	8007de8 <_free_r+0x28>
 8007e40:	6825      	ldr	r5, [r4, #0]
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf04      	itt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	bf04      	itt	eq
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	6054      	str	r4, [r2, #4]
 8007e56:	e7c7      	b.n	8007de8 <_free_r+0x28>
 8007e58:	b003      	add	sp, #12
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	200000b8 	.word	0x200000b8

08007e60 <_malloc_r>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	1ccd      	adds	r5, r1, #3
 8007e64:	f025 0503 	bic.w	r5, r5, #3
 8007e68:	3508      	adds	r5, #8
 8007e6a:	2d0c      	cmp	r5, #12
 8007e6c:	bf38      	it	cc
 8007e6e:	250c      	movcc	r5, #12
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	4606      	mov	r6, r0
 8007e74:	db01      	blt.n	8007e7a <_malloc_r+0x1a>
 8007e76:	42a9      	cmp	r1, r5
 8007e78:	d903      	bls.n	8007e82 <_malloc_r+0x22>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	2000      	movs	r0, #0
 8007e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e82:	f000 f857 	bl	8007f34 <__malloc_lock>
 8007e86:	4921      	ldr	r1, [pc, #132]	; (8007f0c <_malloc_r+0xac>)
 8007e88:	680a      	ldr	r2, [r1, #0]
 8007e8a:	4614      	mov	r4, r2
 8007e8c:	b99c      	cbnz	r4, 8007eb6 <_malloc_r+0x56>
 8007e8e:	4f20      	ldr	r7, [pc, #128]	; (8007f10 <_malloc_r+0xb0>)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	b923      	cbnz	r3, 8007e9e <_malloc_r+0x3e>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 f83c 	bl	8007f14 <_sbrk_r>
 8007e9c:	6038      	str	r0, [r7, #0]
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 f837 	bl	8007f14 <_sbrk_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d123      	bne.n	8007ef2 <_malloc_r+0x92>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f846 	bl	8007f40 <__malloc_unlock>
 8007eb4:	e7e3      	b.n	8007e7e <_malloc_r+0x1e>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	1b5b      	subs	r3, r3, r5
 8007eba:	d417      	bmi.n	8007eec <_malloc_r+0x8c>
 8007ebc:	2b0b      	cmp	r3, #11
 8007ebe:	d903      	bls.n	8007ec8 <_malloc_r+0x68>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	441c      	add	r4, r3
 8007ec4:	6025      	str	r5, [r4, #0]
 8007ec6:	e004      	b.n	8007ed2 <_malloc_r+0x72>
 8007ec8:	6863      	ldr	r3, [r4, #4]
 8007eca:	42a2      	cmp	r2, r4
 8007ecc:	bf0c      	ite	eq
 8007ece:	600b      	streq	r3, [r1, #0]
 8007ed0:	6053      	strne	r3, [r2, #4]
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f834 	bl	8007f40 <__malloc_unlock>
 8007ed8:	f104 000b 	add.w	r0, r4, #11
 8007edc:	1d23      	adds	r3, r4, #4
 8007ede:	f020 0007 	bic.w	r0, r0, #7
 8007ee2:	1ac2      	subs	r2, r0, r3
 8007ee4:	d0cc      	beq.n	8007e80 <_malloc_r+0x20>
 8007ee6:	1a1b      	subs	r3, r3, r0
 8007ee8:	50a3      	str	r3, [r4, r2]
 8007eea:	e7c9      	b.n	8007e80 <_malloc_r+0x20>
 8007eec:	4622      	mov	r2, r4
 8007eee:	6864      	ldr	r4, [r4, #4]
 8007ef0:	e7cc      	b.n	8007e8c <_malloc_r+0x2c>
 8007ef2:	1cc4      	adds	r4, r0, #3
 8007ef4:	f024 0403 	bic.w	r4, r4, #3
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d0e3      	beq.n	8007ec4 <_malloc_r+0x64>
 8007efc:	1a21      	subs	r1, r4, r0
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f808 	bl	8007f14 <_sbrk_r>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d1dd      	bne.n	8007ec4 <_malloc_r+0x64>
 8007f08:	e7cf      	b.n	8007eaa <_malloc_r+0x4a>
 8007f0a:	bf00      	nop
 8007f0c:	200000b8 	.word	0x200000b8
 8007f10:	200000bc 	.word	0x200000bc

08007f14 <_sbrk_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d06      	ldr	r5, [pc, #24]	; (8007f30 <_sbrk_r+0x1c>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7f9 f8a6 	bl	8001070 <_sbrk>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_sbrk_r+0x1a>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_sbrk_r+0x1a>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	2000095c 	.word	0x2000095c

08007f34 <__malloc_lock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__malloc_lock+0x8>)
 8007f36:	f000 b809 	b.w	8007f4c <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20000964 	.word	0x20000964

08007f40 <__malloc_unlock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_unlock+0x8>)
 8007f42:	f000 b804 	b.w	8007f4e <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000964 	.word	0x20000964

08007f4c <__retarget_lock_acquire_recursive>:
 8007f4c:	4770      	bx	lr

08007f4e <__retarget_lock_release_recursive>:
 8007f4e:	4770      	bx	lr

08007f50 <_init>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr

08007f5c <_fini>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr
