
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a3c  08006a3c  00020854  2**0
                  CONTENTS
  4 .ARM          00000008  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a44  08006a44  00020854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000854  20000000  08006a50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020854  2**0
                  CONTENTS
 10 .bss          00008abc  20000858  20000858  00020858  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009314  20009314  00020858  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022a67  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a71  00000000  00000000  000432eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  00047d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00049698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026494  00000000  00000000  0004ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c749  00000000  00000000  000712ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e74f6  00000000  00000000  0008d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00174eeb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c20  00000000  00000000  00174f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000858 	.word	0x20000858
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069b8 	.word	0x080069b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000085c 	.word	0x2000085c
 80001cc:	080069b8 	.word	0x080069b8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CollectDataTask>:
#define Vbati 10


dataPacket* packet;
// packs data
void CollectDataTask(void * pvParams){ // run this each 10ms
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	for(;;){
		// get timestap
		TickType_t timestap = xTaskGetTickCount(); // this will never be able to collect data faster than 1ms,  we should be sampling at 10ms speed
 80004d0:	f004 fdce 	bl	8005070 <xTaskGetTickCount>
 80004d4:	4603      	mov	r3, r0
 80004d6:	60bb      	str	r3, [r7, #8]

		// get packet to use
		uint16_t index;
	//	xQueueReceive(uart2read, &index, portMAX_DELAY);
		index = 10;	//TODO uncomment what needs to be uncommented
 80004d8:	230a      	movs	r3, #10
 80004da:	827b      	strh	r3, [r7, #18]


#ifdef DEBUG
		int emptySpace = uxQueueSpacesAvailable(uart2read);
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <CollectDataTask+0xd8>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 f889 	bl	80045f8 <uxQueueSpacesAvailable>
 80004e6:	4603      	mov	r3, r0
 80004e8:	60fb      	str	r3, [r7, #12]
#endif


		packet = &dataTable[index]; // pointer to packet
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <CollectDataTask+0xdc>)
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	8a7a      	ldrh	r2, [r7, #18]
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	440b      	add	r3, r1
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <CollectDataTask+0xe0>)
 80004fc:	6013      	str	r3, [r2, #0]

		// empty packet
		memset(packet,0,sizeof(dataPacket));
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <CollectDataTask+0xe0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f006 f85a 	bl	80065c0 <memset>
		// set timestap
		packet->timestap = timestap;
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <CollectDataTask+0xe0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	601a      	str	r2, [r3, #0]
		// gpio reading is atomic
		// gear reading

		// use 21Mhz clock for ADC, each measurement takes 12 +480 cycles, so each 3936 cicles cpu gets interrupted to store value, frequency can be slowed down by using timers/dma, but 0,6% overhead is assumible (assuming that we only expend 25 cycles on interrupt handler, overhead=cycles interrupt(25)/cycles between interrupts(3936+25))
		// copy ADC oversampled values to struct
		for (int i = 0; i < 11; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	e02c      	b.n	8000574 <CollectDataTask+0xac>
			int mean = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
			for (int j = 0; j < 4; j++){
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e011      	b.n	8000548 <CollectDataTask+0x80>
				mean += ADCvalues[j][i];
 8000524:	4921      	ldr	r1, [pc, #132]	; (80005ac <CollectDataTask+0xe4>)
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	4613      	mov	r3, r2
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4413      	add	r3, r2
 8000532:	69fa      	ldr	r2, [r7, #28]
 8000534:	4413      	add	r3, r2
 8000536:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800053a:	461a      	mov	r2, r3
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	4413      	add	r3, r2
 8000540:	61bb      	str	r3, [r7, #24]
			for (int j = 0; j < 4; j++){
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	2b03      	cmp	r3, #3
 800054c:	ddea      	ble.n	8000524 <CollectDataTask+0x5c>
			}
			mean = mean / 4;
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <CollectDataTask+0x8e>
 8000554:	3303      	adds	r3, #3
 8000556:	109b      	asrs	r3, r3, #2
 8000558:	61bb      	str	r3, [r7, #24]

			packet->ADCvalues[i] = mean;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <CollectDataTask+0xe0>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	b299      	uxth	r1, r3
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	3304      	adds	r3, #4
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	460a      	mov	r2, r1
 800056c:	809a      	strh	r2, [r3, #4]
		for (int i = 0; i < 11; i++){
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	3301      	adds	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	ddcf      	ble.n	800051a <CollectDataTask+0x52>

		// get CAN data, SPI


		// calculate CRC, probablemente no pague la pena hacerlo con dma (buffer demasiado pequeño).
		packet->crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)packet, (sizeof(dataPacket)-4)/4);
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <CollectDataTask+0xe0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <CollectDataTask+0xe0>)
 8000580:	6814      	ldr	r4, [r2, #0]
 8000582:	2209      	movs	r2, #9
 8000584:	4619      	mov	r1, r3
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <CollectDataTask+0xe8>)
 8000588:	f002 f810 	bl	80025ac <HAL_CRC_Calculate>
 800058c:	4603      	mov	r3, r0
 800058e:	6263      	str	r3, [r4, #36]	; 0x24
		// send data through queue

		//xQueueSend(read2uart, &index, portMAX_DELAY);

		// execute this task each 10 miliseconds (period)
		vTaskDelayUntil(&timestap, DATA_AQUISITION_PERIOD);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	210a      	movs	r1, #10
 8000596:	4618      	mov	r0, r3
 8000598:	f004 fb8c 	bl	8004cb4 <vTaskDelayUntil>
	for(;;){
 800059c:	e798      	b.n	80004d0 <CollectDataTask+0x8>
 800059e:	bf00      	nop
 80005a0:	200090f8 	.word	0x200090f8
 80005a4:	200090f0 	.word	0x200090f0
 80005a8:	200090ec 	.word	0x200090ec
 80005ac:	20000874 	.word	0x20000874
 80005b0:	2000919c 	.word	0x2000919c

080005b4 <InitTask>:
	vTaskDelay(1000);
  }
}

	// main task for initializing stuff
void InitTask(void * pvParams){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
	// initialize peripherals
	//leds
	initializeLEDS(&hdac);
 80005bc:	4821      	ldr	r0, [pc, #132]	; (8000644 <InitTask+0x90>)
 80005be:	f000 f8e1 	bl	8000784 <initializeLEDS>
	// ADC start in IT mode
	HAL_ADC_Start_IT(&hadc1);
 80005c2:	4821      	ldr	r0, [pc, #132]	; (8000648 <InitTask+0x94>)
 80005c4:	f001 f99a 	bl	80018fc <HAL_ADC_Start_IT>
	// ADC_IRQn interrupt is enabled on NVIC by HAL, the interrrupt handler store ADC values on variables, CHECK callback at the bottom

	// create index queues:
	read2uart = xQueueCreate(TABLE_SIZE, sizeof(uint16_t));
 80005c8:	2200      	movs	r2, #0
 80005ca:	2102      	movs	r1, #2
 80005cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d0:	f003 feba 	bl	8004348 <xQueueGenericCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a1d      	ldr	r2, [pc, #116]	; (800064c <InitTask+0x98>)
 80005d8:	6013      	str	r3, [r2, #0]
	uart2read = xQueueCreate(TABLE_SIZE, sizeof(uint16_t));
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f003 feb1 	bl	8004348 <xQueueGenericCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a19      	ldr	r2, [pc, #100]	; (8000650 <InitTask+0x9c>)
 80005ea:	6013      	str	r3, [r2, #0]

	// initialize dataTable, for some extranche reason pvPortMalloc does not work, so we use malloc instead(it is not thread safe, but at this point in the code this is the only task running and no interrupts use malloc, so we should be safe)
	dataTable = (dataPacket*) malloc(TABLE_SIZE*sizeof(dataPacket));
 80005ec:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 80005f0:	f005 fd8e 	bl	8006110 <malloc>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <InitTask+0xa0>)
 80005fa:	601a      	str	r2, [r3, #0]

	// put indexes on queue
	for (int i = 0; i < TABLE_SIZE; i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e00b      	b.n	800061a <InitTask+0x66>
		xQueueSend(uart2read, &i, portMAX_DELAY);
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <InitTask+0x9c>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	2300      	movs	r3, #0
 800060c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000610:	f003 fef4 	bl	80043fc <xQueueGenericSend>
	for (int i = 0; i < TABLE_SIZE; i++){
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000620:	dbef      	blt.n	8000602 <InitTask+0x4e>
	}

	// start Producer task:
	xTaskCreate(CollectDataTask, "CollectData", 128, NULL, 10, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	230a      	movs	r3, #10
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	490a      	ldr	r1, [pc, #40]	; (8000658 <InitTask+0xa4>)
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <InitTask+0xa8>)
 8000632:	f004 f937 	bl	80048a4 <xTaskCreate>




	// exit init task, important, if not hard fault
	vTaskDelete(NULL);
 8000636:	2000      	movs	r0, #0
 8000638:	f004 faac 	bl	8004b94 <vTaskDelete>

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200091ec 	.word	0x200091ec
 8000648:	200091a4 	.word	0x200091a4
 800064c:	200090f4 	.word	0x200090f4
 8000650:	200090f8 	.word	0x200090f8
 8000654:	200090f0 	.word	0x200090f0
 8000658:	080069d0 	.word	0x080069d0
 800065c:	080004c9 	.word	0x080004c9

08000660 <SecondMain>:

int SecondMain(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af02      	add	r7, sp, #8


	// start initialize task, (maybe some stuff needs a started scheduler for running)
	xTaskCreate(InitTask, "Initializing Task", 128, NULL, 1, NULL);
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	4906      	ldr	r1, [pc, #24]	; (800068c <SecondMain+0x2c>)
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <SecondMain+0x30>)
 8000676:	f004 f915 	bl	80048a4 <xTaskCreate>

	// start scheduler, this won't return unless there is an error
	vTaskStartScheduler();
 800067a:	f004 fbcd 	bl	8004e18 <vTaskStartScheduler>
	// endless loop so we never return to that hell of main
			halt();
 800067e:	f000 f89b 	bl	80007b8 <halt>
	return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	080069dc 	.word	0x080069dc
 8000690:	080005b5 	.word	0x080005b5

08000694 <HAL_ADC_ConvCpltCallback>:
// Interruption Callbacks

// ADC callback, this can be done with continuous DMA
int ADC_callback_index_large = 0;
int ADC_callback_index = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	// write value to according matrix place
	ADCvalues[ADC_callback_index_large][ADC_callback_index] = HAL_ADC_GetValue(&hadc1);
 800069c:	481b      	ldr	r0, [pc, #108]	; (800070c <HAL_ADC_ConvCpltCallback+0x78>)
 800069e:	f001 fb4c 	bl	8001d3a <HAL_ADC_GetValue>
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_ADC_ConvCpltCallback+0x7c>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_ADC_ConvCpltCallback+0x80>)
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	b284      	uxth	r4, r0
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <HAL_ADC_ConvCpltCallback+0x84>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	4622      	mov	r2, r4
 80006bc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	ADC_callback_index = (ADC_callback_index+1) % 11;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_ADC_ConvCpltCallback+0x80>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1c59      	adds	r1, r3, #1
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_ADC_ConvCpltCallback+0x88>)
 80006c8:	fb83 2301 	smull	r2, r3, r3, r1
 80006cc:	105a      	asrs	r2, r3, #1
 80006ce:	17cb      	asrs	r3, r1, #31
 80006d0:	1ad2      	subs	r2, r2, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	1aca      	subs	r2, r1, r3
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_ConvCpltCallback+0x80>)
 80006e0:	601a      	str	r2, [r3, #0]
	if (ADC_callback_index == 0){
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_ADC_ConvCpltCallback+0x80>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10b      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x6e>
		ADC_callback_index_large = (ADC_callback_index_large+1) % 4;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_ADC_ConvCpltCallback+0x7c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	425a      	negs	r2, r3
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	f002 0203 	and.w	r2, r2, #3
 80006fa:	bf58      	it	pl
 80006fc:	4253      	negpl	r3, r2
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000700:	6013      	str	r3, [r2, #0]
	}
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	bf00      	nop
 800070c:	200091a4 	.word	0x200091a4
 8000710:	200008cc 	.word	0x200008cc
 8000714:	200008d0 	.word	0x200008d0
 8000718:	20000874 	.word	0x20000874
 800071c:	2e8ba2e9 	.word	0x2e8ba2e9

08000720 <HAL_ADC_ErrorCallback>:

// ADC error callback, Overrun ocurred, reset ADC, this should only be triggered when debugging
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	ADC_callback_index = (ADC_callback_index+1) % 11;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <HAL_ADC_ErrorCallback+0x58>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1c59      	adds	r1, r3, #1
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_ADC_ErrorCallback+0x5c>)
 8000730:	fb83 2301 	smull	r2, r3, r3, r1
 8000734:	105a      	asrs	r2, r3, #1
 8000736:	17cb      	asrs	r3, r1, #31
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	1aca      	subs	r2, r1, r3
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_ADC_ErrorCallback+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
	if (ADC_callback_index == 0){
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_ADC_ErrorCallback+0x58>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10b      	bne.n	800076a <HAL_ADC_ErrorCallback+0x4a>
		ADC_callback_index_large = (ADC_callback_index_large+1) % 4;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_ADC_ErrorCallback+0x60>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	425a      	negs	r2, r3
 800075a:	f003 0303 	and.w	r3, r3, #3
 800075e:	f002 0203 	and.w	r2, r2, #3
 8000762:	bf58      	it	pl
 8000764:	4253      	negpl	r3, r2
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_ADC_ErrorCallback+0x60>)
 8000768:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Start_IT(hadc);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f001 f8c6 	bl	80018fc <HAL_ADC_Start_IT>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200008d0 	.word	0x200008d0
 800077c:	2e8ba2e9 	.word	0x2e8ba2e9
 8000780:	200008cc 	.word	0x200008cc

08000784 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <initializeLEDS+0x30>)
 8000792:	f002 fa31 	bl	8002bf8 <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 8000796:	2100      	movs	r1, #0
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f001 ff5c 	bl	8002656 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 800079e:	2300      	movs	r3, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f002 f802 	bl	80027ae <HAL_DAC_SetValue>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <halt>:
}

/**
  * @brief  halts system and puts all 4 leds on
  */
void halt(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <halt+0x3c>)
 80007c4:	f002 fa18 	bl	8002bf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <halt+0x3c>)
 80007d0:	f002 fa12 	bl	8002bf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <halt+0x3c>)
 80007dc:	f002 fa0c 	bl	8002bf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <halt+0x3c>)
 80007e8:	f002 fa06 	bl	8002bf8 <HAL_GPIO_WritePin>

	vTaskEndScheduler();
 80007ec:	f004 fb7e 	bl	8004eec <vTaskEndScheduler>
	for (;;);
 80007f0:	e7fe      	b.n	80007f0 <halt+0x38>
 80007f2:	bf00      	nop
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4a07      	ldr	r2, [pc, #28]	; (8000824 <vApplicationGetIdleTaskMemory+0x2c>)
 8000808:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <vApplicationGetIdleTaskMemory+0x30>)
 800080e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200008d8 	.word	0x200008d8
 8000828:	20000d58 	.word	0x20000d58

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 ffdd 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f82f 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fab3 	bl	8000da4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800083e:	f000 f9f1 	bl	8000c24 <MX_SPI1_Init>
  MX_DAC_Init();
 8000842:	f000 f9c5 	bl	8000bd0 <MX_DAC_Init>
  MX_ADC1_Init();
 8000846:	f000 f89d 	bl	8000984 <MX_ADC1_Init>
  MX_CAN1_Init();
 800084a:	f000 f979 	bl	8000b40 <MX_CAN1_Init>
  MX_SPI2_Init();
 800084e:	f000 fa1f 	bl	8000c90 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000852:	f000 fa53 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000856:	f000 fa7b 	bl	8000d50 <MX_USART6_UART_Init>
  MX_CRC_Init();
 800085a:	f000 f9a5 	bl	8000ba8 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800085e:	f000 f885 	bl	800096c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SecondMain();
 8000862:	f7ff fefd 	bl	8000660 <SecondMain>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <main+0x64>)
 8000868:	1d3c      	adds	r4, r7, #4
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fbe6 	bl	800404e <osThreadCreate>
 8000882:	4603      	mov	r3, r0
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <main+0x68>)
 8000886:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000888:	f003 fbda 	bl	8004040 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088c:	e7fe      	b.n	800088c <main+0x60>
 800088e:	bf00      	nop
 8000890:	080069fc 	.word	0x080069fc
 8000894:	200090fc 	.word	0x200090fc

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 fe8a 	bl	80065c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f984 	bl	8002c2c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800092a:	f000 fb7d 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2105      	movs	r1, #5
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fbe5 	bl	800311c <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000958:	f000 fb66 	bl	8001028 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2105      	movs	r1, #5
 8000974:	2012      	movs	r0, #18
 8000976:	f001 fdd3 	bl	8002520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800097a:	2012      	movs	r0, #18
 800097c:	f001 fdec 	bl	8002558 <HAL_NVIC_EnableIRQ>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000998:	4a67      	ldr	r2, [pc, #412]	; (8000b38 <MX_ADC1_Init+0x1b4>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800099c:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 800099e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b0:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c4:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009c6:	4a5d      	ldr	r2, [pc, #372]	; (8000b3c <MX_ADC1_Init+0x1b8>)
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009d2:	220b      	movs	r2, #11
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b55      	ldr	r3, [pc, #340]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	4853      	ldr	r0, [pc, #332]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 80009e6:	f000 ff45 	bl	8001874 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009f0:	f000 fb1a 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009fc:	2307      	movs	r3, #7
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	484b      	ldr	r0, [pc, #300]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a06:	f001 f9af 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a10:	f000 fb0a 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4844      	ldr	r0, [pc, #272]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a22:	f001 f9a1 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a2c:	f000 fafc 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a30:	2303      	movs	r3, #3
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a34:	2303      	movs	r3, #3
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	483d      	ldr	r0, [pc, #244]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a3e:	f001 f993 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a48:	f000 faee 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4836      	ldr	r0, [pc, #216]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a5a:	f001 f985 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a64:	f000 fae0 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a68:	2309      	movs	r3, #9
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	482f      	ldr	r0, [pc, #188]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a76:	f001 f977 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a80:	f000 fad2 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a84:	230b      	movs	r3, #11
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4828      	ldr	r0, [pc, #160]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000a92:	f001 f969 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a9c:	f000 fac4 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000aa0:	230e      	movs	r3, #14
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000aae:	f001 f95b 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ab8:	f000 fab6 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000abc:	230f      	movs	r3, #15
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000aca:	f001 f94d 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ad4:	f000 faa8 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000adc:	2309      	movs	r3, #9
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000ae6:	f001 f93f 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000af0:	f000 fa9a 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000af4:	2311      	movs	r3, #17
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000af8:	230a      	movs	r3, #10
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000b02:	f001 f931 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000b0c:	f000 fa8c 	bl	8001028 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000b10:	2312      	movs	r3, #18
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8000b14:	230b      	movs	r3, #11
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0x1b0>)
 8000b1e:	f001 f923 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000b28:	f000 fa7e 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200091a4 	.word	0x200091a4
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	0f000001 	.word	0x0f000001

08000b40 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_CAN1_Init+0x64>)
 8000b48:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_CAN1_Init+0x60>)
 8000b8e:	f001 fb13 	bl	80021b8 <HAL_CAN_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 fa46 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000929c 	.word	0x2000929c
 8000ba4:	40006400 	.word	0x40006400

08000ba8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_CRC_Init+0x20>)
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <MX_CRC_Init+0x24>)
 8000bb0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_CRC_Init+0x20>)
 8000bb4:	f001 fcde 	bl	8002574 <HAL_CRC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000bbe:	f000 fa33 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000919c 	.word	0x2000919c
 8000bcc:	40023000 	.word	0x40023000

08000bd0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_DAC_Init+0x4c>)
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <MX_DAC_Init+0x50>)
 8000be2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_DAC_Init+0x4c>)
 8000be6:	f001 fd14 	bl	8002612 <HAL_DAC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000bf0:	f000 fa1a 	bl	8001028 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_DAC_Init+0x4c>)
 8000c04:	f001 fe02 	bl	800280c <HAL_DAC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c0e:	f000 fa0b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200091ec 	.word	0x200091ec
 8000c20:	40007400 	.word	0x40007400

08000c24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <MX_SPI1_Init+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c70:	220a      	movs	r2, #10
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_SPI1_Init+0x64>)
 8000c76:	f002 fc7f 	bl	8003578 <HAL_SPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c80:	f000 f9d2 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20009244 	.word	0x20009244
 8000c8c:	40013000 	.word	0x40013000

08000c90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_SPI2_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_SPI2_Init+0x64>)
 8000ce2:	f002 fc49 	bl	8003578 <HAL_SPI_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 f99c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20009100 	.word	0x20009100
 8000cf8:	40003800 	.word	0x40003800

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART3_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f002 ff56 	bl	8003be4 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f973 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20009158 	.word	0x20009158
 8000d4c:	40004800 	.word	0x40004800

08000d50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART6_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d88:	f002 ff2c 	bl	8003be4 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 f949 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20009200 	.word	0x20009200
 8000da0:	40011400 	.word	0x40011400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	4b87      	ldr	r3, [pc, #540]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a86      	ldr	r2, [pc, #536]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b84      	ldr	r3, [pc, #528]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a7f      	ldr	r2, [pc, #508]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b7d      	ldr	r3, [pc, #500]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a78      	ldr	r2, [pc, #480]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b72      	ldr	r3, [pc, #456]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a71      	ldr	r2, [pc, #452]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a6a      	ldr	r2, [pc, #424]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b68      	ldr	r3, [pc, #416]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <MX_GPIO_Init+0x238>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	485e      	ldr	r0, [pc, #376]	; (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e68:	f001 fec6 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2101      	movs	r1, #1
 8000e70:	485c      	ldr	r0, [pc, #368]	; (8000fe4 <MX_GPIO_Init+0x240>)
 8000e72:	f001 fec1 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000e76:	2200      	movs	r2, #0
 8000e78:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8000e7c:	485a      	ldr	r0, [pc, #360]	; (8000fe8 <MX_GPIO_Init+0x244>)
 8000e7e:	f001 febb 	bl	8002bf8 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e82:	2308      	movs	r3, #8
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4851      	ldr	r0, [pc, #324]	; (8000fe0 <MX_GPIO_Init+0x23c>)
 8000e9a:	f001 fd11 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	484b      	ldr	r0, [pc, #300]	; (8000fe4 <MX_GPIO_Init+0x240>)
 8000eb6:	f001 fd03 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4843      	ldr	r0, [pc, #268]	; (8000fe4 <MX_GPIO_Init+0x240>)
 8000ed6:	f001 fcf3 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ede:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	483f      	ldr	r0, [pc, #252]	; (8000fec <MX_GPIO_Init+0x248>)
 8000ef0:	f001 fce6 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <MX_GPIO_Init+0x24c>)
 8000f08:	f001 fcda 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f0c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f10:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	482f      	ldr	r0, [pc, #188]	; (8000fe0 <MX_GPIO_Init+0x23c>)
 8000f22:	f001 fccd 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	482b      	ldr	r0, [pc, #172]	; (8000ff0 <MX_GPIO_Init+0x24c>)
 8000f44:	f001 fcbc 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000f48:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000f4c:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4821      	ldr	r0, [pc, #132]	; (8000fe8 <MX_GPIO_Init+0x244>)
 8000f62:	f001 fcad 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481c      	ldr	r0, [pc, #112]	; (8000fec <MX_GPIO_Init+0x248>)
 8000f7c:	f001 fca0 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f92:	230a      	movs	r3, #10
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_GPIO_Init+0x248>)
 8000f9e:	f001 fc8f 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_GPIO_Init+0x244>)
 8000fb6:	f001 fc83 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0x23c>)
 8000fd0:	f001 fc76 	bl	80028c0 <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f003 f872 	bl	80040e6 <osDelay>
 8001002:	e7fb      	b.n	8000ffc <StartDefaultTask+0x8>

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001016:	f000 fc0d 	bl	8001834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40001000 	.word	0x40001000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x54>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x54>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x54>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x54>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x54>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x54>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f001 fa51 	bl	8002520 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d15b      	bne.n	8001166 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001132:	f001 fbc5 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001136:	230e      	movs	r3, #14
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <HAL_ADC_MspInit+0xf0>)
 800114a:	f001 fbb9 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001162:	f001 fbad 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40012000 	.word	0x40012000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_CAN_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_CAN_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011de:	2303      	movs	r3, #3
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011ee:	2309      	movs	r3, #9
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_CAN_MspInit+0x8c>)
 80011fa:	f001 fb61 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40006400 	.word	0x40006400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020c00 	.word	0x40020c00

08001214 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_CRC_MspInit+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_CRC_MspInit+0x40>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_CRC_MspInit+0x40>)
 8001230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_CRC_MspInit+0x40>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023000 	.word	0x40023000
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_DAC_MspInit+0x8c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12f      	bne.n	80012da <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 8001284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_DAC_MspInit+0x90>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b2:	2310      	movs	r3, #16
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_DAC_MspInit+0x94>)
 80012c6:	f001 fafb 	bl	80028c0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	2036      	movs	r0, #54	; 0x36
 80012d0:	f001 f926 	bl	8002520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d4:	2036      	movs	r0, #54	; 0x36
 80012d6:	f001 f93f 	bl	8002558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40007400 	.word	0x40007400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <HAL_SPI_MspInit+0xe8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a29      	ldr	r2, [pc, #164]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800134a:	23e0      	movs	r3, #224	; 0xe0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135a:	2305      	movs	r3, #5
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	481e      	ldr	r0, [pc, #120]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001366:	f001 faab 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800136a:	e031      	b.n	80013d0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <HAL_SPI_MspInit+0xf4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12c      	bne.n	80013d0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_SPI_MspInit+0xec>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_MISO_Pin|CAN_MOSI_Pin;
 80013ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c0:	2305      	movs	r3, #5
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <HAL_SPI_MspInit+0xf8>)
 80013cc:	f001 fa78 	bl	80028c0 <HAL_GPIO_Init>
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40003800 	.word	0x40003800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_UART_MspInit+0x128>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d14c      	bne.n	80014a8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a39      	ldr	r2, [pc, #228]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_UART_MspInit+0x12c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_UART_MspInit+0x12c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a32      	ldr	r2, [pc, #200]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_UART_MspInit+0x12c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001474:	2307      	movs	r3, #7
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <HAL_UART_MspInit+0x130>)
 8001480:	f001 fa1e 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001496:	2307      	movs	r3, #7
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	481f      	ldr	r0, [pc, #124]	; (8001520 <HAL_UART_MspInit+0x134>)
 80014a2:	f001 fa0d 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014a6:	e030      	b.n	800150a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x138>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_UART_MspInit+0x12c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014fa:	2308      	movs	r3, #8
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <HAL_UART_MspInit+0x13c>)
 8001506:	f001 f9db 	bl	80028c0 <HAL_GPIO_Init>
}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	; 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004800 	.word	0x40004800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40011400 	.word	0x40011400
 8001528:	40020800 	.word	0x40020800

0800152c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f000 ffed 	bl	8002520 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001546:	2036      	movs	r0, #54	; 0x36
 8001548:	f001 f806 	bl	8002558 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_InitTick+0xa4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_InitTick+0xa4>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HAL_InitTick+0xa4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001568:	f107 0210 	add.w	r2, r7, #16
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f001 ffce 	bl	8003514 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001578:	f001 ffa4 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 800157c:	4603      	mov	r3, r0
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_InitTick+0xa8>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0c9b      	lsrs	r3, r3, #18
 800158c:	3b01      	subs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_InitTick+0xac>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_InitTick+0xb0>)
 8001594:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_InitTick+0xac>)
 8001598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800159c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_InitTick+0xac>)
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_InitTick+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_InitTick+0xac>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_InitTick+0xac>)
 80015b2:	f002 f86a 	bl	800368a <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_InitTick+0xac>)
 80015be:	f002 f8bd 	bl	800373c <HAL_TIM_Base_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	200092c4 	.word	0x200092c4
 80015dc:	40001000 	.word	0x40001000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <ADC_IRQHandler+0x10>)
 8001612:	f000 fa51 	bl	8001ab8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200091a4 	.word	0x200091a4

08001620 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <TIM6_DAC_IRQHandler+0x20>)
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <TIM6_DAC_IRQHandler+0x20>)
 8001630:	f001 f863 	bl	80026fa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <TIM6_DAC_IRQHandler+0x24>)
 8001636:	f002 f8f1 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200091ec 	.word	0x200091ec
 8001644:	200092c4 	.word	0x200092c4

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f004 fd20 	bl	80060bc <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20020000 	.word	0x20020000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000f58 	.word	0x20000f58
 80016b0:	20009318 	.word	0x20009318

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f004 fcdf 	bl	80060c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff f88f 	bl	800082c <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000854 	.word	0x20000854
  ldr r2, =_sidata
 800171c:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8001720:	20000858 	.word	0x20000858
  ldr r4, =_ebss
 8001724:	20009314 	.word	0x20009314

08001728 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <CAN1_RX0_IRQHandler>

0800172a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
 800173c:	f7ff fc74 	bl	8001028 <Error_Handler>
 8001740:	e7fe      	b.n	8001740 <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001742:	f3ef 8305 	mrs	r3, IPSR
 8001746:	60fb      	str	r3, [r7, #12]
  return(result);
 8001748:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800174e:	b672      	cpsid	i
}
 8001750:	bf00      	nop
 8001752:	f7ff fc69 	bl	8001028 <Error_Handler>
 8001756:	e7fe      	b.n	8001756 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8001758:	f003 fbe0 	bl	8004f1c <vTaskSuspendAll>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001772:	b672      	cpsid	i
}
 8001774:	bf00      	nop
 8001776:	f7ff fc57 	bl	8001028 <Error_Handler>
 800177a:	e7fe      	b.n	800177a <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800177c:	f3ef 8305 	mrs	r3, IPSR
 8001780:	60fb      	str	r3, [r7, #12]
  return(result);
 8001782:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
 800178c:	f7ff fc4c 	bl	8001028 <Error_Handler>
 8001790:	e7fe      	b.n	8001790 <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8001792:	f003 fbd1 	bl	8004f38 <xTaskResumeAll>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
 80017b0:	f7ff fc3a 	bl	8001028 <Error_Handler>
 80017b4:	e7fe      	b.n	80017b4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ffb6 	bl	800172a <stm32_lock_acquire>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
 80017d8:	f7ff fc26 	bl	8001028 <Error_Handler>
 80017dc:	e7fe      	b.n	80017dc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffbf 	bl	8001764 <stm32_lock_release>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 fe76 	bl	800250a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f7ff fe84 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fc06 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	2000930c 	.word	0x2000930c

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000930c 	.word	0x2000930c

08001874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e033      	b.n	80018f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fbfa 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ba:	f023 0302 	bic.w	r3, r3, #2
 80018be:	f043 0202 	orr.w	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fb70 	bl	8001fac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
 80018e2:	e001      	b.n	80018e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Start_IT+0x1a>
 8001912:	2302      	movs	r3, #2
 8001914:	e0bd      	b.n	8001a92 <HAL_ADC_Start_IT+0x196>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d018      	beq.n	800195e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800193c:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_ADC_Start_IT+0x1a4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_ADC_Start_IT+0x1a8>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9a      	lsrs	r2, r3, #18
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8085 	bne.w	8001a78 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001998:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f023 0206 	bic.w	r2, r3, #6
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
 80019ba:	e002      	b.n	80019c2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_ADC_Start_IT+0x1ac>)
 80019cc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019d6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d12a      	bne.n	8001a4e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2b      	ldr	r2, [pc, #172]	; (8001aac <HAL_ADC_Start_IT+0x1b0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d015      	beq.n	8001a2e <HAL_ADC_Start_IT+0x132>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_ADC_Start_IT+0x1b4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d105      	bne.n	8001a18 <HAL_ADC_Start_IT+0x11c>
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_ADC_Start_IT+0x1ac>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_ADC_Start_IT+0x1b8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d136      	bne.n	8001a90 <HAL_ADC_Start_IT+0x194>
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_ADC_Start_IT+0x1ac>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d130      	bne.n	8001a90 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d129      	bne.n	8001a90 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	e020      	b.n	8001a90 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_ADC_Start_IT+0x1b0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d11b      	bne.n	8001a90 <HAL_ADC_Start_IT+0x194>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d114      	bne.n	8001a90 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	e00b      	b.n	8001a90 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0210 	orr.w	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	431bde83 	.word	0x431bde83
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	40012100 	.word	0x40012100
 8001ab4:	40012200 	.word	0x40012200

08001ab8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d049      	beq.n	8001b8e <HAL_ADC_IRQHandler+0xd6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d046      	beq.n	8001b8e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12b      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d127      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0220 	bic.w	r2, r2, #32
 8001b58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fd88 	bl	8000694 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0212 	mvn.w	r2, #18
 8001b8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d057      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x1b8>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d054      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d139      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d12b      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d124      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11d      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d119      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fa9f 	bl	80021a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f06f 020c 	mvn.w	r2, #12
 8001c6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_ADC_IRQHandler+0x21a>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f846 	bl	8001d54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0201 	mvn.w	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d015      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x27a>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d012      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fcfc 	bl	8000720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0220 	mvn.w	r2, #32
 8001d30:	601a      	str	r2, [r3, #0]
  }
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1c>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e105      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x228>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b09      	cmp	r3, #9
 8001d92:	d925      	bls.n	8001de0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68d9      	ldr	r1, [r3, #12]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	3b1e      	subs	r3, #30
 8001daa:	2207      	movs	r2, #7
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43da      	mvns	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	400a      	ands	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4403      	add	r3, r0
 8001dd2:	3b1e      	subs	r3, #30
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	e022      	b.n	8001e26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6919      	ldr	r1, [r3, #16]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	2207      	movs	r2, #7
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	400a      	ands	r2, r1
 8001e02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4403      	add	r3, r0
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d824      	bhi.n	8001e78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	221f      	movs	r2, #31
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b05      	subs	r3, #5
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
 8001e76:	e04c      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d824      	bhi.n	8001eca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b23      	subs	r3, #35	; 0x23
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b23      	subs	r3, #35	; 0x23
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec8:	e023      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b41      	subs	r3, #65	; 0x41
 8001edc:	221f      	movs	r2, #31
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	400a      	ands	r2, r1
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b41      	subs	r3, #65	; 0x41
 8001f06:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_ADC_ConfigChannel+0x234>)
 8001f14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_ADC_ConfigChannel+0x238>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1cc>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_ADC_ConfigChannel+0x238>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d123      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x21e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x1e6>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d11b      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d111      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_ADC_ConfigChannel+0x23c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_ADC_ConfigChannel+0x240>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9a      	lsrs	r2, r3, #18
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f9      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	40012000 	.word	0x40012000
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	431bde83 	.word	0x431bde83

08001fac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb4:	4b79      	ldr	r3, [pc, #484]	; (800219c <ADC_Init+0x1f0>)
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	021a      	lsls	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6899      	ldr	r1, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <ADC_Init+0x1f4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e00f      	b.n	80020aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0202 	bic.w	r2, r2, #2
 80020b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7e1b      	ldrb	r3, [r3, #24]
 80020c4:	005a      	lsls	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	3b01      	subs	r3, #1
 8002104:	035a      	lsls	r2, r3, #13
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e007      	b.n	8002120 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	3b01      	subs	r3, #1
 800213c:	051a      	lsls	r2, r3, #20
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002162:	025a      	lsls	r2, r3, #9
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	029a      	lsls	r2, r3, #10
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40012300 	.word	0x40012300
 80021a0:	0f000001 	.word	0x0f000001

080021a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0ed      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe ffd4 	bl	8001184 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fb36 	bl	800185c <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021f2:	e012      	b.n	800221a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f4:	f7ff fb32 	bl	800185c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d90b      	bls.n	800221a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2205      	movs	r2, #5
 8002212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0c5      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0e5      	beq.n	80021f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0202 	bic.w	r2, r2, #2
 8002236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff fb10 	bl	800185c <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800223e:	e012      	b.n	8002266 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002240:	f7ff fb0c 	bl	800185c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d90b      	bls.n	8002266 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2205      	movs	r2, #5
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e09f      	b.n	80023a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e5      	bne.n	8002240 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e1b      	ldrb	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e007      	b.n	800229e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e5b      	ldrb	r3, [r3, #25]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e007      	b.n	80022c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e9b      	ldrb	r3, [r3, #26]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e007      	b.n	80022f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0220 	bic.w	r2, r2, #32
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7edb      	ldrb	r3, [r3, #27]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0210 	bic.w	r2, r2, #16
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e007      	b.n	800231c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0210 	orr.w	r2, r2, #16
 800231a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f1b      	ldrb	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d108      	bne.n	8002336 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0208 	orr.w	r2, r2, #8
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e007      	b.n	8002346 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0208 	bic.w	r2, r2, #8
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7f5b      	ldrb	r3, [r3, #29]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0204 	orr.w	r2, r2, #4
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e007      	b.n	8002370 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	ea42 0103 	orr.w	r1, r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff4c 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002532:	f7ff ff61 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002536:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f7ff ffb1 	bl	80024a4 <NVIC_EncodePriority>
 8002542:	4602      	mov	r2, r0
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff80 	bl	8002450 <__NVIC_SetPriority>
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff54 	bl	8002414 <__NVIC_EnableIRQ>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	795b      	ldrb	r3, [r3, #5]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fe3c 	bl	8001214 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2202      	movs	r2, #2
 80025c0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e00a      	b.n	80025ee <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	441a      	add	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3f0      	bcc.n	80025d8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002604:	693b      	ldr	r3, [r7, #16]
}
 8002606:	4618      	mov	r0, r3
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e014      	b.n	800264e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe fe0f 	bl	8001258 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_DAC_Start+0x16>
 8002668:	2302      	movs	r3, #2
 800266a:	e040      	b.n	80026ee <HAL_DAC_Start+0x98>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80026a0:	2b3c      	cmp	r3, #60	; 0x3c
 80026a2:	d11d      	bne.n	80026e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	e014      	b.n	80026e0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	213c      	movs	r1, #60	; 0x3c
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d107      	bne.n	80026e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0202 	orr.w	r2, r2, #2
 80026de:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002710:	d120      	bne.n	8002754 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002720:	d118      	bne.n	8002754 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800274c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f852 	bl	80027f8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002762:	d120      	bne.n	80027a6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800276e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002772:	d118      	bne.n	80027a6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2204      	movs	r2, #4
 8002778:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800278e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800279e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f882 	bl	80028aa <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	3308      	adds	r3, #8
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e004      	b.n	80027e2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	3314      	adds	r3, #20
 80027e0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	461a      	mov	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	795b      	ldrb	r3, [r3, #5]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_DAC_ConfigChannel+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e03c      	b.n	800289e <HAL_DAC_ConfigChannel+0x92>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2202      	movs	r2, #2
 800282e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4013      	ands	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	22c0      	movs	r2, #192	; 0xc0
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e16b      	b.n	8002bb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f040 815a 	bne.w	8002bae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d005      	beq.n	8002912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	2b02      	cmp	r3, #2
 8002910:	d130      	bne.n	8002974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0201 	and.w	r2, r3, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d017      	beq.n	80029b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d123      	bne.n	8002a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80b4 	beq.w	8002bae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b60      	ldr	r3, [pc, #384]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a5f      	ldr	r2, [pc, #380]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a62:	4a5b      	ldr	r2, [pc, #364]	; (8002bd0 <HAL_GPIO_Init+0x310>)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x314>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_GPIO_Init+0x226>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_GPIO_Init+0x318>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d025      	beq.n	8002ae2 <HAL_GPIO_Init+0x222>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_GPIO_Init+0x31c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <HAL_GPIO_Init+0x21e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_GPIO_Init+0x320>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0x21a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4e      	ldr	r2, [pc, #312]	; (8002be4 <HAL_GPIO_Init+0x324>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0x216>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4d      	ldr	r2, [pc, #308]	; (8002be8 <HAL_GPIO_Init+0x328>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4c      	ldr	r2, [pc, #304]	; (8002bec <HAL_GPIO_Init+0x32c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x20e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4b      	ldr	r2, [pc, #300]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_GPIO_Init+0x20a>
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	e00e      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002aca:	2308      	movs	r3, #8
 8002acc:	e00c      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ace:	2306      	movs	r3, #6
 8002ad0:	e00a      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	e008      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e004      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_GPIO_Init+0x228>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f002 0203 	and.w	r2, r2, #3
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	4093      	lsls	r3, r2
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af8:	4935      	ldr	r1, [pc, #212]	; (8002bd0 <HAL_GPIO_Init+0x310>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2a:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba8:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	f67f ae90 	bls.w	80028dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40021400 	.word	0x40021400
 8002bec:	40021800 	.word	0x40021800
 8002bf0:	40021c00 	.word	0x40021c00
 8002bf4:	40013c00 	.word	0x40013c00

08002bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	807b      	strh	r3, [r7, #2]
 8002c04:	4613      	mov	r3, r2
 8002c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c14:	e003      	b.n	8002c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	041a      	lsls	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	619a      	str	r2, [r3, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e264      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d075      	beq.n	8002d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	4ba3      	ldr	r3, [pc, #652]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d112      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4b9d      	ldr	r3, [pc, #628]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b99      	ldr	r3, [pc, #612]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e23f      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x74>
 8002c92:	4b91      	ldr	r3, [pc, #580]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a90      	ldr	r2, [pc, #576]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b8b      	ldr	r3, [pc, #556]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a8a      	ldr	r2, [pc, #552]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a87      	ldr	r2, [pc, #540]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002cc4:	4b84      	ldr	r3, [pc, #528]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a83      	ldr	r2, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fdba 	bl	800185c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fdb6 	bl	800185c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e204      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fda6 	bl	800185c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fda2 	bl	800185c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1f0      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1c4      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4952      	ldr	r1, [pc, #328]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_OscConfig+0x2b0>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fd5b 	bl	800185c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fd57 	bl	800185c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1a5      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4940      	ldr	r1, [pc, #256]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <HAL_RCC_OscConfig+0x2b0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fd3a 	bl	800185c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fd36 	bl	800185c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e184      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d030      	beq.n	8002e78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <HAL_RCC_OscConfig+0x2b4>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fd1a 	bl	800185c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fd16 	bl	800185c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e164      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x200>
 8002e4a:	e015      	b.n	8002e78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x2b4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fd03 	bl	800185c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fcff 	bl	800185c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e14d      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a0 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_OscConfig+0x2b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d121      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_OscConfig+0x2b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_RCC_OscConfig+0x2b8>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fcc5 	bl	800185c <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e011      	b.n	8002efa <HAL_RCC_OscConfig+0x2ce>
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	42470000 	.word	0x42470000
 8002ee0:	42470e80 	.word	0x42470e80
 8002ee4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe fcb8 	bl	800185c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e106      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x4e4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2f0>
 8002f0e:	4b81      	ldr	r3, [pc, #516]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a80      	ldr	r2, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	e01c      	b.n	8002f56 <HAL_RCC_OscConfig+0x32a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x312>
 8002f24:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	4b78      	ldr	r3, [pc, #480]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x32a>
 8002f3e:	4b75      	ldr	r3, [pc, #468]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a74      	ldr	r2, [pc, #464]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a71      	ldr	r2, [pc, #452]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d015      	beq.n	8002f8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fc7d 	bl	800185c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fc79 	bl	800185c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0c5      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b65      	ldr	r3, [pc, #404]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCC_OscConfig+0x33a>
 8002f88:	e014      	b.n	8002fb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fc67 	bl	800185c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fc63 	bl	800185c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0af      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b56      	ldr	r3, [pc, #344]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 809b 	beq.w	8003106 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d05c      	beq.n	8003096 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d141      	bne.n	8003068 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_OscConfig+0x4ec>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fc37 	bl	800185c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe fc33 	bl	800185c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e081      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <HAL_RCC_OscConfig+0x4ec>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fc0c 	bl	800185c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe fc08 	bl	800185c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e056      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x41c>
 8003066:	e04e      	b.n	8003106 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x4ec>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fbf5 	bl	800185c <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fbf1 	bl	800185c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e03f      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x44a>
 8003094:	e037      	b.n	8003106 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e032      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d028      	beq.n	8003102 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d11a      	bne.n	8003102 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030da:	4293      	cmp	r3, r2
 80030dc:	d111      	bne.n	8003102 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40007000 	.word	0x40007000
 8003114:	40023800 	.word	0x40023800
 8003118:	42470060 	.word	0x42470060

0800311c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cc      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d90c      	bls.n	8003158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a58      	ldr	r2, [pc, #352]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003188:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	494d      	ldr	r1, [pc, #308]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d044      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d119      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e067      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4934      	ldr	r1, [pc, #208]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe fb26 	bl	800185c <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe fb22 	bl	800185c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e04f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d20c      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4916      	ldr	r1, [pc, #88]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	490e      	ldr	r1, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a2:	f000 f821 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490a      	ldr	r1, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f932 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08006a20 	.word	0x08006a20
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	2300      	movs	r3, #0
 80032fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003300:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d00d      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x40>
 800330c:	2b08      	cmp	r3, #8
 800330e:	f200 80bd 	bhi.w	800348c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x3a>
 800331a:	e0b7      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800331e:	60bb      	str	r3, [r7, #8]
       break;
 8003320:	e0b7      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003322:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003324:	60bb      	str	r3, [r7, #8]
      break;
 8003326:	e0b4      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003328:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003330:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003332:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d04d      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	461a      	mov	r2, r3
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	ea02 0800 	and.w	r8, r2, r0
 8003356:	ea03 0901 	and.w	r9, r3, r1
 800335a:	4640      	mov	r0, r8
 800335c:	4649      	mov	r1, r9
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	014b      	lsls	r3, r1, #5
 8003368:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800336c:	0142      	lsls	r2, r0, #5
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	ebb0 0008 	subs.w	r0, r0, r8
 8003376:	eb61 0109 	sbc.w	r1, r1, r9
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	018b      	lsls	r3, r1, #6
 8003384:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003388:	0182      	lsls	r2, r0, #6
 800338a:	1a12      	subs	r2, r2, r0
 800338c:	eb63 0301 	sbc.w	r3, r3, r1
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	00d9      	lsls	r1, r3, #3
 800339a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800339e:	00d0      	lsls	r0, r2, #3
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	eb12 0208 	adds.w	r2, r2, r8
 80033a8:	eb43 0309 	adc.w	r3, r3, r9
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0259      	lsls	r1, r3, #9
 80033b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033ba:	0250      	lsls	r0, r2, #9
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	f7fc ff00 	bl	80001d0 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e04a      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	461a      	mov	r2, r3
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	ea02 0400 	and.w	r4, r2, r0
 80033f2:	ea03 0501 	and.w	r5, r3, r1
 80033f6:	4620      	mov	r0, r4
 80033f8:	4629      	mov	r1, r5
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	014b      	lsls	r3, r1, #5
 8003404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003408:	0142      	lsls	r2, r0, #5
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	1b00      	subs	r0, r0, r4
 8003410:	eb61 0105 	sbc.w	r1, r1, r5
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	018b      	lsls	r3, r1, #6
 800341e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003422:	0182      	lsls	r2, r0, #6
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	eb63 0301 	sbc.w	r3, r3, r1
 800342a:	f04f 0000 	mov.w	r0, #0
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	00d9      	lsls	r1, r3, #3
 8003434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003438:	00d0      	lsls	r0, r2, #3
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	1912      	adds	r2, r2, r4
 8003440:	eb45 0303 	adc.w	r3, r5, r3
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	0299      	lsls	r1, r3, #10
 800344e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003452:	0290      	lsls	r0, r2, #10
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	f7fc feb4 	bl	80001d0 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	60bb      	str	r3, [r7, #8]
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348e:	60bb      	str	r3, [r7, #8]
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	68bb      	ldr	r3, [r7, #8]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	007a1200 	.word	0x007a1200

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff0 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08006a30 	.word	0x08006a30

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffdc 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0b5b      	lsrs	r3, r3, #13
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08006a30 	.word	0x08006a30

08003514 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	220f      	movs	r2, #15
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_RCC_GetClockConfig+0x60>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0207 	and.w	r2, r3, #7
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40023c00 	.word	0x40023c00

08003578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07b      	b.n	8003682 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d009      	beq.n	80035b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
 80035a2:	e005      	b.n	80035b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fe90 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0104 	and.w	r1, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0210 	and.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e041      	b.n	8003720 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f839 	bl	8003728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f000 f9d7 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e04e      	b.n	80037f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_TIM_Base_Start_IT+0xc4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d022      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d01d      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_TIM_Base_Start_IT+0xc8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d018      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <HAL_TIM_Base_Start_IT+0xcc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIM_Base_Start_IT+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_TIM_Base_Start_IT+0xd4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIM_Base_Start_IT+0xdc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d111      	bne.n	80037e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d010      	beq.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037de:	e007      	b.n	80037f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40001800 	.word	0x40001800

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0202 	mvn.w	r2, #2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8ee 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8e0 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f8f1 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0204 	mvn.w	r2, #4
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8c4 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8b6 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8c7 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d122      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d11b      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0208 	mvn.w	r2, #8
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f89a 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f88c 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f89d 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b10      	cmp	r3, #16
 800392c:	d122      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d11b      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f870 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f862 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f873 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fb32 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f902 	bl	8003bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f838 	bl	8003a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8cc 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <TIM_Base_SetConfig+0x114>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <TIM_Base_SetConfig+0x118>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3c      	ldr	r2, [pc, #240]	; (8003b98 <TIM_Base_SetConfig+0x11c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3b      	ldr	r2, [pc, #236]	; (8003b9c <TIM_Base_SetConfig+0x120>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <TIM_Base_SetConfig+0x124>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2f      	ldr	r2, [pc, #188]	; (8003b90 <TIM_Base_SetConfig+0x114>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d027      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <TIM_Base_SetConfig+0x118>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d023      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	; (8003b98 <TIM_Base_SetConfig+0x11c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <TIM_Base_SetConfig+0x120>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <TIM_Base_SetConfig+0x124>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a28      	ldr	r2, [pc, #160]	; (8003ba4 <TIM_Base_SetConfig+0x128>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <TIM_Base_SetConfig+0x130>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a23      	ldr	r2, [pc, #140]	; (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <TIM_Base_SetConfig+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0xf8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <TIM_Base_SetConfig+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	40001800 	.word	0x40001800
 8003bb4:	40001c00 	.word	0x40001c00
 8003bb8:	40002000 	.word	0x40002000

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e03f      	b.n	8003c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fbee 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f829 	bl	8003c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	b09f      	sub	sp, #124	; 0x7c
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cc4:	f021 010c 	bic.w	r1, r1, #12
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	ea40 0301 	orr.w	r3, r0, r1
 8003ce8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4bc5      	ldr	r3, [pc, #788]	; (8004004 <UART_SetConfig+0x384>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d004      	beq.n	8003cfe <UART_SetConfig+0x7e>
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4bc3      	ldr	r3, [pc, #780]	; (8004008 <UART_SetConfig+0x388>)
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cfe:	f7ff fbf5 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8003d02:	6778      	str	r0, [r7, #116]	; 0x74
 8003d04:	e002      	b.n	8003d0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d06:	f7ff fbdd 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8003d0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	f040 80b6 	bne.w	8003e84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	f04f 0500 	mov.w	r5, #0
 8003d20:	4622      	mov	r2, r4
 8003d22:	462b      	mov	r3, r5
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	6439      	str	r1, [r7, #64]	; 0x40
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d30:	1912      	adds	r2, r2, r4
 8003d32:	eb45 0303 	adc.w	r3, r5, r3
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	00d9      	lsls	r1, r3, #3
 8003d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d44:	00d0      	lsls	r0, r2, #3
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	1911      	adds	r1, r2, r4
 8003d4c:	6639      	str	r1, [r7, #96]	; 0x60
 8003d4e:	416b      	adcs	r3, r5
 8003d50:	667b      	str	r3, [r7, #100]	; 0x64
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d60:	415b      	adcs	r3, r3
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d6c:	f7fc fa30 	bl	80001d0 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4ba5      	ldr	r3, [pc, #660]	; (800400c <UART_SetConfig+0x38c>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011e      	lsls	r6, r3, #4
 8003d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d80:	461c      	mov	r4, r3
 8003d82:	f04f 0500 	mov.w	r5, #0
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	1891      	adds	r1, r2, r2
 8003d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
 8003d92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d96:	1912      	adds	r2, r2, r4
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	00d9      	lsls	r1, r3, #3
 8003da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003daa:	00d0      	lsls	r0, r2, #3
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	1911      	adds	r1, r2, r4
 8003db2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003db4:	416b      	adcs	r3, r5
 8003db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dd2:	f7fc f9fd 	bl	80001d0 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b8c      	ldr	r3, [pc, #560]	; (800400c <UART_SetConfig+0x38c>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	4a87      	ldr	r2, [pc, #540]	; (800400c <UART_SetConfig+0x38c>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dfc:	441e      	add	r6, r3
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	4618      	mov	r0, r3
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	1894      	adds	r4, r2, r2
 8003e0c:	623c      	str	r4, [r7, #32]
 8003e0e:	415b      	adcs	r3, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e16:	1812      	adds	r2, r2, r0
 8003e18:	eb41 0303 	adc.w	r3, r1, r3
 8003e1c:	f04f 0400 	mov.w	r4, #0
 8003e20:	f04f 0500 	mov.w	r5, #0
 8003e24:	00dd      	lsls	r5, r3, #3
 8003e26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e2a:	00d4      	lsls	r4, r2, #3
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	1814      	adds	r4, r2, r0
 8003e32:	653c      	str	r4, [r7, #80]	; 0x50
 8003e34:	414b      	adcs	r3, r1
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	61b9      	str	r1, [r7, #24]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e52:	f7fc f9bd 	bl	80001d0 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <UART_SetConfig+0x38c>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a67      	ldr	r2, [pc, #412]	; (800400c <UART_SetConfig+0x38c>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 0207 	and.w	r2, r3, #7
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4432      	add	r2, r6
 8003e80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e82:	e0b9      	b.n	8003ff8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e86:	461c      	mov	r4, r3
 8003e88:	f04f 0500 	mov.w	r5, #0
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	462b      	mov	r3, r5
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	6139      	str	r1, [r7, #16]
 8003e94:	415b      	adcs	r3, r3
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e9c:	1912      	adds	r2, r2, r4
 8003e9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	00d9      	lsls	r1, r3, #3
 8003eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb0:	00d0      	lsls	r0, r2, #3
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	eb12 0804 	adds.w	r8, r2, r4
 8003eba:	eb43 0905 	adc.w	r9, r3, r5
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	008b      	lsls	r3, r1, #2
 8003ed2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ed6:	0082      	lsls	r2, r0, #2
 8003ed8:	4640      	mov	r0, r8
 8003eda:	4649      	mov	r1, r9
 8003edc:	f7fc f978 	bl	80001d0 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4b49      	ldr	r3, [pc, #292]	; (800400c <UART_SetConfig+0x38c>)
 8003ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	011e      	lsls	r6, r3, #4
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	1894      	adds	r4, r2, r2
 8003efc:	60bc      	str	r4, [r7, #8]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f06:	1812      	adds	r2, r2, r0
 8003f08:	eb41 0303 	adc.w	r3, r1, r3
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	f04f 0500 	mov.w	r5, #0
 8003f14:	00dd      	lsls	r5, r3, #3
 8003f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f1a:	00d4      	lsls	r4, r2, #3
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1814      	adds	r4, r2, r0
 8003f22:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f24:	414b      	adcs	r3, r1
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f40:	0082      	lsls	r2, r0, #2
 8003f42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f46:	f7fc f943 	bl	80001d0 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <UART_SetConfig+0x38c>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <UART_SetConfig+0x38c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6e:	441e      	add	r6, r3
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	4618      	mov	r0, r3
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	1894      	adds	r4, r2, r2
 8003f7e:	603c      	str	r4, [r7, #0]
 8003f80:	415b      	adcs	r3, r3
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f88:	1812      	adds	r2, r2, r0
 8003f8a:	eb41 0303 	adc.w	r3, r1, r3
 8003f8e:	f04f 0400 	mov.w	r4, #0
 8003f92:	f04f 0500 	mov.w	r5, #0
 8003f96:	00dd      	lsls	r5, r3, #3
 8003f98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f9c:	00d4      	lsls	r4, r2, #3
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	eb12 0a00 	adds.w	sl, r2, r0
 8003fa6:	eb43 0b01 	adc.w	fp, r3, r1
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fc2:	0082      	lsls	r2, r0, #2
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <UART_SetConfig+0x38c>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a09      	ldr	r2, [pc, #36]	; (800400c <UART_SetConfig+0x38c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4432      	add	r2, r6
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	377c      	adds	r7, #124	; 0x7c
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800401e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004022:	2b84      	cmp	r3, #132	; 0x84
 8004024:	d005      	beq.n	8004032 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004026:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	3303      	adds	r3, #3
 8004030:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004044:	f000 fee8 	bl	8004e18 <vTaskStartScheduler>
  
  return osOK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd80      	pop	{r7, pc}

0800404e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800404e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004050:	b089      	sub	sp, #36	; 0x24
 8004052:	af04      	add	r7, sp, #16
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <osThreadCreate+0x54>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685c      	ldr	r4, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681d      	ldr	r5, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691e      	ldr	r6, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ffc8 	bl	8004010 <makeFreeRtosPriority>
 8004080:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408a:	9202      	str	r2, [sp, #8]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	9100      	str	r1, [sp, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4632      	mov	r2, r6
 8004094:	4629      	mov	r1, r5
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fba5 	bl	80047e6 <xTaskCreateStatic>
 800409c:	4603      	mov	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e01c      	b.n	80040dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685c      	ldr	r4, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ae:	b29e      	uxth	r6, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ffaa 	bl	8004010 <makeFreeRtosPriority>
 80040bc:	4602      	mov	r2, r0
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	9200      	str	r2, [sp, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	4632      	mov	r2, r6
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 fbe9 	bl	80048a4 <xTaskCreate>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <osDelay+0x16>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e000      	b.n	80040fe <osDelay+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe56 	bl	8004db0 <vTaskDelay>
  
  return osOK;
 8004104:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 0208 	add.w	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004126:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0208 	add.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 0208 	add.w	r2, r3, #8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c6:	d103      	bne.n	80041d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e00c      	b.n	80041ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3308      	adds	r3, #8
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e002      	b.n	80041de <vListInsert+0x2e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d2f6      	bcs.n	80041d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6852      	ldr	r2, [r2, #4]
 8004242:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d103      	bne.n	8004256 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042a2:	f001 fc43 	bl	8005b2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	3b01      	subs	r3, #1
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	441a      	add	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d114      	bne.n	8004322 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01a      	beq.n	8004336 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3310      	adds	r3, #16
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f801 	bl	800530c <xTaskRemoveFromEventList>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <xQueueGenericReset+0xcc>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	e009      	b.n	8004336 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3310      	adds	r3, #16
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fef1 	bl	800410e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff feec 	bl	800410e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004336:	f001 fc29 	bl	8005b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800433a:	2301      	movs	r3, #1
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueGenericCreate+0x2a>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	613b      	str	r3, [r7, #16]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3348      	adds	r3, #72	; 0x48
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fcb1 	bl	8005ce8 <pvPortMalloc>
 8004386:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3348      	adds	r3, #72	; 0x48
 8004396:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043a0:	79fa      	ldrb	r2, [r7, #7]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f805 	bl	80043bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043b2:	69bb      	ldr	r3, [r7, #24]
	}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e002      	b.n	80043de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043ea:	2101      	movs	r1, #1
 80043ec:	69b8      	ldr	r0, [r7, #24]
 80043ee:	f7ff ff43 	bl	8004278 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	; 0x38
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xQueueGenericSend+0x32>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <xQueueGenericSend+0x40>
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <xQueueGenericSend+0x44>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <xQueueGenericSend+0x46>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <xQueueGenericSend+0x60>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <xQueueGenericSend+0x6e>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <xQueueGenericSend+0x72>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericSend+0x74>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericSend+0x8e>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	623b      	str	r3, [r7, #32]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800448a:	f001 f8ff 	bl	800568c <xTaskGetSchedulerState>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <xQueueGenericSend+0x9e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <xQueueGenericSend+0xa2>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <xQueueGenericSend+0xa4>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <xQueueGenericSend+0xbe>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	61fb      	str	r3, [r7, #28]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ba:	f001 fb37 	bl	8005b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <xQueueGenericSend+0xd4>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d129      	bne.n	8004524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d6:	f000 f8b2 	bl	800463e <prvCopyDataToQueue>
 80044da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	3324      	adds	r3, #36	; 0x24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 ff0f 	bl	800530c <xTaskRemoveFromEventList>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044f4:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <xQueueGenericSend+0x1f8>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	e00a      	b.n	800451c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <xQueueGenericSend+0x1f8>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800451c:	f001 fb36 	bl	8005b8c <vPortExitCritical>
				return pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	e063      	b.n	80045ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800452a:	f001 fb2f 	bl	8005b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800452e:	2300      	movs	r3, #0
 8004530:	e05c      	b.n	80045ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4618      	mov	r0, r3
 800453e:	f000 ff47 	bl	80053d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004546:	f001 fb21 	bl	8005b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800454a:	f000 fce7 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800454e:	f001 faed 	bl	8005b2c <vPortEnterCritical>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004558:	b25b      	sxtb	r3, r3
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455e:	d103      	bne.n	8004568 <xQueueGenericSend+0x16c>
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800456e:	b25b      	sxtb	r3, r3
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004574:	d103      	bne.n	800457e <xQueueGenericSend+0x182>
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800457e:	f001 fb05 	bl	8005b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004582:	1d3a      	adds	r2, r7, #4
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 ff36 	bl	80053fc <xTaskCheckForTimeOut>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d124      	bne.n	80045e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004598:	f000 f90d 	bl	80047b6 <prvIsQueueFull>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	3310      	adds	r3, #16
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fe8a 	bl	80052c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b2:	f000 f8ae 	bl	8004712 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045b6:	f000 fcbf 	bl	8004f38 <xTaskResumeAll>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f af7c 	bne.w	80044ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <xQueueGenericSend+0x1f8>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	e772      	b.n	80044ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045d6:	f000 f89c 	bl	8004712 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045da:	f000 fcad 	bl	8004f38 <xTaskResumeAll>
 80045de:	e76c      	b.n	80044ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e2:	f000 f896 	bl	8004712 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045e6:	f000 fca7 	bl	8004f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3738      	adds	r7, #56	; 0x38
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60fb      	str	r3, [r7, #12]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8004620:	f001 fa84 	bl	8005b2c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004630:	f001 faac 	bl	8005b8c <vPortExitCritical>

	return uxReturn;
 8004634:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d14d      	bne.n	8004700 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 f82d 	bl	80056c8 <xTaskPriorityDisinherit>
 800466e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	e043      	b.n	8004700 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6858      	ldr	r0, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	461a      	mov	r2, r3
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	f001 ff8b 	bl	80065a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d32b      	bcc.n	8004700 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e026      	b.n	8004700 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68d8      	ldr	r0, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	461a      	mov	r2, r3
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	f001 ff71 	bl	80065a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	425b      	negs	r3, r3
 80046cc:	441a      	add	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d207      	bcs.n	80046ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	425b      	negs	r3, r3
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d105      	bne.n	8004700 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800471a:	f001 fa07 	bl	8005b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004724:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004726:	e011      	b.n	800474c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fde9 	bl	800530c <xTaskRemoveFromEventList>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004740:	f000 febe 	bl	80054c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	3b01      	subs	r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800474c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	dce9      	bgt.n	8004728 <prvUnlockQueue+0x16>
 8004754:	e000      	b.n	8004758 <prvUnlockQueue+0x46>
					break;
 8004756:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004760:	f001 fa14 	bl	8005b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004764:	f001 f9e2 	bl	8005b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800476e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004770:	e011      	b.n	8004796 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3310      	adds	r3, #16
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fdc4 	bl	800530c <xTaskRemoveFromEventList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800478a:	f000 fe99 	bl	80054c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800478e:	7bbb      	ldrb	r3, [r7, #14]
 8004790:	3b01      	subs	r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dce9      	bgt.n	8004772 <prvUnlockQueue+0x60>
 800479e:	e000      	b.n	80047a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047aa:	f001 f9ef 	bl	8005b8c <vPortExitCritical>
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047be:	f001 f9b5 	bl	8005b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d102      	bne.n	80047d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047ce:	2301      	movs	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e001      	b.n	80047d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d8:	f001 f9d8 	bl	8005b8c <vPortExitCritical>

	return xReturn;
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b08e      	sub	sp, #56	; 0x38
 80047ea:	af04      	add	r7, sp, #16
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <xTaskCreateStatic+0x2a>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	623b      	str	r3, [r7, #32]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <xTaskCreateStatic+0x46>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fb      	str	r3, [r7, #28]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800482c:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8004830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004838:	d00a      	beq.n	8004850 <xTaskCreateStatic+0x6a>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	61bb      	str	r3, [r7, #24]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01e      	beq.n	8004896 <xTaskCreateStatic+0xb0>
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01b      	beq.n	8004896 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004866:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2202      	movs	r2, #2
 800486c:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004870:	2300      	movs	r3, #0
 8004872:	9303      	str	r3, [sp, #12]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	9302      	str	r3, [sp, #8]
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f851 	bl	8004930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800488e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004890:	f000 f916 	bl	8004ac0 <prvAddNewTaskToReadyList>
 8004894:	e001      	b.n	800489a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800489a:	697b      	ldr	r3, [r7, #20]
	}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	; 0x30
 80048a8:	af04      	add	r7, sp, #16
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fa15 	bl	8005ce8 <pvPortMalloc>
 80048be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048c6:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80048ca:	f001 fa0d 	bl	8005ce8 <pvPortMalloc>
 80048ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
 80048dc:	e005      	b.n	80048ea <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f001 face 	bl	8005e80 <vPortFree>
 80048e4:	e001      	b.n	80048ea <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d017      	beq.n	8004920 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	2300      	movs	r3, #0
 80048fc:	9303      	str	r3, [sp, #12]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	9302      	str	r3, [sp, #8]
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f80e 	bl	8004930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004914:	69f8      	ldr	r0, [r7, #28]
 8004916:	f000 f8d3 	bl	8004ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e002      	b.n	8004926 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004926:	69bb      	ldr	r3, [r7, #24]
	}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004948:	3b01      	subs	r3, #1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	617b      	str	r3, [r7, #20]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01f      	beq.n	80049be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e012      	b.n	80049aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	7819      	ldrb	r1, [r3, #0]
 800498c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	3334      	adds	r3, #52	; 0x34
 8004994:	460a      	mov	r2, r1
 8004996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	d9e9      	bls.n	8004984 <prvInitialiseNewTask+0x54>
 80049b0:	e000      	b.n	80049b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80049b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049bc:	e003      	b.n	80049c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d901      	bls.n	80049d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049cc:	2306      	movs	r3, #6
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2200      	movs	r2, #0
 80049e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fbb1 	bl	800414e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	3318      	adds	r3, #24
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fbac 	bl	800414e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	f1c3 0207 	rsb	r2, r3, #7
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	3350      	adds	r3, #80	; 0x50
 8004a20:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fdca 	bl	80065c0 <memset>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a4c:	f04f 0201 	mov.w	r2, #1
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	f243 320e 	movw	r2, #13070	; 0x330e
 8004a5e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8004a68:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f241 2234 	movw	r2, #4660	; 0x1234
 8004a72:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	f24e 626d 	movw	r2, #58989	; 0xe66d
 8004a7c:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 8004a86:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	220b      	movs	r2, #11
 8004a96:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	69b8      	ldr	r0, [r7, #24]
 8004aa0:	f000 fefe 	bl	80058a0 <pxPortInitialiseStack>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <prvInitialiseNewTask+0x186>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ac8:	f001 f830 	bl	8005b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004acc:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <prvAddNewTaskToReadyList+0xb8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <prvAddNewTaskToReadyList+0xb8>)
 8004ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <prvAddNewTaskToReadyList+0xbc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <prvAddNewTaskToReadyList+0xbc>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ae4:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <prvAddNewTaskToReadyList+0xb8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d110      	bne.n	8004b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004aec:	f000 fd0c 	bl	8005508 <prvInitialiseTaskLists>
 8004af0:	e00d      	b.n	8004b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <prvAddNewTaskToReadyList+0xc0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <prvAddNewTaskToReadyList+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d802      	bhi.n	8004b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <prvAddNewTaskToReadyList+0xbc>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <prvAddNewTaskToReadyList+0xc4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <prvAddNewTaskToReadyList+0xc4>)
 8004b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <prvAddNewTaskToReadyList+0xc8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <prvAddNewTaskToReadyList+0xc8>)
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <prvAddNewTaskToReadyList+0xcc>)
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7ff fb11 	bl	8004168 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b46:	f001 f821 	bl	8005b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <prvAddNewTaskToReadyList+0xc0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00e      	beq.n	8004b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <prvAddNewTaskToReadyList+0xbc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d207      	bcs.n	8004b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <prvAddNewTaskToReadyList+0xd0>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20001064 	.word	0x20001064
 8004b7c:	20000f64 	.word	0x20000f64
 8004b80:	20001070 	.word	0x20001070
 8004b84:	20001080 	.word	0x20001080
 8004b88:	2000106c 	.word	0x2000106c
 8004b8c:	20000f68 	.word	0x20000f68
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004b9c:	f000 ffc6 	bl	8005b2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <vTaskDelete+0x18>
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <vTaskDelete+0xf8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e000      	b.n	8004bae <vTaskDelete+0x1a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fb34 	bl	8004222 <uxListRemove>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d115      	bne.n	8004bec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4932      	ldr	r1, [pc, #200]	; (8004c90 <vTaskDelete+0xfc>)
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <vTaskDelete+0x58>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	2201      	movs	r2, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43da      	mvns	r2, r3
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <vTaskDelete+0x100>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4013      	ands	r3, r2
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <vTaskDelete+0x100>)
 8004bea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fb12 	bl	8004222 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <vTaskDelete+0x104>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <vTaskDelete+0x104>)
 8004c06:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <vTaskDelete+0xf8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d10b      	bne.n	8004c2a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4820      	ldr	r0, [pc, #128]	; (8004c9c <vTaskDelete+0x108>)
 8004c1a:	f7ff faa5 	bl	8004168 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <vTaskDelete+0x10c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <vTaskDelete+0x10c>)
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e009      	b.n	8004c3e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <vTaskDelete+0x110>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <vTaskDelete+0x110>)
 8004c32:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fcd5 	bl	80055e4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004c3a:	f000 fd07 	bl	800564c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004c3e:	f000 ffa5 	bl	8005b8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <vTaskDelete+0x114>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01b      	beq.n	8004c82 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <vTaskDelete+0xf8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d116      	bne.n	8004c82 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004c54:	4b15      	ldr	r3, [pc, #84]	; (8004cac <vTaskDelete+0x118>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <vTaskDelete+0xde>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60bb      	str	r3, [r7, #8]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <vTaskDelete+0x11c>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000f64 	.word	0x20000f64
 8004c90:	20000f68 	.word	0x20000f68
 8004c94:	2000106c 	.word	0x2000106c
 8004c98:	20001080 	.word	0x20001080
 8004c9c:	20001038 	.word	0x20001038
 8004ca0:	2000104c 	.word	0x2000104c
 8004ca4:	20001064 	.word	0x20001064
 8004ca8:	20001070 	.word	0x20001070
 8004cac:	2000108c 	.word	0x2000108c
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <vTaskDelayUntil+0x2a>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	617b      	str	r3, [r7, #20]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <vTaskDelayUntil+0x46>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	613b      	str	r3, [r7, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <vTaskDelayUntil+0xf0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <vTaskDelayUntil+0x64>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60fb      	str	r3, [r7, #12]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004d18:	f000 f900 	bl	8004f1c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004d1c:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <vTaskDelayUntil+0xf4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4413      	add	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20b      	bcs.n	8004d4e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d211      	bcs.n	8004d64 <vTaskDelayUntil+0xb0>
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d90d      	bls.n	8004d64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4c:	e00a      	b.n	8004d64 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d303      	bcc.n	8004d60 <vTaskDelayUntil+0xac>
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d901      	bls.n	8004d64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fd2b 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004d7e:	f000 f8db 	bl	8004f38 <xTaskResumeAll>
 8004d82:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <vTaskDelayUntil+0xf8>)
 8004d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d9a:	bf00      	nop
 8004d9c:	3728      	adds	r7, #40	; 0x28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000108c 	.word	0x2000108c
 8004da8:	20001068 	.word	0x20001068
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d017      	beq.n	8004df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <vTaskDelay+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <vTaskDelay+0x30>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60bb      	str	r3, [r7, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004de0:	f000 f89c 	bl	8004f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004de4:	2100      	movs	r1, #0
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fcf4 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dec:	f000 f8a4 	bl	8004f38 <xTaskResumeAll>
 8004df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <vTaskDelay+0x64>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	2000108c 	.word	0x2000108c
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e26:	463a      	mov	r2, r7
 8004e28:	1d39      	adds	r1, r7, #4
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fce2 	bl	80007f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	9202      	str	r2, [sp, #8]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	460a      	mov	r2, r1
 8004e46:	4921      	ldr	r1, [pc, #132]	; (8004ecc <vTaskStartScheduler+0xb4>)
 8004e48:	4821      	ldr	r0, [pc, #132]	; (8004ed0 <vTaskStartScheduler+0xb8>)
 8004e4a:	f7ff fccc 	bl	80047e6 <xTaskCreateStatic>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <vTaskStartScheduler+0xbc>)
 8004e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e54:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <vTaskStartScheduler+0xbc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e001      	b.n	8004e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11b      	bne.n	8004ea4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	613b      	str	r3, [r7, #16]
}
 8004e7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <vTaskStartScheduler+0xc0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3350      	adds	r3, #80	; 0x50
 8004e86:	4a15      	ldr	r2, [pc, #84]	; (8004edc <vTaskStartScheduler+0xc4>)
 8004e88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <vTaskStartScheduler+0xc8>)
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <vTaskStartScheduler+0xcc>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e98:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <vTaskStartScheduler+0xd0>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e9e:	f000 fd87 	bl	80059b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ea2:	e00e      	b.n	8004ec2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eaa:	d10a      	bne.n	8004ec2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60fb      	str	r3, [r7, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <vTaskStartScheduler+0xa8>
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	08006a18 	.word	0x08006a18
 8004ed0:	080054d9 	.word	0x080054d9
 8004ed4:	20001088 	.word	0x20001088
 8004ed8:	20000f64 	.word	0x20000f64
 8004edc:	20000010 	.word	0x20000010
 8004ee0:	20001084 	.word	0x20001084
 8004ee4:	20001070 	.word	0x20001070
 8004ee8:	20001068 	.word	0x20001068

08004eec <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	607b      	str	r3, [r7, #4]
}
 8004f04:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <vTaskEndScheduler+0x2c>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8004f0c:	f000 fdf2 	bl	8005af4 <vPortEndScheduler>
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20001070 	.word	0x20001070

08004f1c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <vTaskSuspendAll+0x18>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <vTaskSuspendAll+0x18>)
 8004f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	2000108c 	.word	0x2000108c

08004f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f46:	4b41      	ldr	r3, [pc, #260]	; (800504c <xTaskResumeAll+0x114>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	603b      	str	r3, [r7, #0]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f64:	f000 fde2 	bl	8005b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <xTaskResumeAll+0x114>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4a37      	ldr	r2, [pc, #220]	; (800504c <xTaskResumeAll+0x114>)
 8004f70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f72:	4b36      	ldr	r3, [pc, #216]	; (800504c <xTaskResumeAll+0x114>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d161      	bne.n	800503e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f7a:	4b35      	ldr	r3, [pc, #212]	; (8005050 <xTaskResumeAll+0x118>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05d      	beq.n	800503e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f82:	e02e      	b.n	8004fe2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <xTaskResumeAll+0x11c>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3318      	adds	r3, #24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f946 	bl	8004222 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f941 	bl	8004222 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <xTaskResumeAll+0x120>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <xTaskResumeAll+0x120>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a27      	ldr	r2, [pc, #156]	; (800505c <xTaskResumeAll+0x124>)
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7ff f8cd 	bl	8004168 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <xTaskResumeAll+0x128>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <xTaskResumeAll+0x12c>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xTaskResumeAll+0x11c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1cc      	bne.n	8004f84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ff0:	f000 fb2c 	bl	800564c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <xTaskResumeAll+0x130>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005000:	f000 f846 	bl	8005090 <xTaskIncrementTick>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <xTaskResumeAll+0x12c>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <xTaskResumeAll+0x130>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <xTaskResumeAll+0x12c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800502a:	2301      	movs	r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <xTaskResumeAll+0x134>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f000 fda5 	bl	8005b8c <vPortExitCritical>

	return xAlreadyYielded;
 8005042:	68bb      	ldr	r3, [r7, #8]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2000108c 	.word	0x2000108c
 8005050:	20001064 	.word	0x20001064
 8005054:	20001024 	.word	0x20001024
 8005058:	2000106c 	.word	0x2000106c
 800505c:	20000f68 	.word	0x20000f68
 8005060:	20000f64 	.word	0x20000f64
 8005064:	20001078 	.word	0x20001078
 8005068:	20001074 	.word	0x20001074
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <xTaskGetTickCount+0x1c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800507c:	687b      	ldr	r3, [r7, #4]
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20001068 	.word	0x20001068

08005090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509a:	4b4e      	ldr	r3, [pc, #312]	; (80051d4 <xTaskIncrementTick+0x144>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 808e 	bne.w	80051c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050a4:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <xTaskIncrementTick+0x148>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050ac:	4a4a      	ldr	r2, [pc, #296]	; (80051d8 <xTaskIncrementTick+0x148>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d120      	bne.n	80050fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050b8:	4b48      	ldr	r3, [pc, #288]	; (80051dc <xTaskIncrementTick+0x14c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	603b      	str	r3, [r7, #0]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <xTaskIncrementTick+0x46>
 80050d8:	4b40      	ldr	r3, [pc, #256]	; (80051dc <xTaskIncrementTick+0x14c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <xTaskIncrementTick+0x150>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3e      	ldr	r2, [pc, #248]	; (80051dc <xTaskIncrementTick+0x14c>)
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <xTaskIncrementTick+0x150>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <xTaskIncrementTick+0x154>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a3c      	ldr	r2, [pc, #240]	; (80051e4 <xTaskIncrementTick+0x154>)
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	f000 faa9 	bl	800564c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050fa:	4b3b      	ldr	r3, [pc, #236]	; (80051e8 <xTaskIncrementTick+0x158>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d348      	bcc.n	8005196 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <xTaskIncrementTick+0x14c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510e:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <xTaskIncrementTick+0x158>)
 8005110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005114:	601a      	str	r2, [r3, #0]
					break;
 8005116:	e03e      	b.n	8005196 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <xTaskIncrementTick+0x14c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d203      	bcs.n	8005138 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005130:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <xTaskIncrementTick+0x158>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005136:	e02e      	b.n	8005196 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3304      	adds	r3, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f870 	bl	8004222 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3318      	adds	r3, #24
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f867 	bl	8004222 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	2201      	movs	r2, #1
 800515a:	409a      	lsls	r2, r3
 800515c:	4b23      	ldr	r3, [pc, #140]	; (80051ec <xTaskIncrementTick+0x15c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	4a22      	ldr	r2, [pc, #136]	; (80051ec <xTaskIncrementTick+0x15c>)
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <xTaskIncrementTick+0x160>)
 8005174:	441a      	add	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7fe fff3 	bl	8004168 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <xTaskIncrementTick+0x164>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	429a      	cmp	r2, r3
 800518e:	d3b9      	bcc.n	8005104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005194:	e7b6      	b.n	8005104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <xTaskIncrementTick+0x164>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519c:	4914      	ldr	r1, [pc, #80]	; (80051f0 <xTaskIncrementTick+0x160>)
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d901      	bls.n	80051b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <xTaskIncrementTick+0x168>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e004      	b.n	80051ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <xTaskIncrementTick+0x16c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <xTaskIncrementTick+0x16c>)
 80051c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051ca:	697b      	ldr	r3, [r7, #20]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	2000108c 	.word	0x2000108c
 80051d8:	20001068 	.word	0x20001068
 80051dc:	2000101c 	.word	0x2000101c
 80051e0:	20001020 	.word	0x20001020
 80051e4:	2000107c 	.word	0x2000107c
 80051e8:	20001084 	.word	0x20001084
 80051ec:	2000106c 	.word	0x2000106c
 80051f0:	20000f68 	.word	0x20000f68
 80051f4:	20000f64 	.word	0x20000f64
 80051f8:	20001078 	.word	0x20001078
 80051fc:	20001074 	.word	0x20001074

08005200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005206:	4b29      	ldr	r3, [pc, #164]	; (80052ac <vTaskSwitchContext+0xac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800520e:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <vTaskSwitchContext+0xb0>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005214:	e044      	b.n	80052a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005216:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <vTaskSwitchContext+0xb0>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <vTaskSwitchContext+0xb4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	fab3 f383 	clz	r3, r3
 8005228:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	f1c3 031f 	rsb	r3, r3, #31
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	4921      	ldr	r1, [pc, #132]	; (80052b8 <vTaskSwitchContext+0xb8>)
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	607b      	str	r3, [r7, #4]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <vTaskSwitchContext+0x5a>
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <vTaskSwitchContext+0xb8>)
 8005268:	4413      	add	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3308      	adds	r3, #8
 800527e:	429a      	cmp	r2, r3
 8005280:	d104      	bne.n	800528c <vTaskSwitchContext+0x8c>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <vTaskSwitchContext+0xbc>)
 8005294:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <vTaskSwitchContext+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3350      	adds	r3, #80	; 0x50
 800529c:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <vTaskSwitchContext+0xc0>)
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2000108c 	.word	0x2000108c
 80052b0:	20001078 	.word	0x20001078
 80052b4:	2000106c 	.word	0x2000106c
 80052b8:	20000f68 	.word	0x20000f68
 80052bc:	20000f64 	.word	0x20000f64
 80052c0:	20000010 	.word	0x20000010

080052c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60fb      	str	r3, [r7, #12]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <vTaskPlaceOnEventList+0x44>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3318      	adds	r3, #24
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fe ff5c 	bl	80041b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052f8:	2101      	movs	r1, #1
 80052fa:	6838      	ldr	r0, [r7, #0]
 80052fc:	f000 fa6a 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000f64 	.word	0x20000f64

0800530c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60fb      	str	r3, [r7, #12]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3318      	adds	r3, #24
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe ff70 	bl	8004222 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <xTaskRemoveFromEventList+0xac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11c      	bne.n	8005384 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3304      	adds	r3, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe ff67 	bl	8004222 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	2201      	movs	r2, #1
 800535a:	409a      	lsls	r2, r3
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <xTaskRemoveFromEventList+0xb0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4313      	orrs	r3, r2
 8005362:	4a16      	ldr	r2, [pc, #88]	; (80053bc <xTaskRemoveFromEventList+0xb0>)
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <xTaskRemoveFromEventList+0xb4>)
 8005374:	441a      	add	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe fef3 	bl	8004168 <vListInsertEnd>
 8005382:	e005      	b.n	8005390 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3318      	adds	r3, #24
 8005388:	4619      	mov	r1, r3
 800538a:	480e      	ldr	r0, [pc, #56]	; (80053c4 <xTaskRemoveFromEventList+0xb8>)
 800538c:	f7fe feec 	bl	8004168 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <xTaskRemoveFromEventList+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d905      	bls.n	80053aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <xTaskRemoveFromEventList+0xc0>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e001      	b.n	80053ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053ae:	697b      	ldr	r3, [r7, #20]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2000108c 	.word	0x2000108c
 80053bc:	2000106c 	.word	0x2000106c
 80053c0:	20000f68 	.word	0x20000f68
 80053c4:	20001024 	.word	0x20001024
 80053c8:	20000f64 	.word	0x20000f64
 80053cc:	20001078 	.word	0x20001078

080053d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <vTaskInternalSetTimeOutState+0x24>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <vTaskInternalSetTimeOutState+0x28>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	2000107c 	.word	0x2000107c
 80053f8:	20001068 	.word	0x20001068

080053fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	613b      	str	r3, [r7, #16]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800543e:	f000 fb75 	bl	8005b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <xTaskCheckForTimeOut+0xbc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545a:	d102      	bne.n	8005462 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e023      	b.n	80054aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <xTaskCheckForTimeOut+0xc0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d007      	beq.n	800547e <xTaskCheckForTimeOut+0x82>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e015      	b.n	80054aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	d20b      	bcs.n	80054a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff9b 	bl	80053d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e004      	b.n	80054aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054aa:	f000 fb6f 	bl	8005b8c <vPortExitCritical>

	return xReturn;
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20001068 	.word	0x20001068
 80054bc:	2000107c 	.word	0x2000107c

080054c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <vTaskMissedYield+0x14>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20001078 	.word	0x20001078

080054d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054e0:	f000 f852 	bl	8005588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <prvIdleTask+0x28>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d9f9      	bls.n	80054e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <prvIdleTask+0x2c>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054fc:	e7f0      	b.n	80054e0 <prvIdleTask+0x8>
 80054fe:	bf00      	nop
 8005500:	20000f68 	.word	0x20000f68
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	e00c      	b.n	800552e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <prvInitialiseTaskLists+0x60>)
 8005520:	4413      	add	r3, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fdf3 	bl	800410e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3301      	adds	r3, #1
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b06      	cmp	r3, #6
 8005532:	d9ef      	bls.n	8005514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005534:	480d      	ldr	r0, [pc, #52]	; (800556c <prvInitialiseTaskLists+0x64>)
 8005536:	f7fe fdea 	bl	800410e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800553a:	480d      	ldr	r0, [pc, #52]	; (8005570 <prvInitialiseTaskLists+0x68>)
 800553c:	f7fe fde7 	bl	800410e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005540:	480c      	ldr	r0, [pc, #48]	; (8005574 <prvInitialiseTaskLists+0x6c>)
 8005542:	f7fe fde4 	bl	800410e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005546:	480c      	ldr	r0, [pc, #48]	; (8005578 <prvInitialiseTaskLists+0x70>)
 8005548:	f7fe fde1 	bl	800410e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800554c:	480b      	ldr	r0, [pc, #44]	; (800557c <prvInitialiseTaskLists+0x74>)
 800554e:	f7fe fdde 	bl	800410e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <prvInitialiseTaskLists+0x78>)
 8005554:	4a05      	ldr	r2, [pc, #20]	; (800556c <prvInitialiseTaskLists+0x64>)
 8005556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvInitialiseTaskLists+0x7c>)
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <prvInitialiseTaskLists+0x68>)
 800555c:	601a      	str	r2, [r3, #0]
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000f68 	.word	0x20000f68
 800556c:	20000ff4 	.word	0x20000ff4
 8005570:	20001008 	.word	0x20001008
 8005574:	20001024 	.word	0x20001024
 8005578:	20001038 	.word	0x20001038
 800557c:	20001050 	.word	0x20001050
 8005580:	2000101c 	.word	0x2000101c
 8005584:	20001020 	.word	0x20001020

08005588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558e:	e019      	b.n	80055c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005590:	f000 facc 	bl	8005b2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <prvCheckTasksWaitingTermination+0x50>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fe3e 	bl	8004222 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ba:	f000 fae7 	bl	8005b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f810 	bl	80055e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e1      	bne.n	8005590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20001038 	.word	0x20001038
 80055dc:	20001064 	.word	0x20001064
 80055e0:	2000104c 	.word	0x2000104c

080055e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3350      	adds	r3, #80	; 0x50
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f807 	bl	8006604 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fc3b 	bl	8005e80 <vPortFree>
				vPortFree( pxTCB );
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fc38 	bl	8005e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005610:	e018      	b.n	8005644 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8005618:	2b01      	cmp	r3, #1
 800561a:	d103      	bne.n	8005624 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fc2f 	bl	8005e80 <vPortFree>
	}
 8005622:	e00f      	b.n	8005644 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 800562a:	2b02      	cmp	r3, #2
 800562c:	d00a      	beq.n	8005644 <prvDeleteTCB+0x60>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <prvDeleteTCB+0x5e>
	}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <prvResetNextTaskUnblockTime+0x38>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvResetNextTaskUnblockTime+0x3c>)
 800565e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005664:	e008      	b.n	8005678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <prvResetNextTaskUnblockTime+0x38>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a04      	ldr	r2, [pc, #16]	; (8005688 <prvResetNextTaskUnblockTime+0x3c>)
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	2000101c 	.word	0x2000101c
 8005688:	20001084 	.word	0x20001084

0800568c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <xTaskGetSchedulerState+0x34>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800569a:	2301      	movs	r3, #1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	e008      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <xTaskGetSchedulerState+0x38>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056a8:	2302      	movs	r3, #2
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e001      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056b2:	687b      	ldr	r3, [r7, #4]
	}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20001070 	.word	0x20001070
 80056c4:	2000108c 	.word	0x2000108c

080056c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d06e      	beq.n	80057bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056de:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <xTaskPriorityDisinherit+0x100>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d00a      	beq.n	80056fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60fb      	str	r3, [r7, #12]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60bb      	str	r3, [r7, #8]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	1e5a      	subs	r2, r3, #1
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	429a      	cmp	r2, r3
 8005730:	d044      	beq.n	80057bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005736:	2b00      	cmp	r3, #0
 8005738:	d140      	bne.n	80057bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3304      	adds	r3, #4
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd6f 	bl	8004222 <uxListRemove>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d115      	bne.n	8005776 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	491f      	ldr	r1, [pc, #124]	; (80057cc <xTaskPriorityDisinherit+0x104>)
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xTaskPriorityDisinherit+0xae>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	2201      	movs	r2, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43da      	mvns	r2, r3
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <xTaskPriorityDisinherit+0x108>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4013      	ands	r3, r2
 8005772:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <xTaskPriorityDisinherit+0x108>)
 8005774:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	f1c3 0207 	rsb	r2, r3, #7
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	2201      	movs	r2, #1
 8005790:	409a      	lsls	r2, r3
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <xTaskPriorityDisinherit+0x108>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4313      	orrs	r3, r2
 8005798:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <xTaskPriorityDisinherit+0x108>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a08      	ldr	r2, [pc, #32]	; (80057cc <xTaskPriorityDisinherit+0x104>)
 80057aa:	441a      	add	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fcd8 	bl	8004168 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000f64 	.word	0x20000f64
 80057cc:	20000f68 	.word	0x20000f68
 80057d0:	2000106c 	.word	0x2000106c

080057d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fd19 	bl	8004222 <uxListRemove>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	2201      	movs	r2, #1
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	4b21      	ldr	r3, [pc, #132]	; (800588c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4013      	ands	r3, r2
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <prvAddCurrentTaskToDelayedList+0xb8>)
 800580c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d10a      	bne.n	800582c <prvAddCurrentTaskToDelayedList+0x58>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	481a      	ldr	r0, [pc, #104]	; (8005890 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005826:	f7fe fc9f 	bl	8004168 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800582a:	e026      	b.n	800587a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005834:	4b14      	ldr	r3, [pc, #80]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	429a      	cmp	r2, r3
 8005842:	d209      	bcs.n	8005858 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fe fcad 	bl	80041b0 <vListInsert>
}
 8005856:	e010      	b.n	800587a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <prvAddCurrentTaskToDelayedList+0xc4>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe fca3 	bl	80041b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <prvAddCurrentTaskToDelayedList+0xc8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	429a      	cmp	r2, r3
 8005872:	d202      	bcs.n	800587a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005874:	4a09      	ldr	r2, [pc, #36]	; (800589c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6013      	str	r3, [r2, #0]
}
 800587a:	bf00      	nop
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20001068 	.word	0x20001068
 8005888:	20000f64 	.word	0x20000f64
 800588c:	2000106c 	.word	0x2000106c
 8005890:	20001050 	.word	0x20001050
 8005894:	20001020 	.word	0x20001020
 8005898:	2000101c 	.word	0x2000101c
 800589c:	20001084 	.word	0x20001084

080058a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3b04      	subs	r3, #4
 80058b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b04      	subs	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3b04      	subs	r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058d0:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <pxPortInitialiseStack+0x64>)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3b14      	subs	r3, #20
 80058da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3b04      	subs	r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f06f 0202 	mvn.w	r2, #2
 80058ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b20      	subs	r3, #32
 80058f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	08005909 	.word	0x08005909

08005908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <prvTaskExitError+0x54>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d00a      	beq.n	8005932 <prvTaskExitError+0x2a>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60fb      	str	r3, [r7, #12]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <prvTaskExitError+0x28>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60bb      	str	r3, [r7, #8]
}
 8005944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005946:	bf00      	nop
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0fc      	beq.n	8005948 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	2000000c 	.word	0x2000000c

08005960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <pxCurrentTCBConst2>)
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f380 8809 	msr	PSP, r0
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	4770      	bx	lr
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst2>:
 8005980:	20000f64 	.word	0x20000f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005988:	4808      	ldr	r0, [pc, #32]	; (80059ac <prvPortStartFirstTask+0x24>)
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f380 8808 	msr	MSP, r0
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8814 	msr	CONTROL, r0
 800599a:	b662      	cpsie	i
 800599c:	b661      	cpsie	f
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	df00      	svc	0
 80059a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059aa:	bf00      	nop
 80059ac:	e000ed08 	.word	0xe000ed08

080059b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059b6:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <xPortStartScheduler+0x120>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a46      	ldr	r2, [pc, #280]	; (8005ad4 <xPortStartScheduler+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10a      	bne.n	80059d6 <xPortStartScheduler+0x26>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	613b      	str	r3, [r7, #16]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <xPortStartScheduler+0x120>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <xPortStartScheduler+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10a      	bne.n	80059f6 <xPortStartScheduler+0x46>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <xPortStartScheduler+0x12c>)
 80059f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <xPortStartScheduler+0x130>)
 8005a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a24:	e009      	b.n	8005a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d0ef      	beq.n	8005a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f1c3 0307 	rsb	r3, r3, #7
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d00a      	beq.n	8005a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60bb      	str	r3, [r7, #8]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <xPortStartScheduler+0x134>)
 8005a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <xPortStartScheduler+0x138>)
 8005a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a9e:	f000 f8f5 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <xPortStartScheduler+0x13c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005aa8:	f000 f914 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <xPortStartScheduler+0x140>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <xPortStartScheduler+0x140>)
 8005ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ab8:	f7ff ff66 	bl	8005988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005abc:	f7ff fba0 	bl	8005200 <vTaskSwitchContext>
	prvTaskExitError();
 8005ac0:	f7ff ff22 	bl	8005908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	e000ed00 	.word	0xe000ed00
 8005ad4:	410fc271 	.word	0x410fc271
 8005ad8:	410fc270 	.word	0x410fc270
 8005adc:	e000e400 	.word	0xe000e400
 8005ae0:	20001090 	.word	0x20001090
 8005ae4:	20001094 	.word	0x20001094
 8005ae8:	e000ed20 	.word	0xe000ed20
 8005aec:	2000000c 	.word	0x2000000c
 8005af0:	e000ef34 	.word	0xe000ef34

08005af4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <vPortEndScheduler+0x34>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b02:	d00a      	beq.n	8005b1a <vPortEndScheduler+0x26>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	607b      	str	r3, [r7, #4]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <vPortEndScheduler+0x24>
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c

08005b2c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	607b      	str	r3, [r7, #4]
}
 8005b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <vPortEnterCritical+0x58>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a0d      	ldr	r2, [pc, #52]	; (8005b84 <vPortEnterCritical+0x58>)
 8005b4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <vPortEnterCritical+0x58>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10f      	bne.n	8005b78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <vPortEnterCritical+0x5c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vPortEnterCritical+0x4a>
	}
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <vPortExitCritical+0x50>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <vPortExitCritical+0x24>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	607b      	str	r3, [r7, #4]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <vPortExitCritical+0x50>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <vPortExitCritical+0x50>)
 8005bb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <vPortExitCritical+0x50>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <vPortExitCritical+0x42>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	2000000c 	.word	0x2000000c

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7ff faf6 	bl	8005200 <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	20000f64 	.word	0x20000f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7ff fa15 	bl	8005090 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <SysTick_Handler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cf4:	f7ff f912 	bl	8004f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <pvPortMalloc+0x180>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d00:	f000 f920 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <pvPortMalloc+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d014      	beq.n	8005d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0x6c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d06e      	beq.n	8005e38 <pvPortMalloc+0x150>
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <pvPortMalloc+0x188>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d869      	bhi.n	8005e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d6e:	e004      	b.n	8005d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <pvPortMalloc+0xa4>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <pvPortMalloc+0x180>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d050      	beq.n	8005e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	2308      	movs	r3, #8
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d91f      	bls.n	8005df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <pvPortMalloc+0xf8>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	613b      	str	r3, [r7, #16]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005df2:	69b8      	ldr	r0, [r7, #24]
 8005df4:	f000 f908 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <pvPortMalloc+0x188>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <pvPortMalloc+0x188>)
 8005e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <pvPortMalloc+0x188>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <pvPortMalloc+0x188>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x190>)
 8005e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <pvPortMalloc+0x184>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <pvPortMalloc+0x194>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <pvPortMalloc+0x194>)
 8005e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e38:	f7ff f87e 	bl	8004f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x174>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x172>
	return pvReturn;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200090a0 	.word	0x200090a0
 8005e6c:	200090b4 	.word	0x200090b4
 8005e70:	200090a4 	.word	0x200090a4
 8005e74:	20009098 	.word	0x20009098
 8005e78:	200090a8 	.word	0x200090a8
 8005e7c:	200090ac 	.word	0x200090ac

08005e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04d      	beq.n	8005f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e92:	2308      	movs	r3, #8
 8005e94:	425b      	negs	r3, r3
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <vPortFree+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vPortFree+0x44>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <vPortFree+0x62>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <vPortFree+0xb8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7ff f808 	bl	8004f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortFree+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f874 	bl	8006008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xc0>)
 8005f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f2a:	f7ff f805 	bl	8004f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200090b4 	.word	0x200090b4
 8005f3c:	200090a4 	.word	0x200090a4
 8005f40:	200090b0 	.word	0x200090b0

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20001098 	.word	0x20001098
 8005ff4:	20009098 	.word	0x20009098
 8005ff8:	200090a0 	.word	0x200090a0
 8005ffc:	200090a8 	.word	0x200090a8
 8006000:	200090a4 	.word	0x200090a4
 8006004:	200090b4 	.word	0x200090b4

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20009098 	.word	0x20009098
 80060b8:	200090a0 	.word	0x200090a0

080060bc <__errno>:
 80060bc:	4b01      	ldr	r3, [pc, #4]	; (80060c4 <__errno+0x8>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010

080060c8 <__libc_init_array>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4d0d      	ldr	r5, [pc, #52]	; (8006100 <__libc_init_array+0x38>)
 80060cc:	4c0d      	ldr	r4, [pc, #52]	; (8006104 <__libc_init_array+0x3c>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	2600      	movs	r6, #0
 80060d4:	42a6      	cmp	r6, r4
 80060d6:	d109      	bne.n	80060ec <__libc_init_array+0x24>
 80060d8:	4d0b      	ldr	r5, [pc, #44]	; (8006108 <__libc_init_array+0x40>)
 80060da:	4c0c      	ldr	r4, [pc, #48]	; (800610c <__libc_init_array+0x44>)
 80060dc:	f000 fc6c 	bl	80069b8 <_init>
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	2600      	movs	r6, #0
 80060e6:	42a6      	cmp	r6, r4
 80060e8:	d105      	bne.n	80060f6 <__libc_init_array+0x2e>
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f0:	4798      	blx	r3
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7ee      	b.n	80060d4 <__libc_init_array+0xc>
 80060f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fa:	4798      	blx	r3
 80060fc:	3601      	adds	r6, #1
 80060fe:	e7f2      	b.n	80060e6 <__libc_init_array+0x1e>
 8006100:	08006a44 	.word	0x08006a44
 8006104:	08006a44 	.word	0x08006a44
 8006108:	08006a44 	.word	0x08006a44
 800610c:	08006a4c 	.word	0x08006a4c

08006110 <malloc>:
 8006110:	4b02      	ldr	r3, [pc, #8]	; (800611c <malloc+0xc>)
 8006112:	4601      	mov	r1, r0
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f000 b803 	b.w	8006120 <_malloc_r>
 800611a:	bf00      	nop
 800611c:	20000010 	.word	0x20000010

08006120 <_malloc_r>:
 8006120:	f101 030b 	add.w	r3, r1, #11
 8006124:	2b16      	cmp	r3, #22
 8006126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	4605      	mov	r5, r0
 800612c:	d906      	bls.n	800613c <_malloc_r+0x1c>
 800612e:	f033 0707 	bics.w	r7, r3, #7
 8006132:	d504      	bpl.n	800613e <_malloc_r+0x1e>
 8006134:	230c      	movs	r3, #12
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	2400      	movs	r4, #0
 800613a:	e1ae      	b.n	800649a <_malloc_r+0x37a>
 800613c:	2710      	movs	r7, #16
 800613e:	42b9      	cmp	r1, r7
 8006140:	d8f8      	bhi.n	8006134 <_malloc_r+0x14>
 8006142:	4628      	mov	r0, r5
 8006144:	f000 fa44 	bl	80065d0 <__malloc_lock>
 8006148:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800614c:	4ec3      	ldr	r6, [pc, #780]	; (800645c <_malloc_r+0x33c>)
 800614e:	d238      	bcs.n	80061c2 <_malloc_r+0xa2>
 8006150:	f107 0208 	add.w	r2, r7, #8
 8006154:	4432      	add	r2, r6
 8006156:	f1a2 0108 	sub.w	r1, r2, #8
 800615a:	6854      	ldr	r4, [r2, #4]
 800615c:	428c      	cmp	r4, r1
 800615e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006162:	d102      	bne.n	800616a <_malloc_r+0x4a>
 8006164:	68d4      	ldr	r4, [r2, #12]
 8006166:	42a2      	cmp	r2, r4
 8006168:	d010      	beq.n	800618c <_malloc_r+0x6c>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	60ca      	str	r2, [r1, #12]
 8006176:	4423      	add	r3, r4
 8006178:	6091      	str	r1, [r2, #8]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fa2a 	bl	80065dc <__malloc_unlock>
 8006188:	3408      	adds	r4, #8
 800618a:	e186      	b.n	800649a <_malloc_r+0x37a>
 800618c:	3302      	adds	r3, #2
 800618e:	4ab4      	ldr	r2, [pc, #720]	; (8006460 <_malloc_r+0x340>)
 8006190:	6934      	ldr	r4, [r6, #16]
 8006192:	4294      	cmp	r4, r2
 8006194:	4611      	mov	r1, r2
 8006196:	d077      	beq.n	8006288 <_malloc_r+0x168>
 8006198:	6860      	ldr	r0, [r4, #4]
 800619a:	f020 0c03 	bic.w	ip, r0, #3
 800619e:	ebac 0007 	sub.w	r0, ip, r7
 80061a2:	280f      	cmp	r0, #15
 80061a4:	dd48      	ble.n	8006238 <_malloc_r+0x118>
 80061a6:	19e1      	adds	r1, r4, r7
 80061a8:	f040 0301 	orr.w	r3, r0, #1
 80061ac:	f047 0701 	orr.w	r7, r7, #1
 80061b0:	6067      	str	r7, [r4, #4]
 80061b2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80061b6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80061ba:	604b      	str	r3, [r1, #4]
 80061bc:	f844 000c 	str.w	r0, [r4, ip]
 80061c0:	e7df      	b.n	8006182 <_malloc_r+0x62>
 80061c2:	0a7b      	lsrs	r3, r7, #9
 80061c4:	d02a      	beq.n	800621c <_malloc_r+0xfc>
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d812      	bhi.n	80061f0 <_malloc_r+0xd0>
 80061ca:	09bb      	lsrs	r3, r7, #6
 80061cc:	3338      	adds	r3, #56	; 0x38
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80061d4:	f1a2 0c08 	sub.w	ip, r2, #8
 80061d8:	6854      	ldr	r4, [r2, #4]
 80061da:	4564      	cmp	r4, ip
 80061dc:	d006      	beq.n	80061ec <_malloc_r+0xcc>
 80061de:	6862      	ldr	r2, [r4, #4]
 80061e0:	f022 0203 	bic.w	r2, r2, #3
 80061e4:	1bd0      	subs	r0, r2, r7
 80061e6:	280f      	cmp	r0, #15
 80061e8:	dd1c      	ble.n	8006224 <_malloc_r+0x104>
 80061ea:	3b01      	subs	r3, #1
 80061ec:	3301      	adds	r3, #1
 80061ee:	e7ce      	b.n	800618e <_malloc_r+0x6e>
 80061f0:	2b14      	cmp	r3, #20
 80061f2:	d801      	bhi.n	80061f8 <_malloc_r+0xd8>
 80061f4:	335b      	adds	r3, #91	; 0x5b
 80061f6:	e7ea      	b.n	80061ce <_malloc_r+0xae>
 80061f8:	2b54      	cmp	r3, #84	; 0x54
 80061fa:	d802      	bhi.n	8006202 <_malloc_r+0xe2>
 80061fc:	0b3b      	lsrs	r3, r7, #12
 80061fe:	336e      	adds	r3, #110	; 0x6e
 8006200:	e7e5      	b.n	80061ce <_malloc_r+0xae>
 8006202:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006206:	d802      	bhi.n	800620e <_malloc_r+0xee>
 8006208:	0bfb      	lsrs	r3, r7, #15
 800620a:	3377      	adds	r3, #119	; 0x77
 800620c:	e7df      	b.n	80061ce <_malloc_r+0xae>
 800620e:	f240 5254 	movw	r2, #1364	; 0x554
 8006212:	4293      	cmp	r3, r2
 8006214:	d804      	bhi.n	8006220 <_malloc_r+0x100>
 8006216:	0cbb      	lsrs	r3, r7, #18
 8006218:	337c      	adds	r3, #124	; 0x7c
 800621a:	e7d8      	b.n	80061ce <_malloc_r+0xae>
 800621c:	233f      	movs	r3, #63	; 0x3f
 800621e:	e7d6      	b.n	80061ce <_malloc_r+0xae>
 8006220:	237e      	movs	r3, #126	; 0x7e
 8006222:	e7d4      	b.n	80061ce <_malloc_r+0xae>
 8006224:	2800      	cmp	r0, #0
 8006226:	68e1      	ldr	r1, [r4, #12]
 8006228:	db04      	blt.n	8006234 <_malloc_r+0x114>
 800622a:	68a3      	ldr	r3, [r4, #8]
 800622c:	60d9      	str	r1, [r3, #12]
 800622e:	608b      	str	r3, [r1, #8]
 8006230:	18a3      	adds	r3, r4, r2
 8006232:	e7a2      	b.n	800617a <_malloc_r+0x5a>
 8006234:	460c      	mov	r4, r1
 8006236:	e7d0      	b.n	80061da <_malloc_r+0xba>
 8006238:	2800      	cmp	r0, #0
 800623a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800623e:	db07      	blt.n	8006250 <_malloc_r+0x130>
 8006240:	44a4      	add	ip, r4
 8006242:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	f8cc 3004 	str.w	r3, [ip, #4]
 800624e:	e798      	b.n	8006182 <_malloc_r+0x62>
 8006250:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006254:	6870      	ldr	r0, [r6, #4]
 8006256:	f080 809e 	bcs.w	8006396 <_malloc_r+0x276>
 800625a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800625e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006262:	f04f 0c01 	mov.w	ip, #1
 8006266:	3201      	adds	r2, #1
 8006268:	fa0c fc0e 	lsl.w	ip, ip, lr
 800626c:	ea4c 0000 	orr.w	r0, ip, r0
 8006270:	6070      	str	r0, [r6, #4]
 8006272:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006276:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800627a:	3808      	subs	r0, #8
 800627c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006280:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006284:	f8cc 400c 	str.w	r4, [ip, #12]
 8006288:	2001      	movs	r0, #1
 800628a:	109a      	asrs	r2, r3, #2
 800628c:	fa00 f202 	lsl.w	r2, r0, r2
 8006290:	6870      	ldr	r0, [r6, #4]
 8006292:	4290      	cmp	r0, r2
 8006294:	d326      	bcc.n	80062e4 <_malloc_r+0x1c4>
 8006296:	4210      	tst	r0, r2
 8006298:	d106      	bne.n	80062a8 <_malloc_r+0x188>
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	0052      	lsls	r2, r2, #1
 80062a0:	4210      	tst	r0, r2
 80062a2:	f103 0304 	add.w	r3, r3, #4
 80062a6:	d0fa      	beq.n	800629e <_malloc_r+0x17e>
 80062a8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80062ac:	46c1      	mov	r9, r8
 80062ae:	469e      	mov	lr, r3
 80062b0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80062b4:	454c      	cmp	r4, r9
 80062b6:	f040 80b3 	bne.w	8006420 <_malloc_r+0x300>
 80062ba:	f10e 0e01 	add.w	lr, lr, #1
 80062be:	f01e 0f03 	tst.w	lr, #3
 80062c2:	f109 0908 	add.w	r9, r9, #8
 80062c6:	d1f3      	bne.n	80062b0 <_malloc_r+0x190>
 80062c8:	0798      	lsls	r0, r3, #30
 80062ca:	f040 80ec 	bne.w	80064a6 <_malloc_r+0x386>
 80062ce:	6873      	ldr	r3, [r6, #4]
 80062d0:	ea23 0302 	bic.w	r3, r3, r2
 80062d4:	6073      	str	r3, [r6, #4]
 80062d6:	6870      	ldr	r0, [r6, #4]
 80062d8:	0052      	lsls	r2, r2, #1
 80062da:	4290      	cmp	r0, r2
 80062dc:	d302      	bcc.n	80062e4 <_malloc_r+0x1c4>
 80062de:	2a00      	cmp	r2, #0
 80062e0:	f040 80ee 	bne.w	80064c0 <_malloc_r+0x3a0>
 80062e4:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80062e8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80062ec:	f021 0903 	bic.w	r9, r1, #3
 80062f0:	45b9      	cmp	r9, r7
 80062f2:	d304      	bcc.n	80062fe <_malloc_r+0x1de>
 80062f4:	eba9 0207 	sub.w	r2, r9, r7
 80062f8:	2a0f      	cmp	r2, #15
 80062fa:	f300 8149 	bgt.w	8006590 <_malloc_r+0x470>
 80062fe:	4a59      	ldr	r2, [pc, #356]	; (8006464 <_malloc_r+0x344>)
 8006300:	6811      	ldr	r1, [r2, #0]
 8006302:	3110      	adds	r1, #16
 8006304:	eb0b 0309 	add.w	r3, fp, r9
 8006308:	4439      	add	r1, r7
 800630a:	2008      	movs	r0, #8
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	9100      	str	r1, [sp, #0]
 8006310:	f000 f9cc 	bl	80066ac <sysconf>
 8006314:	4a54      	ldr	r2, [pc, #336]	; (8006468 <_malloc_r+0x348>)
 8006316:	e9dd 1300 	ldrd	r1, r3, [sp]
 800631a:	4680      	mov	r8, r0
 800631c:	6810      	ldr	r0, [r2, #0]
 800631e:	3001      	adds	r0, #1
 8006320:	bf1f      	itttt	ne
 8006322:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 8006326:	4441      	addne	r1, r8
 8006328:	f1c8 0000 	rsbne	r0, r8, #0
 800632c:	4001      	andne	r1, r0
 800632e:	4628      	mov	r0, r5
 8006330:	e9cd 1300 	strd	r1, r3, [sp]
 8006334:	f000 f9aa 	bl	800668c <_sbrk_r>
 8006338:	1c42      	adds	r2, r0, #1
 800633a:	4604      	mov	r4, r0
 800633c:	f000 80fc 	beq.w	8006538 <_malloc_r+0x418>
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	9900      	ldr	r1, [sp, #0]
 8006344:	4a48      	ldr	r2, [pc, #288]	; (8006468 <_malloc_r+0x348>)
 8006346:	4283      	cmp	r3, r0
 8006348:	d902      	bls.n	8006350 <_malloc_r+0x230>
 800634a:	45b3      	cmp	fp, r6
 800634c:	f040 80f4 	bne.w	8006538 <_malloc_r+0x418>
 8006350:	f8df a120 	ldr.w	sl, [pc, #288]	; 8006474 <_malloc_r+0x354>
 8006354:	f8da 0000 	ldr.w	r0, [sl]
 8006358:	42a3      	cmp	r3, r4
 800635a:	eb00 0e01 	add.w	lr, r0, r1
 800635e:	f8ca e000 	str.w	lr, [sl]
 8006362:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8006366:	f040 80ad 	bne.w	80064c4 <_malloc_r+0x3a4>
 800636a:	ea13 0f0c 	tst.w	r3, ip
 800636e:	f040 80a9 	bne.w	80064c4 <_malloc_r+0x3a4>
 8006372:	68b3      	ldr	r3, [r6, #8]
 8006374:	4449      	add	r1, r9
 8006376:	f041 0101 	orr.w	r1, r1, #1
 800637a:	6059      	str	r1, [r3, #4]
 800637c:	4a3b      	ldr	r2, [pc, #236]	; (800646c <_malloc_r+0x34c>)
 800637e:	f8da 3000 	ldr.w	r3, [sl]
 8006382:	6811      	ldr	r1, [r2, #0]
 8006384:	428b      	cmp	r3, r1
 8006386:	bf88      	it	hi
 8006388:	6013      	strhi	r3, [r2, #0]
 800638a:	4a39      	ldr	r2, [pc, #228]	; (8006470 <_malloc_r+0x350>)
 800638c:	6811      	ldr	r1, [r2, #0]
 800638e:	428b      	cmp	r3, r1
 8006390:	bf88      	it	hi
 8006392:	6013      	strhi	r3, [r2, #0]
 8006394:	e0d0      	b.n	8006538 <_malloc_r+0x418>
 8006396:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800639a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800639e:	d218      	bcs.n	80063d2 <_malloc_r+0x2b2>
 80063a0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80063a4:	3238      	adds	r2, #56	; 0x38
 80063a6:	f102 0e01 	add.w	lr, r2, #1
 80063aa:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80063ae:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80063b2:	45f0      	cmp	r8, lr
 80063b4:	d12b      	bne.n	800640e <_malloc_r+0x2ee>
 80063b6:	1092      	asrs	r2, r2, #2
 80063b8:	f04f 0c01 	mov.w	ip, #1
 80063bc:	fa0c f202 	lsl.w	r2, ip, r2
 80063c0:	4310      	orrs	r0, r2
 80063c2:	6070      	str	r0, [r6, #4]
 80063c4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80063c8:	f8c8 4008 	str.w	r4, [r8, #8]
 80063cc:	f8ce 400c 	str.w	r4, [lr, #12]
 80063d0:	e75a      	b.n	8006288 <_malloc_r+0x168>
 80063d2:	2a14      	cmp	r2, #20
 80063d4:	d801      	bhi.n	80063da <_malloc_r+0x2ba>
 80063d6:	325b      	adds	r2, #91	; 0x5b
 80063d8:	e7e5      	b.n	80063a6 <_malloc_r+0x286>
 80063da:	2a54      	cmp	r2, #84	; 0x54
 80063dc:	d803      	bhi.n	80063e6 <_malloc_r+0x2c6>
 80063de:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80063e2:	326e      	adds	r2, #110	; 0x6e
 80063e4:	e7df      	b.n	80063a6 <_malloc_r+0x286>
 80063e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80063ea:	d803      	bhi.n	80063f4 <_malloc_r+0x2d4>
 80063ec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80063f0:	3277      	adds	r2, #119	; 0x77
 80063f2:	e7d8      	b.n	80063a6 <_malloc_r+0x286>
 80063f4:	f240 5e54 	movw	lr, #1364	; 0x554
 80063f8:	4572      	cmp	r2, lr
 80063fa:	bf9a      	itte	ls
 80063fc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006400:	327c      	addls	r2, #124	; 0x7c
 8006402:	227e      	movhi	r2, #126	; 0x7e
 8006404:	e7cf      	b.n	80063a6 <_malloc_r+0x286>
 8006406:	f8de e008 	ldr.w	lr, [lr, #8]
 800640a:	45f0      	cmp	r8, lr
 800640c:	d005      	beq.n	800641a <_malloc_r+0x2fa>
 800640e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006412:	f022 0203 	bic.w	r2, r2, #3
 8006416:	4562      	cmp	r2, ip
 8006418:	d8f5      	bhi.n	8006406 <_malloc_r+0x2e6>
 800641a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800641e:	e7d1      	b.n	80063c4 <_malloc_r+0x2a4>
 8006420:	6860      	ldr	r0, [r4, #4]
 8006422:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006426:	f020 0003 	bic.w	r0, r0, #3
 800642a:	eba0 0a07 	sub.w	sl, r0, r7
 800642e:	f1ba 0f0f 	cmp.w	sl, #15
 8006432:	dd21      	ble.n	8006478 <_malloc_r+0x358>
 8006434:	68a3      	ldr	r3, [r4, #8]
 8006436:	19e2      	adds	r2, r4, r7
 8006438:	f047 0701 	orr.w	r7, r7, #1
 800643c:	6067      	str	r7, [r4, #4]
 800643e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006442:	f8cc 3008 	str.w	r3, [ip, #8]
 8006446:	f04a 0301 	orr.w	r3, sl, #1
 800644a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800644e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	f844 a000 	str.w	sl, [r4, r0]
 8006458:	e693      	b.n	8006182 <_malloc_r+0x62>
 800645a:	bf00      	nop
 800645c:	20000440 	.word	0x20000440
 8006460:	20000448 	.word	0x20000448
 8006464:	200090e8 	.word	0x200090e8
 8006468:	20000848 	.word	0x20000848
 800646c:	200090e0 	.word	0x200090e0
 8006470:	200090e4 	.word	0x200090e4
 8006474:	200090b8 	.word	0x200090b8
 8006478:	f1ba 0f00 	cmp.w	sl, #0
 800647c:	db11      	blt.n	80064a2 <_malloc_r+0x382>
 800647e:	4420      	add	r0, r4
 8006480:	6843      	ldr	r3, [r0, #4]
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6043      	str	r3, [r0, #4]
 8006488:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800648c:	4628      	mov	r0, r5
 800648e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006492:	f8cc 3008 	str.w	r3, [ip, #8]
 8006496:	f000 f8a1 	bl	80065dc <__malloc_unlock>
 800649a:	4620      	mov	r0, r4
 800649c:	b003      	add	sp, #12
 800649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a2:	4664      	mov	r4, ip
 80064a4:	e706      	b.n	80062b4 <_malloc_r+0x194>
 80064a6:	f858 0908 	ldr.w	r0, [r8], #-8
 80064aa:	4540      	cmp	r0, r8
 80064ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80064b0:	f43f af0a 	beq.w	80062c8 <_malloc_r+0x1a8>
 80064b4:	e70f      	b.n	80062d6 <_malloc_r+0x1b6>
 80064b6:	3304      	adds	r3, #4
 80064b8:	0052      	lsls	r2, r2, #1
 80064ba:	4210      	tst	r0, r2
 80064bc:	d0fb      	beq.n	80064b6 <_malloc_r+0x396>
 80064be:	e6f3      	b.n	80062a8 <_malloc_r+0x188>
 80064c0:	4673      	mov	r3, lr
 80064c2:	e7fa      	b.n	80064ba <_malloc_r+0x39a>
 80064c4:	6810      	ldr	r0, [r2, #0]
 80064c6:	3001      	adds	r0, #1
 80064c8:	bf1b      	ittet	ne
 80064ca:	1ae3      	subne	r3, r4, r3
 80064cc:	4473      	addne	r3, lr
 80064ce:	6014      	streq	r4, [r2, #0]
 80064d0:	f8ca 3000 	strne.w	r3, [sl]
 80064d4:	f014 0307 	ands.w	r3, r4, #7
 80064d8:	bf1a      	itte	ne
 80064da:	f1c3 0008 	rsbne	r0, r3, #8
 80064de:	1824      	addne	r4, r4, r0
 80064e0:	4618      	moveq	r0, r3
 80064e2:	1862      	adds	r2, r4, r1
 80064e4:	ea02 010c 	and.w	r1, r2, ip
 80064e8:	4480      	add	r8, r0
 80064ea:	eba8 0801 	sub.w	r8, r8, r1
 80064ee:	ea08 080c 	and.w	r8, r8, ip
 80064f2:	4641      	mov	r1, r8
 80064f4:	4628      	mov	r0, r5
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	9200      	str	r2, [sp, #0]
 80064fa:	f000 f8c7 	bl	800668c <_sbrk_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006504:	d105      	bne.n	8006512 <_malloc_r+0x3f2>
 8006506:	b32b      	cbz	r3, 8006554 <_malloc_r+0x434>
 8006508:	f1a3 0008 	sub.w	r0, r3, #8
 800650c:	4410      	add	r0, r2
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	f8da 2000 	ldr.w	r2, [sl]
 8006516:	60b4      	str	r4, [r6, #8]
 8006518:	1b00      	subs	r0, r0, r4
 800651a:	4440      	add	r0, r8
 800651c:	4442      	add	r2, r8
 800651e:	f040 0001 	orr.w	r0, r0, #1
 8006522:	45b3      	cmp	fp, r6
 8006524:	f8ca 2000 	str.w	r2, [sl]
 8006528:	6060      	str	r0, [r4, #4]
 800652a:	f43f af27 	beq.w	800637c <_malloc_r+0x25c>
 800652e:	f1b9 0f0f 	cmp.w	r9, #15
 8006532:	d812      	bhi.n	800655a <_malloc_r+0x43a>
 8006534:	2301      	movs	r3, #1
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	68b3      	ldr	r3, [r6, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	42bb      	cmp	r3, r7
 8006542:	eba3 0207 	sub.w	r2, r3, r7
 8006546:	d301      	bcc.n	800654c <_malloc_r+0x42c>
 8006548:	2a0f      	cmp	r2, #15
 800654a:	dc21      	bgt.n	8006590 <_malloc_r+0x470>
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f845 	bl	80065dc <__malloc_unlock>
 8006552:	e5f1      	b.n	8006138 <_malloc_r+0x18>
 8006554:	4610      	mov	r0, r2
 8006556:	4698      	mov	r8, r3
 8006558:	e7db      	b.n	8006512 <_malloc_r+0x3f2>
 800655a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800655e:	f1a9 090c 	sub.w	r9, r9, #12
 8006562:	f029 0907 	bic.w	r9, r9, #7
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	ea43 0309 	orr.w	r3, r3, r9
 800656e:	f8cb 3004 	str.w	r3, [fp, #4]
 8006572:	2205      	movs	r2, #5
 8006574:	eb0b 0309 	add.w	r3, fp, r9
 8006578:	f1b9 0f0f 	cmp.w	r9, #15
 800657c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8006580:	f67f aefc 	bls.w	800637c <_malloc_r+0x25c>
 8006584:	f10b 0108 	add.w	r1, fp, #8
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f915 	bl	80067b8 <_free_r>
 800658e:	e6f5      	b.n	800637c <_malloc_r+0x25c>
 8006590:	68b4      	ldr	r4, [r6, #8]
 8006592:	f047 0301 	orr.w	r3, r7, #1
 8006596:	4427      	add	r7, r4
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	60b7      	str	r7, [r6, #8]
 80065a0:	607a      	str	r2, [r7, #4]
 80065a2:	e5ee      	b.n	8006182 <_malloc_r+0x62>

080065a4 <memcpy>:
 80065a4:	440a      	add	r2, r1
 80065a6:	4291      	cmp	r1, r2
 80065a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065ac:	d100      	bne.n	80065b0 <memcpy+0xc>
 80065ae:	4770      	bx	lr
 80065b0:	b510      	push	{r4, lr}
 80065b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ba:	4291      	cmp	r1, r2
 80065bc:	d1f9      	bne.n	80065b2 <memcpy+0xe>
 80065be:	bd10      	pop	{r4, pc}

080065c0 <memset>:
 80065c0:	4402      	add	r2, r0
 80065c2:	4603      	mov	r3, r0
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d100      	bne.n	80065ca <memset+0xa>
 80065c8:	4770      	bx	lr
 80065ca:	f803 1b01 	strb.w	r1, [r3], #1
 80065ce:	e7f9      	b.n	80065c4 <memset+0x4>

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7fb b8e4 	b.w	800179e <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	20000f60 	.word	0x20000f60

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7fb b8f2 	b.w	80017c6 <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000f60 	.word	0x20000f60

080065e8 <cleanup_glue>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	460c      	mov	r4, r1
 80065ec:	6809      	ldr	r1, [r1, #0]
 80065ee:	4605      	mov	r5, r0
 80065f0:	b109      	cbz	r1, 80065f6 <cleanup_glue+0xe>
 80065f2:	f7ff fff9 	bl	80065e8 <cleanup_glue>
 80065f6:	4621      	mov	r1, r4
 80065f8:	4628      	mov	r0, r5
 80065fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065fe:	f000 b8db 	b.w	80067b8 <_free_r>
	...

08006604 <_reclaim_reent>:
 8006604:	4b20      	ldr	r3, [pc, #128]	; (8006688 <_reclaim_reent+0x84>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4283      	cmp	r3, r0
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	d039      	beq.n	8006684 <_reclaim_reent+0x80>
 8006610:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006612:	bb33      	cbnz	r3, 8006662 <_reclaim_reent+0x5e>
 8006614:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006616:	b111      	cbz	r1, 800661e <_reclaim_reent+0x1a>
 8006618:	4620      	mov	r0, r4
 800661a:	f000 f8cd 	bl	80067b8 <_free_r>
 800661e:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
 8006622:	bb05      	cbnz	r5, 8006666 <_reclaim_reent+0x62>
 8006624:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006626:	bb49      	cbnz	r1, 800667c <_reclaim_reent+0x78>
 8006628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800662a:	b35b      	cbz	r3, 8006684 <_reclaim_reent+0x80>
 800662c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800662e:	4620      	mov	r0, r4
 8006630:	4798      	blx	r3
 8006632:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 8006636:	b329      	cbz	r1, 8006684 <_reclaim_reent+0x80>
 8006638:	4620      	mov	r0, r4
 800663a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800663e:	f7ff bfd3 	b.w	80065e8 <cleanup_glue>
 8006642:	5949      	ldr	r1, [r1, r5]
 8006644:	b939      	cbnz	r1, 8006656 <_reclaim_reent+0x52>
 8006646:	3504      	adds	r5, #4
 8006648:	2d80      	cmp	r5, #128	; 0x80
 800664a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800664c:	d1f9      	bne.n	8006642 <_reclaim_reent+0x3e>
 800664e:	4620      	mov	r0, r4
 8006650:	f000 f8b2 	bl	80067b8 <_free_r>
 8006654:	e7de      	b.n	8006614 <_reclaim_reent+0x10>
 8006656:	680e      	ldr	r6, [r1, #0]
 8006658:	4620      	mov	r0, r4
 800665a:	f000 f8ad 	bl	80067b8 <_free_r>
 800665e:	4631      	mov	r1, r6
 8006660:	e7f0      	b.n	8006644 <_reclaim_reent+0x40>
 8006662:	2500      	movs	r5, #0
 8006664:	e7f0      	b.n	8006648 <_reclaim_reent+0x44>
 8006666:	f504 76a6 	add.w	r6, r4, #332	; 0x14c
 800666a:	42b5      	cmp	r5, r6
 800666c:	d0da      	beq.n	8006624 <_reclaim_reent+0x20>
 800666e:	4629      	mov	r1, r5
 8006670:	682d      	ldr	r5, [r5, #0]
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f8a0 	bl	80067b8 <_free_r>
 8006678:	42ae      	cmp	r6, r5
 800667a:	e7f7      	b.n	800666c <_reclaim_reent+0x68>
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f89b 	bl	80067b8 <_free_r>
 8006682:	e7d1      	b.n	8006628 <_reclaim_reent+0x24>
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	bf00      	nop
 8006688:	20000010 	.word	0x20000010

0800668c <_sbrk_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4d06      	ldr	r5, [pc, #24]	; (80066a8 <_sbrk_r+0x1c>)
 8006690:	2300      	movs	r3, #0
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	f7fa ffd6 	bl	8001648 <_sbrk>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_sbrk_r+0x1a>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_sbrk_r+0x1a>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	20009310 	.word	0x20009310

080066ac <sysconf>:
 80066ac:	2808      	cmp	r0, #8
 80066ae:	b508      	push	{r3, lr}
 80066b0:	d006      	beq.n	80066c0 <sysconf+0x14>
 80066b2:	f7ff fd03 	bl	80060bc <__errno>
 80066b6:	2316      	movs	r3, #22
 80066b8:	6003      	str	r3, [r0, #0]
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066be:	bd08      	pop	{r3, pc}
 80066c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80066c4:	e7fb      	b.n	80066be <sysconf+0x12>
	...

080066c8 <register_fini>:
 80066c8:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <register_fini+0xc>)
 80066ca:	b113      	cbz	r3, 80066d2 <register_fini+0xa>
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <register_fini+0x10>)
 80066ce:	f000 b805 	b.w	80066dc <atexit>
 80066d2:	4770      	bx	lr
 80066d4:	00000000 	.word	0x00000000
 80066d8:	080066e9 	.word	0x080066e9

080066dc <atexit>:
 80066dc:	2300      	movs	r3, #0
 80066de:	4601      	mov	r1, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 b928 	b.w	8006938 <__register_exitproc>

080066e8 <__libc_fini_array>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	; (8006708 <__libc_fini_array+0x20>)
 80066ec:	4c07      	ldr	r4, [pc, #28]	; (800670c <__libc_fini_array+0x24>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	b91c      	cbnz	r4, 80066fc <__libc_fini_array+0x14>
 80066f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f8:	f000 b964 	b.w	80069c4 <_fini>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006702:	4798      	blx	r3
 8006704:	e7f5      	b.n	80066f2 <__libc_fini_array+0xa>
 8006706:	bf00      	nop
 8006708:	08006a4c 	.word	0x08006a4c
 800670c:	08006a50 	.word	0x08006a50

08006710 <_malloc_trim_r>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	4606      	mov	r6, r0
 8006716:	2008      	movs	r0, #8
 8006718:	460c      	mov	r4, r1
 800671a:	f7ff ffc7 	bl	80066ac <sysconf>
 800671e:	4f23      	ldr	r7, [pc, #140]	; (80067ac <_malloc_trim_r+0x9c>)
 8006720:	4680      	mov	r8, r0
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ff54 	bl	80065d0 <__malloc_lock>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	685d      	ldr	r5, [r3, #4]
 800672c:	f025 0503 	bic.w	r5, r5, #3
 8006730:	1b2c      	subs	r4, r5, r4
 8006732:	3c11      	subs	r4, #17
 8006734:	4444      	add	r4, r8
 8006736:	fbb4 f4f8 	udiv	r4, r4, r8
 800673a:	3c01      	subs	r4, #1
 800673c:	fb08 f404 	mul.w	r4, r8, r4
 8006740:	45a0      	cmp	r8, r4
 8006742:	dd05      	ble.n	8006750 <_malloc_trim_r+0x40>
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff ff49 	bl	80065dc <__malloc_unlock>
 800674a:	2000      	movs	r0, #0
 800674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006750:	2100      	movs	r1, #0
 8006752:	4630      	mov	r0, r6
 8006754:	f7ff ff9a 	bl	800668c <_sbrk_r>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	442b      	add	r3, r5
 800675c:	4298      	cmp	r0, r3
 800675e:	d1f1      	bne.n	8006744 <_malloc_trim_r+0x34>
 8006760:	4261      	negs	r1, r4
 8006762:	4630      	mov	r0, r6
 8006764:	f7ff ff92 	bl	800668c <_sbrk_r>
 8006768:	3001      	adds	r0, #1
 800676a:	d110      	bne.n	800678e <_malloc_trim_r+0x7e>
 800676c:	2100      	movs	r1, #0
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ff8c 	bl	800668c <_sbrk_r>
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	1a83      	subs	r3, r0, r2
 8006778:	2b0f      	cmp	r3, #15
 800677a:	dde3      	ble.n	8006744 <_malloc_trim_r+0x34>
 800677c:	490c      	ldr	r1, [pc, #48]	; (80067b0 <_malloc_trim_r+0xa0>)
 800677e:	6809      	ldr	r1, [r1, #0]
 8006780:	1a40      	subs	r0, r0, r1
 8006782:	490c      	ldr	r1, [pc, #48]	; (80067b4 <_malloc_trim_r+0xa4>)
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6008      	str	r0, [r1, #0]
 800678a:	6053      	str	r3, [r2, #4]
 800678c:	e7da      	b.n	8006744 <_malloc_trim_r+0x34>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4a08      	ldr	r2, [pc, #32]	; (80067b4 <_malloc_trim_r+0xa4>)
 8006792:	1b2d      	subs	r5, r5, r4
 8006794:	f045 0501 	orr.w	r5, r5, #1
 8006798:	605d      	str	r5, [r3, #4]
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	4630      	mov	r0, r6
 800679e:	1b1c      	subs	r4, r3, r4
 80067a0:	6014      	str	r4, [r2, #0]
 80067a2:	f7ff ff1b 	bl	80065dc <__malloc_unlock>
 80067a6:	2001      	movs	r0, #1
 80067a8:	e7d0      	b.n	800674c <_malloc_trim_r+0x3c>
 80067aa:	bf00      	nop
 80067ac:	20000440 	.word	0x20000440
 80067b0:	20000848 	.word	0x20000848
 80067b4:	200090b8 	.word	0x200090b8

080067b8 <_free_r>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	2900      	cmp	r1, #0
 80067c0:	f000 80b1 	beq.w	8006926 <_free_r+0x16e>
 80067c4:	f7ff ff04 	bl	80065d0 <__malloc_lock>
 80067c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80067cc:	4856      	ldr	r0, [pc, #344]	; (8006928 <_free_r+0x170>)
 80067ce:	f022 0401 	bic.w	r4, r2, #1
 80067d2:	f1a7 0308 	sub.w	r3, r7, #8
 80067d6:	eb03 0c04 	add.w	ip, r3, r4
 80067da:	6881      	ldr	r1, [r0, #8]
 80067dc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80067e0:	4561      	cmp	r1, ip
 80067e2:	f026 0603 	bic.w	r6, r6, #3
 80067e6:	f002 0201 	and.w	r2, r2, #1
 80067ea:	d11b      	bne.n	8006824 <_free_r+0x6c>
 80067ec:	4434      	add	r4, r6
 80067ee:	b93a      	cbnz	r2, 8006800 <_free_r+0x48>
 80067f0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	4414      	add	r4, r2
 80067f8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80067fc:	60ca      	str	r2, [r1, #12]
 80067fe:	6091      	str	r1, [r2, #8]
 8006800:	f044 0201 	orr.w	r2, r4, #1
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	6083      	str	r3, [r0, #8]
 8006808:	4b48      	ldr	r3, [pc, #288]	; (800692c <_free_r+0x174>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	42a3      	cmp	r3, r4
 800680e:	d804      	bhi.n	800681a <_free_r+0x62>
 8006810:	4b47      	ldr	r3, [pc, #284]	; (8006930 <_free_r+0x178>)
 8006812:	4628      	mov	r0, r5
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	f7ff ff7b 	bl	8006710 <_malloc_trim_r>
 800681a:	4628      	mov	r0, r5
 800681c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006820:	f7ff bedc 	b.w	80065dc <__malloc_unlock>
 8006824:	f8cc 6004 	str.w	r6, [ip, #4]
 8006828:	2a00      	cmp	r2, #0
 800682a:	d138      	bne.n	800689e <_free_r+0xe6>
 800682c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006830:	1a5b      	subs	r3, r3, r1
 8006832:	440c      	add	r4, r1
 8006834:	6899      	ldr	r1, [r3, #8]
 8006836:	f100 0708 	add.w	r7, r0, #8
 800683a:	42b9      	cmp	r1, r7
 800683c:	d031      	beq.n	80068a2 <_free_r+0xea>
 800683e:	68df      	ldr	r7, [r3, #12]
 8006840:	60cf      	str	r7, [r1, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	eb0c 0106 	add.w	r1, ip, r6
 8006848:	6849      	ldr	r1, [r1, #4]
 800684a:	07c9      	lsls	r1, r1, #31
 800684c:	d40b      	bmi.n	8006866 <_free_r+0xae>
 800684e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006852:	4434      	add	r4, r6
 8006854:	bb3a      	cbnz	r2, 80068a6 <_free_r+0xee>
 8006856:	4e37      	ldr	r6, [pc, #220]	; (8006934 <_free_r+0x17c>)
 8006858:	42b1      	cmp	r1, r6
 800685a:	d124      	bne.n	80068a6 <_free_r+0xee>
 800685c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006860:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006864:	2201      	movs	r2, #1
 8006866:	f044 0101 	orr.w	r1, r4, #1
 800686a:	6059      	str	r1, [r3, #4]
 800686c:	511c      	str	r4, [r3, r4]
 800686e:	2a00      	cmp	r2, #0
 8006870:	d1d3      	bne.n	800681a <_free_r+0x62>
 8006872:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006876:	d21b      	bcs.n	80068b0 <_free_r+0xf8>
 8006878:	0961      	lsrs	r1, r4, #5
 800687a:	08e2      	lsrs	r2, r4, #3
 800687c:	2401      	movs	r4, #1
 800687e:	408c      	lsls	r4, r1
 8006880:	6841      	ldr	r1, [r0, #4]
 8006882:	3201      	adds	r2, #1
 8006884:	430c      	orrs	r4, r1
 8006886:	6044      	str	r4, [r0, #4]
 8006888:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800688c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006890:	3908      	subs	r1, #8
 8006892:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006896:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800689a:	60e3      	str	r3, [r4, #12]
 800689c:	e7bd      	b.n	800681a <_free_r+0x62>
 800689e:	2200      	movs	r2, #0
 80068a0:	e7d0      	b.n	8006844 <_free_r+0x8c>
 80068a2:	2201      	movs	r2, #1
 80068a4:	e7ce      	b.n	8006844 <_free_r+0x8c>
 80068a6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80068aa:	60ce      	str	r6, [r1, #12]
 80068ac:	60b1      	str	r1, [r6, #8]
 80068ae:	e7da      	b.n	8006866 <_free_r+0xae>
 80068b0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80068b4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80068b8:	d214      	bcs.n	80068e4 <_free_r+0x12c>
 80068ba:	09a2      	lsrs	r2, r4, #6
 80068bc:	3238      	adds	r2, #56	; 0x38
 80068be:	1c51      	adds	r1, r2, #1
 80068c0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80068c4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80068c8:	428e      	cmp	r6, r1
 80068ca:	d125      	bne.n	8006918 <_free_r+0x160>
 80068cc:	2401      	movs	r4, #1
 80068ce:	1092      	asrs	r2, r2, #2
 80068d0:	fa04 f202 	lsl.w	r2, r4, r2
 80068d4:	6844      	ldr	r4, [r0, #4]
 80068d6:	4322      	orrs	r2, r4
 80068d8:	6042      	str	r2, [r0, #4]
 80068da:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80068de:	60b3      	str	r3, [r6, #8]
 80068e0:	60cb      	str	r3, [r1, #12]
 80068e2:	e79a      	b.n	800681a <_free_r+0x62>
 80068e4:	2a14      	cmp	r2, #20
 80068e6:	d801      	bhi.n	80068ec <_free_r+0x134>
 80068e8:	325b      	adds	r2, #91	; 0x5b
 80068ea:	e7e8      	b.n	80068be <_free_r+0x106>
 80068ec:	2a54      	cmp	r2, #84	; 0x54
 80068ee:	d802      	bhi.n	80068f6 <_free_r+0x13e>
 80068f0:	0b22      	lsrs	r2, r4, #12
 80068f2:	326e      	adds	r2, #110	; 0x6e
 80068f4:	e7e3      	b.n	80068be <_free_r+0x106>
 80068f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80068fa:	d802      	bhi.n	8006902 <_free_r+0x14a>
 80068fc:	0be2      	lsrs	r2, r4, #15
 80068fe:	3277      	adds	r2, #119	; 0x77
 8006900:	e7dd      	b.n	80068be <_free_r+0x106>
 8006902:	f240 5154 	movw	r1, #1364	; 0x554
 8006906:	428a      	cmp	r2, r1
 8006908:	bf9a      	itte	ls
 800690a:	0ca2      	lsrls	r2, r4, #18
 800690c:	327c      	addls	r2, #124	; 0x7c
 800690e:	227e      	movhi	r2, #126	; 0x7e
 8006910:	e7d5      	b.n	80068be <_free_r+0x106>
 8006912:	6889      	ldr	r1, [r1, #8]
 8006914:	428e      	cmp	r6, r1
 8006916:	d004      	beq.n	8006922 <_free_r+0x16a>
 8006918:	684a      	ldr	r2, [r1, #4]
 800691a:	f022 0203 	bic.w	r2, r2, #3
 800691e:	42a2      	cmp	r2, r4
 8006920:	d8f7      	bhi.n	8006912 <_free_r+0x15a>
 8006922:	68ce      	ldr	r6, [r1, #12]
 8006924:	e7d9      	b.n	80068da <_free_r+0x122>
 8006926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006928:	20000440 	.word	0x20000440
 800692c:	2000084c 	.word	0x2000084c
 8006930:	200090e8 	.word	0x200090e8
 8006934:	20000448 	.word	0x20000448

08006938 <__register_exitproc>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4d1c      	ldr	r5, [pc, #112]	; (80069b0 <__register_exitproc+0x78>)
 800693e:	4606      	mov	r6, r0
 8006940:	6828      	ldr	r0, [r5, #0]
 8006942:	4698      	mov	r8, r3
 8006944:	460f      	mov	r7, r1
 8006946:	4691      	mov	r9, r2
 8006948:	f7fa ff29 	bl	800179e <__retarget_lock_acquire_recursive>
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <__register_exitproc+0x7c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8006954:	4628      	mov	r0, r5
 8006956:	b91c      	cbnz	r4, 8006960 <__register_exitproc+0x28>
 8006958:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800695c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8006960:	6865      	ldr	r5, [r4, #4]
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	2d1f      	cmp	r5, #31
 8006966:	dd05      	ble.n	8006974 <__register_exitproc+0x3c>
 8006968:	f7fa ff2d 	bl	80017c6 <__retarget_lock_release_recursive>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006974:	b19e      	cbz	r6, 800699e <__register_exitproc+0x66>
 8006976:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800697a:	2201      	movs	r2, #1
 800697c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006980:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8006984:	40aa      	lsls	r2, r5
 8006986:	4313      	orrs	r3, r2
 8006988:	2e02      	cmp	r6, #2
 800698a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800698e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8006992:	bf02      	ittt	eq
 8006994:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8006998:	431a      	orreq	r2, r3
 800699a:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800699e:	1c6b      	adds	r3, r5, #1
 80069a0:	3502      	adds	r5, #2
 80069a2:	6063      	str	r3, [r4, #4]
 80069a4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80069a8:	f7fa ff0d 	bl	80017c6 <__retarget_lock_release_recursive>
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7df      	b.n	8006970 <__register_exitproc+0x38>
 80069b0:	20000850 	.word	0x20000850
 80069b4:	08006a38 	.word	0x08006a38

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
