
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800b7b0  0800b7b0  0001b7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bccc  0800bccc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd4  0800bcd4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000042b8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000449c  2000449c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023213  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000487d  00000000  00000000  00043427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00047ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017b8  00000000  00000000  00049618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272e1  00000000  00000000  0004add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cbf2  00000000  00000000  000720b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98ec  00000000  00000000  0008eca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017858f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f30  00000000  00000000  001785e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b798 	.word	0x0800b798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b798 	.word	0x0800b798

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <CollectDataTask>:
#define Vrefinti 9
#define Vbati 10


// packs data
void CollectDataTask(void * pvParams){ // run this each 10ms
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	for(;;){
		// get timestap
		TickType_t timestap = xTaskGetTickCount(); // this will never be able to collect data faster than 1ms,  we should be sampling at 10ms speed
 8000ff4:	f004 feea 	bl	8005dcc <xTaskGetTickCount>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	613b      	str	r3, [r7, #16]

		// get packet to use
		uint16_t index;
		xQueueReceive(uart2read, &index, portMAX_DELAY);
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <CollectDataTask+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f107 010e 	add.w	r1, r7, #14
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001008:	4618      	mov	r0, r3
 800100a:	f004 f8b3 	bl	8005174 <xQueueReceive>


#ifdef DEBUG
		int emptySpace = uxQueueSpacesAvailable(uart2read);
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <CollectDataTask+0xd0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f004 f98e 	bl	8005334 <uxQueueSpacesAvailable>
 8001018:	4603      	mov	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
#endif


		dataPacket* packet = &dataTable[index]; // pointer to packet
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <CollectDataTask+0xd4>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	4619      	mov	r1, r3
 8001024:	460b      	mov	r3, r1
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]

		// set timestap
		packet->timestap = timestap;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	601a      	str	r2, [r3, #0]
		// gpio reading is atomic
		// gear reading

		// use 21Mhz clock for ADC, each measurement takes 12 +480 cycles, so each 3936 cicles cpu gets interrupted to store value, frequency can be slowed down by using timers/dma, but 0,6% overhead is assumible (assuming that we only expend 25 cycles on interrupt handler, overhead=cycles interrupt(25)/cycles between interrupts(3936+25))
		// copy ADC oversampled values to struct
		for (int i = 0; i < 11; i++){
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e02b      	b.n	8001094 <CollectDataTask+0xa8>
			int mean = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
			for (int j = 0; j < 4; j++){
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	e011      	b.n	800106a <CollectDataTask+0x7e>
				mean += ADCvalues[j][i];
 8001046:	491f      	ldr	r1, [pc, #124]	; (80010c4 <CollectDataTask+0xd8>)
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001056:	4413      	add	r3, r2
 8001058:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800105c:	461a      	mov	r2, r3
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	4413      	add	r3, r2
 8001062:	623b      	str	r3, [r7, #32]
			for (int j = 0; j < 4; j++){
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b03      	cmp	r3, #3
 800106e:	ddea      	ble.n	8001046 <CollectDataTask+0x5a>
			}
			mean = mean / 4;
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	2b00      	cmp	r3, #0
 8001074:	da00      	bge.n	8001078 <CollectDataTask+0x8c>
 8001076:	3303      	adds	r3, #3
 8001078:	109b      	asrs	r3, r3, #2
 800107a:	623b      	str	r3, [r7, #32]

			packet->ADCvalues[i] = mean;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	b299      	uxth	r1, r3
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	3304      	adds	r3, #4
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	460a      	mov	r2, r1
 800108c:	809a      	strh	r2, [r3, #4]
		for (int i = 0; i < 11; i++){
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	2b0a      	cmp	r3, #10
 8001098:	ddd0      	ble.n	800103c <CollectDataTask+0x50>



		// send data through queue

		xQueueSend(read2uart, &index, portMAX_DELAY);
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <CollectDataTask+0xdc>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f107 010e 	add.w	r1, r7, #14
 80010a2:	2300      	movs	r3, #0
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	f003 ff66 	bl	8004f78 <xQueueGenericSend>

		// execute this task each 10 miliseconds (period)
		vTaskDelayUntil(&timestap, DATA_AQUISITION_PERIOD);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	210a      	movs	r1, #10
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fcac 	bl	8005a10 <vTaskDelayUntil>
	for(;;){
 80010b8:	e79c      	b.n	8000ff4 <CollectDataTask+0x8>
 80010ba:	bf00      	nop
 80010bc:	20004288 	.word	0x20004288
 80010c0:	20004280 	.word	0x20004280
 80010c4:	20000200 	.word	0x20000200
 80010c8:	20004284 	.word	0x20004284

080010cc <InitTask>:
	vTaskDelay(1000);
  }
}

	// main task for initializing stuff
void InitTask(void * pvParams){
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b090      	sub	sp, #64	; 0x40
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
	// initialize peripherals
	//leds
	initializeLEDS(&hdac);
 80010d4:	482f      	ldr	r0, [pc, #188]	; (8001194 <InitTask+0xc8>)
 80010d6:	f000 f8cb 	bl	8001270 <initializeLEDS>
	// ADC start in IT mode
	HAL_ADC_Start_IT(&hadc1);
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <InitTask+0xcc>)
 80010dc:	f001 fa12 	bl	8002504 <HAL_ADC_Start_IT>
	// ADC_IRQn interrupt is enabled on NVIC by HAL, the interrrupt handler store ADC values on variables, CHECK callback at the bottom

	// create index queues:
	read2uart = xQueueCreate(TABLE_SIZE, sizeof(uint16_t));
 80010e0:	2200      	movs	r2, #0
 80010e2:	2102      	movs	r1, #2
 80010e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010e8:	f003 feec 	bl	8004ec4 <xQueueGenericCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a2b      	ldr	r2, [pc, #172]	; (800119c <InitTask+0xd0>)
 80010f0:	6013      	str	r3, [r2, #0]
	uart2read = xQueueCreate(TABLE_SIZE, sizeof(uint16_t));
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fa:	f003 fee3 	bl	8004ec4 <xQueueGenericCreate>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <InitTask+0xd4>)
 8001102:	6013      	str	r3, [r2, #0]

	// initialize dataTable
	dataTable = (dataPacket*) malloc(TABLE_SIZE*sizeof(dataPacket));
 8001104:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8001108:	f005 ffa8 	bl	800705c <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <InitTask+0xd8>)
 8001112:	601a      	str	r2, [r3, #0]

	// populate dataTable with empty elements (same as formatting to all 0??) and corresponding queue
	dataPacket empty = {};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2228      	movs	r2, #40	; 0x28
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f005 ffb3 	bl	8007088 <memset>
	for (int i = 0; i < TABLE_SIZE; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e01f      	b.n	8001168 <InitTask+0x9c>
		dataTable[i] = empty;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <InitTask+0xd8>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4619      	mov	r1, r3
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	461d      	mov	r5, r3
 800113c:	f107 0410 	add.w	r4, r7, #16
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800114c:	e885 0003 	stmia.w	r5, {r0, r1}
		xQueueSend(uart2read, &i, portMAX_DELAY);
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <InitTask+0xd4>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f107 010c 	add.w	r1, r7, #12
 8001158:	2300      	movs	r3, #0
 800115a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115e:	f003 ff0b 	bl	8004f78 <xQueueGenericSend>
	for (int i = 0; i < TABLE_SIZE; i++){
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116e:	dbdb      	blt.n	8001128 <InitTask+0x5c>

	}

	// start Producer task:
	xTaskCreate(CollectDataTask, "CollectData", 128, NULL, 10, NULL);
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	230a      	movs	r3, #10
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	490a      	ldr	r1, [pc, #40]	; (80011a8 <InitTask+0xdc>)
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <InitTask+0xe0>)
 8001180:	f004 fa68 	bl	8005654 <xTaskCreate>




	// exit init task, important, if not hard fault
	vTaskDelete(NULL);
 8001184:	2000      	movs	r0, #0
 8001186:	f004 fbb3 	bl	80058f0 <vTaskDelete>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bdb0      	pop	{r4, r5, r7, pc}
 8001192:	bf00      	nop
 8001194:	20004374 	.word	0x20004374
 8001198:	2000432c 	.word	0x2000432c
 800119c:	20004284 	.word	0x20004284
 80011a0:	20004288 	.word	0x20004288
 80011a4:	20004280 	.word	0x20004280
 80011a8:	0800b7b0 	.word	0x0800b7b0
 80011ac:	08000fed 	.word	0x08000fed

080011b0 <SecondMain>:

int SecondMain(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8


	// start initialize task, (maybe some stuff needs a started scheduler for running)
	xTaskCreate(InitTask, "Initializing Task", 128, NULL, 1, NULL);
 80011b6:	2300      	movs	r3, #0
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	4906      	ldr	r1, [pc, #24]	; (80011dc <SecondMain+0x2c>)
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <SecondMain+0x30>)
 80011c6:	f004 fa45 	bl	8005654 <xTaskCreate>

	// start scheduler, this won't return unless there is an error
	vTaskStartScheduler();
 80011ca:	f004 fcd3 	bl	8005b74 <vTaskStartScheduler>
	// endless loop so we never return to that hell of main
			halt();
 80011ce:	f000 f869 	bl	80012a4 <halt>
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	0800b7bc 	.word	0x0800b7bc
 80011e0:	080010cd 	.word	0x080010cd

080011e4 <HAL_ADC_ConvCpltCallback>:
// Interruption Callbacks

// ADC callback
int ADC_callback_index_large = 0;
int ADC_callback_index = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	// write value to according matrix place
	ADCvalues[ADC_callback_index_large][ADC_callback_index] = HAL_ADC_GetValue(&hadc1);
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <HAL_ADC_ConvCpltCallback+0x78>)
 80011ee:	f001 fba8 	bl	8002942 <HAL_ADC_GetValue>
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_ADC_ConvCpltCallback+0x80>)
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	b284      	uxth	r4, r0
 80011fc:	481a      	ldr	r0, [pc, #104]	; (8001268 <HAL_ADC_ConvCpltCallback+0x84>)
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	440b      	add	r3, r1
 800120a:	4622      	mov	r2, r4
 800120c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	ADC_callback_index = (ADC_callback_index+1) % 11;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_ADC_ConvCpltCallback+0x80>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1c59      	adds	r1, r3, #1
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_ADC_ConvCpltCallback+0x88>)
 8001218:	fb83 2301 	smull	r2, r3, r3, r1
 800121c:	105a      	asrs	r2, r3, #1
 800121e:	17cb      	asrs	r3, r1, #31
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	1aca      	subs	r2, r1, r3
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_ADC_ConvCpltCallback+0x80>)
 8001230:	601a      	str	r2, [r3, #0]
	if (ADC_callback_index == 0){
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_ADC_ConvCpltCallback+0x80>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10b      	bne.n	8001252 <HAL_ADC_ConvCpltCallback+0x6e>
		ADC_callback_index_large = (ADC_callback_index_large+1) % 4;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_ADC_ConvCpltCallback+0x7c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	425a      	negs	r2, r3
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	f002 0203 	and.w	r2, r2, #3
 800124a:	bf58      	it	pl
 800124c:	4253      	negpl	r3, r2
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001250:	6013      	str	r3, [r2, #0]
	}
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	bf00      	nop
 800125c:	2000432c 	.word	0x2000432c
 8001260:	20000258 	.word	0x20000258
 8001264:	2000025c 	.word	0x2000025c
 8001268:	20000200 	.word	0x20000200
 800126c:	2e8ba2e9 	.word	0x2e8ba2e9

08001270 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <initializeLEDS+0x30>)
 800127e:	f002 fa79 	bl	8003774 <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f001 ffa5 	bl	80031d4 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 800128a:	2300      	movs	r3, #0
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f002 f84b 	bl	800332c <HAL_DAC_SetValue>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <halt>:
}

/**
  * @brief  halts system and puts all 4 leds on
  */
void halt(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <halt+0x3c>)
 80012b0:	f002 fa60 	bl	8003774 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <halt+0x3c>)
 80012bc:	f002 fa5a 	bl	8003774 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <halt+0x3c>)
 80012c8:	f002 fa54 	bl	8003774 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <halt+0x3c>)
 80012d4:	f002 fa4e 	bl	8003774 <HAL_GPIO_WritePin>

	vTaskEndScheduler();
 80012d8:	f004 fcb6 	bl	8005c48 <vTaskEndScheduler>
	for (;;);
 80012dc:	e7fe      	b.n	80012dc <halt+0x38>
 80012de:	bf00      	nop
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <vApplicationGetIdleTaskMemory+0x2c>)
 80012f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <vApplicationGetIdleTaskMemory+0x30>)
 80012fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000260 	.word	0x20000260
 8001314:	20000314 	.word	0x20000314

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f001 f86b 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f82d 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 fa9d 	bl	8001864 <MX_GPIO_Init>
  MX_SPI1_Init();
 800132a:	f000 f9db 	bl	80016e4 <MX_SPI1_Init>
  MX_DAC_Init();
 800132e:	f000 f9af 	bl	8001690 <MX_DAC_Init>
  MX_ADC1_Init();
 8001332:	f000 f89b 	bl	800146c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001336:	f000 f977 	bl	8001628 <MX_CAN1_Init>
  MX_SPI2_Init();
 800133a:	f000 fa09 	bl	8001750 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800133e:	f000 fa3d 	bl	80017bc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001342:	f000 fa65 	bl	8001810 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001346:	f000 f885 	bl	8001454 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SecondMain();
 800134a:	f7ff ff31 	bl	80011b0 <SecondMain>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <main+0x60>)
 8001350:	1d3c      	adds	r4, r7, #4
 8001352:	461d      	mov	r5, r3
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fc30 	bl	8004bca <osThreadCreate>
 800136a:	4603      	mov	r3, r0
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <main+0x64>)
 800136e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001370:	f003 fc24 	bl	8004bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001374:	e7fe      	b.n	8001374 <main+0x5c>
 8001376:	bf00      	nop
 8001378:	0800b7dc 	.word	0x0800b7dc
 800137c:	2000428c 	.word	0x2000428c

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	2230      	movs	r2, #48	; 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f005 fe7a 	bl	8007088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <SystemClock_Config+0xcc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <SystemClock_Config+0xcc>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <SystemClock_Config+0xcc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <SystemClock_Config+0xd0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <SystemClock_Config+0xd0>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <SystemClock_Config+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013dc:	2301      	movs	r3, #1
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	2302      	movs	r3, #2
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013fe:	2307      	movs	r3, #7
 8001400:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4618      	mov	r0, r3
 8001408:	f002 f9ce 	bl	80037a8 <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001412:	f000 fb69 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	230f      	movs	r3, #15
 8001418:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141a:	2302      	movs	r3, #2
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2105      	movs	r1, #5
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fc2f 	bl	8003c98 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001440:	f000 fb52 	bl	8001ae8 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	; 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2105      	movs	r1, #5
 800145c:	2012      	movs	r0, #18
 800145e:	f001 fe6d 	bl	800313c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001462:	2012      	movs	r0, #18
 8001464:	f001 fe86 	bl	8003174 <HAL_NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001480:	4a67      	ldr	r2, [pc, #412]	; (8001620 <MX_ADC1_Init+0x1b4>)
 8001482:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800148a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148c:	4b63      	ldr	r3, [pc, #396]	; (800161c <MX_ADC1_Init+0x1b0>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001492:	4b62      	ldr	r3, [pc, #392]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001494:	2201      	movs	r2, #1
 8001496:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <MX_ADC1_Init+0x1b0>)
 800149a:	2201      	movs	r2, #1
 800149c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ac:	4b5b      	ldr	r3, [pc, #364]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014ae:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <MX_ADC1_Init+0x1b8>)
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b2:	4b5a      	ldr	r3, [pc, #360]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014ba:	220b      	movs	r2, #11
 80014bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014be:	4b57      	ldr	r3, [pc, #348]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c6:	4b55      	ldr	r3, [pc, #340]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014cc:	4853      	ldr	r0, [pc, #332]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014ce:	f000 ffd5 	bl	800247c <HAL_ADC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d8:	f000 fb06 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014dc:	2301      	movs	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014e4:	2307      	movs	r3, #7
 80014e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	484b      	ldr	r0, [pc, #300]	; (800161c <MX_ADC1_Init+0x1b0>)
 80014ee:	f001 fa49 	bl	8002984 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f8:	f000 faf6 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4844      	ldr	r0, [pc, #272]	; (800161c <MX_ADC1_Init+0x1b0>)
 800150a:	f001 fa3b 	bl	8002984 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001514:	f000 fae8 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001518:	2303      	movs	r3, #3
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800151c:	2303      	movs	r3, #3
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	483d      	ldr	r0, [pc, #244]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001526:	f001 fa2d 	bl	8002984 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001530:	f000 fada 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001534:	2308      	movs	r3, #8
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001538:	2304      	movs	r3, #4
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4836      	ldr	r0, [pc, #216]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001542:	f001 fa1f 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800154c:	f000 facc 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001550:	2309      	movs	r3, #9
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001554:	2305      	movs	r3, #5
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	482f      	ldr	r0, [pc, #188]	; (800161c <MX_ADC1_Init+0x1b0>)
 800155e:	f001 fa11 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001568:	f000 fabe 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800156c:	230b      	movs	r3, #11
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001570:	2306      	movs	r3, #6
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4828      	ldr	r0, [pc, #160]	; (800161c <MX_ADC1_Init+0x1b0>)
 800157a:	f001 fa03 	bl	8002984 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001584:	f000 fab0 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001588:	230e      	movs	r3, #14
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800158c:	2307      	movs	r3, #7
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4821      	ldr	r0, [pc, #132]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001596:	f001 f9f5 	bl	8002984 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80015a0:	f000 faa2 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015a4:	230f      	movs	r3, #15
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	481a      	ldr	r0, [pc, #104]	; (800161c <MX_ADC1_Init+0x1b0>)
 80015b2:	f001 f9e7 	bl	8002984 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015bc:	f000 fa94 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015c0:	2310      	movs	r3, #16
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015c4:	2309      	movs	r3, #9
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_ADC1_Init+0x1b0>)
 80015ce:	f001 f9d9 	bl	8002984 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d8:	f000 fa86 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015dc:	2311      	movs	r3, #17
 80015de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015e0:	230a      	movs	r3, #10
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_ADC1_Init+0x1b0>)
 80015ea:	f001 f9cb 	bl	8002984 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015f4:	f000 fa78 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80015f8:	2312      	movs	r3, #18
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015fc:	230b      	movs	r3, #11
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_ADC1_Init+0x1b0>)
 8001606:	f001 f9bd 	bl	8002984 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001610:	f000 fa6a 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000432c 	.word	0x2000432c
 8001620:	40012000 	.word	0x40012000
 8001624:	0f000001 	.word	0x0f000001

08001628 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_CAN1_Init+0x60>)
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_CAN1_Init+0x64>)
 8001630:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_CAN1_Init+0x60>)
 8001634:	2210      	movs	r2, #16
 8001636:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_CAN1_Init+0x60>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_CAN1_Init+0x60>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_CAN1_Init+0x60>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_CAN1_Init+0x60>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_CAN1_Init+0x60>)
 8001652:	2200      	movs	r2, #0
 8001654:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_CAN1_Init+0x60>)
 8001658:	2200      	movs	r2, #0
 800165a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_CAN1_Init+0x60>)
 800165e:	2200      	movs	r2, #0
 8001660:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_CAN1_Init+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_CAN1_Init+0x60>)
 800166a:	2200      	movs	r2, #0
 800166c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_CAN1_Init+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_CAN1_Init+0x60>)
 8001676:	f001 fbad 	bl	8002dd4 <HAL_CAN_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001680:	f000 fa32 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20004424 	.word	0x20004424
 800168c:	40006400 	.word	0x40006400

08001690 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_DAC_Init+0x4c>)
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <MX_DAC_Init+0x50>)
 80016a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_DAC_Init+0x4c>)
 80016a6:	f001 fd73 	bl	8003190 <HAL_DAC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016b0:	f000 fa1a 	bl	8001ae8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_DAC_Init+0x4c>)
 80016c4:	f001 fe61 	bl	800338a <HAL_DAC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016ce:	f000 fa0b 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20004374 	.word	0x20004374
 80016e0:	40007400 	.word	0x40007400

080016e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_SPI1_Init+0x64>)
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <MX_SPI1_Init+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI1_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI1_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI1_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x64>)
 8001730:	220a      	movs	r2, #10
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_SPI1_Init+0x64>)
 8001736:	f002 fcdd 	bl	80040f4 <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001740:	f000 f9d2 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200043cc 	.word	0x200043cc
 800174c:	40013000 	.word	0x40013000

08001750 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_SPI2_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI2_Init+0x64>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI2_Init+0x64>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_SPI2_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI2_Init+0x64>)
 800179c:	220a      	movs	r2, #10
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_SPI2_Init+0x64>)
 80017a2:	f002 fca7 	bl	80040f4 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017ac:	f000 f99c 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20004290 	.word	0x20004290
 80017b8:	40003800 	.word	0x40003800

080017bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART3_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017f4:	f002 ffb4 	bl	8004760 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 f973 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200042e8 	.word	0x200042e8
 800180c:	40004800 	.word	0x40004800

08001810 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_USART6_UART_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001848:	f002 ff8a 	bl	8004760 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001852:	f000 f949 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20004388 	.word	0x20004388
 8001860:	40011400 	.word	0x40011400

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4b87      	ldr	r3, [pc, #540]	; (8001a9c <MX_GPIO_Init+0x238>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a86      	ldr	r2, [pc, #536]	; (8001a9c <MX_GPIO_Init+0x238>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <MX_GPIO_Init+0x238>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b80      	ldr	r3, [pc, #512]	; (8001a9c <MX_GPIO_Init+0x238>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <MX_GPIO_Init+0x238>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <MX_GPIO_Init+0x238>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a63      	ldr	r2, [pc, #396]	; (8001a9c <MX_GPIO_Init+0x238>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <MX_GPIO_Init+0x238>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2108      	movs	r1, #8
 8001926:	485e      	ldr	r0, [pc, #376]	; (8001aa0 <MX_GPIO_Init+0x23c>)
 8001928:	f001 ff24 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2101      	movs	r1, #1
 8001930:	485c      	ldr	r0, [pc, #368]	; (8001aa4 <MX_GPIO_Init+0x240>)
 8001932:	f001 ff1f 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8001936:	2200      	movs	r2, #0
 8001938:	f64f 4110 	movw	r1, #64528	; 0xfc10
 800193c:	485a      	ldr	r0, [pc, #360]	; (8001aa8 <MX_GPIO_Init+0x244>)
 800193e:	f001 ff19 	bl	8003774 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001942:	2308      	movs	r3, #8
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4851      	ldr	r0, [pc, #324]	; (8001aa0 <MX_GPIO_Init+0x23c>)
 800195a:	f001 fd6f 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800195e:	2301      	movs	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	484b      	ldr	r0, [pc, #300]	; (8001aa4 <MX_GPIO_Init+0x240>)
 8001976:	f001 fd61 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800197a:	2308      	movs	r3, #8
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198a:	2305      	movs	r3, #5
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <MX_GPIO_Init+0x240>)
 8001996:	f001 fd51 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800199a:	2301      	movs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800199e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	483f      	ldr	r0, [pc, #252]	; (8001aac <MX_GPIO_Init+0x248>)
 80019b0:	f001 fd44 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b4:	2304      	movs	r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	483a      	ldr	r0, [pc, #232]	; (8001ab0 <MX_GPIO_Init+0x24c>)
 80019c8:	f001 fd38 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019cc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80019d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	482f      	ldr	r0, [pc, #188]	; (8001aa0 <MX_GPIO_Init+0x23c>)
 80019e2:	f001 fd2b 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f8:	2305      	movs	r3, #5
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	482b      	ldr	r0, [pc, #172]	; (8001ab0 <MX_GPIO_Init+0x24c>)
 8001a04:	f001 fd1a 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8001a08:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8001a0c:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4821      	ldr	r0, [pc, #132]	; (8001aa8 <MX_GPIO_Init+0x244>)
 8001a22:	f001 fd0b 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <MX_GPIO_Init+0x248>)
 8001a3c:	f001 fcfe 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a52:	230a      	movs	r3, #10
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4813      	ldr	r0, [pc, #76]	; (8001aac <MX_GPIO_Init+0x248>)
 8001a5e:	f001 fced 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a62:	2320      	movs	r3, #32
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_GPIO_Init+0x244>)
 8001a76:	f001 fce1 	bl	800343c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_GPIO_Init+0x23c>)
 8001a90:	f001 fcd4 	bl	800343c <HAL_GPIO_Init>

}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f003 f8d0 	bl	8004c62 <osDelay>
 8001ac2:	e7fb      	b.n	8001abc <StartDefaultTask+0x8>

08001ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad6:	f000 fcb1 	bl	800243c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40001000 	.word	0x40001000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>
	...

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_MspInit+0x54>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_MspInit+0x54>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x54>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_MspInit+0x54>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_MspInit+0x54>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_MspInit+0x54>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	210f      	movs	r1, #15
 8001b36:	f06f 0001 	mvn.w	r0, #1
 8001b3a:	f001 faff 	bl	800313c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_ADC_MspInit+0xe4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d15b      	bne.n	8001c26 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_ADC_MspInit+0xe8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bde:	2332      	movs	r3, #50	; 0x32
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4811      	ldr	r0, [pc, #68]	; (8001c38 <HAL_ADC_MspInit+0xec>)
 8001bf2:	f001 fc23 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bf6:	230e      	movs	r3, #14
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <HAL_ADC_MspInit+0xf0>)
 8001c0a:	f001 fc17 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	; (8001c40 <HAL_ADC_MspInit+0xf4>)
 8001c22:	f001 fc0b 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	; 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40012000 	.word	0x40012000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400

08001c44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_CAN_MspInit+0x84>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12b      	bne.n	8001cbe <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cae:	2309      	movs	r3, #9
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_CAN_MspInit+0x8c>)
 8001cba:	f001 fbbf 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020c00 	.word	0x40020c00

08001cd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_DAC_MspInit+0x8c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12f      	bne.n	8001d56 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_DAC_MspInit+0x90>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d2e:	2310      	movs	r3, #16
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_DAC_MspInit+0x94>)
 8001d42:	f001 fb7b 	bl	800343c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	2036      	movs	r0, #54	; 0x36
 8001d4c:	f001 f9f6 	bl	800313c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d50:	2036      	movs	r0, #54	; 0x36
 8001d52:	f001 fa0f 	bl	8003174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40007400 	.word	0x40007400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_SPI_MspInit+0xe8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12c      	bne.n	8001de8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001dc6:	23e0      	movs	r3, #224	; 0xe0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	481e      	ldr	r0, [pc, #120]	; (8001e5c <HAL_SPI_MspInit+0xf0>)
 8001de2:	f001 fb2b 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de6:	e031      	b.n	8001e4c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_SPI_MspInit+0xf4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12c      	bne.n	8001e4c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_SPI_MspInit+0xec>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_MISO_Pin|CAN_MOSI_Pin;
 8001e2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4807      	ldr	r0, [pc, #28]	; (8001e64 <HAL_SPI_MspInit+0xf8>)
 8001e48:	f001 faf8 	bl	800343c <HAL_GPIO_Init>
}
 8001e4c:	bf00      	nop
 8001e4e:	3730      	adds	r7, #48	; 0x30
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013000 	.word	0x40013000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40003800 	.word	0x40003800
 8001e64:	40020400 	.word	0x40020400

08001e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_UART_MspInit+0x128>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d14c      	bne.n	8001f24 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4827      	ldr	r0, [pc, #156]	; (8001f98 <HAL_UART_MspInit+0x130>)
 8001efc:	f001 fa9e 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f12:	2307      	movs	r3, #7
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <HAL_UART_MspInit+0x134>)
 8001f1e:	f001 fa8d 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f22:	e030      	b.n	8001f86 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_UART_MspInit+0x138>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d12b      	bne.n	8001f86 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_UART_MspInit+0x12c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f66:	23c0      	movs	r3, #192	; 0xc0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f76:	2308      	movs	r3, #8
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <HAL_UART_MspInit+0x13c>)
 8001f82:	f001 fa5b 	bl	800343c <HAL_GPIO_Init>
}
 8001f86:	bf00      	nop
 8001f88:	3730      	adds	r7, #48	; 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40004800 	.word	0x40004800
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40011400 	.word	0x40011400
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	2036      	movs	r0, #54	; 0x36
 8001fbe:	f001 f8bd 	bl	800313c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fc2:	2036      	movs	r0, #54	; 0x36
 8001fc4:	f001 f8d6 	bl	8003174 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_InitTick+0xa4>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <HAL_InitTick+0xa4>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_InitTick+0xa4>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fe4:	f107 0210 	add.w	r2, r7, #16
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 f84e 	bl	8004090 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ff4:	f002 f824 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <HAL_InitTick+0xa8>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9b      	lsrs	r3, r3, #18
 8002008:	3b01      	subs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_InitTick+0xac>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <HAL_InitTick+0xb0>)
 8002010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_InitTick+0xac>)
 8002014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002018:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_InitTick+0xac>)
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_InitTick+0xac>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_InitTick+0xac>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <HAL_InitTick+0xac>)
 800202e:	f002 f8ea 	bl	8004206 <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <HAL_InitTick+0xac>)
 800203a:	f002 f93d 	bl	80042b8 <HAL_TIM_Base_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	431bde83 	.word	0x431bde83
 8002054:	2000444c 	.word	0x2000444c
 8002058:	40001000 	.word	0x40001000

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <ADC_IRQHandler+0x10>)
 800208e:	f000 fb17 	bl	80026c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000432c 	.word	0x2000432c

0800209c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <TIM6_DAC_IRQHandler+0x20>)
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <TIM6_DAC_IRQHandler+0x20>)
 80020ac:	f001 f8e4 	bl	8003278 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <TIM6_DAC_IRQHandler+0x24>)
 80020b2:	f002 f971 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20004374 	.word	0x20004374
 80020c0:	2000444c 	.word	0x2000444c

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_kill>:

int _kill(int pid, int sig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020de:	f004 fe9d 	bl	8006e1c <__errno>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
	return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_exit>:

void _exit (int status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffe7 	bl	80020d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002106:	e7fe      	b.n	8002106 <_exit+0x12>

08002108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e00a      	b.n	8002130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211a:	f3af 8000 	nop.w
 800211e:	4601      	mov	r1, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	b2ca      	uxtb	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf0      	blt.n	800211a <_read+0x12>
	}

return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e009      	b.n	8002168 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf1      	blt.n	8002154 <_write+0x12>
	}
	return len;
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_close>:

int _close(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return -1;
 8002182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a2:	605a      	str	r2, [r3, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_isatty>:

int _isatty(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f004 fe02 	bl	8006e1c <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20020000 	.word	0x20020000
 8002244:	00000400 	.word	0x00000400
 8002248:	20000514 	.word	0x20000514
 800224c:	200044a0 	.word	0x200044a0

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <SystemInit+0x20>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <SystemInit+0x20>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227a:	490e      	ldr	r1, [pc, #56]	; (80022b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002290:	4c0b      	ldr	r4, [pc, #44]	; (80022c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229e:	f7ff ffd7 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f004 feb7 	bl	8007014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7ff f837 	bl	8001318 <main>
  bx  lr    
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022b8:	0800bcdc 	.word	0x0800bcdc
  ldr r2, =_sbss
 80022bc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80022c0:	2000449c 	.word	0x2000449c

080022c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <CAN1_RX0_IRQHandler>

080022c6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
}
 80022d6:	bf00      	nop
 80022d8:	f7ff fc06 	bl	8001ae8 <Error_Handler>
 80022dc:	e7fe      	b.n	80022dc <stm32_lock_init+0x16>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
 80022f8:	f7ff fbf6 	bl	8001ae8 <Error_Handler>
 80022fc:	e7fe      	b.n	80022fc <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022fe:	f3ef 8305 	mrs	r3, IPSR
 8002302:	60fb      	str	r3, [r7, #12]
  return(result);
 8002304:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800230a:	b672      	cpsid	i
}
 800230c:	bf00      	nop
 800230e:	f7ff fbeb 	bl	8001ae8 <Error_Handler>
 8002312:	e7fe      	b.n	8002312 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8002314:	f003 fcb0 	bl	8005c78 <vTaskSuspendAll>
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800232e:	b672      	cpsid	i
}
 8002330:	bf00      	nop
 8002332:	f7ff fbd9 	bl	8001ae8 <Error_Handler>
 8002336:	e7fe      	b.n	8002336 <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002338:	f3ef 8305 	mrs	r3, IPSR
 800233c:	60fb      	str	r3, [r7, #12]
  return(result);
 800233e:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
 8002348:	f7ff fbce 	bl	8001ae8 <Error_Handler>
 800234c:	e7fe      	b.n	800234c <stm32_lock_release+0x2c>
  xTaskResumeAll();
 800234e:	f003 fca1 	bl	8005c94 <xTaskResumeAll>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002368:	f004 fd58 	bl	8006e1c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	2216      	movs	r2, #22
 8002370:	601a      	str	r2, [r3, #0]
    return;
 8002372:	e015      	b.n	80023a0 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002374:	2001      	movs	r0, #1
 8002376:	f004 fe71 	bl	800705c <malloc>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff99 	bl	80022c6 <stm32_lock_init>
    return;
 8002394:	e004      	b.n	80023a0 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002396:	b672      	cpsid	i
}
 8002398:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800239a:	f7ff fba5 	bl	8001ae8 <Error_Handler>
 800239e:	e7fe      	b.n	800239e <__retarget_lock_init_recursive+0x44>
}
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
 80023b8:	f7ff fb96 	bl	8001ae8 <Error_Handler>
 80023bc:	e7fe      	b.n	80023bc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff90 	bl	80022e6 <stm32_lock_acquire>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
 80023e0:	f7ff fb82 	bl	8001ae8 <Error_Handler>
 80023e4:	e7fe      	b.n	80023e4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff99 	bl	8002320 <stm32_lock_release>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_Init+0x40>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_Init+0x40>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_Init+0x40>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002420:	2003      	movs	r0, #3
 8002422:	f000 fe80 	bl	8003126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002426:	200f      	movs	r0, #15
 8002428:	f7ff fdbe 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242c:	f7ff fb62 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000008 	.word	0x20000008
 8002460:	20004494 	.word	0x20004494

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20004494 	.word	0x20004494

0800247c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e033      	b.n	80024fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fb56 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024c2:	f023 0302 	bic.w	r3, r3, #2
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fb7a 	bl	8002bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
 80024ea:	e001      	b.n	80024f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_Start_IT+0x1a>
 800251a:	2302      	movs	r3, #2
 800251c:	e0bd      	b.n	800269a <HAL_ADC_Start_IT+0x196>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d018      	beq.n	8002566 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002544:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <HAL_ADC_Start_IT+0x1a4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_ADC_Start_IT+0x1a8>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9a      	lsrs	r2, r3, #18
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002558:	e002      	b.n	8002560 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3b01      	subs	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f9      	bne.n	800255a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 8085 	bne.w	8002680 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b4:	d106      	bne.n	80025c4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f023 0206 	bic.w	r2, r3, #6
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
 80025c2:	e002      	b.n	80025ca <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d2:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <HAL_ADC_Start_IT+0x1ac>)
 80025d4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025de:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ee:	f043 0320 	orr.w	r3, r3, #32
 80025f2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12a      	bne.n	8002656 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <HAL_ADC_Start_IT+0x1b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d015      	beq.n	8002636 <HAL_ADC_Start_IT+0x132>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_ADC_Start_IT+0x1b4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d105      	bne.n	8002620 <HAL_ADC_Start_IT+0x11c>
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_ADC_Start_IT+0x1ac>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <HAL_ADC_Start_IT+0x1b8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d136      	bne.n	8002698 <HAL_ADC_Start_IT+0x194>
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_ADC_Start_IT+0x1ac>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d130      	bne.n	8002698 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d129      	bne.n	8002698 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e020      	b.n	8002698 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_ADC_Start_IT+0x1b0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d11b      	bne.n	8002698 <HAL_ADC_Start_IT+0x194>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d114      	bne.n	8002698 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	e00b      	b.n	8002698 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	40012300 	.word	0x40012300
 80026b4:	40012000 	.word	0x40012000
 80026b8:	40012100 	.word	0x40012100
 80026bc:	40012200 	.word	0x40012200

080026c0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	bf0c      	ite	eq
 80026de:	2301      	moveq	r3, #1
 80026e0:	2300      	movne	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d049      	beq.n	8002796 <HAL_ADC_IRQHandler+0xd6>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d046      	beq.n	8002796 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d12b      	bne.n	8002786 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d127      	bne.n	8002786 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800274e:	2b00      	cmp	r3, #0
 8002750:	d119      	bne.n	8002786 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0220 	bic.w	r2, r2, #32
 8002760:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fd2c 	bl	80011e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0212 	mvn.w	r2, #18
 8002794:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d057      	beq.n	8002878 <HAL_ADC_IRQHandler+0x1b8>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d054      	beq.n	8002878 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d139      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800280c:	2b00      	cmp	r3, #0
 800280e:	d12b      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	d124      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d119      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002842:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 faa9 	bl	8002dc0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 020c 	mvn.w	r2, #12
 8002876:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d017      	beq.n	80028da <HAL_ADC_IRQHandler+0x21a>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10d      	bne.n	80028da <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f846 	bl	800295c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0201 	mvn.w	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <HAL_ADC_IRQHandler+0x27a>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f043 0202 	orr.w	r2, r3, #2
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f820 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0220 	mvn.w	r2, #32
 8002938:	601a      	str	r2, [r3, #0]
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e105      	b.n	8002bac <HAL_ADC_ConfigChannel+0x228>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	d925      	bls.n	80029fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1e      	subs	r3, #30
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	400a      	ands	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68d9      	ldr	r1, [r3, #12]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4403      	add	r3, r0
 80029ee:	3b1e      	subs	r3, #30
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e022      	b.n	8002a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	2207      	movs	r2, #7
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4403      	add	r3, r0
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d824      	bhi.n	8002a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b05      	subs	r3, #5
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b05      	subs	r3, #5
 8002a86:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
 8002a92:	e04c      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d824      	bhi.n	8002ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b23      	subs	r3, #35	; 0x23
 8002aae:	221f      	movs	r2, #31
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b23      	subs	r3, #35	; 0x23
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae4:	e023      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b41      	subs	r3, #65	; 0x41
 8002af8:	221f      	movs	r2, #31
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b41      	subs	r3, #65	; 0x41
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_ADC_ConfigChannel+0x234>)
 8002b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_ADC_ConfigChannel+0x238>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d109      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1cc>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_ADC_ConfigChannel+0x238>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d123      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x21e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d003      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x1e6>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b11      	cmp	r3, #17
 8002b68:	d11b      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d111      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_ADC_ConfigChannel+0x23c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_ADC_ConfigChannel+0x240>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	0c9a      	lsrs	r2, r3, #18
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b94:	e002      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f9      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012300 	.word	0x40012300
 8002bbc:	40012000 	.word	0x40012000
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd0:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <ADC_Init+0x1f0>)
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	021a      	lsls	r2, r3, #8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <ADC_Init+0x1f4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d022      	beq.n	8002ca6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	e00f      	b.n	8002cc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0202 	bic.w	r2, r2, #2
 8002cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7e1b      	ldrb	r3, [r3, #24]
 8002ce0:	005a      	lsls	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01b      	beq.n	8002d2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	035a      	lsls	r2, r3, #13
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e007      	b.n	8002d3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	051a      	lsls	r2, r3, #20
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d7e:	025a      	lsls	r2, r3, #9
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	029a      	lsls	r2, r3, #10
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012300 	.word	0x40012300
 8002dbc:	0f000001 	.word	0x0f000001

08002dc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0ed      	b.n	8002fc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe ff26 	bl	8001c44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e08:	f7ff fb2c 	bl	8002464 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e0e:	e012      	b.n	8002e36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e10:	f7ff fb28 	bl	8002464 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b0a      	cmp	r3, #10
 8002e1c:	d90b      	bls.n	8002e36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0c5      	b.n	8002fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0e5      	beq.n	8002e10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0202 	bic.w	r2, r2, #2
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e54:	f7ff fb06 	bl	8002464 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e5a:	e012      	b.n	8002e82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e5c:	f7ff fb02 	bl	8002464 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d90b      	bls.n	8002e82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2205      	movs	r2, #5
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e09f      	b.n	8002fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e5      	bne.n	8002e5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d108      	bne.n	8002eaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e007      	b.n	8002eba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7e5b      	ldrb	r3, [r3, #25]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d108      	bne.n	8002ed4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e007      	b.n	8002ee4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7e9b      	ldrb	r3, [r3, #26]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d108      	bne.n	8002efe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e007      	b.n	8002f0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0220 	bic.w	r2, r2, #32
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7edb      	ldrb	r3, [r3, #27]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0210 	bic.w	r2, r2, #16
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e007      	b.n	8002f38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0210 	orr.w	r2, r2, #16
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7f1b      	ldrb	r3, [r3, #28]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0208 	orr.w	r2, r2, #8
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e007      	b.n	8002f62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0208 	bic.w	r2, r2, #8
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7f5b      	ldrb	r3, [r3, #29]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0204 	orr.w	r2, r2, #4
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4907      	ldr	r1, [pc, #28]	; (8003068 <__NVIC_EnableIRQ+0x38>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db0a      	blt.n	8003096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	490c      	ldr	r1, [pc, #48]	; (80030b8 <__NVIC_SetPriority+0x4c>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	440b      	add	r3, r1
 8003090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003094:	e00a      	b.n	80030ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <__NVIC_SetPriority+0x50>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3b04      	subs	r3, #4
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	440b      	add	r3, r1
 80030aa:	761a      	strb	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf28      	it	cs
 80030de:	2304      	movcs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d902      	bls.n	80030f0 <NVIC_EncodePriority+0x30>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3b03      	subs	r3, #3
 80030ee:	e000      	b.n	80030f2 <NVIC_EncodePriority+0x32>
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43d9      	mvns	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	4313      	orrs	r3, r2
         );
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	; 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff4c 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314e:	f7ff ff61 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f7ff ffb1 	bl	80030c0 <NVIC_EncodePriority>
 800315e:	4602      	mov	r2, r0
 8003160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff80 	bl	800306c <__NVIC_SetPriority>
}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff54 	bl	8003030 <__NVIC_EnableIRQ>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e014      	b.n	80031cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	791b      	ldrb	r3, [r3, #4]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fd8e 	bl	8001cd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	795b      	ldrb	r3, [r3, #5]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_DAC_Start+0x16>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e040      	b.n	800326c <HAL_DAC_Start+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10f      	bne.n	8003234 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800321e:	2b3c      	cmp	r3, #60	; 0x3c
 8003220:	d11d      	bne.n	800325e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e014      	b.n	800325e <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	213c      	movs	r1, #60	; 0x3c
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	429a      	cmp	r2, r3
 800324c:	d107      	bne.n	800325e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0202 	orr.w	r2, r2, #2
 800325c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d120      	bne.n	80032d2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	d118      	bne.n	80032d2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f852 	bl	8003376 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e0:	d120      	bne.n	8003324 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d118      	bne.n	8003324 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f043 0202 	orr.w	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800330c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800331c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f882 	bl	8003428 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3308      	adds	r3, #8
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e004      	b.n	8003360 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	3314      	adds	r3, #20
 800335e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	461a      	mov	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	795b      	ldrb	r3, [r3, #5]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_DAC_ConfigChannel+0x18>
 800339e:	2302      	movs	r3, #2
 80033a0:	e03c      	b.n	800341c <HAL_DAC_ConfigChannel+0x92>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2202      	movs	r2, #2
 80033ac:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4013      	ands	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	22c0      	movs	r2, #192	; 0xc0
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e16b      	b.n	8003730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	f040 815a 	bne.w	800372a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d005      	beq.n	800348e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	2b02      	cmp	r3, #2
 800348c:	d130      	bne.n	80034f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0201 	and.w	r2, r3, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d017      	beq.n	800352c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d123      	bne.n	8003580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	08da      	lsrs	r2, r3, #3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80b4 	beq.w	800372a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b60      	ldr	r3, [pc, #384]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_GPIO_Init+0x30c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035de:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_GPIO_Init+0x310>)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	3302      	adds	r3, #2
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_GPIO_Init+0x314>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <HAL_GPIO_Init+0x226>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_GPIO_Init+0x318>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d025      	beq.n	800365e <HAL_GPIO_Init+0x222>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_GPIO_Init+0x31c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <HAL_GPIO_Init+0x21e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4f      	ldr	r2, [pc, #316]	; (800375c <HAL_GPIO_Init+0x320>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d019      	beq.n	8003656 <HAL_GPIO_Init+0x21a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4e      	ldr	r2, [pc, #312]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_GPIO_Init+0x216>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4d      	ldr	r2, [pc, #308]	; (8003764 <HAL_GPIO_Init+0x328>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00d      	beq.n	800364e <HAL_GPIO_Init+0x212>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4c      	ldr	r2, [pc, #304]	; (8003768 <HAL_GPIO_Init+0x32c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <HAL_GPIO_Init+0x20e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a4b      	ldr	r2, [pc, #300]	; (800376c <HAL_GPIO_Init+0x330>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_GPIO_Init+0x20a>
 8003642:	2307      	movs	r3, #7
 8003644:	e00e      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003646:	2308      	movs	r3, #8
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800364a:	2306      	movs	r3, #6
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x228>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x228>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <HAL_GPIO_Init+0x310>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a6:	4a32      	ldr	r2, [pc, #200]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_GPIO_Init+0x334>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_GPIO_Init+0x334>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f ae90 	bls.w	8003458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40021c00 	.word	0x40021c00
 8003770:	40013c00 	.word	0x40013c00

08003774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
 8003780:	4613      	mov	r3, r2
 8003782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003784:	787b      	ldrb	r3, [r7, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003790:	e003      	b.n	800379a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	619a      	str	r2, [r3, #24]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e264      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4ba3      	ldr	r3, [pc, #652]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4ba0      	ldr	r3, [pc, #640]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b9d      	ldr	r3, [pc, #628]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b99      	ldr	r3, [pc, #612]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e23f      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b91      	ldr	r3, [pc, #580]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a90      	ldr	r2, [pc, #576]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a8a      	ldr	r2, [pc, #552]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a83      	ldr	r2, [pc, #524]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fe00 	bl	8002464 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fdfc 	bl	8002464 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e204      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fdec 	bl	8002464 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe fde8 	bl	8002464 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f0      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b6c      	ldr	r3, [pc, #432]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b5f      	ldr	r3, [pc, #380]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b5c      	ldr	r3, [pc, #368]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c4      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b56      	ldr	r3, [pc, #344]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4952      	ldr	r1, [pc, #328]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_RCC_OscConfig+0x2b0>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe fda1 	bl	8002464 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe fd9d 	bl	8002464 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a5      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4940      	ldr	r1, [pc, #256]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0x2b0>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fd80 	bl	8002464 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe fd7c 	bl	8002464 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e184      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d030      	beq.n	80039f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_OscConfig+0x2b4>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe fd60 	bl	8002464 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe fd5c 	bl	8002464 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e164      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e015      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_OscConfig+0x2b4>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fd49 	bl	8002464 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe fd45 	bl	8002464 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e14d      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a0 	beq.w	8003b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <HAL_RCC_OscConfig+0x2b8>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fd0b 	bl	8002464 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	e011      	b.n	8003a76 <HAL_RCC_OscConfig+0x2ce>
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	42470000 	.word	0x42470000
 8003a5c:	42470e80 	.word	0x42470e80
 8003a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fe fcfe 	bl	8002464 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e106      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <HAL_RCC_OscConfig+0x4e4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2f0>
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a80      	ldr	r2, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x32a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x312>
 8003aa0:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a77      	ldr	r2, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab8:	e00b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x32a>
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	4b72      	ldr	r3, [pc, #456]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a71      	ldr	r2, [pc, #452]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fe fcc3 	bl	8002464 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fcbf 	bl	8002464 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0c5      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x33a>
 8003b04:	e014      	b.n	8003b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fcad 	bl	8002464 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fe fca9 	bl	8002464 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0af      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d105      	bne.n	8003b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b36:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 809b 	beq.w	8003c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d05c      	beq.n	8003c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d141      	bne.n	8003be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fc7d 	bl	8002464 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fc79 	bl	8002464 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e081      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	019b      	lsls	r3, r3, #6
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	4937      	ldr	r1, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fc52 	bl	8002464 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe fc4e 	bl	8002464 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e056      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x41c>
 8003be2:	e04e      	b.n	8003c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fe fc3b 	bl	8002464 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fe fc37 	bl	8002464 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e03f      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x44a>
 8003c10:	e037      	b.n	8003c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e032      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d028      	beq.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d11a      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470060 	.word	0x42470060

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe fb6c 	bl	8002464 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fb68 	bl	8002464 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f8b2 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	0800b800 	.word	0x0800b800
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	2300      	movs	r3, #0
 8003e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80bd 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e0b7      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e9a:	60bb      	str	r3, [r7, #8]
       break;
 8003e9c:	e0b7      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	e0b4      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04d      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	ea02 0800 	and.w	r8, r2, r0
 8003ed2:	ea03 0901 	and.w	r9, r3, r1
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	4649      	mov	r1, r9
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	014b      	lsls	r3, r1, #5
 8003ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ee8:	0142      	lsls	r2, r0, #5
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	ebb0 0008 	subs.w	r0, r0, r8
 8003ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f04:	0182      	lsls	r2, r0, #6
 8003f06:	1a12      	subs	r2, r2, r0
 8003f08:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	00d9      	lsls	r1, r3, #3
 8003f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f1a:	00d0      	lsls	r0, r2, #3
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	eb12 0208 	adds.w	r2, r2, r8
 8003f24:	eb43 0309 	adc.w	r3, r3, r9
 8003f28:	f04f 0000 	mov.w	r0, #0
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	0259      	lsls	r1, r3, #9
 8003f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f36:	0250      	lsls	r0, r2, #9
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f7fc fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e04a      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	ea02 0400 	and.w	r4, r2, r0
 8003f6e:	ea03 0501 	and.w	r5, r3, r1
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	014b      	lsls	r3, r1, #5
 8003f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f84:	0142      	lsls	r2, r0, #5
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	1b00      	subs	r0, r0, r4
 8003f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	018b      	lsls	r3, r1, #6
 8003f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f9e:	0182      	lsls	r2, r0, #6
 8003fa0:	1a12      	subs	r2, r2, r0
 8003fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb4:	00d0      	lsls	r0, r2, #3
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	1912      	adds	r2, r2, r4
 8003fbc:	eb45 0303 	adc.w	r3, r5, r3
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0299      	lsls	r1, r3, #10
 8003fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fce:	0290      	lsls	r0, r2, #10
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f7fc fe52 	bl	8000c88 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800400a:	60bb      	str	r3, [r7, #8]
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	68bb      	ldr	r3, [r7, #8]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004044:	f7ff fff0 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	0800b810 	.word	0x0800b810

08004068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800406c:	f7ff ffdc 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0b5b      	lsrs	r3, r3, #13
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCC_GetPCLK2Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	0800b810 	.word	0x0800b810

08004090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	220f      	movs	r2, #15
 800409e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_RCC_GetClockConfig+0x5c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0203 	and.w	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_RCC_GetClockConfig+0x5c>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_RCC_GetClockConfig+0x5c>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_GetClockConfig+0x5c>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <HAL_RCC_GetClockConfig+0x60>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0207 	and.w	r2, r3, #7
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40023c00 	.word	0x40023c00

080040f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07b      	b.n	80041fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d009      	beq.n	800412c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
 800411e:	e005      	b.n	800412c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fe10 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004162:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	ea42 0103 	orr.w	r1, r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0104 	and.w	r1, r3, #4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0210 	and.w	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e041      	b.n	800429c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f839 	bl	80042a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f000 f9d7 	bl	80045f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e04e      	b.n	800436e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <HAL_TIM_Base_Start_IT+0xc4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d01d      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_TIM_Base_Start_IT+0xc8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_TIM_Base_Start_IT+0xcc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <HAL_TIM_Base_Start_IT+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_TIM_Base_Start_IT+0xd4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_TIM_Base_Start_IT+0xd8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_TIM_Base_Start_IT+0xdc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d010      	beq.n	800436c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	e007      	b.n	800436c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40010400 	.word	0x40010400
 8004390:	40014000 	.word	0x40014000
 8004394:	40001800 	.word	0x40001800

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0202 	mvn.w	r2, #2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8ee 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8e0 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8f1 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8c4 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8b6 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8c7 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f89a 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f88c 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f89d 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f870 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f862 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f873 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd fad4 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d107      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f902 	bl	800474c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d10e      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d107      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f838 	bl	80045e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0220 	mvn.w	r2, #32
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8cc 	bl	8004738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a40      	ldr	r2, [pc, #256]	; (800470c <TIM_Base_SetConfig+0x114>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3d      	ldr	r2, [pc, #244]	; (8004710 <TIM_Base_SetConfig+0x118>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <TIM_Base_SetConfig+0x120>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3a      	ldr	r2, [pc, #232]	; (800471c <TIM_Base_SetConfig+0x124>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_Base_SetConfig+0x114>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02b      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d027      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <TIM_Base_SetConfig+0x118>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d023      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01f      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <TIM_Base_SetConfig+0x120>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01b      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <TIM_Base_SetConfig+0x124>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d017      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <TIM_Base_SetConfig+0x128>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <TIM_Base_SetConfig+0x12c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00f      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <TIM_Base_SetConfig+0x130>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <TIM_Base_SetConfig+0x134>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <TIM_Base_SetConfig+0x138>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <TIM_Base_SetConfig+0x13c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <TIM_Base_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <TIM_Base_SetConfig+0x124>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	615a      	str	r2, [r3, #20]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40010400 	.word	0x40010400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800
 800472c:	40001800 	.word	0x40001800
 8004730:	40001c00 	.word	0x40001c00
 8004734:	40002000 	.word	0x40002000

08004738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e03f      	b.n	80047f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fb6e 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f829 	bl	80047fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004800:	b09f      	sub	sp, #124	; 0x7c
 8004802:	af00      	add	r7, sp, #0
 8004804:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	68d9      	ldr	r1, [r3, #12]
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	ea40 0301 	orr.w	r3, r0, r1
 800481c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	431a      	orrs	r2, r3
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	431a      	orrs	r2, r3
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004840:	f021 010c 	bic.w	r1, r1, #12
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800484a:	430b      	orrs	r3, r1
 800484c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	6999      	ldr	r1, [r3, #24]
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	ea40 0301 	orr.w	r3, r0, r1
 8004864:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4bc5      	ldr	r3, [pc, #788]	; (8004b80 <UART_SetConfig+0x384>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d004      	beq.n	800487a <UART_SetConfig+0x7e>
 8004870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4bc3      	ldr	r3, [pc, #780]	; (8004b84 <UART_SetConfig+0x388>)
 8004876:	429a      	cmp	r2, r3
 8004878:	d103      	bne.n	8004882 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800487a:	f7ff fbf5 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 800487e:	6778      	str	r0, [r7, #116]	; 0x74
 8004880:	e002      	b.n	8004888 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004882:	f7ff fbdd 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8004886:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004890:	f040 80b6 	bne.w	8004a00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004896:	461c      	mov	r4, r3
 8004898:	f04f 0500 	mov.w	r5, #0
 800489c:	4622      	mov	r2, r4
 800489e:	462b      	mov	r3, r5
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	6439      	str	r1, [r7, #64]	; 0x40
 80048a4:	415b      	adcs	r3, r3
 80048a6:	647b      	str	r3, [r7, #68]	; 0x44
 80048a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ac:	1912      	adds	r2, r2, r4
 80048ae:	eb45 0303 	adc.w	r3, r5, r3
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	00d9      	lsls	r1, r3, #3
 80048bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c0:	00d0      	lsls	r0, r2, #3
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	1911      	adds	r1, r2, r4
 80048c8:	6639      	str	r1, [r7, #96]	; 0x60
 80048ca:	416b      	adcs	r3, r5
 80048cc:	667b      	str	r3, [r7, #100]	; 0x64
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	63b9      	str	r1, [r7, #56]	; 0x38
 80048dc:	415b      	adcs	r3, r3
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048e8:	f7fc f9ce 	bl	8000c88 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4ba5      	ldr	r3, [pc, #660]	; (8004b88 <UART_SetConfig+0x38c>)
 80048f2:	fba3 2302 	umull	r2, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	011e      	lsls	r6, r3, #4
 80048fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fc:	461c      	mov	r4, r3
 80048fe:	f04f 0500 	mov.w	r5, #0
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	1891      	adds	r1, r2, r2
 8004908:	6339      	str	r1, [r7, #48]	; 0x30
 800490a:	415b      	adcs	r3, r3
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
 800490e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004912:	1912      	adds	r2, r2, r4
 8004914:	eb45 0303 	adc.w	r3, r5, r3
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	00d9      	lsls	r1, r3, #3
 8004922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004926:	00d0      	lsls	r0, r2, #3
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	1911      	adds	r1, r2, r4
 800492e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004930:	416b      	adcs	r3, r5
 8004932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	1891      	adds	r1, r2, r2
 8004940:	62b9      	str	r1, [r7, #40]	; 0x28
 8004942:	415b      	adcs	r3, r3
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800494a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800494e:	f7fc f99b 	bl	8000c88 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4b8c      	ldr	r3, [pc, #560]	; (8004b88 <UART_SetConfig+0x38c>)
 8004958:	fba3 1302 	umull	r1, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2164      	movs	r1, #100	; 0x64
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a87      	ldr	r2, [pc, #540]	; (8004b88 <UART_SetConfig+0x38c>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004978:	441e      	add	r6, r3
 800497a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497c:	4618      	mov	r0, r3
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	1894      	adds	r4, r2, r2
 8004988:	623c      	str	r4, [r7, #32]
 800498a:	415b      	adcs	r3, r3
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004992:	1812      	adds	r2, r2, r0
 8004994:	eb41 0303 	adc.w	r3, r1, r3
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	f04f 0500 	mov.w	r5, #0
 80049a0:	00dd      	lsls	r5, r3, #3
 80049a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049a6:	00d4      	lsls	r4, r2, #3
 80049a8:	4622      	mov	r2, r4
 80049aa:	462b      	mov	r3, r5
 80049ac:	1814      	adds	r4, r2, r0
 80049ae:	653c      	str	r4, [r7, #80]	; 0x50
 80049b0:	414b      	adcs	r3, r1
 80049b2:	657b      	str	r3, [r7, #84]	; 0x54
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	1891      	adds	r1, r2, r2
 80049c0:	61b9      	str	r1, [r7, #24]
 80049c2:	415b      	adcs	r3, r3
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049ce:	f7fc f95b 	bl	8000c88 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <UART_SetConfig+0x38c>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	; 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a67      	ldr	r2, [pc, #412]	; (8004b88 <UART_SetConfig+0x38c>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 0207 	and.w	r2, r3, #7
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4432      	add	r2, r6
 80049fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049fe:	e0b9      	b.n	8004b74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a02:	461c      	mov	r4, r3
 8004a04:	f04f 0500 	mov.w	r5, #0
 8004a08:	4622      	mov	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	1891      	adds	r1, r2, r2
 8004a0e:	6139      	str	r1, [r7, #16]
 8004a10:	415b      	adcs	r3, r3
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a18:	1912      	adds	r2, r2, r4
 8004a1a:	eb45 0303 	adc.w	r3, r5, r3
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	00d9      	lsls	r1, r3, #3
 8004a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a2c:	00d0      	lsls	r0, r2, #3
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	eb12 0804 	adds.w	r8, r2, r4
 8004a36:	eb43 0905 	adc.w	r9, r3, r5
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	008b      	lsls	r3, r1, #2
 8004a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a52:	0082      	lsls	r2, r0, #2
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fc f916 	bl	8000c88 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <UART_SetConfig+0x38c>)
 8004a62:	fba3 2302 	umull	r2, r3, r3, r2
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	011e      	lsls	r6, r3, #4
 8004a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	1894      	adds	r4, r2, r2
 8004a78:	60bc      	str	r4, [r7, #8]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a82:	1812      	adds	r2, r2, r0
 8004a84:	eb41 0303 	adc.w	r3, r1, r3
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	f04f 0500 	mov.w	r5, #0
 8004a90:	00dd      	lsls	r5, r3, #3
 8004a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a96:	00d4      	lsls	r4, r2, #3
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	1814      	adds	r4, r2, r0
 8004a9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004aa0:	414b      	adcs	r3, r1
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004abc:	0082      	lsls	r2, r0, #2
 8004abe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ac2:	f7fc f8e1 	bl	8000c88 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <UART_SetConfig+0x38c>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <UART_SetConfig+0x38c>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aea:	441e      	add	r6, r3
 8004aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aee:	4618      	mov	r0, r3
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	1894      	adds	r4, r2, r2
 8004afa:	603c      	str	r4, [r7, #0]
 8004afc:	415b      	adcs	r3, r3
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b04:	1812      	adds	r2, r2, r0
 8004b06:	eb41 0303 	adc.w	r3, r1, r3
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	f04f 0500 	mov.w	r5, #0
 8004b12:	00dd      	lsls	r5, r3, #3
 8004b14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b18:	00d4      	lsls	r4, r2, #3
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	eb12 0a00 	adds.w	sl, r2, r0
 8004b22:	eb43 0b01 	adc.w	fp, r3, r1
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	008b      	lsls	r3, r1, #2
 8004b3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b3e:	0082      	lsls	r2, r0, #2
 8004b40:	4650      	mov	r0, sl
 8004b42:	4659      	mov	r1, fp
 8004b44:	f7fc f8a0 	bl	8000c88 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <UART_SetConfig+0x38c>)
 8004b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2164      	movs	r1, #100	; 0x64
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	; 0x32
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <UART_SetConfig+0x38c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 020f 	and.w	r2, r3, #15
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4432      	add	r2, r6
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	377c      	adds	r7, #124	; 0x7c
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	40011000 	.word	0x40011000
 8004b84:	40011400 	.word	0x40011400
 8004b88:	51eb851f 	.word	0x51eb851f

08004b8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9e:	2b84      	cmp	r3, #132	; 0x84
 8004ba0:	d005      	beq.n	8004bae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ba2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3303      	adds	r3, #3
 8004bac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004bc0:	f000 ffd8 	bl	8005b74 <vTaskStartScheduler>
  
  return osOK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bcc:	b089      	sub	sp, #36	; 0x24
 8004bce:	af04      	add	r7, sp, #16
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <osThreadCreate+0x54>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01c      	beq.n	8004c1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685c      	ldr	r4, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681d      	ldr	r5, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691e      	ldr	r6, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ffc8 	bl	8004b8c <makeFreeRtosPriority>
 8004bfc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	9100      	str	r1, [sp, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4629      	mov	r1, r5
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fcc1 	bl	800559a <xTaskCreateStatic>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	e01c      	b.n	8004c58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685c      	ldr	r4, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c2a:	b29e      	uxth	r6, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ffaa 	bl	8004b8c <makeFreeRtosPriority>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	f107 030c 	add.w	r3, r7, #12
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	9200      	str	r2, [sp, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	4632      	mov	r2, r6
 8004c46:	4629      	mov	r1, r5
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f000 fd03 	bl	8005654 <xTaskCreate>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004c58:	68fb      	ldr	r3, [r7, #12]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <osDelay+0x16>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	e000      	b.n	8004c7a <osDelay+0x18>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 ff46 	bl	8005b0c <vTaskDelay>
  
  return osOK;
 8004c80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f103 0208 	add.w	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ca2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0208 	add.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d42:	d103      	bne.n	8004d4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e00c      	b.n	8004d66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e002      	b.n	8004d5a <vListInsert+0x2e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d2f6      	bcs.n	8004d54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6892      	ldr	r2, [r2, #8]
 8004db4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6852      	ldr	r2, [r2, #4]
 8004dbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d103      	bne.n	8004dd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1e5a      	subs	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e1e:	f001 fd35 	bl	800688c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	441a      	add	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	22ff      	movs	r2, #255	; 0xff
 8004e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d114      	bne.n	8004e9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f8f1 	bl	8006068 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d012      	beq.n	8004eb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <xQueueGenericReset+0xcc>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e009      	b.n	8004eb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fef1 	bl	8004c8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3324      	adds	r3, #36	; 0x24
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff feec 	bl	8004c8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eb2:	f001 fd1b 	bl	80068ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eb6:	2301      	movs	r3, #1
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	613b      	str	r3, [r7, #16]
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3348      	adds	r3, #72	; 0x48
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 fda3 	bl	8006a48 <pvPortMalloc>
 8004f02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d011      	beq.n	8004f2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	3348      	adds	r3, #72	; 0x48
 8004f12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f1c:	79fa      	ldrb	r2, [r7, #7]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f805 	bl	8004f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f66:	2101      	movs	r1, #1
 8004f68:	69b8      	ldr	r0, [r7, #24]
 8004f6a:	f7ff ff43 	bl	8004df4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08e      	sub	sp, #56	; 0x38
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f86:	2300      	movs	r3, #0
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueGenericSend+0x32>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <xQueueGenericSend+0x40>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <xQueueGenericSend+0x44>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <xQueueGenericSend+0x46>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <xQueueGenericSend+0x60>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x6e>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <xQueueGenericSend+0x72>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <xQueueGenericSend+0x74>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xQueueGenericSend+0x8e>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	623b      	str	r3, [r7, #32]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005006:	f001 f9ef 	bl	80063e8 <xTaskGetSchedulerState>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <xQueueGenericSend+0x9e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueGenericSend+0xa2>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueGenericSend+0xa4>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <xQueueGenericSend+0xbe>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	61fb      	str	r3, [r7, #28]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005036:	f001 fc29 	bl	800688c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <xQueueGenericSend+0xd4>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d129      	bne.n	80050a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005052:	f000 f992 	bl	800537a <prvCopyDataToQueue>
 8005056:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	3324      	adds	r3, #36	; 0x24
 8005064:	4618      	mov	r0, r3
 8005066:	f000 ffff 	bl	8006068 <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <xQueueGenericSend+0x1f8>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	e00a      	b.n	8005098 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005088:	4b39      	ldr	r3, [pc, #228]	; (8005170 <xQueueGenericSend+0x1f8>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005098:	f001 fc28 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 800509c:	2301      	movs	r3, #1
 800509e:	e063      	b.n	8005168 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050a6:	f001 fc21 	bl	80068ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e05c      	b.n	8005168 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f837 	bl	800612c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c2:	f001 fc13 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c6:	f000 fdd7 	bl	8005c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ca:	f001 fbdf 	bl	800688c <vPortEnterCritical>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050da:	d103      	bne.n	80050e4 <xQueueGenericSend+0x16c>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f0:	d103      	bne.n	80050fa <xQueueGenericSend+0x182>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fa:	f001 fbf7 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050fe:	1d3a      	adds	r2, r7, #4
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f826 	bl	8006158 <xTaskCheckForTimeOut>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d124      	bne.n	800515c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005114:	f000 fa29 	bl	800556a <prvIsQueueFull>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	3310      	adds	r3, #16
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f000 ff7a 	bl	8006020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800512c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512e:	f000 f9b4 	bl	800549a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005132:	f000 fdaf 	bl	8005c94 <xTaskResumeAll>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f af7c 	bne.w	8005036 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <xQueueGenericSend+0x1f8>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e772      	b.n	8005036 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005152:	f000 f9a2 	bl	800549a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005156:	f000 fd9d 	bl	8005c94 <xTaskResumeAll>
 800515a:	e76c      	b.n	8005036 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800515c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515e:	f000 f99c 	bl	800549a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005162:	f000 fd97 	bl	8005c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005166:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005168:	4618      	mov	r0, r3
 800516a:	3738      	adds	r7, #56	; 0x38
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005180:	2300      	movs	r3, #0
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <xQueueReceive+0x30>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	623b      	str	r3, [r7, #32]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <xQueueReceive+0x3e>
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueReceive+0x42>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueReceive+0x44>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xQueueReceive+0x5e>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fb      	str	r3, [r7, #28]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d2:	f001 f909 	bl	80063e8 <xTaskGetSchedulerState>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <xQueueReceive+0x6e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <xQueueReceive+0x72>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueReceive+0x74>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xQueueReceive+0x8e>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61bb      	str	r3, [r7, #24]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005202:	f001 fb43 	bl	800688c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01f      	beq.n	8005252 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f000 f91a 	bl	800544e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00f      	beq.n	800524a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	3310      	adds	r3, #16
 800522e:	4618      	mov	r0, r3
 8005230:	f000 ff1a 	bl	8006068 <xTaskRemoveFromEventList>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800523a:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <xQueueReceive+0x1bc>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800524a:	f001 fb4f 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	e069      	b.n	8005326 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005258:	f001 fb48 	bl	80068ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800525c:	2300      	movs	r3, #0
 800525e:	e062      	b.n	8005326 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005266:	f107 0310 	add.w	r3, r7, #16
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ff5e 	bl	800612c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005274:	f001 fb3a 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005278:	f000 fcfe 	bl	8005c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800527c:	f001 fb06 	bl	800688c <vPortEnterCritical>
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005286:	b25b      	sxtb	r3, r3
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528c:	d103      	bne.n	8005296 <xQueueReceive+0x122>
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529c:	b25b      	sxtb	r3, r3
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a2:	d103      	bne.n	80052ac <xQueueReceive+0x138>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ac:	f001 fb1e 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052b0:	1d3a      	adds	r2, r7, #4
 80052b2:	f107 0310 	add.w	r3, r7, #16
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 ff4d 	bl	8006158 <xTaskCheckForTimeOut>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d123      	bne.n	800530c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c6:	f000 f93a 	bl	800553e <prvIsQueueEmpty>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	3324      	adds	r3, #36	; 0x24
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fea1 	bl	8006020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e0:	f000 f8db 	bl	800549a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052e4:	f000 fcd6 	bl	8005c94 <xTaskResumeAll>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d189      	bne.n	8005202 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <xQueueReceive+0x1bc>)
 80052f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	e780      	b.n	8005202 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005302:	f000 f8ca 	bl	800549a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005306:	f000 fcc5 	bl	8005c94 <xTaskResumeAll>
 800530a:	e77a      	b.n	8005202 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800530c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530e:	f000 f8c4 	bl	800549a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005312:	f000 fcbf 	bl	8005c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005318:	f000 f911 	bl	800553e <prvIsQueueEmpty>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	f43f af6f 	beq.w	8005202 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005326:	4618      	mov	r0, r3
 8005328:	3730      	adds	r7, #48	; 0x30
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60fb      	str	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800535c:	f001 fa96 	bl	800688c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800536c:	f001 fabe 	bl	80068ec <vPortExitCritical>

	return uxReturn;
 8005370:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d14d      	bne.n	800543c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 f83d 	bl	8006424 <xTaskPriorityDisinherit>
 80053aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	e043      	b.n	800543c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d119      	bne.n	80053ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6858      	ldr	r0, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	f001 fe51 	bl	800706c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	441a      	add	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d32b      	bcc.n	800543c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	e026      	b.n	800543c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68d8      	ldr	r0, [r3, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	461a      	mov	r2, r3
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	f001 fe37 	bl	800706c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	425b      	negs	r3, r3
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d207      	bcs.n	800542a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	425b      	negs	r3, r3
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d105      	bne.n	800543c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3b01      	subs	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d018      	beq.n	8005492 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d303      	bcc.n	8005482 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68d9      	ldr	r1, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	461a      	mov	r2, r3
 800548c:	6838      	ldr	r0, [r7, #0]
 800548e:	f001 fded 	bl	800706c <memcpy>
	}
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054a2:	f001 f9f3 	bl	800688c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054ae:	e011      	b.n	80054d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d012      	beq.n	80054de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fdd3 	bl	8006068 <xTaskRemoveFromEventList>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054c8:	f000 fea8 	bl	800621c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dce9      	bgt.n	80054b0 <prvUnlockQueue+0x16>
 80054dc:	e000      	b.n	80054e0 <prvUnlockQueue+0x46>
					break;
 80054de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	22ff      	movs	r2, #255	; 0xff
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054e8:	f001 fa00 	bl	80068ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ec:	f001 f9ce 	bl	800688c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f8:	e011      	b.n	800551e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d012      	beq.n	8005528 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3310      	adds	r3, #16
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fdae 	bl	8006068 <xTaskRemoveFromEventList>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005512:	f000 fe83 	bl	800621c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	3b01      	subs	r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005522:	2b00      	cmp	r3, #0
 8005524:	dce9      	bgt.n	80054fa <prvUnlockQueue+0x60>
 8005526:	e000      	b.n	800552a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005528:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	22ff      	movs	r2, #255	; 0xff
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005532:	f001 f9db 	bl	80068ec <vPortExitCritical>
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005546:	f001 f9a1 	bl	800688c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e001      	b.n	800555c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800555c:	f001 f9c6 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005560:	68fb      	ldr	r3, [r7, #12]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005572:	f001 f98b 	bl	800688c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	429a      	cmp	r2, r3
 8005580:	d102      	bne.n	8005588 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e001      	b.n	800558c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800558c:	f001 f9ae 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800559a:	b580      	push	{r7, lr}
 800559c:	b08e      	sub	sp, #56	; 0x38
 800559e:	af04      	add	r7, sp, #16
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	623b      	str	r3, [r7, #32]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61fb      	str	r3, [r7, #28]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055e0:	23b4      	movs	r3, #180	; 0xb4
 80055e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2bb4      	cmp	r3, #180	; 0xb4
 80055e8:	d00a      	beq.n	8005600 <xTaskCreateStatic+0x66>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	61bb      	str	r3, [r7, #24]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005600:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01e      	beq.n	8005646 <xTaskCreateStatic+0xac>
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2202      	movs	r2, #2
 800561c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005620:	2300      	movs	r3, #0
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	9302      	str	r3, [sp, #8]
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f851 	bl	80056e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800563e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005640:	f000 f8ec 	bl	800581c <prvAddNewTaskToReadyList>
 8005644:	e001      	b.n	800564a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800564a:	697b      	ldr	r3, [r7, #20]
	}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af04      	add	r7, sp, #16
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f9ed 	bl	8006a48 <pvPortMalloc>
 800566e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00e      	beq.n	8005694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005676:	20b4      	movs	r0, #180	; 0xb4
 8005678:	f001 f9e6 	bl	8006a48 <pvPortMalloc>
 800567c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
 800568a:	e005      	b.n	8005698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800568c:	6978      	ldr	r0, [r7, #20]
 800568e:	f001 faa7 	bl	8006be0 <vPortFree>
 8005692:	e001      	b.n	8005698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d017      	beq.n	80056ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f80f 	bl	80056e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056c2:	69f8      	ldr	r0, [r7, #28]
 80056c4:	f000 f8aa 	bl	800581c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056c8:	2301      	movs	r3, #1
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e002      	b.n	80056d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056d4:	69bb      	ldr	r3, [r7, #24]
	}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	3b01      	subs	r3, #1
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f023 0307 	bic.w	r3, r3, #7
 8005706:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	617b      	str	r3, [r7, #20]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01f      	beq.n	800576e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	e012      	b.n	800575a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	7819      	ldrb	r1, [r3, #0]
 800573c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	3334      	adds	r3, #52	; 0x34
 8005744:	460a      	mov	r2, r1
 8005746:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3301      	adds	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b0f      	cmp	r3, #15
 800575e:	d9e9      	bls.n	8005734 <prvInitialiseNewTask+0x54>
 8005760:	e000      	b.n	8005764 <prvInitialiseNewTask+0x84>
			{
				break;
 8005762:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576c:	e003      	b.n	8005776 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	2b06      	cmp	r3, #6
 800577a:	d901      	bls.n	8005780 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800577c:	2306      	movs	r3, #6
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	2200      	movs	r2, #0
 8005790:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fa97 	bl	8004cca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	3318      	adds	r3, #24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fa92 	bl	8004cca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	f1c3 0207 	rsb	r2, r3, #7
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	334c      	adds	r3, #76	; 0x4c
 80057d0:	2260      	movs	r2, #96	; 0x60
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fc57 	bl	8007088 <memset>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <prvInitialiseNewTask+0x130>)
 80057de:	651a      	str	r2, [r3, #80]	; 0x50
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <prvInitialiseNewTask+0x134>)
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	4a0b      	ldr	r2, [pc, #44]	; (8005818 <prvInitialiseNewTask+0x138>)
 80057ea:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	69b8      	ldr	r0, [r7, #24]
 80057f2:	f000 ff03 	bl	80065fc <pxPortInitialiseStack>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0800b838 	.word	0x0800b838
 8005814:	0800b858 	.word	0x0800b858
 8005818:	0800b818 	.word	0x0800b818

0800581c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005824:	f001 f832 	bl	800688c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <prvAddNewTaskToReadyList+0xb8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <prvAddNewTaskToReadyList+0xb8>)
 8005830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <prvAddNewTaskToReadyList+0xbc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800583a:	4a27      	ldr	r2, [pc, #156]	; (80058d8 <prvAddNewTaskToReadyList+0xbc>)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <prvAddNewTaskToReadyList+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d110      	bne.n	800586a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005848:	f000 fd0c 	bl	8006264 <prvInitialiseTaskLists>
 800584c:	e00d      	b.n	800586a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800584e:	4b23      	ldr	r3, [pc, #140]	; (80058dc <prvAddNewTaskToReadyList+0xc0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005856:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <prvAddNewTaskToReadyList+0xbc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	429a      	cmp	r2, r3
 8005862:	d802      	bhi.n	800586a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <prvAddNewTaskToReadyList+0xbc>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <prvAddNewTaskToReadyList+0xc4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <prvAddNewTaskToReadyList+0xc4>)
 8005872:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	2201      	movs	r2, #1
 800587a:	409a      	lsls	r2, r3
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <prvAddNewTaskToReadyList+0xc8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <prvAddNewTaskToReadyList+0xc8>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <prvAddNewTaskToReadyList+0xcc>)
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7ff fa21 	bl	8004ce4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058a2:	f001 f823 	bl	80068ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <prvAddNewTaskToReadyList+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <prvAddNewTaskToReadyList+0xbc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <prvAddNewTaskToReadyList+0xd0>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000624 	.word	0x20000624
 80058d8:	20000524 	.word	0x20000524
 80058dc:	20000630 	.word	0x20000630
 80058e0:	20000640 	.word	0x20000640
 80058e4:	2000062c 	.word	0x2000062c
 80058e8:	20000528 	.word	0x20000528
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058f8:	f000 ffc8 	bl	800688c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <vTaskDelete+0x18>
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <vTaskDelete+0xf8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	e000      	b.n	800590a <vTaskDelete+0x1a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3304      	adds	r3, #4
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fa44 	bl	8004d9e <uxListRemove>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d115      	bne.n	8005948 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4932      	ldr	r1, [pc, #200]	; (80059ec <vTaskDelete+0xfc>)
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <vTaskDelete+0x58>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	2201      	movs	r2, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43da      	mvns	r2, r3
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <vTaskDelete+0x100>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4013      	ands	r3, r2
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <vTaskDelete+0x100>)
 8005946:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fa22 	bl	8004d9e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800595a:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <vTaskDelete+0x104>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <vTaskDelete+0x104>)
 8005962:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <vTaskDelete+0xf8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	429a      	cmp	r2, r3
 800596c:	d10b      	bne.n	8005986 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4820      	ldr	r0, [pc, #128]	; (80059f8 <vTaskDelete+0x108>)
 8005976:	f7ff f9b5 	bl	8004ce4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <vTaskDelete+0x10c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <vTaskDelete+0x10c>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e009      	b.n	800599a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <vTaskDelete+0x110>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3b01      	subs	r3, #1
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <vTaskDelete+0x110>)
 800598e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fcd5 	bl	8006340 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005996:	f000 fd07 	bl	80063a8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800599a:	f000 ffa7 	bl	80068ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800599e:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <vTaskDelete+0x114>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01b      	beq.n	80059de <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80059a6:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <vTaskDelete+0xf8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d116      	bne.n	80059de <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <vTaskDelete+0x118>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <vTaskDelete+0xde>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60bb      	str	r3, [r7, #8]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <vTaskDelete+0x11c>)
 80059d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000524 	.word	0x20000524
 80059ec:	20000528 	.word	0x20000528
 80059f0:	2000062c 	.word	0x2000062c
 80059f4:	20000640 	.word	0x20000640
 80059f8:	200005f8 	.word	0x200005f8
 80059fc:	2000060c 	.word	0x2000060c
 8005a00:	20000624 	.word	0x20000624
 8005a04:	20000630 	.word	0x20000630
 8005a08:	2000064c 	.word	0x2000064c
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <vTaskDelayUntil+0x2a>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	617b      	str	r3, [r7, #20]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <vTaskDelayUntil+0x46>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005a56:	4b2a      	ldr	r3, [pc, #168]	; (8005b00 <vTaskDelayUntil+0xf0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <vTaskDelayUntil+0x64>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	60fb      	str	r3, [r7, #12]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005a74:	f000 f900 	bl	8005c78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <vTaskDelayUntil+0xf4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20b      	bcs.n	8005aaa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d211      	bcs.n	8005ac0 <vTaskDelayUntil+0xb0>
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d90d      	bls.n	8005ac0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa8:	e00a      	b.n	8005ac0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d303      	bcc.n	8005abc <vTaskDelayUntil+0xac>
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d901      	bls.n	8005ac0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fd2b 	bl	8006530 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005ada:	f000 f8db 	bl	8005c94 <xTaskResumeAll>
 8005ade:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <vTaskDelayUntil+0xf8>)
 8005ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005af6:	bf00      	nop
 8005af8:	3728      	adds	r7, #40	; 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000064c 	.word	0x2000064c
 8005b04:	20000628 	.word	0x20000628
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <vTaskDelay+0x60>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <vTaskDelay+0x30>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60bb      	str	r3, [r7, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b3c:	f000 f89c 	bl	8005c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b40:	2100      	movs	r1, #0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fcf4 	bl	8006530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b48:	f000 f8a4 	bl	8005c94 <xTaskResumeAll>
 8005b4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d107      	bne.n	8005b64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <vTaskDelay+0x64>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	2000064c 	.word	0x2000064c
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	; 0x28
 8005b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b82:	463a      	mov	r2, r7
 8005b84:	1d39      	adds	r1, r7, #4
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fb fbaa 	bl	80012e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	9202      	str	r2, [sp, #8]
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	460a      	mov	r2, r1
 8005ba2:	4921      	ldr	r1, [pc, #132]	; (8005c28 <vTaskStartScheduler+0xb4>)
 8005ba4:	4821      	ldr	r0, [pc, #132]	; (8005c2c <vTaskStartScheduler+0xb8>)
 8005ba6:	f7ff fcf8 	bl	800559a <xTaskCreateStatic>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <vTaskStartScheduler+0xbc>)
 8005bae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <vTaskStartScheduler+0xbc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e001      	b.n	8005bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d11b      	bne.n	8005c00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	613b      	str	r3, [r7, #16]
}
 8005bda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <vTaskStartScheduler+0xc0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	334c      	adds	r3, #76	; 0x4c
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <vTaskStartScheduler+0xc4>)
 8005be4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005be6:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <vTaskStartScheduler+0xc8>)
 8005be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <vTaskStartScheduler+0xcc>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <vTaskStartScheduler+0xd0>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bfa:	f000 fd89 	bl	8006710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bfe:	e00e      	b.n	8005c1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c06:	d10a      	bne.n	8005c1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <vTaskStartScheduler+0xa8>
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	0800b7f8 	.word	0x0800b7f8
 8005c2c:	08006235 	.word	0x08006235
 8005c30:	20000648 	.word	0x20000648
 8005c34:	20000524 	.word	0x20000524
 8005c38:	20000010 	.word	0x20000010
 8005c3c:	20000644 	.word	0x20000644
 8005c40:	20000630 	.word	0x20000630
 8005c44:	20000628 	.word	0x20000628

08005c48 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <vTaskEndScheduler+0x2c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8005c68:	f000 fdf4 	bl	8006854 <vPortEndScheduler>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000630 	.word	0x20000630

08005c78 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <vTaskSuspendAll+0x18>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a03      	ldr	r2, [pc, #12]	; (8005c90 <vTaskSuspendAll+0x18>)
 8005c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	2000064c 	.word	0x2000064c

08005c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ca2:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <xTaskResumeAll+0x114>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	603b      	str	r3, [r7, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cc0:	f000 fde4 	bl	800688c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cc4:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <xTaskResumeAll+0x114>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	4a37      	ldr	r2, [pc, #220]	; (8005da8 <xTaskResumeAll+0x114>)
 8005ccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cce:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <xTaskResumeAll+0x114>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d161      	bne.n	8005d9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cd6:	4b35      	ldr	r3, [pc, #212]	; (8005dac <xTaskResumeAll+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d05d      	beq.n	8005d9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cde:	e02e      	b.n	8005d3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ce0:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <xTaskResumeAll+0x11c>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff f856 	bl	8004d9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff f851 	bl	8004d9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	2201      	movs	r2, #1
 8005d02:	409a      	lsls	r2, r3
 8005d04:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <xTaskResumeAll+0x120>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	4a2a      	ldr	r2, [pc, #168]	; (8005db4 <xTaskResumeAll+0x120>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <xTaskResumeAll+0x124>)
 8005d1c:	441a      	add	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f7fe ffdd 	bl	8004ce4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <xTaskResumeAll+0x128>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d38:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <xTaskResumeAll+0x12c>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <xTaskResumeAll+0x11c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1cc      	bne.n	8005ce0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d4c:	f000 fb2c 	bl	80063a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d50:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <xTaskResumeAll+0x130>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d5c:	f000 f846 	bl	8005dec <xTaskIncrementTick>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d66:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <xTaskResumeAll+0x12c>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f1      	bne.n	8005d5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d78:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <xTaskResumeAll+0x130>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xTaskResumeAll+0x12c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <xTaskResumeAll+0x134>)
 8005d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d9a:	f000 fda7 	bl	80068ec <vPortExitCritical>

	return xAlreadyYielded;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	2000064c 	.word	0x2000064c
 8005dac:	20000624 	.word	0x20000624
 8005db0:	200005e4 	.word	0x200005e4
 8005db4:	2000062c 	.word	0x2000062c
 8005db8:	20000528 	.word	0x20000528
 8005dbc:	20000524 	.word	0x20000524
 8005dc0:	20000638 	.word	0x20000638
 8005dc4:	20000634 	.word	0x20000634
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <xTaskGetTickCount+0x1c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dd8:	687b      	ldr	r3, [r7, #4]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000628 	.word	0x20000628

08005dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df6:	4b4e      	ldr	r3, [pc, #312]	; (8005f30 <xTaskIncrementTick+0x144>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 808e 	bne.w	8005f1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e00:	4b4c      	ldr	r3, [pc, #304]	; (8005f34 <xTaskIncrementTick+0x148>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e08:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <xTaskIncrementTick+0x148>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d120      	bne.n	8005e56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e14:	4b48      	ldr	r3, [pc, #288]	; (8005f38 <xTaskIncrementTick+0x14c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	603b      	str	r3, [r7, #0]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <xTaskIncrementTick+0x46>
 8005e34:	4b40      	ldr	r3, [pc, #256]	; (8005f38 <xTaskIncrementTick+0x14c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <xTaskIncrementTick+0x150>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a3e      	ldr	r2, [pc, #248]	; (8005f38 <xTaskIncrementTick+0x14c>)
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4a3e      	ldr	r2, [pc, #248]	; (8005f3c <xTaskIncrementTick+0x150>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <xTaskIncrementTick+0x154>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	; (8005f40 <xTaskIncrementTick+0x154>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	f000 faa9 	bl	80063a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <xTaskIncrementTick+0x158>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d348      	bcc.n	8005ef2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e60:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <xTaskIncrementTick+0x14c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6a:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <xTaskIncrementTick+0x158>)
 8005e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e70:	601a      	str	r2, [r3, #0]
					break;
 8005e72:	e03e      	b.n	8005ef2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e74:	4b30      	ldr	r3, [pc, #192]	; (8005f38 <xTaskIncrementTick+0x14c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d203      	bcs.n	8005e94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e8c:	4a2d      	ldr	r2, [pc, #180]	; (8005f44 <xTaskIncrementTick+0x158>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e92:	e02e      	b.n	8005ef2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ff80 	bl	8004d9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	3318      	adds	r3, #24
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe ff77 	bl	8004d9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <xTaskIncrementTick+0x15c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	4a22      	ldr	r2, [pc, #136]	; (8005f48 <xTaskIncrementTick+0x15c>)
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <xTaskIncrementTick+0x160>)
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f7fe ff03 	bl	8004ce4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <xTaskIncrementTick+0x164>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d3b9      	bcc.n	8005e60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef0:	e7b6      	b.n	8005e60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <xTaskIncrementTick+0x164>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4914      	ldr	r1, [pc, #80]	; (8005f4c <xTaskIncrementTick+0x160>)
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d901      	bls.n	8005f0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <xTaskIncrementTick+0x168>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e004      	b.n	8005f26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <xTaskIncrementTick+0x16c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <xTaskIncrementTick+0x16c>)
 8005f24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	2000064c 	.word	0x2000064c
 8005f34:	20000628 	.word	0x20000628
 8005f38:	200005dc 	.word	0x200005dc
 8005f3c:	200005e0 	.word	0x200005e0
 8005f40:	2000063c 	.word	0x2000063c
 8005f44:	20000644 	.word	0x20000644
 8005f48:	2000062c 	.word	0x2000062c
 8005f4c:	20000528 	.word	0x20000528
 8005f50:	20000524 	.word	0x20000524
 8005f54:	20000638 	.word	0x20000638
 8005f58:	20000634 	.word	0x20000634

08005f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f62:	4b29      	ldr	r3, [pc, #164]	; (8006008 <vTaskSwitchContext+0xac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <vTaskSwitchContext+0xb0>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f70:	e044      	b.n	8005ffc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005f72:	4b26      	ldr	r3, [pc, #152]	; (800600c <vTaskSwitchContext+0xb0>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <vTaskSwitchContext+0xb4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f86:	7afb      	ldrb	r3, [r7, #11]
 8005f88:	f1c3 031f 	rsb	r3, r3, #31
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	4921      	ldr	r1, [pc, #132]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	607b      	str	r3, [r7, #4]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskSwitchContext+0x5a>
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a14      	ldr	r2, [pc, #80]	; (8006014 <vTaskSwitchContext+0xb8>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d104      	bne.n	8005fe8 <vTaskSwitchContext+0x8c>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <vTaskSwitchContext+0xbc>)
 8005ff0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <vTaskSwitchContext+0xbc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	334c      	adds	r3, #76	; 0x4c
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <vTaskSwitchContext+0xc0>)
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	2000064c 	.word	0x2000064c
 800600c:	20000638 	.word	0x20000638
 8006010:	2000062c 	.word	0x2000062c
 8006014:	20000528 	.word	0x20000528
 8006018:	20000524 	.word	0x20000524
 800601c:	20000010 	.word	0x20000010

08006020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60fb      	str	r3, [r7, #12]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <vTaskPlaceOnEventList+0x44>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3318      	adds	r3, #24
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fe fe6c 	bl	8004d2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006054:	2101      	movs	r1, #1
 8006056:	6838      	ldr	r0, [r7, #0]
 8006058:	f000 fa6a 	bl	8006530 <prvAddCurrentTaskToDelayedList>
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000524 	.word	0x20000524

08006068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	3318      	adds	r3, #24
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fe80 	bl	8004d9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <xTaskRemoveFromEventList+0xac>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11c      	bne.n	80060e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fe77 	bl	8004d9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	2201      	movs	r2, #1
 80060b6:	409a      	lsls	r2, r3
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <xTaskRemoveFromEventList+0xb0>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4313      	orrs	r3, r2
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <xTaskRemoveFromEventList+0xb0>)
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <xTaskRemoveFromEventList+0xb4>)
 80060d0:	441a      	add	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7fe fe03 	bl	8004ce4 <vListInsertEnd>
 80060de:	e005      	b.n	80060ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	3318      	adds	r3, #24
 80060e4:	4619      	mov	r1, r3
 80060e6:	480e      	ldr	r0, [pc, #56]	; (8006120 <xTaskRemoveFromEventList+0xb8>)
 80060e8:	f7fe fdfc 	bl	8004ce4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <xTaskRemoveFromEventList+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d905      	bls.n	8006106 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060fe:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <xTaskRemoveFromEventList+0xc0>)
 8006100:	2201      	movs	r2, #1
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	e001      	b.n	800610a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	2000064c 	.word	0x2000064c
 8006118:	2000062c 	.word	0x2000062c
 800611c:	20000528 	.word	0x20000528
 8006120:	200005e4 	.word	0x200005e4
 8006124:	20000524 	.word	0x20000524
 8006128:	20000638 	.word	0x20000638

0800612c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <vTaskInternalSetTimeOutState+0x24>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <vTaskInternalSetTimeOutState+0x28>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	605a      	str	r2, [r3, #4]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	2000063c 	.word	0x2000063c
 8006154:	20000628 	.word	0x20000628

08006158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800619a:	f000 fb77 	bl	800688c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <xTaskCheckForTimeOut+0xbc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	d102      	bne.n	80061be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e023      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <xTaskCheckForTimeOut+0xc0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d007      	beq.n	80061da <xTaskCheckForTimeOut+0x82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	e015      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d20b      	bcs.n	80061fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff9b 	bl	800612c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	e004      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006206:	f000 fb71 	bl	80068ec <vPortExitCritical>

	return xReturn;
 800620a:	69fb      	ldr	r3, [r7, #28]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000628 	.word	0x20000628
 8006218:	2000063c 	.word	0x2000063c

0800621c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <vTaskMissedYield+0x14>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000638 	.word	0x20000638

08006234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800623c:	f000 f852 	bl	80062e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvIdleTask+0x28>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d9f9      	bls.n	800623c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <prvIdleTask+0x2c>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006258:	e7f0      	b.n	800623c <prvIdleTask+0x8>
 800625a:	bf00      	nop
 800625c:	20000528 	.word	0x20000528
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e00c      	b.n	800628a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <prvInitialiseTaskLists+0x60>)
 800627c:	4413      	add	r3, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fd03 	bl	8004c8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b06      	cmp	r3, #6
 800628e:	d9ef      	bls.n	8006270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006290:	480d      	ldr	r0, [pc, #52]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 8006292:	f7fe fcfa 	bl	8004c8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006296:	480d      	ldr	r0, [pc, #52]	; (80062cc <prvInitialiseTaskLists+0x68>)
 8006298:	f7fe fcf7 	bl	8004c8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800629c:	480c      	ldr	r0, [pc, #48]	; (80062d0 <prvInitialiseTaskLists+0x6c>)
 800629e:	f7fe fcf4 	bl	8004c8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062a2:	480c      	ldr	r0, [pc, #48]	; (80062d4 <prvInitialiseTaskLists+0x70>)
 80062a4:	f7fe fcf1 	bl	8004c8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a8:	480b      	ldr	r0, [pc, #44]	; (80062d8 <prvInitialiseTaskLists+0x74>)
 80062aa:	f7fe fcee 	bl	8004c8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvInitialiseTaskLists+0x78>)
 80062b0:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 80062b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <prvInitialiseTaskLists+0x7c>)
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <prvInitialiseTaskLists+0x68>)
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000528 	.word	0x20000528
 80062c8:	200005b4 	.word	0x200005b4
 80062cc:	200005c8 	.word	0x200005c8
 80062d0:	200005e4 	.word	0x200005e4
 80062d4:	200005f8 	.word	0x200005f8
 80062d8:	20000610 	.word	0x20000610
 80062dc:	200005dc 	.word	0x200005dc
 80062e0:	200005e0 	.word	0x200005e0

080062e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ea:	e019      	b.n	8006320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062ec:	f000 face 	bl	800688c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <prvCheckTasksWaitingTermination+0x50>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fd4e 	bl	8004d9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3b01      	subs	r3, #1
 8006308:	4a0b      	ldr	r2, [pc, #44]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 800630a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3b01      	subs	r3, #1
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006316:	f000 fae9 	bl	80068ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f810 	bl	8006340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e1      	bne.n	80062ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	200005f8 	.word	0x200005f8
 8006338:	20000624 	.word	0x20000624
 800633c:	2000060c 	.word	0x2000060c

08006340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	334c      	adds	r3, #76	; 0x4c
 800634c:	4618      	mov	r0, r3
 800634e:	f001 fdd5 	bl	8007efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d108      	bne.n	800636e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fc3d 	bl	8006be0 <vPortFree>
				vPortFree( pxTCB );
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fc3a 	bl	8006be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800636c:	e018      	b.n	80063a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d103      	bne.n	8006380 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fc31 	bl	8006be0 <vPortFree>
	}
 800637e:	e00f      	b.n	80063a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006386:	2b02      	cmp	r3, #2
 8006388:	d00a      	beq.n	80063a0 <prvDeleteTCB+0x60>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60fb      	str	r3, [r7, #12]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <prvDeleteTCB+0x5e>
	}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063c0:	e008      	b.n	80063d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <prvResetNextTaskUnblockTime+0x38>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvResetNextTaskUnblockTime+0x3c>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	200005dc 	.word	0x200005dc
 80063e4:	20000644 	.word	0x20000644

080063e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <xTaskGetSchedulerState+0x34>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063f6:	2301      	movs	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e008      	b.n	800640e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <xTaskGetSchedulerState+0x38>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006404:	2302      	movs	r3, #2
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e001      	b.n	800640e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800640e:	687b      	ldr	r3, [r7, #4]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000630 	.word	0x20000630
 8006420:	2000064c 	.word	0x2000064c

08006424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06e      	beq.n	8006518 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800643a:	4b3a      	ldr	r3, [pc, #232]	; (8006524 <xTaskPriorityDisinherit+0x100>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d00a      	beq.n	800645a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	429a      	cmp	r2, r3
 800648c:	d044      	beq.n	8006518 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006492:	2b00      	cmp	r3, #0
 8006494:	d140      	bne.n	8006518 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fc7f 	bl	8004d9e <uxListRemove>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d115      	bne.n	80064d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	491f      	ldr	r1, [pc, #124]	; (8006528 <xTaskPriorityDisinherit+0x104>)
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xTaskPriorityDisinherit+0xae>
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2201      	movs	r2, #1
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <xTaskPriorityDisinherit+0x108>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4013      	ands	r3, r2
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <xTaskPriorityDisinherit+0x108>)
 80064d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	f1c3 0207 	rsb	r2, r3, #7
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	2201      	movs	r2, #1
 80064ec:	409a      	lsls	r2, r3
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskPriorityDisinherit+0x108>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	4a0d      	ldr	r2, [pc, #52]	; (800652c <xTaskPriorityDisinherit+0x108>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a08      	ldr	r2, [pc, #32]	; (8006528 <xTaskPriorityDisinherit+0x104>)
 8006506:	441a      	add	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fe fbe8 	bl	8004ce4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006518:	697b      	ldr	r3, [r7, #20]
	}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000524 	.word	0x20000524
 8006528:	20000528 	.word	0x20000528
 800652c:	2000062c 	.word	0x2000062c

08006530 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800653a:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fc29 	bl	8004d9e <uxListRemove>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2201      	movs	r2, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43da      	mvns	r2, r3
 8006560:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4013      	ands	r3, r2
 8006566:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006568:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006570:	d10a      	bne.n	8006588 <prvAddCurrentTaskToDelayedList+0x58>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	481a      	ldr	r0, [pc, #104]	; (80065ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8006582:	f7fe fbaf 	bl	8004ce4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006586:	e026      	b.n	80065d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	429a      	cmp	r2, r3
 800659e:	d209      	bcs.n	80065b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a0:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe fbbd 	bl	8004d2c <vListInsert>
}
 80065b2:	e010      	b.n	80065d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065b4:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe fbb3 	bl	8004d2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065c6:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d202      	bcs.n	80065d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065d0:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000628 	.word	0x20000628
 80065e4:	20000524 	.word	0x20000524
 80065e8:	2000062c 	.word	0x2000062c
 80065ec:	20000610 	.word	0x20000610
 80065f0:	200005e0 	.word	0x200005e0
 80065f4:	200005dc 	.word	0x200005dc
 80065f8:	20000644 	.word	0x20000644

080065fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b04      	subs	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b04      	subs	r3, #4
 800661a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800662c:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <pxPortInitialiseStack+0x64>)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b14      	subs	r3, #20
 8006636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b04      	subs	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f06f 0202 	mvn.w	r2, #2
 800664a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3b20      	subs	r3, #32
 8006650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	08006665 	.word	0x08006665

08006664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <prvTaskExitError+0x54>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006676:	d00a      	beq.n	800668e <prvTaskExitError+0x2a>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	60fb      	str	r3, [r7, #12]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <prvTaskExitError+0x28>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60bb      	str	r3, [r7, #8]
}
 80066a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066a2:	bf00      	nop
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0fc      	beq.n	80066a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	2000000c 	.word	0x2000000c
 80066bc:	00000000 	.word	0x00000000

080066c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	20000524 	.word	0x20000524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	; (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	bf00      	nop
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006716:	4b46      	ldr	r3, [pc, #280]	; (8006830 <xPortStartScheduler+0x120>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <xPortStartScheduler+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10a      	bne.n	8006736 <xPortStartScheduler+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <xPortStartScheduler+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xPortStartScheduler+0x128>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10a      	bne.n	8006756 <xPortStartScheduler+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <xPortStartScheduler+0x12c>)
 8006758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4b31      	ldr	r3, [pc, #196]	; (8006840 <xPortStartScheduler+0x130>)
 800677c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800677e:	4b31      	ldr	r3, [pc, #196]	; (8006844 <xPortStartScheduler+0x134>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006784:	e009      	b.n	800679a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <xPortStartScheduler+0x134>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <xPortStartScheduler+0x134>)
 800678e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d0ef      	beq.n	8006786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1c3 0307 	rsb	r3, r3, #7
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00a      	beq.n	80067c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <xPortStartScheduler+0x134>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <xPortStartScheduler+0x134>)
 80067d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <xPortStartScheduler+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067da:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <xPortStartScheduler+0x134>)
 80067dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <xPortStartScheduler+0x138>)
 80067ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <xPortStartScheduler+0x138>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <xPortStartScheduler+0x138>)
 80067f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067fe:	f000 f8f5 	bl	80069ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <xPortStartScheduler+0x13c>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006808:	f000 f914 	bl	8006a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <xPortStartScheduler+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <xPortStartScheduler+0x140>)
 8006812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006818:	f7ff ff66 	bl	80066e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800681c:	f7ff fb9e 	bl	8005f5c <vTaskSwitchContext>
	prvTaskExitError();
 8006820:	f7ff ff20 	bl	8006664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000ed00 	.word	0xe000ed00
 8006834:	410fc271 	.word	0x410fc271
 8006838:	410fc270 	.word	0x410fc270
 800683c:	e000e400 	.word	0xe000e400
 8006840:	20000650 	.word	0x20000650
 8006844:	20000654 	.word	0x20000654
 8006848:	e000ed20 	.word	0xe000ed20
 800684c:	2000000c 	.word	0x2000000c
 8006850:	e000ef34 	.word	0xe000ef34

08006854 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <vPortEndScheduler+0x34>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006862:	d00a      	beq.n	800687a <vPortEndScheduler+0x26>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	607b      	str	r3, [r7, #4]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <vPortEndScheduler+0x24>
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c

0800688c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	607b      	str	r3, [r7, #4]
}
 80068a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <vPortEnterCritical+0x58>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a0d      	ldr	r2, [pc, #52]	; (80068e4 <vPortEnterCritical+0x58>)
 80068ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <vPortEnterCritical+0x58>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <vPortEnterCritical+0x5c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	603b      	str	r3, [r7, #0]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortEnterCritical+0x4a>
	}
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <vPortExitCritical+0x24>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <vPortExitCritical+0x50>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a09      	ldr	r2, [pc, #36]	; (800693c <vPortExitCritical+0x50>)
 8006918:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <vPortExitCritical+0x50>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <vPortExitCritical+0x42>
 8006922:	2300      	movs	r3, #0
 8006924:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800692c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2000000c 	.word	0x2000000c

08006940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006940:	f3ef 8009 	mrs	r0, PSP
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <pxCurrentTCBConst>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f01e 0f10 	tst.w	lr, #16
 8006950:	bf08      	it	eq
 8006952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	6010      	str	r0, [r2, #0]
 800695c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006964:	f380 8811 	msr	BASEPRI, r0
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f7ff faf4 	bl	8005f5c <vTaskSwitchContext>
 8006974:	f04f 0000 	mov.w	r0, #0
 8006978:	f380 8811 	msr	BASEPRI, r0
 800697c:	bc09      	pop	{r0, r3}
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6808      	ldr	r0, [r1, #0]
 8006982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006986:	f01e 0f10 	tst.w	lr, #16
 800698a:	bf08      	it	eq
 800698c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006990:	f380 8809 	msr	PSP, r0
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst>:
 80069a0:	20000524 	.word	0x20000524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
}
 80069c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069c2:	f7ff fa13 	bl	8005dec <xTaskIncrementTick>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <SysTick_Handler+0x40>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
}
 80069de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <vPortSetupTimerInterrupt+0x34>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <vPortSetupTimerInterrupt+0x38>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <vPortSetupTimerInterrupt+0x3c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <vPortSetupTimerInterrupt+0x40>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <vPortSetupTimerInterrupt+0x44>)
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a0e:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <vPortSetupTimerInterrupt+0x34>)
 8006a10:	2207      	movs	r2, #7
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e010 	.word	0xe000e010
 8006a24:	e000e018 	.word	0xe000e018
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	10624dd3 	.word	0x10624dd3
 8006a30:	e000e014 	.word	0xe000e014

08006a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a44 <vPortEnableVFP+0x10>
 8006a38:	6801      	ldr	r1, [r0, #0]
 8006a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a3e:	6001      	str	r1, [r0, #0]
 8006a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a42:	bf00      	nop
 8006a44:	e000ed88 	.word	0xe000ed88

08006a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	; 0x28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a54:	f7ff f910 	bl	8005c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a58:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <pvPortMalloc+0x180>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a60:	f000 f920 	bl	8006ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a64:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <pvPortMalloc+0x184>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 8093 	bne.w	8006b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01d      	beq.n	8006ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a78:	2208      	movs	r2, #8
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f023 0307 	bic.w	r3, r3, #7
 8006a90:	3308      	adds	r3, #8
 8006a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d06e      	beq.n	8006b98 <pvPortMalloc+0x150>
 8006aba:	4b45      	ldr	r3, [pc, #276]	; (8006bd0 <pvPortMalloc+0x188>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d869      	bhi.n	8006b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ac4:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <pvPortMalloc+0x18c>)
 8006ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <pvPortMalloc+0x18c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ace:	e004      	b.n	8006ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <pvPortMalloc+0xa4>
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f1      	bne.n	8006ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <pvPortMalloc+0x180>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d050      	beq.n	8006b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2208      	movs	r2, #8
 8006afc:	4413      	add	r3, r2
 8006afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	2308      	movs	r3, #8
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d91f      	bls.n	8006b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <pvPortMalloc+0xf8>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	613b      	str	r3, [r7, #16]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b52:	69b8      	ldr	r0, [r7, #24]
 8006b54:	f000 f908 	bl	8006d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <pvPortMalloc+0x190>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d203      	bcs.n	8006b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <pvPortMalloc+0x188>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <pvPortMalloc+0x190>)
 8006b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <pvPortMalloc+0x184>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <pvPortMalloc+0x194>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <pvPortMalloc+0x194>)
 8006b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b98:	f7ff f87c 	bl	8005c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <pvPortMalloc+0x174>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60fb      	str	r3, [r7, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <pvPortMalloc+0x172>
	return pvReturn;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20004260 	.word	0x20004260
 8006bcc:	20004274 	.word	0x20004274
 8006bd0:	20004264 	.word	0x20004264
 8006bd4:	20004258 	.word	0x20004258
 8006bd8:	20004268 	.word	0x20004268
 8006bdc:	2000426c 	.word	0x2000426c

08006be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04d      	beq.n	8006c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <vPortFree+0xb8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <vPortFree+0x44>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60fb      	str	r3, [r7, #12]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <vPortFree+0x62>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60bb      	str	r3, [r7, #8]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <vPortFree+0xb8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11a      	bne.n	8006c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <vPortFree+0xb8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c68:	f7ff f806 	bl	8005c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vPortFree+0xbc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <vPortFree+0xbc>)
 8006c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 f874 	bl	8006d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vPortFree+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a06      	ldr	r2, [pc, #24]	; (8006ca0 <vPortFree+0xc0>)
 8006c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c8a:	f7ff f803 	bl	8005c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20004274 	.word	0x20004274
 8006c9c:	20004264 	.word	0x20004264
 8006ca0:	20004270 	.word	0x20004270

08006ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cb0:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <prvHeapInit+0xac>)
 8006cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <prvHeapInit+0xac>)
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <prvHeapInit+0xb0>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <prvHeapInit+0xb0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0307 	bic.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <prvHeapInit+0xb4>)
 8006d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <prvHeapInit+0xb4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <prvHeapInit+0xb4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvHeapInit+0xb4>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <prvHeapInit+0xb8>)
 8006d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <prvHeapInit+0xbc>)
 8006d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <prvHeapInit+0xc0>)
 8006d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	20000658 	.word	0x20000658
 8006d54:	20004258 	.word	0x20004258
 8006d58:	20004260 	.word	0x20004260
 8006d5c:	20004268 	.word	0x20004268
 8006d60:	20004264 	.word	0x20004264
 8006d64:	20004274 	.word	0x20004274

08006d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <prvInsertBlockIntoFreeList+0xac>)
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e002      	b.n	8006d7c <prvInsertBlockIntoFreeList+0x14>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d8f7      	bhi.n	8006d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d108      	bne.n	8006daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	441a      	add	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d118      	bne.n	8006df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d00d      	beq.n	8006de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e008      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <prvInsertBlockIntoFreeList+0xb0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e003      	b.n	8006df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d002      	beq.n	8006e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20004258 	.word	0x20004258
 8006e18:	20004260 	.word	0x20004260

08006e1c <__errno>:
 8006e1c:	4b01      	ldr	r3, [pc, #4]	; (8006e24 <__errno+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000010 	.word	0x20000010

08006e28 <std>:
 8006e28:	2300      	movs	r3, #0
 8006e2a:	b510      	push	{r4, lr}
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e36:	6083      	str	r3, [r0, #8]
 8006e38:	8181      	strh	r1, [r0, #12]
 8006e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e3c:	81c2      	strh	r2, [r0, #14]
 8006e3e:	6183      	str	r3, [r0, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	2208      	movs	r2, #8
 8006e44:	305c      	adds	r0, #92	; 0x5c
 8006e46:	f000 f91f 	bl	8007088 <memset>
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <std+0x38>)
 8006e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std+0x3c>)
 8006e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x40>)
 8006e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x44>)
 8006e58:	6224      	str	r4, [r4, #32]
 8006e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	08008021 	.word	0x08008021
 8006e64:	08008043 	.word	0x08008043
 8006e68:	0800807b 	.word	0x0800807b
 8006e6c:	0800809f 	.word	0x0800809f

08006e70 <_cleanup_r>:
 8006e70:	4901      	ldr	r1, [pc, #4]	; (8006e78 <_cleanup_r+0x8>)
 8006e72:	f000 b8af 	b.w	8006fd4 <_fwalk_reent>
 8006e76:	bf00      	nop
 8006e78:	08009c4d 	.word	0x08009c4d

08006e7c <__sfmoreglue>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	1e4a      	subs	r2, r1, #1
 8006e80:	2568      	movs	r5, #104	; 0x68
 8006e82:	4355      	muls	r5, r2
 8006e84:	460e      	mov	r6, r1
 8006e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e8a:	f000 f955 	bl	8007138 <_malloc_r>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	b140      	cbz	r0, 8006ea4 <__sfmoreglue+0x28>
 8006e92:	2100      	movs	r1, #0
 8006e94:	e9c0 1600 	strd	r1, r6, [r0]
 8006e98:	300c      	adds	r0, #12
 8006e9a:	60a0      	str	r0, [r4, #8]
 8006e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ea0:	f000 f8f2 	bl	8007088 <memset>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}

08006ea8 <__sfp_lock_acquire>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sfp_lock_acquire+0x8>)
 8006eaa:	f7fb ba7c 	b.w	80023a6 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	2000051c 	.word	0x2000051c

08006eb4 <__sfp_lock_release>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sfp_lock_release+0x8>)
 8006eb6:	f7fb ba8a 	b.w	80023ce <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	2000051c 	.word	0x2000051c

08006ec0 <__sinit_lock_acquire>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sinit_lock_acquire+0x8>)
 8006ec2:	f7fb ba70 	b.w	80023a6 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20000518 	.word	0x20000518

08006ecc <__sinit_lock_release>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sinit_lock_release+0x8>)
 8006ece:	f7fb ba7e 	b.w	80023ce <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20000518 	.word	0x20000518

08006ed8 <__sinit>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	f7ff fff0 	bl	8006ec0 <__sinit_lock_acquire>
 8006ee0:	69a3      	ldr	r3, [r4, #24]
 8006ee2:	b11b      	cbz	r3, 8006eec <__sinit+0x14>
 8006ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee8:	f7ff bff0 	b.w	8006ecc <__sinit_lock_release>
 8006eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <__sinit+0x68>)
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <__sinit+0x6c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	bf04      	itt	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	61a3      	streq	r3, [r4, #24]
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f820 	bl	8006f48 <__sfp>
 8006f08:	6060      	str	r0, [r4, #4]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f81c 	bl	8006f48 <__sfp>
 8006f10:	60a0      	str	r0, [r4, #8]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f818 	bl	8006f48 <__sfp>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	60e0      	str	r0, [r4, #12]
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	6860      	ldr	r0, [r4, #4]
 8006f20:	f7ff ff82 	bl	8006e28 <std>
 8006f24:	68a0      	ldr	r0, [r4, #8]
 8006f26:	2201      	movs	r2, #1
 8006f28:	2109      	movs	r1, #9
 8006f2a:	f7ff ff7d 	bl	8006e28 <std>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	2202      	movs	r2, #2
 8006f32:	2112      	movs	r1, #18
 8006f34:	f7ff ff78 	bl	8006e28 <std>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	61a3      	str	r3, [r4, #24]
 8006f3c:	e7d2      	b.n	8006ee4 <__sinit+0xc>
 8006f3e:	bf00      	nop
 8006f40:	0800b878 	.word	0x0800b878
 8006f44:	08006e71 	.word	0x08006e71

08006f48 <__sfp>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	f7ff ffac 	bl	8006ea8 <__sfp_lock_acquire>
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <__sfp+0x84>)
 8006f52:	681e      	ldr	r6, [r3, #0]
 8006f54:	69b3      	ldr	r3, [r6, #24]
 8006f56:	b913      	cbnz	r3, 8006f5e <__sfp+0x16>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7ff ffbd 	bl	8006ed8 <__sinit>
 8006f5e:	3648      	adds	r6, #72	; 0x48
 8006f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	d503      	bpl.n	8006f70 <__sfp+0x28>
 8006f68:	6833      	ldr	r3, [r6, #0]
 8006f6a:	b30b      	cbz	r3, 8006fb0 <__sfp+0x68>
 8006f6c:	6836      	ldr	r6, [r6, #0]
 8006f6e:	e7f7      	b.n	8006f60 <__sfp+0x18>
 8006f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f74:	b9d5      	cbnz	r5, 8006fac <__sfp+0x64>
 8006f76:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <__sfp+0x88>)
 8006f78:	60e3      	str	r3, [r4, #12]
 8006f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f80:	f7fb f9eb 	bl	800235a <__retarget_lock_init_recursive>
 8006f84:	f7ff ff96 	bl	8006eb4 <__sfp_lock_release>
 8006f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	2208      	movs	r2, #8
 8006f96:	4629      	mov	r1, r5
 8006f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f9c:	f000 f874 	bl	8007088 <memset>
 8006fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fac:	3468      	adds	r4, #104	; 0x68
 8006fae:	e7d9      	b.n	8006f64 <__sfp+0x1c>
 8006fb0:	2104      	movs	r1, #4
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f7ff ff62 	bl	8006e7c <__sfmoreglue>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	6030      	str	r0, [r6, #0]
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d1d5      	bne.n	8006f6c <__sfp+0x24>
 8006fc0:	f7ff ff78 	bl	8006eb4 <__sfp_lock_release>
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	e7ee      	b.n	8006fa8 <__sfp+0x60>
 8006fca:	bf00      	nop
 8006fcc:	0800b878 	.word	0x0800b878
 8006fd0:	ffff0001 	.word	0xffff0001

08006fd4 <_fwalk_reent>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	4688      	mov	r8, r1
 8006fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fe0:	2700      	movs	r7, #0
 8006fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8006fea:	d505      	bpl.n	8006ff8 <_fwalk_reent+0x24>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	d1f7      	bne.n	8006fe2 <_fwalk_reent+0xe>
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff8:	89ab      	ldrh	r3, [r5, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d907      	bls.n	800700e <_fwalk_reent+0x3a>
 8006ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007002:	3301      	adds	r3, #1
 8007004:	d003      	beq.n	800700e <_fwalk_reent+0x3a>
 8007006:	4629      	mov	r1, r5
 8007008:	4630      	mov	r0, r6
 800700a:	47c0      	blx	r8
 800700c:	4307      	orrs	r7, r0
 800700e:	3568      	adds	r5, #104	; 0x68
 8007010:	e7e9      	b.n	8006fe6 <_fwalk_reent+0x12>
	...

08007014 <__libc_init_array>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4d0d      	ldr	r5, [pc, #52]	; (800704c <__libc_init_array+0x38>)
 8007018:	4c0d      	ldr	r4, [pc, #52]	; (8007050 <__libc_init_array+0x3c>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	2600      	movs	r6, #0
 8007020:	42a6      	cmp	r6, r4
 8007022:	d109      	bne.n	8007038 <__libc_init_array+0x24>
 8007024:	4d0b      	ldr	r5, [pc, #44]	; (8007054 <__libc_init_array+0x40>)
 8007026:	4c0c      	ldr	r4, [pc, #48]	; (8007058 <__libc_init_array+0x44>)
 8007028:	f004 fbb6 	bl	800b798 <_init>
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	2600      	movs	r6, #0
 8007032:	42a6      	cmp	r6, r4
 8007034:	d105      	bne.n	8007042 <__libc_init_array+0x2e>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f855 3b04 	ldr.w	r3, [r5], #4
 800703c:	4798      	blx	r3
 800703e:	3601      	adds	r6, #1
 8007040:	e7ee      	b.n	8007020 <__libc_init_array+0xc>
 8007042:	f855 3b04 	ldr.w	r3, [r5], #4
 8007046:	4798      	blx	r3
 8007048:	3601      	adds	r6, #1
 800704a:	e7f2      	b.n	8007032 <__libc_init_array+0x1e>
 800704c:	0800bcd4 	.word	0x0800bcd4
 8007050:	0800bcd4 	.word	0x0800bcd4
 8007054:	0800bcd4 	.word	0x0800bcd4
 8007058:	0800bcd8 	.word	0x0800bcd8

0800705c <malloc>:
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <malloc+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f000 b869 	b.w	8007138 <_malloc_r>
 8007066:	bf00      	nop
 8007068:	20000010 	.word	0x20000010

0800706c <memcpy>:
 800706c:	440a      	add	r2, r1
 800706e:	4291      	cmp	r1, r2
 8007070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007074:	d100      	bne.n	8007078 <memcpy+0xc>
 8007076:	4770      	bx	lr
 8007078:	b510      	push	{r4, lr}
 800707a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007082:	4291      	cmp	r1, r2
 8007084:	d1f9      	bne.n	800707a <memcpy+0xe>
 8007086:	bd10      	pop	{r4, pc}

08007088 <memset>:
 8007088:	4402      	add	r2, r0
 800708a:	4603      	mov	r3, r0
 800708c:	4293      	cmp	r3, r2
 800708e:	d100      	bne.n	8007092 <memset+0xa>
 8007090:	4770      	bx	lr
 8007092:	f803 1b01 	strb.w	r1, [r3], #1
 8007096:	e7f9      	b.n	800708c <memset+0x4>

08007098 <_free_r>:
 8007098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800709a:	2900      	cmp	r1, #0
 800709c:	d048      	beq.n	8007130 <_free_r+0x98>
 800709e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a2:	9001      	str	r0, [sp, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f1a1 0404 	sub.w	r4, r1, #4
 80070aa:	bfb8      	it	lt
 80070ac:	18e4      	addlt	r4, r4, r3
 80070ae:	f003 f9a1 	bl	800a3f4 <__malloc_lock>
 80070b2:	4a20      	ldr	r2, [pc, #128]	; (8007134 <_free_r+0x9c>)
 80070b4:	9801      	ldr	r0, [sp, #4]
 80070b6:	6813      	ldr	r3, [r2, #0]
 80070b8:	4615      	mov	r5, r2
 80070ba:	b933      	cbnz	r3, 80070ca <_free_r+0x32>
 80070bc:	6063      	str	r3, [r4, #4]
 80070be:	6014      	str	r4, [r2, #0]
 80070c0:	b003      	add	sp, #12
 80070c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070c6:	f003 b99b 	b.w	800a400 <__malloc_unlock>
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	d90b      	bls.n	80070e6 <_free_r+0x4e>
 80070ce:	6821      	ldr	r1, [r4, #0]
 80070d0:	1862      	adds	r2, r4, r1
 80070d2:	4293      	cmp	r3, r2
 80070d4:	bf04      	itt	eq
 80070d6:	681a      	ldreq	r2, [r3, #0]
 80070d8:	685b      	ldreq	r3, [r3, #4]
 80070da:	6063      	str	r3, [r4, #4]
 80070dc:	bf04      	itt	eq
 80070de:	1852      	addeq	r2, r2, r1
 80070e0:	6022      	streq	r2, [r4, #0]
 80070e2:	602c      	str	r4, [r5, #0]
 80070e4:	e7ec      	b.n	80070c0 <_free_r+0x28>
 80070e6:	461a      	mov	r2, r3
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	b10b      	cbz	r3, 80070f0 <_free_r+0x58>
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d9fa      	bls.n	80070e6 <_free_r+0x4e>
 80070f0:	6811      	ldr	r1, [r2, #0]
 80070f2:	1855      	adds	r5, r2, r1
 80070f4:	42a5      	cmp	r5, r4
 80070f6:	d10b      	bne.n	8007110 <_free_r+0x78>
 80070f8:	6824      	ldr	r4, [r4, #0]
 80070fa:	4421      	add	r1, r4
 80070fc:	1854      	adds	r4, r2, r1
 80070fe:	42a3      	cmp	r3, r4
 8007100:	6011      	str	r1, [r2, #0]
 8007102:	d1dd      	bne.n	80070c0 <_free_r+0x28>
 8007104:	681c      	ldr	r4, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	6053      	str	r3, [r2, #4]
 800710a:	4421      	add	r1, r4
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	e7d7      	b.n	80070c0 <_free_r+0x28>
 8007110:	d902      	bls.n	8007118 <_free_r+0x80>
 8007112:	230c      	movs	r3, #12
 8007114:	6003      	str	r3, [r0, #0]
 8007116:	e7d3      	b.n	80070c0 <_free_r+0x28>
 8007118:	6825      	ldr	r5, [r4, #0]
 800711a:	1961      	adds	r1, r4, r5
 800711c:	428b      	cmp	r3, r1
 800711e:	bf04      	itt	eq
 8007120:	6819      	ldreq	r1, [r3, #0]
 8007122:	685b      	ldreq	r3, [r3, #4]
 8007124:	6063      	str	r3, [r4, #4]
 8007126:	bf04      	itt	eq
 8007128:	1949      	addeq	r1, r1, r5
 800712a:	6021      	streq	r1, [r4, #0]
 800712c:	6054      	str	r4, [r2, #4]
 800712e:	e7c7      	b.n	80070c0 <_free_r+0x28>
 8007130:	b003      	add	sp, #12
 8007132:	bd30      	pop	{r4, r5, pc}
 8007134:	20004278 	.word	0x20004278

08007138 <_malloc_r>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	1ccd      	adds	r5, r1, #3
 800713c:	f025 0503 	bic.w	r5, r5, #3
 8007140:	3508      	adds	r5, #8
 8007142:	2d0c      	cmp	r5, #12
 8007144:	bf38      	it	cc
 8007146:	250c      	movcc	r5, #12
 8007148:	2d00      	cmp	r5, #0
 800714a:	4606      	mov	r6, r0
 800714c:	db01      	blt.n	8007152 <_malloc_r+0x1a>
 800714e:	42a9      	cmp	r1, r5
 8007150:	d903      	bls.n	800715a <_malloc_r+0x22>
 8007152:	230c      	movs	r3, #12
 8007154:	6033      	str	r3, [r6, #0]
 8007156:	2000      	movs	r0, #0
 8007158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800715a:	f003 f94b 	bl	800a3f4 <__malloc_lock>
 800715e:	4921      	ldr	r1, [pc, #132]	; (80071e4 <_malloc_r+0xac>)
 8007160:	680a      	ldr	r2, [r1, #0]
 8007162:	4614      	mov	r4, r2
 8007164:	b99c      	cbnz	r4, 800718e <_malloc_r+0x56>
 8007166:	4f20      	ldr	r7, [pc, #128]	; (80071e8 <_malloc_r+0xb0>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	b923      	cbnz	r3, 8007176 <_malloc_r+0x3e>
 800716c:	4621      	mov	r1, r4
 800716e:	4630      	mov	r0, r6
 8007170:	f000 ff20 	bl	8007fb4 <_sbrk_r>
 8007174:	6038      	str	r0, [r7, #0]
 8007176:	4629      	mov	r1, r5
 8007178:	4630      	mov	r0, r6
 800717a:	f000 ff1b 	bl	8007fb4 <_sbrk_r>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d123      	bne.n	80071ca <_malloc_r+0x92>
 8007182:	230c      	movs	r3, #12
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	4630      	mov	r0, r6
 8007188:	f003 f93a 	bl	800a400 <__malloc_unlock>
 800718c:	e7e3      	b.n	8007156 <_malloc_r+0x1e>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	1b5b      	subs	r3, r3, r5
 8007192:	d417      	bmi.n	80071c4 <_malloc_r+0x8c>
 8007194:	2b0b      	cmp	r3, #11
 8007196:	d903      	bls.n	80071a0 <_malloc_r+0x68>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	441c      	add	r4, r3
 800719c:	6025      	str	r5, [r4, #0]
 800719e:	e004      	b.n	80071aa <_malloc_r+0x72>
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	42a2      	cmp	r2, r4
 80071a4:	bf0c      	ite	eq
 80071a6:	600b      	streq	r3, [r1, #0]
 80071a8:	6053      	strne	r3, [r2, #4]
 80071aa:	4630      	mov	r0, r6
 80071ac:	f003 f928 	bl	800a400 <__malloc_unlock>
 80071b0:	f104 000b 	add.w	r0, r4, #11
 80071b4:	1d23      	adds	r3, r4, #4
 80071b6:	f020 0007 	bic.w	r0, r0, #7
 80071ba:	1ac2      	subs	r2, r0, r3
 80071bc:	d0cc      	beq.n	8007158 <_malloc_r+0x20>
 80071be:	1a1b      	subs	r3, r3, r0
 80071c0:	50a3      	str	r3, [r4, r2]
 80071c2:	e7c9      	b.n	8007158 <_malloc_r+0x20>
 80071c4:	4622      	mov	r2, r4
 80071c6:	6864      	ldr	r4, [r4, #4]
 80071c8:	e7cc      	b.n	8007164 <_malloc_r+0x2c>
 80071ca:	1cc4      	adds	r4, r0, #3
 80071cc:	f024 0403 	bic.w	r4, r4, #3
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d0e3      	beq.n	800719c <_malloc_r+0x64>
 80071d4:	1a21      	subs	r1, r4, r0
 80071d6:	4630      	mov	r0, r6
 80071d8:	f000 feec 	bl	8007fb4 <_sbrk_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	d1dd      	bne.n	800719c <_malloc_r+0x64>
 80071e0:	e7cf      	b.n	8007182 <_malloc_r+0x4a>
 80071e2:	bf00      	nop
 80071e4:	20004278 	.word	0x20004278
 80071e8:	2000427c 	.word	0x2000427c

080071ec <__cvt>:
 80071ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	ec55 4b10 	vmov	r4, r5, d0
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	460e      	mov	r6, r1
 80071f8:	4619      	mov	r1, r3
 80071fa:	462b      	mov	r3, r5
 80071fc:	bfbb      	ittet	lt
 80071fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007202:	461d      	movlt	r5, r3
 8007204:	2300      	movge	r3, #0
 8007206:	232d      	movlt	r3, #45	; 0x2d
 8007208:	700b      	strb	r3, [r1, #0]
 800720a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800720c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007210:	4691      	mov	r9, r2
 8007212:	f023 0820 	bic.w	r8, r3, #32
 8007216:	bfbc      	itt	lt
 8007218:	4622      	movlt	r2, r4
 800721a:	4614      	movlt	r4, r2
 800721c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007220:	d005      	beq.n	800722e <__cvt+0x42>
 8007222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007226:	d100      	bne.n	800722a <__cvt+0x3e>
 8007228:	3601      	adds	r6, #1
 800722a:	2102      	movs	r1, #2
 800722c:	e000      	b.n	8007230 <__cvt+0x44>
 800722e:	2103      	movs	r1, #3
 8007230:	ab03      	add	r3, sp, #12
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	ab02      	add	r3, sp, #8
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	ec45 4b10 	vmov	d0, r4, r5
 800723c:	4653      	mov	r3, sl
 800723e:	4632      	mov	r2, r6
 8007240:	f001 fe92 	bl	8008f68 <_dtoa_r>
 8007244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007248:	4607      	mov	r7, r0
 800724a:	d102      	bne.n	8007252 <__cvt+0x66>
 800724c:	f019 0f01 	tst.w	r9, #1
 8007250:	d022      	beq.n	8007298 <__cvt+0xac>
 8007252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007256:	eb07 0906 	add.w	r9, r7, r6
 800725a:	d110      	bne.n	800727e <__cvt+0x92>
 800725c:	783b      	ldrb	r3, [r7, #0]
 800725e:	2b30      	cmp	r3, #48	; 0x30
 8007260:	d10a      	bne.n	8007278 <__cvt+0x8c>
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800726e:	b918      	cbnz	r0, 8007278 <__cvt+0x8c>
 8007270:	f1c6 0601 	rsb	r6, r6, #1
 8007274:	f8ca 6000 	str.w	r6, [sl]
 8007278:	f8da 3000 	ldr.w	r3, [sl]
 800727c:	4499      	add	r9, r3
 800727e:	2200      	movs	r2, #0
 8007280:	2300      	movs	r3, #0
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	f7f9 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800728a:	b108      	cbz	r0, 8007290 <__cvt+0xa4>
 800728c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007290:	2230      	movs	r2, #48	; 0x30
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	454b      	cmp	r3, r9
 8007296:	d307      	bcc.n	80072a8 <__cvt+0xbc>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800729c:	1bdb      	subs	r3, r3, r7
 800729e:	4638      	mov	r0, r7
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	b004      	add	sp, #16
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	1c59      	adds	r1, r3, #1
 80072aa:	9103      	str	r1, [sp, #12]
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	e7f0      	b.n	8007292 <__cvt+0xa6>

080072b0 <__exponent>:
 80072b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072b2:	4603      	mov	r3, r0
 80072b4:	2900      	cmp	r1, #0
 80072b6:	bfb8      	it	lt
 80072b8:	4249      	neglt	r1, r1
 80072ba:	f803 2b02 	strb.w	r2, [r3], #2
 80072be:	bfb4      	ite	lt
 80072c0:	222d      	movlt	r2, #45	; 0x2d
 80072c2:	222b      	movge	r2, #43	; 0x2b
 80072c4:	2909      	cmp	r1, #9
 80072c6:	7042      	strb	r2, [r0, #1]
 80072c8:	dd2a      	ble.n	8007320 <__exponent+0x70>
 80072ca:	f10d 0407 	add.w	r4, sp, #7
 80072ce:	46a4      	mov	ip, r4
 80072d0:	270a      	movs	r7, #10
 80072d2:	46a6      	mov	lr, r4
 80072d4:	460a      	mov	r2, r1
 80072d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80072da:	fb07 1516 	mls	r5, r7, r6, r1
 80072de:	3530      	adds	r5, #48	; 0x30
 80072e0:	2a63      	cmp	r2, #99	; 0x63
 80072e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80072e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072ea:	4631      	mov	r1, r6
 80072ec:	dcf1      	bgt.n	80072d2 <__exponent+0x22>
 80072ee:	3130      	adds	r1, #48	; 0x30
 80072f0:	f1ae 0502 	sub.w	r5, lr, #2
 80072f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072f8:	1c44      	adds	r4, r0, #1
 80072fa:	4629      	mov	r1, r5
 80072fc:	4561      	cmp	r1, ip
 80072fe:	d30a      	bcc.n	8007316 <__exponent+0x66>
 8007300:	f10d 0209 	add.w	r2, sp, #9
 8007304:	eba2 020e 	sub.w	r2, r2, lr
 8007308:	4565      	cmp	r5, ip
 800730a:	bf88      	it	hi
 800730c:	2200      	movhi	r2, #0
 800730e:	4413      	add	r3, r2
 8007310:	1a18      	subs	r0, r3, r0
 8007312:	b003      	add	sp, #12
 8007314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800731e:	e7ed      	b.n	80072fc <__exponent+0x4c>
 8007320:	2330      	movs	r3, #48	; 0x30
 8007322:	3130      	adds	r1, #48	; 0x30
 8007324:	7083      	strb	r3, [r0, #2]
 8007326:	70c1      	strb	r1, [r0, #3]
 8007328:	1d03      	adds	r3, r0, #4
 800732a:	e7f1      	b.n	8007310 <__exponent+0x60>

0800732c <_printf_float>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	ed2d 8b02 	vpush	{d8}
 8007334:	b08d      	sub	sp, #52	; 0x34
 8007336:	460c      	mov	r4, r1
 8007338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800733c:	4616      	mov	r6, r2
 800733e:	461f      	mov	r7, r3
 8007340:	4605      	mov	r5, r0
 8007342:	f003 f82f 	bl	800a3a4 <_localeconv_r>
 8007346:	f8d0 a000 	ldr.w	sl, [r0]
 800734a:	4650      	mov	r0, sl
 800734c:	f7f8 ff40 	bl	80001d0 <strlen>
 8007350:	2300      	movs	r3, #0
 8007352:	930a      	str	r3, [sp, #40]	; 0x28
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	f8d8 3000 	ldr.w	r3, [r8]
 800735c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007360:	3307      	adds	r3, #7
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	f103 0208 	add.w	r2, r3, #8
 800736a:	f8c8 2000 	str.w	r2, [r8]
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800737a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800737e:	9307      	str	r3, [sp, #28]
 8007380:	f8cd 8018 	str.w	r8, [sp, #24]
 8007384:	ee08 0a10 	vmov	s16, r0
 8007388:	4b9f      	ldr	r3, [pc, #636]	; (8007608 <_printf_float+0x2dc>)
 800738a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007392:	f7f9 fbcb 	bl	8000b2c <__aeabi_dcmpun>
 8007396:	bb88      	cbnz	r0, 80073fc <_printf_float+0xd0>
 8007398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739c:	4b9a      	ldr	r3, [pc, #616]	; (8007608 <_printf_float+0x2dc>)
 800739e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073a2:	f7f9 fba5 	bl	8000af0 <__aeabi_dcmple>
 80073a6:	bb48      	cbnz	r0, 80073fc <_printf_float+0xd0>
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f9 fb94 	bl	8000adc <__aeabi_dcmplt>
 80073b4:	b110      	cbz	r0, 80073bc <_printf_float+0x90>
 80073b6:	232d      	movs	r3, #45	; 0x2d
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073bc:	4b93      	ldr	r3, [pc, #588]	; (800760c <_printf_float+0x2e0>)
 80073be:	4894      	ldr	r0, [pc, #592]	; (8007610 <_printf_float+0x2e4>)
 80073c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073c4:	bf94      	ite	ls
 80073c6:	4698      	movls	r8, r3
 80073c8:	4680      	movhi	r8, r0
 80073ca:	2303      	movs	r3, #3
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	9b05      	ldr	r3, [sp, #20]
 80073d0:	f023 0204 	bic.w	r2, r3, #4
 80073d4:	6022      	str	r2, [r4, #0]
 80073d6:	f04f 0900 	mov.w	r9, #0
 80073da:	9700      	str	r7, [sp, #0]
 80073dc:	4633      	mov	r3, r6
 80073de:	aa0b      	add	r2, sp, #44	; 0x2c
 80073e0:	4621      	mov	r1, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f9d8 	bl	8007798 <_printf_common>
 80073e8:	3001      	adds	r0, #1
 80073ea:	f040 8090 	bne.w	800750e <_printf_float+0x1e2>
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f2:	b00d      	add	sp, #52	; 0x34
 80073f4:	ecbd 8b02 	vpop	{d8}
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8007408:	b140      	cbz	r0, 800741c <_printf_float+0xf0>
 800740a:	464b      	mov	r3, r9
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfbc      	itt	lt
 8007410:	232d      	movlt	r3, #45	; 0x2d
 8007412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007416:	487f      	ldr	r0, [pc, #508]	; (8007614 <_printf_float+0x2e8>)
 8007418:	4b7f      	ldr	r3, [pc, #508]	; (8007618 <_printf_float+0x2ec>)
 800741a:	e7d1      	b.n	80073c0 <_printf_float+0x94>
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007422:	9206      	str	r2, [sp, #24]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	d13f      	bne.n	80074a8 <_printf_float+0x17c>
 8007428:	2306      	movs	r3, #6
 800742a:	6063      	str	r3, [r4, #4]
 800742c:	9b05      	ldr	r3, [sp, #20]
 800742e:	6861      	ldr	r1, [r4, #4]
 8007430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007434:	2300      	movs	r3, #0
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	ab0a      	add	r3, sp, #40	; 0x28
 800743a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800743e:	ab09      	add	r3, sp, #36	; 0x24
 8007440:	ec49 8b10 	vmov	d0, r8, r9
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800744c:	4628      	mov	r0, r5
 800744e:	f7ff fecd 	bl	80071ec <__cvt>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007456:	2b47      	cmp	r3, #71	; 0x47
 8007458:	4680      	mov	r8, r0
 800745a:	d108      	bne.n	800746e <_printf_float+0x142>
 800745c:	1cc8      	adds	r0, r1, #3
 800745e:	db02      	blt.n	8007466 <_printf_float+0x13a>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	4299      	cmp	r1, r3
 8007464:	dd41      	ble.n	80074ea <_printf_float+0x1be>
 8007466:	f1ab 0b02 	sub.w	fp, fp, #2
 800746a:	fa5f fb8b 	uxtb.w	fp, fp
 800746e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007472:	d820      	bhi.n	80074b6 <_printf_float+0x18a>
 8007474:	3901      	subs	r1, #1
 8007476:	465a      	mov	r2, fp
 8007478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800747c:	9109      	str	r1, [sp, #36]	; 0x24
 800747e:	f7ff ff17 	bl	80072b0 <__exponent>
 8007482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007484:	1813      	adds	r3, r2, r0
 8007486:	2a01      	cmp	r2, #1
 8007488:	4681      	mov	r9, r0
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	dc02      	bgt.n	8007494 <_printf_float+0x168>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	07d2      	lsls	r2, r2, #31
 8007492:	d501      	bpl.n	8007498 <_printf_float+0x16c>
 8007494:	3301      	adds	r3, #1
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800749c:	2b00      	cmp	r3, #0
 800749e:	d09c      	beq.n	80073da <_printf_float+0xae>
 80074a0:	232d      	movs	r3, #45	; 0x2d
 80074a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a6:	e798      	b.n	80073da <_printf_float+0xae>
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	2a47      	cmp	r2, #71	; 0x47
 80074ac:	d1be      	bne.n	800742c <_printf_float+0x100>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1bc      	bne.n	800742c <_printf_float+0x100>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e7b9      	b.n	800742a <_printf_float+0xfe>
 80074b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074ba:	d118      	bne.n	80074ee <_printf_float+0x1c2>
 80074bc:	2900      	cmp	r1, #0
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	dd0b      	ble.n	80074da <_printf_float+0x1ae>
 80074c2:	6121      	str	r1, [r4, #16]
 80074c4:	b913      	cbnz	r3, 80074cc <_printf_float+0x1a0>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	07d0      	lsls	r0, r2, #31
 80074ca:	d502      	bpl.n	80074d2 <_printf_float+0x1a6>
 80074cc:	3301      	adds	r3, #1
 80074ce:	440b      	add	r3, r1
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80074d4:	f04f 0900 	mov.w	r9, #0
 80074d8:	e7de      	b.n	8007498 <_printf_float+0x16c>
 80074da:	b913      	cbnz	r3, 80074e2 <_printf_float+0x1b6>
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	07d2      	lsls	r2, r2, #31
 80074e0:	d501      	bpl.n	80074e6 <_printf_float+0x1ba>
 80074e2:	3302      	adds	r3, #2
 80074e4:	e7f4      	b.n	80074d0 <_printf_float+0x1a4>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e7f2      	b.n	80074d0 <_printf_float+0x1a4>
 80074ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f0:	4299      	cmp	r1, r3
 80074f2:	db05      	blt.n	8007500 <_printf_float+0x1d4>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	6121      	str	r1, [r4, #16]
 80074f8:	07d8      	lsls	r0, r3, #31
 80074fa:	d5ea      	bpl.n	80074d2 <_printf_float+0x1a6>
 80074fc:	1c4b      	adds	r3, r1, #1
 80074fe:	e7e7      	b.n	80074d0 <_printf_float+0x1a4>
 8007500:	2900      	cmp	r1, #0
 8007502:	bfd4      	ite	le
 8007504:	f1c1 0202 	rsble	r2, r1, #2
 8007508:	2201      	movgt	r2, #1
 800750a:	4413      	add	r3, r2
 800750c:	e7e0      	b.n	80074d0 <_printf_float+0x1a4>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	055a      	lsls	r2, r3, #21
 8007512:	d407      	bmi.n	8007524 <_printf_float+0x1f8>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	4642      	mov	r2, r8
 8007518:	4631      	mov	r1, r6
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	d12c      	bne.n	800757c <_printf_float+0x250>
 8007522:	e764      	b.n	80073ee <_printf_float+0xc2>
 8007524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007528:	f240 80e0 	bls.w	80076ec <_printf_float+0x3c0>
 800752c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007530:	2200      	movs	r2, #0
 8007532:	2300      	movs	r3, #0
 8007534:	f7f9 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007538:	2800      	cmp	r0, #0
 800753a:	d034      	beq.n	80075a6 <_printf_float+0x27a>
 800753c:	4a37      	ldr	r2, [pc, #220]	; (800761c <_printf_float+0x2f0>)
 800753e:	2301      	movs	r3, #1
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af51 	beq.w	80073ee <_printf_float+0xc2>
 800754c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007550:	429a      	cmp	r2, r3
 8007552:	db02      	blt.n	800755a <_printf_float+0x22e>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	07d8      	lsls	r0, r3, #31
 8007558:	d510      	bpl.n	800757c <_printf_float+0x250>
 800755a:	ee18 3a10 	vmov	r3, s16
 800755e:	4652      	mov	r2, sl
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af41 	beq.w	80073ee <_printf_float+0xc2>
 800756c:	f04f 0800 	mov.w	r8, #0
 8007570:	f104 091a 	add.w	r9, r4, #26
 8007574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007576:	3b01      	subs	r3, #1
 8007578:	4543      	cmp	r3, r8
 800757a:	dc09      	bgt.n	8007590 <_printf_float+0x264>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	079b      	lsls	r3, r3, #30
 8007580:	f100 8105 	bmi.w	800778e <_printf_float+0x462>
 8007584:	68e0      	ldr	r0, [r4, #12]
 8007586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007588:	4298      	cmp	r0, r3
 800758a:	bfb8      	it	lt
 800758c:	4618      	movlt	r0, r3
 800758e:	e730      	b.n	80073f2 <_printf_float+0xc6>
 8007590:	2301      	movs	r3, #1
 8007592:	464a      	mov	r2, r9
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f af27 	beq.w	80073ee <_printf_float+0xc2>
 80075a0:	f108 0801 	add.w	r8, r8, #1
 80075a4:	e7e6      	b.n	8007574 <_printf_float+0x248>
 80075a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc39      	bgt.n	8007620 <_printf_float+0x2f4>
 80075ac:	4a1b      	ldr	r2, [pc, #108]	; (800761c <_printf_float+0x2f0>)
 80075ae:	2301      	movs	r3, #1
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	f43f af19 	beq.w	80073ee <_printf_float+0xc2>
 80075bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075c0:	4313      	orrs	r3, r2
 80075c2:	d102      	bne.n	80075ca <_printf_float+0x29e>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	07d9      	lsls	r1, r3, #31
 80075c8:	d5d8      	bpl.n	800757c <_printf_float+0x250>
 80075ca:	ee18 3a10 	vmov	r3, s16
 80075ce:	4652      	mov	r2, sl
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f af09 	beq.w	80073ee <_printf_float+0xc2>
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	f104 0a1a 	add.w	sl, r4, #26
 80075e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e6:	425b      	negs	r3, r3
 80075e8:	454b      	cmp	r3, r9
 80075ea:	dc01      	bgt.n	80075f0 <_printf_float+0x2c4>
 80075ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ee:	e792      	b.n	8007516 <_printf_float+0x1ea>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4652      	mov	r2, sl
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f aef7 	beq.w	80073ee <_printf_float+0xc2>
 8007600:	f109 0901 	add.w	r9, r9, #1
 8007604:	e7ee      	b.n	80075e4 <_printf_float+0x2b8>
 8007606:	bf00      	nop
 8007608:	7fefffff 	.word	0x7fefffff
 800760c:	0800b87c 	.word	0x0800b87c
 8007610:	0800b880 	.word	0x0800b880
 8007614:	0800b888 	.word	0x0800b888
 8007618:	0800b884 	.word	0x0800b884
 800761c:	0800b88c 	.word	0x0800b88c
 8007620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007624:	429a      	cmp	r2, r3
 8007626:	bfa8      	it	ge
 8007628:	461a      	movge	r2, r3
 800762a:	2a00      	cmp	r2, #0
 800762c:	4691      	mov	r9, r2
 800762e:	dc37      	bgt.n	80076a0 <_printf_float+0x374>
 8007630:	f04f 0b00 	mov.w	fp, #0
 8007634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007638:	f104 021a 	add.w	r2, r4, #26
 800763c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800763e:	9305      	str	r3, [sp, #20]
 8007640:	eba3 0309 	sub.w	r3, r3, r9
 8007644:	455b      	cmp	r3, fp
 8007646:	dc33      	bgt.n	80076b0 <_printf_float+0x384>
 8007648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764c:	429a      	cmp	r2, r3
 800764e:	db3b      	blt.n	80076c8 <_printf_float+0x39c>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07da      	lsls	r2, r3, #31
 8007654:	d438      	bmi.n	80076c8 <_printf_float+0x39c>
 8007656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007658:	9b05      	ldr	r3, [sp, #20]
 800765a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	eba2 0901 	sub.w	r9, r2, r1
 8007662:	4599      	cmp	r9, r3
 8007664:	bfa8      	it	ge
 8007666:	4699      	movge	r9, r3
 8007668:	f1b9 0f00 	cmp.w	r9, #0
 800766c:	dc35      	bgt.n	80076da <_printf_float+0x3ae>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007676:	f104 0a1a 	add.w	sl, r4, #26
 800767a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	eba3 0309 	sub.w	r3, r3, r9
 8007684:	4543      	cmp	r3, r8
 8007686:	f77f af79 	ble.w	800757c <_printf_float+0x250>
 800768a:	2301      	movs	r3, #1
 800768c:	4652      	mov	r2, sl
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f aeaa 	beq.w	80073ee <_printf_float+0xc2>
 800769a:	f108 0801 	add.w	r8, r8, #1
 800769e:	e7ec      	b.n	800767a <_printf_float+0x34e>
 80076a0:	4613      	mov	r3, r2
 80076a2:	4631      	mov	r1, r6
 80076a4:	4642      	mov	r2, r8
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	d1c0      	bne.n	8007630 <_printf_float+0x304>
 80076ae:	e69e      	b.n	80073ee <_printf_float+0xc2>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	9205      	str	r2, [sp, #20]
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	f43f ae97 	beq.w	80073ee <_printf_float+0xc2>
 80076c0:	9a05      	ldr	r2, [sp, #20]
 80076c2:	f10b 0b01 	add.w	fp, fp, #1
 80076c6:	e7b9      	b.n	800763c <_printf_float+0x310>
 80076c8:	ee18 3a10 	vmov	r3, s16
 80076cc:	4652      	mov	r2, sl
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1be      	bne.n	8007656 <_printf_float+0x32a>
 80076d8:	e689      	b.n	80073ee <_printf_float+0xc2>
 80076da:	9a05      	ldr	r2, [sp, #20]
 80076dc:	464b      	mov	r3, r9
 80076de:	4442      	add	r2, r8
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	d1c1      	bne.n	800766e <_printf_float+0x342>
 80076ea:	e680      	b.n	80073ee <_printf_float+0xc2>
 80076ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ee:	2a01      	cmp	r2, #1
 80076f0:	dc01      	bgt.n	80076f6 <_printf_float+0x3ca>
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d538      	bpl.n	8007768 <_printf_float+0x43c>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4642      	mov	r2, r8
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f ae74 	beq.w	80073ee <_printf_float+0xc2>
 8007706:	ee18 3a10 	vmov	r3, s16
 800770a:	4652      	mov	r2, sl
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f ae6b 	beq.w	80073ee <_printf_float+0xc2>
 8007718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800771c:	2200      	movs	r2, #0
 800771e:	2300      	movs	r3, #0
 8007720:	f7f9 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007724:	b9d8      	cbnz	r0, 800775e <_printf_float+0x432>
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	f108 0201 	add.w	r2, r8, #1
 800772c:	3b01      	subs	r3, #1
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	d10e      	bne.n	8007756 <_printf_float+0x42a>
 8007738:	e659      	b.n	80073ee <_printf_float+0xc2>
 800773a:	2301      	movs	r3, #1
 800773c:	4652      	mov	r2, sl
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae52 	beq.w	80073ee <_printf_float+0xc2>
 800774a:	f108 0801 	add.w	r8, r8, #1
 800774e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007750:	3b01      	subs	r3, #1
 8007752:	4543      	cmp	r3, r8
 8007754:	dcf1      	bgt.n	800773a <_printf_float+0x40e>
 8007756:	464b      	mov	r3, r9
 8007758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800775c:	e6dc      	b.n	8007518 <_printf_float+0x1ec>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	f104 0a1a 	add.w	sl, r4, #26
 8007766:	e7f2      	b.n	800774e <_printf_float+0x422>
 8007768:	2301      	movs	r3, #1
 800776a:	4642      	mov	r2, r8
 800776c:	e7df      	b.n	800772e <_printf_float+0x402>
 800776e:	2301      	movs	r3, #1
 8007770:	464a      	mov	r2, r9
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f ae38 	beq.w	80073ee <_printf_float+0xc2>
 800777e:	f108 0801 	add.w	r8, r8, #1
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007786:	1a5b      	subs	r3, r3, r1
 8007788:	4543      	cmp	r3, r8
 800778a:	dcf0      	bgt.n	800776e <_printf_float+0x442>
 800778c:	e6fa      	b.n	8007584 <_printf_float+0x258>
 800778e:	f04f 0800 	mov.w	r8, #0
 8007792:	f104 0919 	add.w	r9, r4, #25
 8007796:	e7f4      	b.n	8007782 <_printf_float+0x456>

08007798 <_printf_common>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	4616      	mov	r6, r2
 800779e:	4699      	mov	r9, r3
 80077a0:	688a      	ldr	r2, [r1, #8]
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	bfb8      	it	lt
 80077ac:	4613      	movlt	r3, r2
 80077ae:	6033      	str	r3, [r6, #0]
 80077b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b4:	4607      	mov	r7, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	b10a      	cbz	r2, 80077be <_printf_common+0x26>
 80077ba:	3301      	adds	r3, #1
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	0699      	lsls	r1, r3, #26
 80077c2:	bf42      	ittt	mi
 80077c4:	6833      	ldrmi	r3, [r6, #0]
 80077c6:	3302      	addmi	r3, #2
 80077c8:	6033      	strmi	r3, [r6, #0]
 80077ca:	6825      	ldr	r5, [r4, #0]
 80077cc:	f015 0506 	ands.w	r5, r5, #6
 80077d0:	d106      	bne.n	80077e0 <_printf_common+0x48>
 80077d2:	f104 0a19 	add.w	sl, r4, #25
 80077d6:	68e3      	ldr	r3, [r4, #12]
 80077d8:	6832      	ldr	r2, [r6, #0]
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	42ab      	cmp	r3, r5
 80077de:	dc26      	bgt.n	800782e <_printf_common+0x96>
 80077e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077e4:	1e13      	subs	r3, r2, #0
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	bf18      	it	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	0692      	lsls	r2, r2, #26
 80077ee:	d42b      	bmi.n	8007848 <_printf_common+0xb0>
 80077f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f4:	4649      	mov	r1, r9
 80077f6:	4638      	mov	r0, r7
 80077f8:	47c0      	blx	r8
 80077fa:	3001      	adds	r0, #1
 80077fc:	d01e      	beq.n	800783c <_printf_common+0xa4>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	68e5      	ldr	r5, [r4, #12]
 8007802:	6832      	ldr	r2, [r6, #0]
 8007804:	f003 0306 	and.w	r3, r3, #6
 8007808:	2b04      	cmp	r3, #4
 800780a:	bf08      	it	eq
 800780c:	1aad      	subeq	r5, r5, r2
 800780e:	68a3      	ldr	r3, [r4, #8]
 8007810:	6922      	ldr	r2, [r4, #16]
 8007812:	bf0c      	ite	eq
 8007814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007818:	2500      	movne	r5, #0
 800781a:	4293      	cmp	r3, r2
 800781c:	bfc4      	itt	gt
 800781e:	1a9b      	subgt	r3, r3, r2
 8007820:	18ed      	addgt	r5, r5, r3
 8007822:	2600      	movs	r6, #0
 8007824:	341a      	adds	r4, #26
 8007826:	42b5      	cmp	r5, r6
 8007828:	d11a      	bne.n	8007860 <_printf_common+0xc8>
 800782a:	2000      	movs	r0, #0
 800782c:	e008      	b.n	8007840 <_printf_common+0xa8>
 800782e:	2301      	movs	r3, #1
 8007830:	4652      	mov	r2, sl
 8007832:	4649      	mov	r1, r9
 8007834:	4638      	mov	r0, r7
 8007836:	47c0      	blx	r8
 8007838:	3001      	adds	r0, #1
 800783a:	d103      	bne.n	8007844 <_printf_common+0xac>
 800783c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007844:	3501      	adds	r5, #1
 8007846:	e7c6      	b.n	80077d6 <_printf_common+0x3e>
 8007848:	18e1      	adds	r1, r4, r3
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	2030      	movs	r0, #48	; 0x30
 800784e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007852:	4422      	add	r2, r4
 8007854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800785c:	3302      	adds	r3, #2
 800785e:	e7c7      	b.n	80077f0 <_printf_common+0x58>
 8007860:	2301      	movs	r3, #1
 8007862:	4622      	mov	r2, r4
 8007864:	4649      	mov	r1, r9
 8007866:	4638      	mov	r0, r7
 8007868:	47c0      	blx	r8
 800786a:	3001      	adds	r0, #1
 800786c:	d0e6      	beq.n	800783c <_printf_common+0xa4>
 800786e:	3601      	adds	r6, #1
 8007870:	e7d9      	b.n	8007826 <_printf_common+0x8e>
	...

08007874 <_printf_i>:
 8007874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	460c      	mov	r4, r1
 800787a:	4691      	mov	r9, r2
 800787c:	7e27      	ldrb	r7, [r4, #24]
 800787e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007880:	2f78      	cmp	r7, #120	; 0x78
 8007882:	4680      	mov	r8, r0
 8007884:	469a      	mov	sl, r3
 8007886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800788a:	d807      	bhi.n	800789c <_printf_i+0x28>
 800788c:	2f62      	cmp	r7, #98	; 0x62
 800788e:	d80a      	bhi.n	80078a6 <_printf_i+0x32>
 8007890:	2f00      	cmp	r7, #0
 8007892:	f000 80d8 	beq.w	8007a46 <_printf_i+0x1d2>
 8007896:	2f58      	cmp	r7, #88	; 0x58
 8007898:	f000 80a3 	beq.w	80079e2 <_printf_i+0x16e>
 800789c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078a4:	e03a      	b.n	800791c <_printf_i+0xa8>
 80078a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078aa:	2b15      	cmp	r3, #21
 80078ac:	d8f6      	bhi.n	800789c <_printf_i+0x28>
 80078ae:	a001      	add	r0, pc, #4	; (adr r0, 80078b4 <_printf_i+0x40>)
 80078b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078b4:	0800790d 	.word	0x0800790d
 80078b8:	08007921 	.word	0x08007921
 80078bc:	0800789d 	.word	0x0800789d
 80078c0:	0800789d 	.word	0x0800789d
 80078c4:	0800789d 	.word	0x0800789d
 80078c8:	0800789d 	.word	0x0800789d
 80078cc:	08007921 	.word	0x08007921
 80078d0:	0800789d 	.word	0x0800789d
 80078d4:	0800789d 	.word	0x0800789d
 80078d8:	0800789d 	.word	0x0800789d
 80078dc:	0800789d 	.word	0x0800789d
 80078e0:	08007a2d 	.word	0x08007a2d
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007a0f 	.word	0x08007a0f
 80078ec:	0800789d 	.word	0x0800789d
 80078f0:	0800789d 	.word	0x0800789d
 80078f4:	08007a4f 	.word	0x08007a4f
 80078f8:	0800789d 	.word	0x0800789d
 80078fc:	08007951 	.word	0x08007951
 8007900:	0800789d 	.word	0x0800789d
 8007904:	0800789d 	.word	0x0800789d
 8007908:	08007a17 	.word	0x08007a17
 800790c:	680b      	ldr	r3, [r1, #0]
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	600a      	str	r2, [r1, #0]
 8007914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800791c:	2301      	movs	r3, #1
 800791e:	e0a3      	b.n	8007a68 <_printf_i+0x1f4>
 8007920:	6825      	ldr	r5, [r4, #0]
 8007922:	6808      	ldr	r0, [r1, #0]
 8007924:	062e      	lsls	r6, r5, #24
 8007926:	f100 0304 	add.w	r3, r0, #4
 800792a:	d50a      	bpl.n	8007942 <_printf_i+0xce>
 800792c:	6805      	ldr	r5, [r0, #0]
 800792e:	600b      	str	r3, [r1, #0]
 8007930:	2d00      	cmp	r5, #0
 8007932:	da03      	bge.n	800793c <_printf_i+0xc8>
 8007934:	232d      	movs	r3, #45	; 0x2d
 8007936:	426d      	negs	r5, r5
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	485e      	ldr	r0, [pc, #376]	; (8007ab8 <_printf_i+0x244>)
 800793e:	230a      	movs	r3, #10
 8007940:	e019      	b.n	8007976 <_printf_i+0x102>
 8007942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007946:	6805      	ldr	r5, [r0, #0]
 8007948:	600b      	str	r3, [r1, #0]
 800794a:	bf18      	it	ne
 800794c:	b22d      	sxthne	r5, r5
 800794e:	e7ef      	b.n	8007930 <_printf_i+0xbc>
 8007950:	680b      	ldr	r3, [r1, #0]
 8007952:	6825      	ldr	r5, [r4, #0]
 8007954:	1d18      	adds	r0, r3, #4
 8007956:	6008      	str	r0, [r1, #0]
 8007958:	0628      	lsls	r0, r5, #24
 800795a:	d501      	bpl.n	8007960 <_printf_i+0xec>
 800795c:	681d      	ldr	r5, [r3, #0]
 800795e:	e002      	b.n	8007966 <_printf_i+0xf2>
 8007960:	0669      	lsls	r1, r5, #25
 8007962:	d5fb      	bpl.n	800795c <_printf_i+0xe8>
 8007964:	881d      	ldrh	r5, [r3, #0]
 8007966:	4854      	ldr	r0, [pc, #336]	; (8007ab8 <_printf_i+0x244>)
 8007968:	2f6f      	cmp	r7, #111	; 0x6f
 800796a:	bf0c      	ite	eq
 800796c:	2308      	moveq	r3, #8
 800796e:	230a      	movne	r3, #10
 8007970:	2100      	movs	r1, #0
 8007972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007976:	6866      	ldr	r6, [r4, #4]
 8007978:	60a6      	str	r6, [r4, #8]
 800797a:	2e00      	cmp	r6, #0
 800797c:	bfa2      	ittt	ge
 800797e:	6821      	ldrge	r1, [r4, #0]
 8007980:	f021 0104 	bicge.w	r1, r1, #4
 8007984:	6021      	strge	r1, [r4, #0]
 8007986:	b90d      	cbnz	r5, 800798c <_printf_i+0x118>
 8007988:	2e00      	cmp	r6, #0
 800798a:	d04d      	beq.n	8007a28 <_printf_i+0x1b4>
 800798c:	4616      	mov	r6, r2
 800798e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007992:	fb03 5711 	mls	r7, r3, r1, r5
 8007996:	5dc7      	ldrb	r7, [r0, r7]
 8007998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800799c:	462f      	mov	r7, r5
 800799e:	42bb      	cmp	r3, r7
 80079a0:	460d      	mov	r5, r1
 80079a2:	d9f4      	bls.n	800798e <_printf_i+0x11a>
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d10b      	bne.n	80079c0 <_printf_i+0x14c>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	07df      	lsls	r7, r3, #31
 80079ac:	d508      	bpl.n	80079c0 <_printf_i+0x14c>
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	4299      	cmp	r1, r3
 80079b4:	bfde      	ittt	le
 80079b6:	2330      	movle	r3, #48	; 0x30
 80079b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079bc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80079c0:	1b92      	subs	r2, r2, r6
 80079c2:	6122      	str	r2, [r4, #16]
 80079c4:	f8cd a000 	str.w	sl, [sp]
 80079c8:	464b      	mov	r3, r9
 80079ca:	aa03      	add	r2, sp, #12
 80079cc:	4621      	mov	r1, r4
 80079ce:	4640      	mov	r0, r8
 80079d0:	f7ff fee2 	bl	8007798 <_printf_common>
 80079d4:	3001      	adds	r0, #1
 80079d6:	d14c      	bne.n	8007a72 <_printf_i+0x1fe>
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079dc:	b004      	add	sp, #16
 80079de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e2:	4835      	ldr	r0, [pc, #212]	; (8007ab8 <_printf_i+0x244>)
 80079e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	680e      	ldr	r6, [r1, #0]
 80079ec:	061f      	lsls	r7, r3, #24
 80079ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80079f2:	600e      	str	r6, [r1, #0]
 80079f4:	d514      	bpl.n	8007a20 <_printf_i+0x1ac>
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	bf44      	itt	mi
 80079fa:	f043 0320 	orrmi.w	r3, r3, #32
 80079fe:	6023      	strmi	r3, [r4, #0]
 8007a00:	b91d      	cbnz	r5, 8007a0a <_printf_i+0x196>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	f023 0320 	bic.w	r3, r3, #32
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	e7b0      	b.n	8007970 <_printf_i+0xfc>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f043 0320 	orr.w	r3, r3, #32
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	2378      	movs	r3, #120	; 0x78
 8007a18:	4828      	ldr	r0, [pc, #160]	; (8007abc <_printf_i+0x248>)
 8007a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a1e:	e7e3      	b.n	80079e8 <_printf_i+0x174>
 8007a20:	065e      	lsls	r6, r3, #25
 8007a22:	bf48      	it	mi
 8007a24:	b2ad      	uxthmi	r5, r5
 8007a26:	e7e6      	b.n	80079f6 <_printf_i+0x182>
 8007a28:	4616      	mov	r6, r2
 8007a2a:	e7bb      	b.n	80079a4 <_printf_i+0x130>
 8007a2c:	680b      	ldr	r3, [r1, #0]
 8007a2e:	6826      	ldr	r6, [r4, #0]
 8007a30:	6960      	ldr	r0, [r4, #20]
 8007a32:	1d1d      	adds	r5, r3, #4
 8007a34:	600d      	str	r5, [r1, #0]
 8007a36:	0635      	lsls	r5, r6, #24
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	d501      	bpl.n	8007a40 <_printf_i+0x1cc>
 8007a3c:	6018      	str	r0, [r3, #0]
 8007a3e:	e002      	b.n	8007a46 <_printf_i+0x1d2>
 8007a40:	0671      	lsls	r1, r6, #25
 8007a42:	d5fb      	bpl.n	8007a3c <_printf_i+0x1c8>
 8007a44:	8018      	strh	r0, [r3, #0]
 8007a46:	2300      	movs	r3, #0
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	4616      	mov	r6, r2
 8007a4c:	e7ba      	b.n	80079c4 <_printf_i+0x150>
 8007a4e:	680b      	ldr	r3, [r1, #0]
 8007a50:	1d1a      	adds	r2, r3, #4
 8007a52:	600a      	str	r2, [r1, #0]
 8007a54:	681e      	ldr	r6, [r3, #0]
 8007a56:	6862      	ldr	r2, [r4, #4]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7f8 fbc0 	bl	80001e0 <memchr>
 8007a60:	b108      	cbz	r0, 8007a66 <_printf_i+0x1f2>
 8007a62:	1b80      	subs	r0, r0, r6
 8007a64:	6060      	str	r0, [r4, #4]
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a70:	e7a8      	b.n	80079c4 <_printf_i+0x150>
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	4632      	mov	r2, r6
 8007a76:	4649      	mov	r1, r9
 8007a78:	4640      	mov	r0, r8
 8007a7a:	47d0      	blx	sl
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d0ab      	beq.n	80079d8 <_printf_i+0x164>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	079b      	lsls	r3, r3, #30
 8007a84:	d413      	bmi.n	8007aae <_printf_i+0x23a>
 8007a86:	68e0      	ldr	r0, [r4, #12]
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	4298      	cmp	r0, r3
 8007a8c:	bfb8      	it	lt
 8007a8e:	4618      	movlt	r0, r3
 8007a90:	e7a4      	b.n	80079dc <_printf_i+0x168>
 8007a92:	2301      	movs	r3, #1
 8007a94:	4632      	mov	r2, r6
 8007a96:	4649      	mov	r1, r9
 8007a98:	4640      	mov	r0, r8
 8007a9a:	47d0      	blx	sl
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d09b      	beq.n	80079d8 <_printf_i+0x164>
 8007aa0:	3501      	adds	r5, #1
 8007aa2:	68e3      	ldr	r3, [r4, #12]
 8007aa4:	9903      	ldr	r1, [sp, #12]
 8007aa6:	1a5b      	subs	r3, r3, r1
 8007aa8:	42ab      	cmp	r3, r5
 8007aaa:	dcf2      	bgt.n	8007a92 <_printf_i+0x21e>
 8007aac:	e7eb      	b.n	8007a86 <_printf_i+0x212>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	f104 0619 	add.w	r6, r4, #25
 8007ab4:	e7f5      	b.n	8007aa2 <_printf_i+0x22e>
 8007ab6:	bf00      	nop
 8007ab8:	0800b88e 	.word	0x0800b88e
 8007abc:	0800b89f 	.word	0x0800b89f

08007ac0 <_scanf_float>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	4617      	mov	r7, r2
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	688b      	ldr	r3, [r1, #8]
 8007acc:	1e5a      	subs	r2, r3, #1
 8007ace:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ad2:	bf83      	ittte	hi
 8007ad4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ad8:	195b      	addhi	r3, r3, r5
 8007ada:	9302      	strhi	r3, [sp, #8]
 8007adc:	2300      	movls	r3, #0
 8007ade:	bf86      	itte	hi
 8007ae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ae4:	608b      	strhi	r3, [r1, #8]
 8007ae6:	9302      	strls	r3, [sp, #8]
 8007ae8:	680b      	ldr	r3, [r1, #0]
 8007aea:	468b      	mov	fp, r1
 8007aec:	2500      	movs	r5, #0
 8007aee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007af2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007af6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007afa:	4680      	mov	r8, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	465e      	mov	r6, fp
 8007b00:	46aa      	mov	sl, r5
 8007b02:	46a9      	mov	r9, r5
 8007b04:	9501      	str	r5, [sp, #4]
 8007b06:	68a2      	ldr	r2, [r4, #8]
 8007b08:	b152      	cbz	r2, 8007b20 <_scanf_float+0x60>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b4e      	cmp	r3, #78	; 0x4e
 8007b10:	d864      	bhi.n	8007bdc <_scanf_float+0x11c>
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d83c      	bhi.n	8007b90 <_scanf_float+0xd0>
 8007b16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b1a:	b2c8      	uxtb	r0, r1
 8007b1c:	280e      	cmp	r0, #14
 8007b1e:	d93a      	bls.n	8007b96 <_scanf_float+0xd6>
 8007b20:	f1b9 0f00 	cmp.w	r9, #0
 8007b24:	d003      	beq.n	8007b2e <_scanf_float+0x6e>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b32:	f1ba 0f01 	cmp.w	sl, #1
 8007b36:	f200 8113 	bhi.w	8007d60 <_scanf_float+0x2a0>
 8007b3a:	455e      	cmp	r6, fp
 8007b3c:	f200 8105 	bhi.w	8007d4a <_scanf_float+0x28a>
 8007b40:	2501      	movs	r5, #1
 8007b42:	4628      	mov	r0, r5
 8007b44:	b007      	add	sp, #28
 8007b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b4e:	2a0d      	cmp	r2, #13
 8007b50:	d8e6      	bhi.n	8007b20 <_scanf_float+0x60>
 8007b52:	a101      	add	r1, pc, #4	; (adr r1, 8007b58 <_scanf_float+0x98>)
 8007b54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b58:	08007c97 	.word	0x08007c97
 8007b5c:	08007b21 	.word	0x08007b21
 8007b60:	08007b21 	.word	0x08007b21
 8007b64:	08007b21 	.word	0x08007b21
 8007b68:	08007cf7 	.word	0x08007cf7
 8007b6c:	08007ccf 	.word	0x08007ccf
 8007b70:	08007b21 	.word	0x08007b21
 8007b74:	08007b21 	.word	0x08007b21
 8007b78:	08007ca5 	.word	0x08007ca5
 8007b7c:	08007b21 	.word	0x08007b21
 8007b80:	08007b21 	.word	0x08007b21
 8007b84:	08007b21 	.word	0x08007b21
 8007b88:	08007b21 	.word	0x08007b21
 8007b8c:	08007c5d 	.word	0x08007c5d
 8007b90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007b94:	e7db      	b.n	8007b4e <_scanf_float+0x8e>
 8007b96:	290e      	cmp	r1, #14
 8007b98:	d8c2      	bhi.n	8007b20 <_scanf_float+0x60>
 8007b9a:	a001      	add	r0, pc, #4	; (adr r0, 8007ba0 <_scanf_float+0xe0>)
 8007b9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ba0:	08007c4f 	.word	0x08007c4f
 8007ba4:	08007b21 	.word	0x08007b21
 8007ba8:	08007c4f 	.word	0x08007c4f
 8007bac:	08007ce3 	.word	0x08007ce3
 8007bb0:	08007b21 	.word	0x08007b21
 8007bb4:	08007bfd 	.word	0x08007bfd
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c39 	.word	0x08007c39
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c39 	.word	0x08007c39
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	2b6e      	cmp	r3, #110	; 0x6e
 8007bde:	d809      	bhi.n	8007bf4 <_scanf_float+0x134>
 8007be0:	2b60      	cmp	r3, #96	; 0x60
 8007be2:	d8b2      	bhi.n	8007b4a <_scanf_float+0x8a>
 8007be4:	2b54      	cmp	r3, #84	; 0x54
 8007be6:	d077      	beq.n	8007cd8 <_scanf_float+0x218>
 8007be8:	2b59      	cmp	r3, #89	; 0x59
 8007bea:	d199      	bne.n	8007b20 <_scanf_float+0x60>
 8007bec:	2d07      	cmp	r5, #7
 8007bee:	d197      	bne.n	8007b20 <_scanf_float+0x60>
 8007bf0:	2508      	movs	r5, #8
 8007bf2:	e029      	b.n	8007c48 <_scanf_float+0x188>
 8007bf4:	2b74      	cmp	r3, #116	; 0x74
 8007bf6:	d06f      	beq.n	8007cd8 <_scanf_float+0x218>
 8007bf8:	2b79      	cmp	r3, #121	; 0x79
 8007bfa:	e7f6      	b.n	8007bea <_scanf_float+0x12a>
 8007bfc:	6821      	ldr	r1, [r4, #0]
 8007bfe:	05c8      	lsls	r0, r1, #23
 8007c00:	d51a      	bpl.n	8007c38 <_scanf_float+0x178>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c08:	6021      	str	r1, [r4, #0]
 8007c0a:	f109 0901 	add.w	r9, r9, #1
 8007c0e:	b11b      	cbz	r3, 8007c18 <_scanf_float+0x158>
 8007c10:	3b01      	subs	r3, #1
 8007c12:	3201      	adds	r2, #1
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	60a2      	str	r2, [r4, #8]
 8007c18:	68a3      	ldr	r3, [r4, #8]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	3301      	adds	r3, #1
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	f340 8084 	ble.w	8007d38 <_scanf_float+0x278>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	e766      	b.n	8007b06 <_scanf_float+0x46>
 8007c38:	eb1a 0f05 	cmn.w	sl, r5
 8007c3c:	f47f af70 	bne.w	8007b20 <_scanf_float+0x60>
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	f806 3b01 	strb.w	r3, [r6], #1
 8007c4c:	e7e4      	b.n	8007c18 <_scanf_float+0x158>
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	0610      	lsls	r0, r2, #24
 8007c52:	f57f af65 	bpl.w	8007b20 <_scanf_float+0x60>
 8007c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c5a:	e7f4      	b.n	8007c46 <_scanf_float+0x186>
 8007c5c:	f1ba 0f00 	cmp.w	sl, #0
 8007c60:	d10e      	bne.n	8007c80 <_scanf_float+0x1c0>
 8007c62:	f1b9 0f00 	cmp.w	r9, #0
 8007c66:	d10e      	bne.n	8007c86 <_scanf_float+0x1c6>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c72:	d108      	bne.n	8007c86 <_scanf_float+0x1c6>
 8007c74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c78:	6022      	str	r2, [r4, #0]
 8007c7a:	f04f 0a01 	mov.w	sl, #1
 8007c7e:	e7e3      	b.n	8007c48 <_scanf_float+0x188>
 8007c80:	f1ba 0f02 	cmp.w	sl, #2
 8007c84:	d055      	beq.n	8007d32 <_scanf_float+0x272>
 8007c86:	2d01      	cmp	r5, #1
 8007c88:	d002      	beq.n	8007c90 <_scanf_float+0x1d0>
 8007c8a:	2d04      	cmp	r5, #4
 8007c8c:	f47f af48 	bne.w	8007b20 <_scanf_float+0x60>
 8007c90:	3501      	adds	r5, #1
 8007c92:	b2ed      	uxtb	r5, r5
 8007c94:	e7d8      	b.n	8007c48 <_scanf_float+0x188>
 8007c96:	f1ba 0f01 	cmp.w	sl, #1
 8007c9a:	f47f af41 	bne.w	8007b20 <_scanf_float+0x60>
 8007c9e:	f04f 0a02 	mov.w	sl, #2
 8007ca2:	e7d1      	b.n	8007c48 <_scanf_float+0x188>
 8007ca4:	b97d      	cbnz	r5, 8007cc6 <_scanf_float+0x206>
 8007ca6:	f1b9 0f00 	cmp.w	r9, #0
 8007caa:	f47f af3c 	bne.w	8007b26 <_scanf_float+0x66>
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cb8:	f47f af39 	bne.w	8007b2e <_scanf_float+0x6e>
 8007cbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cc0:	6022      	str	r2, [r4, #0]
 8007cc2:	2501      	movs	r5, #1
 8007cc4:	e7c0      	b.n	8007c48 <_scanf_float+0x188>
 8007cc6:	2d03      	cmp	r5, #3
 8007cc8:	d0e2      	beq.n	8007c90 <_scanf_float+0x1d0>
 8007cca:	2d05      	cmp	r5, #5
 8007ccc:	e7de      	b.n	8007c8c <_scanf_float+0x1cc>
 8007cce:	2d02      	cmp	r5, #2
 8007cd0:	f47f af26 	bne.w	8007b20 <_scanf_float+0x60>
 8007cd4:	2503      	movs	r5, #3
 8007cd6:	e7b7      	b.n	8007c48 <_scanf_float+0x188>
 8007cd8:	2d06      	cmp	r5, #6
 8007cda:	f47f af21 	bne.w	8007b20 <_scanf_float+0x60>
 8007cde:	2507      	movs	r5, #7
 8007ce0:	e7b2      	b.n	8007c48 <_scanf_float+0x188>
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	0591      	lsls	r1, r2, #22
 8007ce6:	f57f af1b 	bpl.w	8007b20 <_scanf_float+0x60>
 8007cea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007cee:	6022      	str	r2, [r4, #0]
 8007cf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cf4:	e7a8      	b.n	8007c48 <_scanf_float+0x188>
 8007cf6:	6822      	ldr	r2, [r4, #0]
 8007cf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007cfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d00:	d006      	beq.n	8007d10 <_scanf_float+0x250>
 8007d02:	0550      	lsls	r0, r2, #21
 8007d04:	f57f af0c 	bpl.w	8007b20 <_scanf_float+0x60>
 8007d08:	f1b9 0f00 	cmp.w	r9, #0
 8007d0c:	f43f af0f 	beq.w	8007b2e <_scanf_float+0x6e>
 8007d10:	0591      	lsls	r1, r2, #22
 8007d12:	bf58      	it	pl
 8007d14:	9901      	ldrpl	r1, [sp, #4]
 8007d16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d1a:	bf58      	it	pl
 8007d1c:	eba9 0101 	subpl.w	r1, r9, r1
 8007d20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d24:	bf58      	it	pl
 8007d26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	f04f 0900 	mov.w	r9, #0
 8007d30:	e78a      	b.n	8007c48 <_scanf_float+0x188>
 8007d32:	f04f 0a03 	mov.w	sl, #3
 8007d36:	e787      	b.n	8007c48 <_scanf_float+0x188>
 8007d38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4798      	blx	r3
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f aedf 	beq.w	8007b06 <_scanf_float+0x46>
 8007d48:	e6ea      	b.n	8007b20 <_scanf_float+0x60>
 8007d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d52:	463a      	mov	r2, r7
 8007d54:	4640      	mov	r0, r8
 8007d56:	4798      	blx	r3
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	e6ec      	b.n	8007b3a <_scanf_float+0x7a>
 8007d60:	1e6b      	subs	r3, r5, #1
 8007d62:	2b06      	cmp	r3, #6
 8007d64:	d825      	bhi.n	8007db2 <_scanf_float+0x2f2>
 8007d66:	2d02      	cmp	r5, #2
 8007d68:	d836      	bhi.n	8007dd8 <_scanf_float+0x318>
 8007d6a:	455e      	cmp	r6, fp
 8007d6c:	f67f aee8 	bls.w	8007b40 <_scanf_float+0x80>
 8007d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d78:	463a      	mov	r2, r7
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4798      	blx	r3
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	e7f1      	b.n	8007d6a <_scanf_float+0x2aa>
 8007d86:	9802      	ldr	r0, [sp, #8]
 8007d88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007d90:	9002      	str	r0, [sp, #8]
 8007d92:	463a      	mov	r2, r7
 8007d94:	4640      	mov	r0, r8
 8007d96:	4798      	blx	r3
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6123      	str	r3, [r4, #16]
 8007d9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007da2:	fa5f fa8a 	uxtb.w	sl, sl
 8007da6:	f1ba 0f02 	cmp.w	sl, #2
 8007daa:	d1ec      	bne.n	8007d86 <_scanf_float+0x2c6>
 8007dac:	3d03      	subs	r5, #3
 8007dae:	b2ed      	uxtb	r5, r5
 8007db0:	1b76      	subs	r6, r6, r5
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	05da      	lsls	r2, r3, #23
 8007db6:	d52f      	bpl.n	8007e18 <_scanf_float+0x358>
 8007db8:	055b      	lsls	r3, r3, #21
 8007dba:	d510      	bpl.n	8007dde <_scanf_float+0x31e>
 8007dbc:	455e      	cmp	r6, fp
 8007dbe:	f67f aebf 	bls.w	8007b40 <_scanf_float+0x80>
 8007dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dca:	463a      	mov	r2, r7
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4798      	blx	r3
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	e7f1      	b.n	8007dbc <_scanf_float+0x2fc>
 8007dd8:	46aa      	mov	sl, r5
 8007dda:	9602      	str	r6, [sp, #8]
 8007ddc:	e7df      	b.n	8007d9e <_scanf_float+0x2de>
 8007dde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	2965      	cmp	r1, #101	; 0x65
 8007de6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007dea:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007dee:	6123      	str	r3, [r4, #16]
 8007df0:	d00c      	beq.n	8007e0c <_scanf_float+0x34c>
 8007df2:	2945      	cmp	r1, #69	; 0x45
 8007df4:	d00a      	beq.n	8007e0c <_scanf_float+0x34c>
 8007df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dfa:	463a      	mov	r2, r7
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4798      	blx	r3
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	1eb5      	subs	r5, r6, #2
 8007e0a:	6123      	str	r3, [r4, #16]
 8007e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e10:	463a      	mov	r2, r7
 8007e12:	4640      	mov	r0, r8
 8007e14:	4798      	blx	r3
 8007e16:	462e      	mov	r6, r5
 8007e18:	6825      	ldr	r5, [r4, #0]
 8007e1a:	f015 0510 	ands.w	r5, r5, #16
 8007e1e:	d158      	bne.n	8007ed2 <_scanf_float+0x412>
 8007e20:	7035      	strb	r5, [r6, #0]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2c:	d11c      	bne.n	8007e68 <_scanf_float+0x3a8>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	454b      	cmp	r3, r9
 8007e32:	eba3 0209 	sub.w	r2, r3, r9
 8007e36:	d124      	bne.n	8007e82 <_scanf_float+0x3c2>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	f000 ff59 	bl	8008cf4 <_strtod_r>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	6821      	ldr	r1, [r4, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f011 0f02 	tst.w	r1, #2
 8007e4c:	ec57 6b10 	vmov	r6, r7, d0
 8007e50:	f103 0204 	add.w	r2, r3, #4
 8007e54:	d020      	beq.n	8007e98 <_scanf_float+0x3d8>
 8007e56:	9903      	ldr	r1, [sp, #12]
 8007e58:	600a      	str	r2, [r1, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	e9c3 6700 	strd	r6, r7, [r3]
 8007e60:	68e3      	ldr	r3, [r4, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60e3      	str	r3, [r4, #12]
 8007e66:	e66c      	b.n	8007b42 <_scanf_float+0x82>
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0e4      	beq.n	8007e38 <_scanf_float+0x378>
 8007e6e:	9905      	ldr	r1, [sp, #20]
 8007e70:	230a      	movs	r3, #10
 8007e72:	462a      	mov	r2, r5
 8007e74:	3101      	adds	r1, #1
 8007e76:	4640      	mov	r0, r8
 8007e78:	f000 ffc6 	bl	8008e08 <_strtol_r>
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	9e05      	ldr	r6, [sp, #20]
 8007e80:	1ac2      	subs	r2, r0, r3
 8007e82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e86:	429e      	cmp	r6, r3
 8007e88:	bf28      	it	cs
 8007e8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e8e:	4912      	ldr	r1, [pc, #72]	; (8007ed8 <_scanf_float+0x418>)
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f8a5 	bl	8007fe0 <siprintf>
 8007e96:	e7cf      	b.n	8007e38 <_scanf_float+0x378>
 8007e98:	f011 0f04 	tst.w	r1, #4
 8007e9c:	9903      	ldr	r1, [sp, #12]
 8007e9e:	600a      	str	r2, [r1, #0]
 8007ea0:	d1db      	bne.n	8007e5a <_scanf_float+0x39a>
 8007ea2:	f8d3 8000 	ldr.w	r8, [r3]
 8007ea6:	ee10 2a10 	vmov	r2, s0
 8007eaa:	ee10 0a10 	vmov	r0, s0
 8007eae:	463b      	mov	r3, r7
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 8007eb6:	b128      	cbz	r0, 8007ec4 <_scanf_float+0x404>
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <_scanf_float+0x41c>)
 8007eba:	f000 f88b 	bl	8007fd4 <nanf>
 8007ebe:	ed88 0a00 	vstr	s0, [r8]
 8007ec2:	e7cd      	b.n	8007e60 <_scanf_float+0x3a0>
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f7f8 fe8e 	bl	8000be8 <__aeabi_d2f>
 8007ecc:	f8c8 0000 	str.w	r0, [r8]
 8007ed0:	e7c6      	b.n	8007e60 <_scanf_float+0x3a0>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	e635      	b.n	8007b42 <_scanf_float+0x82>
 8007ed6:	bf00      	nop
 8007ed8:	0800b8b0 	.word	0x0800b8b0
 8007edc:	0800bcc8 	.word	0x0800bcc8

08007ee0 <cleanup_glue>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	6809      	ldr	r1, [r1, #0]
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b109      	cbz	r1, 8007eee <cleanup_glue+0xe>
 8007eea:	f7ff fff9 	bl	8007ee0 <cleanup_glue>
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef6:	f7ff b8cf 	b.w	8007098 <_free_r>
	...

08007efc <_reclaim_reent>:
 8007efc:	4b2c      	ldr	r3, [pc, #176]	; (8007fb0 <_reclaim_reent+0xb4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4283      	cmp	r3, r0
 8007f02:	b570      	push	{r4, r5, r6, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	d051      	beq.n	8007fac <_reclaim_reent+0xb0>
 8007f08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f0a:	b143      	cbz	r3, 8007f1e <_reclaim_reent+0x22>
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d14a      	bne.n	8007fa8 <_reclaim_reent+0xac>
 8007f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	b111      	cbz	r1, 8007f1e <_reclaim_reent+0x22>
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff f8bd 	bl	8007098 <_free_r>
 8007f1e:	6961      	ldr	r1, [r4, #20]
 8007f20:	b111      	cbz	r1, 8007f28 <_reclaim_reent+0x2c>
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7ff f8b8 	bl	8007098 <_free_r>
 8007f28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f2a:	b111      	cbz	r1, 8007f32 <_reclaim_reent+0x36>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f7ff f8b3 	bl	8007098 <_free_r>
 8007f32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f34:	b111      	cbz	r1, 8007f3c <_reclaim_reent+0x40>
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff f8ae 	bl	8007098 <_free_r>
 8007f3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f3e:	b111      	cbz	r1, 8007f46 <_reclaim_reent+0x4a>
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff f8a9 	bl	8007098 <_free_r>
 8007f46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f48:	b111      	cbz	r1, 8007f50 <_reclaim_reent+0x54>
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff f8a4 	bl	8007098 <_free_r>
 8007f50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f52:	b111      	cbz	r1, 8007f5a <_reclaim_reent+0x5e>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7ff f89f 	bl	8007098 <_free_r>
 8007f5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f5c:	b111      	cbz	r1, 8007f64 <_reclaim_reent+0x68>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f7ff f89a 	bl	8007098 <_free_r>
 8007f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f66:	b111      	cbz	r1, 8007f6e <_reclaim_reent+0x72>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f7ff f895 	bl	8007098 <_free_r>
 8007f6e:	69a3      	ldr	r3, [r4, #24]
 8007f70:	b1e3      	cbz	r3, 8007fac <_reclaim_reent+0xb0>
 8007f72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f74:	4620      	mov	r0, r4
 8007f76:	4798      	blx	r3
 8007f78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f7a:	b1b9      	cbz	r1, 8007fac <_reclaim_reent+0xb0>
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f82:	f7ff bfad 	b.w	8007ee0 <cleanup_glue>
 8007f86:	5949      	ldr	r1, [r1, r5]
 8007f88:	b941      	cbnz	r1, 8007f9c <_reclaim_reent+0xa0>
 8007f8a:	3504      	adds	r5, #4
 8007f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8e:	2d80      	cmp	r5, #128	; 0x80
 8007f90:	68d9      	ldr	r1, [r3, #12]
 8007f92:	d1f8      	bne.n	8007f86 <_reclaim_reent+0x8a>
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7ff f87f 	bl	8007098 <_free_r>
 8007f9a:	e7ba      	b.n	8007f12 <_reclaim_reent+0x16>
 8007f9c:	680e      	ldr	r6, [r1, #0]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff f87a 	bl	8007098 <_free_r>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	e7ef      	b.n	8007f88 <_reclaim_reent+0x8c>
 8007fa8:	2500      	movs	r5, #0
 8007faa:	e7ef      	b.n	8007f8c <_reclaim_reent+0x90>
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000010 	.word	0x20000010

08007fb4 <_sbrk_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d06      	ldr	r5, [pc, #24]	; (8007fd0 <_sbrk_r+0x1c>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	f7fa f910 	bl	80021e4 <_sbrk>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_sbrk_r+0x1a>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_sbrk_r+0x1a>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20004498 	.word	0x20004498

08007fd4 <nanf>:
 8007fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fdc <nanf+0x8>
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	7fc00000 	.word	0x7fc00000

08007fe0 <siprintf>:
 8007fe0:	b40e      	push	{r1, r2, r3}
 8007fe2:	b500      	push	{lr}
 8007fe4:	b09c      	sub	sp, #112	; 0x70
 8007fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fe8:	9002      	str	r0, [sp, #8]
 8007fea:	9006      	str	r0, [sp, #24]
 8007fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ff0:	4809      	ldr	r0, [pc, #36]	; (8008018 <siprintf+0x38>)
 8007ff2:	9107      	str	r1, [sp, #28]
 8007ff4:	9104      	str	r1, [sp, #16]
 8007ff6:	4909      	ldr	r1, [pc, #36]	; (800801c <siprintf+0x3c>)
 8007ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffc:	9105      	str	r1, [sp, #20]
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	a902      	add	r1, sp, #8
 8008004:	f002 ff28 	bl	800ae58 <_svfiprintf_r>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	b01c      	add	sp, #112	; 0x70
 8008010:	f85d eb04 	ldr.w	lr, [sp], #4
 8008014:	b003      	add	sp, #12
 8008016:	4770      	bx	lr
 8008018:	20000010 	.word	0x20000010
 800801c:	ffff0208 	.word	0xffff0208

08008020 <__sread>:
 8008020:	b510      	push	{r4, lr}
 8008022:	460c      	mov	r4, r1
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	f003 f816 	bl	800b058 <_read_r>
 800802c:	2800      	cmp	r0, #0
 800802e:	bfab      	itete	ge
 8008030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008032:	89a3      	ldrhlt	r3, [r4, #12]
 8008034:	181b      	addge	r3, r3, r0
 8008036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800803a:	bfac      	ite	ge
 800803c:	6563      	strge	r3, [r4, #84]	; 0x54
 800803e:	81a3      	strhlt	r3, [r4, #12]
 8008040:	bd10      	pop	{r4, pc}

08008042 <__swrite>:
 8008042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	461f      	mov	r7, r3
 8008048:	898b      	ldrh	r3, [r1, #12]
 800804a:	05db      	lsls	r3, r3, #23
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4616      	mov	r6, r2
 8008052:	d505      	bpl.n	8008060 <__swrite+0x1e>
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	2302      	movs	r3, #2
 800805a:	2200      	movs	r2, #0
 800805c:	f002 f9a6 	bl	800a3ac <_lseek_r>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	4628      	mov	r0, r5
 8008072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	f000 bec9 	b.w	8008e0c <_write_r>

0800807a <__sseek>:
 800807a:	b510      	push	{r4, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f002 f993 	bl	800a3ac <_lseek_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	bf15      	itete	ne
 800808c:	6560      	strne	r0, [r4, #84]	; 0x54
 800808e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008096:	81a3      	strheq	r3, [r4, #12]
 8008098:	bf18      	it	ne
 800809a:	81a3      	strhne	r3, [r4, #12]
 800809c:	bd10      	pop	{r4, pc}

0800809e <__sclose>:
 800809e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a2:	f000 bec5 	b.w	8008e30 <_close_r>

080080a6 <sulp>:
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	ec45 4b10 	vmov	d0, r4, r5
 80080b0:	4616      	mov	r6, r2
 80080b2:	f002 fd17 	bl	800aae4 <__ulp>
 80080b6:	ec51 0b10 	vmov	r0, r1, d0
 80080ba:	b17e      	cbz	r6, 80080dc <sulp+0x36>
 80080bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd09      	ble.n	80080dc <sulp+0x36>
 80080c8:	051b      	lsls	r3, r3, #20
 80080ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080ce:	2400      	movs	r4, #0
 80080d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080d4:	4622      	mov	r2, r4
 80080d6:	462b      	mov	r3, r5
 80080d8:	f7f8 fa8e 	bl	80005f8 <__aeabi_dmul>
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080080e0 <_strtod_l>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	b0a3      	sub	sp, #140	; 0x8c
 80080e6:	461f      	mov	r7, r3
 80080e8:	2300      	movs	r3, #0
 80080ea:	931e      	str	r3, [sp, #120]	; 0x78
 80080ec:	4ba4      	ldr	r3, [pc, #656]	; (8008380 <_strtod_l+0x2a0>)
 80080ee:	9219      	str	r2, [sp, #100]	; 0x64
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	9307      	str	r3, [sp, #28]
 80080f4:	4604      	mov	r4, r0
 80080f6:	4618      	mov	r0, r3
 80080f8:	4688      	mov	r8, r1
 80080fa:	f7f8 f869 	bl	80001d0 <strlen>
 80080fe:	f04f 0a00 	mov.w	sl, #0
 8008102:	4605      	mov	r5, r0
 8008104:	f04f 0b00 	mov.w	fp, #0
 8008108:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800810c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	2a2b      	cmp	r2, #43	; 0x2b
 8008112:	d04c      	beq.n	80081ae <_strtod_l+0xce>
 8008114:	d839      	bhi.n	800818a <_strtod_l+0xaa>
 8008116:	2a0d      	cmp	r2, #13
 8008118:	d832      	bhi.n	8008180 <_strtod_l+0xa0>
 800811a:	2a08      	cmp	r2, #8
 800811c:	d832      	bhi.n	8008184 <_strtod_l+0xa4>
 800811e:	2a00      	cmp	r2, #0
 8008120:	d03c      	beq.n	800819c <_strtod_l+0xbc>
 8008122:	2300      	movs	r3, #0
 8008124:	930e      	str	r3, [sp, #56]	; 0x38
 8008126:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008128:	7833      	ldrb	r3, [r6, #0]
 800812a:	2b30      	cmp	r3, #48	; 0x30
 800812c:	f040 80b4 	bne.w	8008298 <_strtod_l+0x1b8>
 8008130:	7873      	ldrb	r3, [r6, #1]
 8008132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008136:	2b58      	cmp	r3, #88	; 0x58
 8008138:	d16c      	bne.n	8008214 <_strtod_l+0x134>
 800813a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	ab1e      	add	r3, sp, #120	; 0x78
 8008140:	9702      	str	r7, [sp, #8]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	4a8f      	ldr	r2, [pc, #572]	; (8008384 <_strtod_l+0x2a4>)
 8008146:	ab1f      	add	r3, sp, #124	; 0x7c
 8008148:	a91d      	add	r1, sp, #116	; 0x74
 800814a:	4620      	mov	r0, r4
 800814c:	f001 fe22 	bl	8009d94 <__gethex>
 8008150:	f010 0707 	ands.w	r7, r0, #7
 8008154:	4605      	mov	r5, r0
 8008156:	d005      	beq.n	8008164 <_strtod_l+0x84>
 8008158:	2f06      	cmp	r7, #6
 800815a:	d12a      	bne.n	80081b2 <_strtod_l+0xd2>
 800815c:	3601      	adds	r6, #1
 800815e:	2300      	movs	r3, #0
 8008160:	961d      	str	r6, [sp, #116]	; 0x74
 8008162:	930e      	str	r3, [sp, #56]	; 0x38
 8008164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 8596 	bne.w	8008c98 <_strtod_l+0xbb8>
 800816c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800816e:	b1db      	cbz	r3, 80081a8 <_strtod_l+0xc8>
 8008170:	4652      	mov	r2, sl
 8008172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008176:	ec43 2b10 	vmov	d0, r2, r3
 800817a:	b023      	add	sp, #140	; 0x8c
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	2a20      	cmp	r2, #32
 8008182:	d1ce      	bne.n	8008122 <_strtod_l+0x42>
 8008184:	3301      	adds	r3, #1
 8008186:	931d      	str	r3, [sp, #116]	; 0x74
 8008188:	e7c0      	b.n	800810c <_strtod_l+0x2c>
 800818a:	2a2d      	cmp	r2, #45	; 0x2d
 800818c:	d1c9      	bne.n	8008122 <_strtod_l+0x42>
 800818e:	2201      	movs	r2, #1
 8008190:	920e      	str	r2, [sp, #56]	; 0x38
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	921d      	str	r2, [sp, #116]	; 0x74
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1c4      	bne.n	8008126 <_strtod_l+0x46>
 800819c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800819e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 8576 	bne.w	8008c94 <_strtod_l+0xbb4>
 80081a8:	4652      	mov	r2, sl
 80081aa:	465b      	mov	r3, fp
 80081ac:	e7e3      	b.n	8008176 <_strtod_l+0x96>
 80081ae:	2200      	movs	r2, #0
 80081b0:	e7ee      	b.n	8008190 <_strtod_l+0xb0>
 80081b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081b4:	b13a      	cbz	r2, 80081c6 <_strtod_l+0xe6>
 80081b6:	2135      	movs	r1, #53	; 0x35
 80081b8:	a820      	add	r0, sp, #128	; 0x80
 80081ba:	f002 fd9e 	bl	800acfa <__copybits>
 80081be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80081c0:	4620      	mov	r0, r4
 80081c2:	f002 f963 	bl	800a48c <_Bfree>
 80081c6:	3f01      	subs	r7, #1
 80081c8:	2f05      	cmp	r7, #5
 80081ca:	d807      	bhi.n	80081dc <_strtod_l+0xfc>
 80081cc:	e8df f007 	tbb	[pc, r7]
 80081d0:	1d180b0e 	.word	0x1d180b0e
 80081d4:	030e      	.short	0x030e
 80081d6:	f04f 0b00 	mov.w	fp, #0
 80081da:	46da      	mov	sl, fp
 80081dc:	0728      	lsls	r0, r5, #28
 80081de:	d5c1      	bpl.n	8008164 <_strtod_l+0x84>
 80081e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081e4:	e7be      	b.n	8008164 <_strtod_l+0x84>
 80081e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80081ea:	e7f7      	b.n	80081dc <_strtod_l+0xfc>
 80081ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80081f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80081f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081fe:	e7ed      	b.n	80081dc <_strtod_l+0xfc>
 8008200:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008388 <_strtod_l+0x2a8>
 8008204:	f04f 0a00 	mov.w	sl, #0
 8008208:	e7e8      	b.n	80081dc <_strtod_l+0xfc>
 800820a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800820e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008212:	e7e3      	b.n	80081dc <_strtod_l+0xfc>
 8008214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	921d      	str	r2, [sp, #116]	; 0x74
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b30      	cmp	r3, #48	; 0x30
 800821e:	d0f9      	beq.n	8008214 <_strtod_l+0x134>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d09f      	beq.n	8008164 <_strtod_l+0x84>
 8008224:	2301      	movs	r3, #1
 8008226:	f04f 0900 	mov.w	r9, #0
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800822e:	930a      	str	r3, [sp, #40]	; 0x28
 8008230:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008234:	464f      	mov	r7, r9
 8008236:	220a      	movs	r2, #10
 8008238:	981d      	ldr	r0, [sp, #116]	; 0x74
 800823a:	7806      	ldrb	r6, [r0, #0]
 800823c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008240:	b2d9      	uxtb	r1, r3
 8008242:	2909      	cmp	r1, #9
 8008244:	d92a      	bls.n	800829c <_strtod_l+0x1bc>
 8008246:	9907      	ldr	r1, [sp, #28]
 8008248:	462a      	mov	r2, r5
 800824a:	f002 ff21 	bl	800b090 <strncmp>
 800824e:	b398      	cbz	r0, 80082b8 <_strtod_l+0x1d8>
 8008250:	2000      	movs	r0, #0
 8008252:	4633      	mov	r3, r6
 8008254:	463d      	mov	r5, r7
 8008256:	9007      	str	r0, [sp, #28]
 8008258:	4602      	mov	r2, r0
 800825a:	2b65      	cmp	r3, #101	; 0x65
 800825c:	d001      	beq.n	8008262 <_strtod_l+0x182>
 800825e:	2b45      	cmp	r3, #69	; 0x45
 8008260:	d118      	bne.n	8008294 <_strtod_l+0x1b4>
 8008262:	b91d      	cbnz	r5, 800826c <_strtod_l+0x18c>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	4303      	orrs	r3, r0
 8008268:	d098      	beq.n	800819c <_strtod_l+0xbc>
 800826a:	2500      	movs	r5, #0
 800826c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008270:	f108 0301 	add.w	r3, r8, #1
 8008274:	931d      	str	r3, [sp, #116]	; 0x74
 8008276:	f898 3001 	ldrb.w	r3, [r8, #1]
 800827a:	2b2b      	cmp	r3, #43	; 0x2b
 800827c:	d075      	beq.n	800836a <_strtod_l+0x28a>
 800827e:	2b2d      	cmp	r3, #45	; 0x2d
 8008280:	d07b      	beq.n	800837a <_strtod_l+0x29a>
 8008282:	f04f 0c00 	mov.w	ip, #0
 8008286:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800828a:	2909      	cmp	r1, #9
 800828c:	f240 8082 	bls.w	8008394 <_strtod_l+0x2b4>
 8008290:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008294:	2600      	movs	r6, #0
 8008296:	e09d      	b.n	80083d4 <_strtod_l+0x2f4>
 8008298:	2300      	movs	r3, #0
 800829a:	e7c4      	b.n	8008226 <_strtod_l+0x146>
 800829c:	2f08      	cmp	r7, #8
 800829e:	bfd8      	it	le
 80082a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80082a2:	f100 0001 	add.w	r0, r0, #1
 80082a6:	bfda      	itte	le
 80082a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80082ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80082ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80082b2:	3701      	adds	r7, #1
 80082b4:	901d      	str	r0, [sp, #116]	; 0x74
 80082b6:	e7bf      	b.n	8008238 <_strtod_l+0x158>
 80082b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082ba:	195a      	adds	r2, r3, r5
 80082bc:	921d      	str	r2, [sp, #116]	; 0x74
 80082be:	5d5b      	ldrb	r3, [r3, r5]
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	d037      	beq.n	8008334 <_strtod_l+0x254>
 80082c4:	9007      	str	r0, [sp, #28]
 80082c6:	463d      	mov	r5, r7
 80082c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80082cc:	2a09      	cmp	r2, #9
 80082ce:	d912      	bls.n	80082f6 <_strtod_l+0x216>
 80082d0:	2201      	movs	r2, #1
 80082d2:	e7c2      	b.n	800825a <_strtod_l+0x17a>
 80082d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	921d      	str	r2, [sp, #116]	; 0x74
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	3001      	adds	r0, #1
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d0f8      	beq.n	80082d4 <_strtod_l+0x1f4>
 80082e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80082e6:	2a08      	cmp	r2, #8
 80082e8:	f200 84db 	bhi.w	8008ca2 <_strtod_l+0xbc2>
 80082ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80082ee:	9007      	str	r0, [sp, #28]
 80082f0:	2000      	movs	r0, #0
 80082f2:	920a      	str	r2, [sp, #40]	; 0x28
 80082f4:	4605      	mov	r5, r0
 80082f6:	3b30      	subs	r3, #48	; 0x30
 80082f8:	f100 0201 	add.w	r2, r0, #1
 80082fc:	d014      	beq.n	8008328 <_strtod_l+0x248>
 80082fe:	9907      	ldr	r1, [sp, #28]
 8008300:	4411      	add	r1, r2
 8008302:	9107      	str	r1, [sp, #28]
 8008304:	462a      	mov	r2, r5
 8008306:	eb00 0e05 	add.w	lr, r0, r5
 800830a:	210a      	movs	r1, #10
 800830c:	4572      	cmp	r2, lr
 800830e:	d113      	bne.n	8008338 <_strtod_l+0x258>
 8008310:	182a      	adds	r2, r5, r0
 8008312:	2a08      	cmp	r2, #8
 8008314:	f105 0501 	add.w	r5, r5, #1
 8008318:	4405      	add	r5, r0
 800831a:	dc1c      	bgt.n	8008356 <_strtod_l+0x276>
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	220a      	movs	r2, #10
 8008320:	fb02 3301 	mla	r3, r2, r1, r3
 8008324:	9309      	str	r3, [sp, #36]	; 0x24
 8008326:	2200      	movs	r2, #0
 8008328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	911d      	str	r1, [sp, #116]	; 0x74
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	4610      	mov	r0, r2
 8008332:	e7c9      	b.n	80082c8 <_strtod_l+0x1e8>
 8008334:	4638      	mov	r0, r7
 8008336:	e7d2      	b.n	80082de <_strtod_l+0x1fe>
 8008338:	2a08      	cmp	r2, #8
 800833a:	dc04      	bgt.n	8008346 <_strtod_l+0x266>
 800833c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800833e:	434e      	muls	r6, r1
 8008340:	9609      	str	r6, [sp, #36]	; 0x24
 8008342:	3201      	adds	r2, #1
 8008344:	e7e2      	b.n	800830c <_strtod_l+0x22c>
 8008346:	f102 0c01 	add.w	ip, r2, #1
 800834a:	f1bc 0f10 	cmp.w	ip, #16
 800834e:	bfd8      	it	le
 8008350:	fb01 f909 	mulle.w	r9, r1, r9
 8008354:	e7f5      	b.n	8008342 <_strtod_l+0x262>
 8008356:	2d10      	cmp	r5, #16
 8008358:	bfdc      	itt	le
 800835a:	220a      	movle	r2, #10
 800835c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008360:	e7e1      	b.n	8008326 <_strtod_l+0x246>
 8008362:	2300      	movs	r3, #0
 8008364:	9307      	str	r3, [sp, #28]
 8008366:	2201      	movs	r2, #1
 8008368:	e77c      	b.n	8008264 <_strtod_l+0x184>
 800836a:	f04f 0c00 	mov.w	ip, #0
 800836e:	f108 0302 	add.w	r3, r8, #2
 8008372:	931d      	str	r3, [sp, #116]	; 0x74
 8008374:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008378:	e785      	b.n	8008286 <_strtod_l+0x1a6>
 800837a:	f04f 0c01 	mov.w	ip, #1
 800837e:	e7f6      	b.n	800836e <_strtod_l+0x28e>
 8008380:	0800bb08 	.word	0x0800bb08
 8008384:	0800b8b8 	.word	0x0800b8b8
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800838e:	1c59      	adds	r1, r3, #1
 8008390:	911d      	str	r1, [sp, #116]	; 0x74
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d0f9      	beq.n	800838c <_strtod_l+0x2ac>
 8008398:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800839c:	2908      	cmp	r1, #8
 800839e:	f63f af79 	bhi.w	8008294 <_strtod_l+0x1b4>
 80083a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80083a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083ac:	1c59      	adds	r1, r3, #1
 80083ae:	911d      	str	r1, [sp, #116]	; 0x74
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80083b6:	2e09      	cmp	r6, #9
 80083b8:	d937      	bls.n	800842a <_strtod_l+0x34a>
 80083ba:	9e08      	ldr	r6, [sp, #32]
 80083bc:	1b89      	subs	r1, r1, r6
 80083be:	2908      	cmp	r1, #8
 80083c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80083c4:	dc02      	bgt.n	80083cc <_strtod_l+0x2ec>
 80083c6:	4576      	cmp	r6, lr
 80083c8:	bfa8      	it	ge
 80083ca:	4676      	movge	r6, lr
 80083cc:	f1bc 0f00 	cmp.w	ip, #0
 80083d0:	d000      	beq.n	80083d4 <_strtod_l+0x2f4>
 80083d2:	4276      	negs	r6, r6
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	d14f      	bne.n	8008478 <_strtod_l+0x398>
 80083d8:	9904      	ldr	r1, [sp, #16]
 80083da:	4301      	orrs	r1, r0
 80083dc:	f47f aec2 	bne.w	8008164 <_strtod_l+0x84>
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	f47f aedb 	bne.w	800819c <_strtod_l+0xbc>
 80083e6:	2b69      	cmp	r3, #105	; 0x69
 80083e8:	d027      	beq.n	800843a <_strtod_l+0x35a>
 80083ea:	dc24      	bgt.n	8008436 <_strtod_l+0x356>
 80083ec:	2b49      	cmp	r3, #73	; 0x49
 80083ee:	d024      	beq.n	800843a <_strtod_l+0x35a>
 80083f0:	2b4e      	cmp	r3, #78	; 0x4e
 80083f2:	f47f aed3 	bne.w	800819c <_strtod_l+0xbc>
 80083f6:	499e      	ldr	r1, [pc, #632]	; (8008670 <_strtod_l+0x590>)
 80083f8:	a81d      	add	r0, sp, #116	; 0x74
 80083fa:	f001 ff23 	bl	800a244 <__match>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f43f aecc 	beq.w	800819c <_strtod_l+0xbc>
 8008404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b28      	cmp	r3, #40	; 0x28
 800840a:	d12d      	bne.n	8008468 <_strtod_l+0x388>
 800840c:	4999      	ldr	r1, [pc, #612]	; (8008674 <_strtod_l+0x594>)
 800840e:	aa20      	add	r2, sp, #128	; 0x80
 8008410:	a81d      	add	r0, sp, #116	; 0x74
 8008412:	f001 ff2b 	bl	800a26c <__hexnan>
 8008416:	2805      	cmp	r0, #5
 8008418:	d126      	bne.n	8008468 <_strtod_l+0x388>
 800841a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800841c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008420:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008424:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008428:	e69c      	b.n	8008164 <_strtod_l+0x84>
 800842a:	210a      	movs	r1, #10
 800842c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008430:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008434:	e7b9      	b.n	80083aa <_strtod_l+0x2ca>
 8008436:	2b6e      	cmp	r3, #110	; 0x6e
 8008438:	e7db      	b.n	80083f2 <_strtod_l+0x312>
 800843a:	498f      	ldr	r1, [pc, #572]	; (8008678 <_strtod_l+0x598>)
 800843c:	a81d      	add	r0, sp, #116	; 0x74
 800843e:	f001 ff01 	bl	800a244 <__match>
 8008442:	2800      	cmp	r0, #0
 8008444:	f43f aeaa 	beq.w	800819c <_strtod_l+0xbc>
 8008448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800844a:	498c      	ldr	r1, [pc, #560]	; (800867c <_strtod_l+0x59c>)
 800844c:	3b01      	subs	r3, #1
 800844e:	a81d      	add	r0, sp, #116	; 0x74
 8008450:	931d      	str	r3, [sp, #116]	; 0x74
 8008452:	f001 fef7 	bl	800a244 <__match>
 8008456:	b910      	cbnz	r0, 800845e <_strtod_l+0x37e>
 8008458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800845a:	3301      	adds	r3, #1
 800845c:	931d      	str	r3, [sp, #116]	; 0x74
 800845e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800868c <_strtod_l+0x5ac>
 8008462:	f04f 0a00 	mov.w	sl, #0
 8008466:	e67d      	b.n	8008164 <_strtod_l+0x84>
 8008468:	4885      	ldr	r0, [pc, #532]	; (8008680 <_strtod_l+0x5a0>)
 800846a:	f002 fe09 	bl	800b080 <nan>
 800846e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008472:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008476:	e675      	b.n	8008164 <_strtod_l+0x84>
 8008478:	9b07      	ldr	r3, [sp, #28]
 800847a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800847c:	1af3      	subs	r3, r6, r3
 800847e:	2f00      	cmp	r7, #0
 8008480:	bf08      	it	eq
 8008482:	462f      	moveq	r7, r5
 8008484:	2d10      	cmp	r5, #16
 8008486:	9308      	str	r3, [sp, #32]
 8008488:	46a8      	mov	r8, r5
 800848a:	bfa8      	it	ge
 800848c:	f04f 0810 	movge.w	r8, #16
 8008490:	f7f8 f838 	bl	8000504 <__aeabi_ui2d>
 8008494:	2d09      	cmp	r5, #9
 8008496:	4682      	mov	sl, r0
 8008498:	468b      	mov	fp, r1
 800849a:	dd13      	ble.n	80084c4 <_strtod_l+0x3e4>
 800849c:	4b79      	ldr	r3, [pc, #484]	; (8008684 <_strtod_l+0x5a4>)
 800849e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084a6:	f7f8 f8a7 	bl	80005f8 <__aeabi_dmul>
 80084aa:	4682      	mov	sl, r0
 80084ac:	4648      	mov	r0, r9
 80084ae:	468b      	mov	fp, r1
 80084b0:	f7f8 f828 	bl	8000504 <__aeabi_ui2d>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4650      	mov	r0, sl
 80084ba:	4659      	mov	r1, fp
 80084bc:	f7f7 fee6 	bl	800028c <__adddf3>
 80084c0:	4682      	mov	sl, r0
 80084c2:	468b      	mov	fp, r1
 80084c4:	2d0f      	cmp	r5, #15
 80084c6:	dc38      	bgt.n	800853a <_strtod_l+0x45a>
 80084c8:	9b08      	ldr	r3, [sp, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f43f ae4a 	beq.w	8008164 <_strtod_l+0x84>
 80084d0:	dd24      	ble.n	800851c <_strtod_l+0x43c>
 80084d2:	2b16      	cmp	r3, #22
 80084d4:	dc0b      	bgt.n	80084ee <_strtod_l+0x40e>
 80084d6:	4d6b      	ldr	r5, [pc, #428]	; (8008684 <_strtod_l+0x5a4>)
 80084d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80084dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80084e0:	4652      	mov	r2, sl
 80084e2:	465b      	mov	r3, fp
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	4682      	mov	sl, r0
 80084ea:	468b      	mov	fp, r1
 80084ec:	e63a      	b.n	8008164 <_strtod_l+0x84>
 80084ee:	9a08      	ldr	r2, [sp, #32]
 80084f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80084f4:	4293      	cmp	r3, r2
 80084f6:	db20      	blt.n	800853a <_strtod_l+0x45a>
 80084f8:	4c62      	ldr	r4, [pc, #392]	; (8008684 <_strtod_l+0x5a4>)
 80084fa:	f1c5 050f 	rsb	r5, r5, #15
 80084fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	1b5d      	subs	r5, r3, r5
 8008512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008516:	e9d4 2300 	ldrd	r2, r3, [r4]
 800851a:	e7e3      	b.n	80084e4 <_strtod_l+0x404>
 800851c:	9b08      	ldr	r3, [sp, #32]
 800851e:	3316      	adds	r3, #22
 8008520:	db0b      	blt.n	800853a <_strtod_l+0x45a>
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	4a57      	ldr	r2, [pc, #348]	; (8008684 <_strtod_l+0x5a4>)
 8008526:	1b9e      	subs	r6, r3, r6
 8008528:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800852c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008530:	4650      	mov	r0, sl
 8008532:	4659      	mov	r1, fp
 8008534:	f7f8 f98a 	bl	800084c <__aeabi_ddiv>
 8008538:	e7d6      	b.n	80084e8 <_strtod_l+0x408>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	eba5 0808 	sub.w	r8, r5, r8
 8008540:	4498      	add	r8, r3
 8008542:	f1b8 0f00 	cmp.w	r8, #0
 8008546:	dd71      	ble.n	800862c <_strtod_l+0x54c>
 8008548:	f018 030f 	ands.w	r3, r8, #15
 800854c:	d00a      	beq.n	8008564 <_strtod_l+0x484>
 800854e:	494d      	ldr	r1, [pc, #308]	; (8008684 <_strtod_l+0x5a4>)
 8008550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855c:	f7f8 f84c 	bl	80005f8 <__aeabi_dmul>
 8008560:	4682      	mov	sl, r0
 8008562:	468b      	mov	fp, r1
 8008564:	f038 080f 	bics.w	r8, r8, #15
 8008568:	d04d      	beq.n	8008606 <_strtod_l+0x526>
 800856a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800856e:	dd22      	ble.n	80085b6 <_strtod_l+0x4d6>
 8008570:	2500      	movs	r5, #0
 8008572:	462e      	mov	r6, r5
 8008574:	9509      	str	r5, [sp, #36]	; 0x24
 8008576:	9507      	str	r5, [sp, #28]
 8008578:	2322      	movs	r3, #34	; 0x22
 800857a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800868c <_strtod_l+0x5ac>
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	f04f 0a00 	mov.w	sl, #0
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	2b00      	cmp	r3, #0
 8008588:	f43f adec 	beq.w	8008164 <_strtod_l+0x84>
 800858c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800858e:	4620      	mov	r0, r4
 8008590:	f001 ff7c 	bl	800a48c <_Bfree>
 8008594:	9907      	ldr	r1, [sp, #28]
 8008596:	4620      	mov	r0, r4
 8008598:	f001 ff78 	bl	800a48c <_Bfree>
 800859c:	4631      	mov	r1, r6
 800859e:	4620      	mov	r0, r4
 80085a0:	f001 ff74 	bl	800a48c <_Bfree>
 80085a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 ff70 	bl	800a48c <_Bfree>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	f001 ff6c 	bl	800a48c <_Bfree>
 80085b4:	e5d6      	b.n	8008164 <_strtod_l+0x84>
 80085b6:	2300      	movs	r3, #0
 80085b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085bc:	4650      	mov	r0, sl
 80085be:	4659      	mov	r1, fp
 80085c0:	4699      	mov	r9, r3
 80085c2:	f1b8 0f01 	cmp.w	r8, #1
 80085c6:	dc21      	bgt.n	800860c <_strtod_l+0x52c>
 80085c8:	b10b      	cbz	r3, 80085ce <_strtod_l+0x4ee>
 80085ca:	4682      	mov	sl, r0
 80085cc:	468b      	mov	fp, r1
 80085ce:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <_strtod_l+0x5a8>)
 80085d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80085d8:	4652      	mov	r2, sl
 80085da:	465b      	mov	r3, fp
 80085dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80085e0:	f7f8 f80a 	bl	80005f8 <__aeabi_dmul>
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <_strtod_l+0x5ac>)
 80085e6:	460a      	mov	r2, r1
 80085e8:	400b      	ands	r3, r1
 80085ea:	4929      	ldr	r1, [pc, #164]	; (8008690 <_strtod_l+0x5b0>)
 80085ec:	428b      	cmp	r3, r1
 80085ee:	4682      	mov	sl, r0
 80085f0:	d8be      	bhi.n	8008570 <_strtod_l+0x490>
 80085f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085f6:	428b      	cmp	r3, r1
 80085f8:	bf86      	itte	hi
 80085fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008694 <_strtod_l+0x5b4>
 80085fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008602:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008606:	2300      	movs	r3, #0
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	e081      	b.n	8008710 <_strtod_l+0x630>
 800860c:	f018 0f01 	tst.w	r8, #1
 8008610:	d007      	beq.n	8008622 <_strtod_l+0x542>
 8008612:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <_strtod_l+0x5a8>)
 8008614:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f7 ffec 	bl	80005f8 <__aeabi_dmul>
 8008620:	2301      	movs	r3, #1
 8008622:	f109 0901 	add.w	r9, r9, #1
 8008626:	ea4f 0868 	mov.w	r8, r8, asr #1
 800862a:	e7ca      	b.n	80085c2 <_strtod_l+0x4e2>
 800862c:	d0eb      	beq.n	8008606 <_strtod_l+0x526>
 800862e:	f1c8 0800 	rsb	r8, r8, #0
 8008632:	f018 020f 	ands.w	r2, r8, #15
 8008636:	d00a      	beq.n	800864e <_strtod_l+0x56e>
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <_strtod_l+0x5a4>)
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	4650      	mov	r0, sl
 8008640:	4659      	mov	r1, fp
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f8 f901 	bl	800084c <__aeabi_ddiv>
 800864a:	4682      	mov	sl, r0
 800864c:	468b      	mov	fp, r1
 800864e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008652:	d0d8      	beq.n	8008606 <_strtod_l+0x526>
 8008654:	f1b8 0f1f 	cmp.w	r8, #31
 8008658:	dd1e      	ble.n	8008698 <_strtod_l+0x5b8>
 800865a:	2500      	movs	r5, #0
 800865c:	462e      	mov	r6, r5
 800865e:	9509      	str	r5, [sp, #36]	; 0x24
 8008660:	9507      	str	r5, [sp, #28]
 8008662:	2322      	movs	r3, #34	; 0x22
 8008664:	f04f 0a00 	mov.w	sl, #0
 8008668:	f04f 0b00 	mov.w	fp, #0
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	e789      	b.n	8008584 <_strtod_l+0x4a4>
 8008670:	0800b889 	.word	0x0800b889
 8008674:	0800b8cc 	.word	0x0800b8cc
 8008678:	0800b881 	.word	0x0800b881
 800867c:	0800ba0c 	.word	0x0800ba0c
 8008680:	0800bcc8 	.word	0x0800bcc8
 8008684:	0800bba8 	.word	0x0800bba8
 8008688:	0800bb80 	.word	0x0800bb80
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	7ca00000 	.word	0x7ca00000
 8008694:	7fefffff 	.word	0x7fefffff
 8008698:	f018 0310 	ands.w	r3, r8, #16
 800869c:	bf18      	it	ne
 800869e:	236a      	movne	r3, #106	; 0x6a
 80086a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008a58 <_strtod_l+0x978>
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	4650      	mov	r0, sl
 80086a8:	4659      	mov	r1, fp
 80086aa:	2300      	movs	r3, #0
 80086ac:	f018 0f01 	tst.w	r8, #1
 80086b0:	d004      	beq.n	80086bc <_strtod_l+0x5dc>
 80086b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	2301      	movs	r3, #1
 80086bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80086c0:	f109 0908 	add.w	r9, r9, #8
 80086c4:	d1f2      	bne.n	80086ac <_strtod_l+0x5cc>
 80086c6:	b10b      	cbz	r3, 80086cc <_strtod_l+0x5ec>
 80086c8:	4682      	mov	sl, r0
 80086ca:	468b      	mov	fp, r1
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	b1bb      	cbz	r3, 8008700 <_strtod_l+0x620>
 80086d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80086d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086d8:	2b00      	cmp	r3, #0
 80086da:	4659      	mov	r1, fp
 80086dc:	dd10      	ble.n	8008700 <_strtod_l+0x620>
 80086de:	2b1f      	cmp	r3, #31
 80086e0:	f340 8128 	ble.w	8008934 <_strtod_l+0x854>
 80086e4:	2b34      	cmp	r3, #52	; 0x34
 80086e6:	bfde      	ittt	le
 80086e8:	3b20      	suble	r3, #32
 80086ea:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80086ee:	fa02 f303 	lslle.w	r3, r2, r3
 80086f2:	f04f 0a00 	mov.w	sl, #0
 80086f6:	bfcc      	ite	gt
 80086f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086fc:	ea03 0b01 	andle.w	fp, r3, r1
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	4650      	mov	r0, sl
 8008706:	4659      	mov	r1, fp
 8008708:	f7f8 f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800870c:	2800      	cmp	r0, #0
 800870e:	d1a4      	bne.n	800865a <_strtod_l+0x57a>
 8008710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008716:	462b      	mov	r3, r5
 8008718:	463a      	mov	r2, r7
 800871a:	4620      	mov	r0, r4
 800871c:	f001 ff22 	bl	800a564 <__s2b>
 8008720:	9009      	str	r0, [sp, #36]	; 0x24
 8008722:	2800      	cmp	r0, #0
 8008724:	f43f af24 	beq.w	8008570 <_strtod_l+0x490>
 8008728:	9b07      	ldr	r3, [sp, #28]
 800872a:	1b9e      	subs	r6, r3, r6
 800872c:	9b08      	ldr	r3, [sp, #32]
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfb4      	ite	lt
 8008732:	4633      	movlt	r3, r6
 8008734:	2300      	movge	r3, #0
 8008736:	9310      	str	r3, [sp, #64]	; 0x40
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	2500      	movs	r5, #0
 800873c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008740:	9318      	str	r3, [sp, #96]	; 0x60
 8008742:	462e      	mov	r6, r5
 8008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008746:	4620      	mov	r0, r4
 8008748:	6859      	ldr	r1, [r3, #4]
 800874a:	f001 fe5f 	bl	800a40c <_Balloc>
 800874e:	9007      	str	r0, [sp, #28]
 8008750:	2800      	cmp	r0, #0
 8008752:	f43f af11 	beq.w	8008578 <_strtod_l+0x498>
 8008756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	3202      	adds	r2, #2
 800875c:	f103 010c 	add.w	r1, r3, #12
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	300c      	adds	r0, #12
 8008764:	f7fe fc82 	bl	800706c <memcpy>
 8008768:	ec4b ab10 	vmov	d0, sl, fp
 800876c:	aa20      	add	r2, sp, #128	; 0x80
 800876e:	a91f      	add	r1, sp, #124	; 0x7c
 8008770:	4620      	mov	r0, r4
 8008772:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008776:	f002 fa31 	bl	800abdc <__d2b>
 800877a:	901e      	str	r0, [sp, #120]	; 0x78
 800877c:	2800      	cmp	r0, #0
 800877e:	f43f aefb 	beq.w	8008578 <_strtod_l+0x498>
 8008782:	2101      	movs	r1, #1
 8008784:	4620      	mov	r0, r4
 8008786:	f001 ff87 	bl	800a698 <__i2b>
 800878a:	4606      	mov	r6, r0
 800878c:	2800      	cmp	r0, #0
 800878e:	f43f aef3 	beq.w	8008578 <_strtod_l+0x498>
 8008792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008794:	9904      	ldr	r1, [sp, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	bfab      	itete	ge
 800879a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800879c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800879e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80087a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80087a4:	bfac      	ite	ge
 80087a6:	eb03 0902 	addge.w	r9, r3, r2
 80087aa:	1ad7      	sublt	r7, r2, r3
 80087ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087ae:	eba3 0801 	sub.w	r8, r3, r1
 80087b2:	4490      	add	r8, r2
 80087b4:	4ba3      	ldr	r3, [pc, #652]	; (8008a44 <_strtod_l+0x964>)
 80087b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80087ba:	4598      	cmp	r8, r3
 80087bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087c0:	f280 80cc 	bge.w	800895c <_strtod_l+0x87c>
 80087c4:	eba3 0308 	sub.w	r3, r3, r8
 80087c8:	2b1f      	cmp	r3, #31
 80087ca:	eba2 0203 	sub.w	r2, r2, r3
 80087ce:	f04f 0101 	mov.w	r1, #1
 80087d2:	f300 80b6 	bgt.w	8008942 <_strtod_l+0x862>
 80087d6:	fa01 f303 	lsl.w	r3, r1, r3
 80087da:	9311      	str	r3, [sp, #68]	; 0x44
 80087dc:	2300      	movs	r3, #0
 80087de:	930c      	str	r3, [sp, #48]	; 0x30
 80087e0:	eb09 0802 	add.w	r8, r9, r2
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	45c1      	cmp	r9, r8
 80087e8:	4417      	add	r7, r2
 80087ea:	441f      	add	r7, r3
 80087ec:	464b      	mov	r3, r9
 80087ee:	bfa8      	it	ge
 80087f0:	4643      	movge	r3, r8
 80087f2:	42bb      	cmp	r3, r7
 80087f4:	bfa8      	it	ge
 80087f6:	463b      	movge	r3, r7
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bfc2      	ittt	gt
 80087fc:	eba8 0803 	subgt.w	r8, r8, r3
 8008800:	1aff      	subgt	r7, r7, r3
 8008802:	eba9 0903 	subgt.w	r9, r9, r3
 8008806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	dd17      	ble.n	800883c <_strtod_l+0x75c>
 800880c:	4631      	mov	r1, r6
 800880e:	461a      	mov	r2, r3
 8008810:	4620      	mov	r0, r4
 8008812:	f001 fffd 	bl	800a810 <__pow5mult>
 8008816:	4606      	mov	r6, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f aead 	beq.w	8008578 <_strtod_l+0x498>
 800881e:	4601      	mov	r1, r0
 8008820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008822:	4620      	mov	r0, r4
 8008824:	f001 ff4e 	bl	800a6c4 <__multiply>
 8008828:	900f      	str	r0, [sp, #60]	; 0x3c
 800882a:	2800      	cmp	r0, #0
 800882c:	f43f aea4 	beq.w	8008578 <_strtod_l+0x498>
 8008830:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008832:	4620      	mov	r0, r4
 8008834:	f001 fe2a 	bl	800a48c <_Bfree>
 8008838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800883a:	931e      	str	r3, [sp, #120]	; 0x78
 800883c:	f1b8 0f00 	cmp.w	r8, #0
 8008840:	f300 8091 	bgt.w	8008966 <_strtod_l+0x886>
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	dd08      	ble.n	800885c <_strtod_l+0x77c>
 800884a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800884c:	9907      	ldr	r1, [sp, #28]
 800884e:	4620      	mov	r0, r4
 8008850:	f001 ffde 	bl	800a810 <__pow5mult>
 8008854:	9007      	str	r0, [sp, #28]
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f ae8e 	beq.w	8008578 <_strtod_l+0x498>
 800885c:	2f00      	cmp	r7, #0
 800885e:	dd08      	ble.n	8008872 <_strtod_l+0x792>
 8008860:	9907      	ldr	r1, [sp, #28]
 8008862:	463a      	mov	r2, r7
 8008864:	4620      	mov	r0, r4
 8008866:	f002 f82d 	bl	800a8c4 <__lshift>
 800886a:	9007      	str	r0, [sp, #28]
 800886c:	2800      	cmp	r0, #0
 800886e:	f43f ae83 	beq.w	8008578 <_strtod_l+0x498>
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	dd08      	ble.n	800888a <_strtod_l+0x7aa>
 8008878:	4631      	mov	r1, r6
 800887a:	464a      	mov	r2, r9
 800887c:	4620      	mov	r0, r4
 800887e:	f002 f821 	bl	800a8c4 <__lshift>
 8008882:	4606      	mov	r6, r0
 8008884:	2800      	cmp	r0, #0
 8008886:	f43f ae77 	beq.w	8008578 <_strtod_l+0x498>
 800888a:	9a07      	ldr	r2, [sp, #28]
 800888c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800888e:	4620      	mov	r0, r4
 8008890:	f002 f8a0 	bl	800a9d4 <__mdiff>
 8008894:	4605      	mov	r5, r0
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f ae6e 	beq.w	8008578 <_strtod_l+0x498>
 800889c:	68c3      	ldr	r3, [r0, #12]
 800889e:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a0:	2300      	movs	r3, #0
 80088a2:	60c3      	str	r3, [r0, #12]
 80088a4:	4631      	mov	r1, r6
 80088a6:	f002 f879 	bl	800a99c <__mcmp>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	da65      	bge.n	800897a <_strtod_l+0x89a>
 80088ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b0:	ea53 030a 	orrs.w	r3, r3, sl
 80088b4:	f040 8087 	bne.w	80089c6 <_strtod_l+0x8e6>
 80088b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 8082 	bne.w	80089c6 <_strtod_l+0x8e6>
 80088c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088c6:	0d1b      	lsrs	r3, r3, #20
 80088c8:	051b      	lsls	r3, r3, #20
 80088ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088ce:	d97a      	bls.n	80089c6 <_strtod_l+0x8e6>
 80088d0:	696b      	ldr	r3, [r5, #20]
 80088d2:	b913      	cbnz	r3, 80088da <_strtod_l+0x7fa>
 80088d4:	692b      	ldr	r3, [r5, #16]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	dd75      	ble.n	80089c6 <_strtod_l+0x8e6>
 80088da:	4629      	mov	r1, r5
 80088dc:	2201      	movs	r2, #1
 80088de:	4620      	mov	r0, r4
 80088e0:	f001 fff0 	bl	800a8c4 <__lshift>
 80088e4:	4631      	mov	r1, r6
 80088e6:	4605      	mov	r5, r0
 80088e8:	f002 f858 	bl	800a99c <__mcmp>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	dd6a      	ble.n	80089c6 <_strtod_l+0x8e6>
 80088f0:	9904      	ldr	r1, [sp, #16]
 80088f2:	4a55      	ldr	r2, [pc, #340]	; (8008a48 <_strtod_l+0x968>)
 80088f4:	465b      	mov	r3, fp
 80088f6:	2900      	cmp	r1, #0
 80088f8:	f000 8085 	beq.w	8008a06 <_strtod_l+0x926>
 80088fc:	ea02 010b 	and.w	r1, r2, fp
 8008900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008904:	dc7f      	bgt.n	8008a06 <_strtod_l+0x926>
 8008906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800890a:	f77f aeaa 	ble.w	8008662 <_strtod_l+0x582>
 800890e:	4a4f      	ldr	r2, [pc, #316]	; (8008a4c <_strtod_l+0x96c>)
 8008910:	2300      	movs	r3, #0
 8008912:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008916:	4650      	mov	r0, sl
 8008918:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800891c:	4659      	mov	r1, fp
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	460b      	mov	r3, r1
 8008924:	4303      	orrs	r3, r0
 8008926:	bf08      	it	eq
 8008928:	2322      	moveq	r3, #34	; 0x22
 800892a:	4682      	mov	sl, r0
 800892c:	468b      	mov	fp, r1
 800892e:	bf08      	it	eq
 8008930:	6023      	streq	r3, [r4, #0]
 8008932:	e62b      	b.n	800858c <_strtod_l+0x4ac>
 8008934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008938:	fa02 f303 	lsl.w	r3, r2, r3
 800893c:	ea03 0a0a 	and.w	sl, r3, sl
 8008940:	e6de      	b.n	8008700 <_strtod_l+0x620>
 8008942:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008946:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800894a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800894e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008952:	fa01 f308 	lsl.w	r3, r1, r8
 8008956:	930c      	str	r3, [sp, #48]	; 0x30
 8008958:	9111      	str	r1, [sp, #68]	; 0x44
 800895a:	e741      	b.n	80087e0 <_strtod_l+0x700>
 800895c:	2300      	movs	r3, #0
 800895e:	930c      	str	r3, [sp, #48]	; 0x30
 8008960:	2301      	movs	r3, #1
 8008962:	9311      	str	r3, [sp, #68]	; 0x44
 8008964:	e73c      	b.n	80087e0 <_strtod_l+0x700>
 8008966:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008968:	4642      	mov	r2, r8
 800896a:	4620      	mov	r0, r4
 800896c:	f001 ffaa 	bl	800a8c4 <__lshift>
 8008970:	901e      	str	r0, [sp, #120]	; 0x78
 8008972:	2800      	cmp	r0, #0
 8008974:	f47f af66 	bne.w	8008844 <_strtod_l+0x764>
 8008978:	e5fe      	b.n	8008578 <_strtod_l+0x498>
 800897a:	465f      	mov	r7, fp
 800897c:	d16e      	bne.n	8008a5c <_strtod_l+0x97c>
 800897e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008984:	b342      	cbz	r2, 80089d8 <_strtod_l+0x8f8>
 8008986:	4a32      	ldr	r2, [pc, #200]	; (8008a50 <_strtod_l+0x970>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d128      	bne.n	80089de <_strtod_l+0x8fe>
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	4650      	mov	r0, sl
 8008990:	b1eb      	cbz	r3, 80089ce <_strtod_l+0x8ee>
 8008992:	4a2d      	ldr	r2, [pc, #180]	; (8008a48 <_strtod_l+0x968>)
 8008994:	403a      	ands	r2, r7
 8008996:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800899a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800899e:	d819      	bhi.n	80089d4 <_strtod_l+0x8f4>
 80089a0:	0d12      	lsrs	r2, r2, #20
 80089a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	4298      	cmp	r0, r3
 80089ac:	d117      	bne.n	80089de <_strtod_l+0x8fe>
 80089ae:	4b29      	ldr	r3, [pc, #164]	; (8008a54 <_strtod_l+0x974>)
 80089b0:	429f      	cmp	r7, r3
 80089b2:	d102      	bne.n	80089ba <_strtod_l+0x8da>
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f addf 	beq.w	8008578 <_strtod_l+0x498>
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <_strtod_l+0x968>)
 80089bc:	403b      	ands	r3, r7
 80089be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80089c2:	f04f 0a00 	mov.w	sl, #0
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1a0      	bne.n	800890e <_strtod_l+0x82e>
 80089cc:	e5de      	b.n	800858c <_strtod_l+0x4ac>
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d2:	e7ea      	b.n	80089aa <_strtod_l+0x8ca>
 80089d4:	460b      	mov	r3, r1
 80089d6:	e7e8      	b.n	80089aa <_strtod_l+0x8ca>
 80089d8:	ea53 030a 	orrs.w	r3, r3, sl
 80089dc:	d088      	beq.n	80088f0 <_strtod_l+0x810>
 80089de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e0:	b1db      	cbz	r3, 8008a1a <_strtod_l+0x93a>
 80089e2:	423b      	tst	r3, r7
 80089e4:	d0ef      	beq.n	80089c6 <_strtod_l+0x8e6>
 80089e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e8:	9a04      	ldr	r2, [sp, #16]
 80089ea:	4650      	mov	r0, sl
 80089ec:	4659      	mov	r1, fp
 80089ee:	b1c3      	cbz	r3, 8008a22 <_strtod_l+0x942>
 80089f0:	f7ff fb59 	bl	80080a6 <sulp>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089fc:	f7f7 fc46 	bl	800028c <__adddf3>
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	e7df      	b.n	80089c6 <_strtod_l+0x8e6>
 8008a06:	4013      	ands	r3, r2
 8008a08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a18:	e7d5      	b.n	80089c6 <_strtod_l+0x8e6>
 8008a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a1c:	ea13 0f0a 	tst.w	r3, sl
 8008a20:	e7e0      	b.n	80089e4 <_strtod_l+0x904>
 8008a22:	f7ff fb40 	bl	80080a6 <sulp>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a2e:	f7f7 fc2b 	bl	8000288 <__aeabi_dsub>
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	4682      	mov	sl, r0
 8008a38:	468b      	mov	fp, r1
 8008a3a:	f7f8 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d0c1      	beq.n	80089c6 <_strtod_l+0x8e6>
 8008a42:	e60e      	b.n	8008662 <_strtod_l+0x582>
 8008a44:	fffffc02 	.word	0xfffffc02
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	39500000 	.word	0x39500000
 8008a50:	000fffff 	.word	0x000fffff
 8008a54:	7fefffff 	.word	0x7fefffff
 8008a58:	0800b8e0 	.word	0x0800b8e0
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f002 f918 	bl	800ac94 <__ratio>
 8008a64:	ec59 8b10 	vmov	r8, r9, d0
 8008a68:	ee10 0a10 	vmov	r0, s0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f8 f83c 	bl	8000af0 <__aeabi_dcmple>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d07c      	beq.n	8008b76 <_strtod_l+0xa96>
 8008a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04c      	beq.n	8008b1c <_strtod_l+0xa3c>
 8008a82:	4b95      	ldr	r3, [pc, #596]	; (8008cd8 <_strtod_l+0xbf8>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008a8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008cd8 <_strtod_l+0xbf8>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	4b92      	ldr	r3, [pc, #584]	; (8008cdc <_strtod_l+0xbfc>)
 8008a94:	403b      	ands	r3, r7
 8008a96:	9311      	str	r3, [sp, #68]	; 0x44
 8008a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a9a:	4b91      	ldr	r3, [pc, #580]	; (8008ce0 <_strtod_l+0xc00>)
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	f040 80b2 	bne.w	8008c06 <_strtod_l+0xb26>
 8008aa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008aae:	ec4b ab10 	vmov	d0, sl, fp
 8008ab2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008ab6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008aba:	f002 f813 	bl	800aae4 <__ulp>
 8008abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac2:	ec53 2b10 	vmov	r2, r3, d0
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	4652      	mov	r2, sl
 8008acc:	465b      	mov	r3, fp
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4981      	ldr	r1, [pc, #516]	; (8008cdc <_strtod_l+0xbfc>)
 8008ad6:	4a83      	ldr	r2, [pc, #524]	; (8008ce4 <_strtod_l+0xc04>)
 8008ad8:	4019      	ands	r1, r3
 8008ada:	4291      	cmp	r1, r2
 8008adc:	4682      	mov	sl, r0
 8008ade:	d95e      	bls.n	8008b9e <_strtod_l+0xabe>
 8008ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d103      	bne.n	8008af2 <_strtod_l+0xa12>
 8008aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aec:	3301      	adds	r3, #1
 8008aee:	f43f ad43 	beq.w	8008578 <_strtod_l+0x498>
 8008af2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008cf0 <_strtod_l+0xc10>
 8008af6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008afa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008afc:	4620      	mov	r0, r4
 8008afe:	f001 fcc5 	bl	800a48c <_Bfree>
 8008b02:	9907      	ldr	r1, [sp, #28]
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 fcc1 	bl	800a48c <_Bfree>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f001 fcbd 	bl	800a48c <_Bfree>
 8008b12:	4629      	mov	r1, r5
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fcb9 	bl	800a48c <_Bfree>
 8008b1a:	e613      	b.n	8008744 <_strtod_l+0x664>
 8008b1c:	f1ba 0f00 	cmp.w	sl, #0
 8008b20:	d11b      	bne.n	8008b5a <_strtod_l+0xa7a>
 8008b22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b26:	b9f3      	cbnz	r3, 8008b66 <_strtod_l+0xa86>
 8008b28:	4b6b      	ldr	r3, [pc, #428]	; (8008cd8 <_strtod_l+0xbf8>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8008b34:	b9d0      	cbnz	r0, 8008b6c <_strtod_l+0xa8c>
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4b6b      	ldr	r3, [pc, #428]	; (8008ce8 <_strtod_l+0xc08>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4680      	mov	r8, r0
 8008b44:	4689      	mov	r9, r1
 8008b46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008b4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008b54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b58:	e79b      	b.n	8008a92 <_strtod_l+0x9b2>
 8008b5a:	f1ba 0f01 	cmp.w	sl, #1
 8008b5e:	d102      	bne.n	8008b66 <_strtod_l+0xa86>
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	f43f ad7e 	beq.w	8008662 <_strtod_l+0x582>
 8008b66:	4b61      	ldr	r3, [pc, #388]	; (8008cec <_strtod_l+0xc0c>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	e78c      	b.n	8008a86 <_strtod_l+0x9a6>
 8008b6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008ce8 <_strtod_l+0xc08>
 8008b70:	f04f 0800 	mov.w	r8, #0
 8008b74:	e7e7      	b.n	8008b46 <_strtod_l+0xa66>
 8008b76:	4b5c      	ldr	r3, [pc, #368]	; (8008ce8 <_strtod_l+0xc08>)
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f7f7 fd3b 	bl	80005f8 <__aeabi_dmul>
 8008b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b84:	4680      	mov	r8, r0
 8008b86:	4689      	mov	r9, r1
 8008b88:	b933      	cbnz	r3, 8008b98 <_strtod_l+0xab8>
 8008b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b8e:	9012      	str	r0, [sp, #72]	; 0x48
 8008b90:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008b96:	e7dd      	b.n	8008b54 <_strtod_l+0xa74>
 8008b98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008b9c:	e7f9      	b.n	8008b92 <_strtod_l+0xab2>
 8008b9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1a8      	bne.n	8008afa <_strtod_l+0xa1a>
 8008ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bae:	0d1b      	lsrs	r3, r3, #20
 8008bb0:	051b      	lsls	r3, r3, #20
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d1a1      	bne.n	8008afa <_strtod_l+0xa1a>
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f8 f87d 	bl	8000cb8 <__aeabi_d2lz>
 8008bbe:	f7f7 fced 	bl	800059c <__aeabi_l2d>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fb5d 	bl	8000288 <__aeabi_dsub>
 8008bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd4:	ea43 030a 	orr.w	r3, r3, sl
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	4680      	mov	r8, r0
 8008bdc:	4689      	mov	r9, r1
 8008bde:	d053      	beq.n	8008c88 <_strtod_l+0xba8>
 8008be0:	a335      	add	r3, pc, #212	; (adr r3, 8008cb8 <_strtod_l+0xbd8>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 ff79 	bl	8000adc <__aeabi_dcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f47f acce 	bne.w	800858c <_strtod_l+0x4ac>
 8008bf0:	a333      	add	r3, pc, #204	; (adr r3, 8008cc0 <_strtod_l+0xbe0>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	f43f af7b 	beq.w	8008afa <_strtod_l+0xa1a>
 8008c04:	e4c2      	b.n	800858c <_strtod_l+0x4ac>
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	b333      	cbz	r3, 8008c58 <_strtod_l+0xb78>
 8008c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c10:	d822      	bhi.n	8008c58 <_strtod_l+0xb78>
 8008c12:	a32d      	add	r3, pc, #180	; (adr r3, 8008cc8 <_strtod_l+0xbe8>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	4640      	mov	r0, r8
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	f7f7 ff68 	bl	8000af0 <__aeabi_dcmple>
 8008c20:	b1a0      	cbz	r0, 8008c4c <_strtod_l+0xb6c>
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	f7f7 ffbf 	bl	8000ba8 <__aeabi_d2uiz>
 8008c2a:	2801      	cmp	r0, #1
 8008c2c:	bf38      	it	cc
 8008c2e:	2001      	movcc	r0, #1
 8008c30:	f7f7 fc68 	bl	8000504 <__aeabi_ui2d>
 8008c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	bb13      	cbnz	r3, 8008c82 <_strtod_l+0xba2>
 8008c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c40:	9014      	str	r0, [sp, #80]	; 0x50
 8008c42:	9315      	str	r3, [sp, #84]	; 0x54
 8008c44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	930d      	str	r3, [sp, #52]	; 0x34
 8008c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c64:	f001 ff3e 	bl	800aae4 <__ulp>
 8008c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c6c:	ec53 2b10 	vmov	r2, r3, d0
 8008c70:	f7f7 fcc2 	bl	80005f8 <__aeabi_dmul>
 8008c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c78:	f7f7 fb08 	bl	800028c <__adddf3>
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	468b      	mov	fp, r1
 8008c80:	e78f      	b.n	8008ba2 <_strtod_l+0xac2>
 8008c82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008c86:	e7dd      	b.n	8008c44 <_strtod_l+0xb64>
 8008c88:	a311      	add	r3, pc, #68	; (adr r3, 8008cd0 <_strtod_l+0xbf0>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 ff25 	bl	8000adc <__aeabi_dcmplt>
 8008c92:	e7b4      	b.n	8008bfe <_strtod_l+0xb1e>
 8008c94:	2300      	movs	r3, #0
 8008c96:	930e      	str	r3, [sp, #56]	; 0x38
 8008c98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	f7ff ba65 	b.w	800816c <_strtod_l+0x8c>
 8008ca2:	2b65      	cmp	r3, #101	; 0x65
 8008ca4:	f43f ab5d 	beq.w	8008362 <_strtod_l+0x282>
 8008ca8:	2b45      	cmp	r3, #69	; 0x45
 8008caa:	f43f ab5a 	beq.w	8008362 <_strtod_l+0x282>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f7ff bb92 	b.w	80083d8 <_strtod_l+0x2f8>
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fdfffff 	.word	0x3fdfffff
 8008cc0:	35afe535 	.word	0x35afe535
 8008cc4:	3fe00000 	.word	0x3fe00000
 8008cc8:	ffc00000 	.word	0xffc00000
 8008ccc:	41dfffff 	.word	0x41dfffff
 8008cd0:	94a03595 	.word	0x94a03595
 8008cd4:	3fcfffff 	.word	0x3fcfffff
 8008cd8:	3ff00000 	.word	0x3ff00000
 8008cdc:	7ff00000 	.word	0x7ff00000
 8008ce0:	7fe00000 	.word	0x7fe00000
 8008ce4:	7c9fffff 	.word	0x7c9fffff
 8008ce8:	3fe00000 	.word	0x3fe00000
 8008cec:	bff00000 	.word	0xbff00000
 8008cf0:	7fefffff 	.word	0x7fefffff

08008cf4 <_strtod_r>:
 8008cf4:	4b01      	ldr	r3, [pc, #4]	; (8008cfc <_strtod_r+0x8>)
 8008cf6:	f7ff b9f3 	b.w	80080e0 <_strtod_l>
 8008cfa:	bf00      	nop
 8008cfc:	20000078 	.word	0x20000078

08008d00 <_strtol_l.isra.0>:
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d06:	d001      	beq.n	8008d0c <_strtol_l.isra.0+0xc>
 8008d08:	2b24      	cmp	r3, #36	; 0x24
 8008d0a:	d906      	bls.n	8008d1a <_strtol_l.isra.0+0x1a>
 8008d0c:	f7fe f886 	bl	8006e1c <__errno>
 8008d10:	2316      	movs	r3, #22
 8008d12:	6003      	str	r3, [r0, #0]
 8008d14:	2000      	movs	r0, #0
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	4f3a      	ldr	r7, [pc, #232]	; (8008e04 <_strtol_l.isra.0+0x104>)
 8008d1c:	468e      	mov	lr, r1
 8008d1e:	4676      	mov	r6, lr
 8008d20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008d24:	5de5      	ldrb	r5, [r4, r7]
 8008d26:	f015 0508 	ands.w	r5, r5, #8
 8008d2a:	d1f8      	bne.n	8008d1e <_strtol_l.isra.0+0x1e>
 8008d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d2e:	d134      	bne.n	8008d9a <_strtol_l.isra.0+0x9a>
 8008d30:	f89e 4000 	ldrb.w	r4, [lr]
 8008d34:	f04f 0801 	mov.w	r8, #1
 8008d38:	f106 0e02 	add.w	lr, r6, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d05c      	beq.n	8008dfa <_strtol_l.isra.0+0xfa>
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d10c      	bne.n	8008d5e <_strtol_l.isra.0+0x5e>
 8008d44:	2c30      	cmp	r4, #48	; 0x30
 8008d46:	d10a      	bne.n	8008d5e <_strtol_l.isra.0+0x5e>
 8008d48:	f89e 4000 	ldrb.w	r4, [lr]
 8008d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d50:	2c58      	cmp	r4, #88	; 0x58
 8008d52:	d14d      	bne.n	8008df0 <_strtol_l.isra.0+0xf0>
 8008d54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f10e 0e02 	add.w	lr, lr, #2
 8008d5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008d62:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008d66:	2600      	movs	r6, #0
 8008d68:	fbbc f9f3 	udiv	r9, ip, r3
 8008d6c:	4635      	mov	r5, r6
 8008d6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008d76:	2f09      	cmp	r7, #9
 8008d78:	d818      	bhi.n	8008dac <_strtol_l.isra.0+0xac>
 8008d7a:	463c      	mov	r4, r7
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	dd24      	ble.n	8008dca <_strtol_l.isra.0+0xca>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	db1f      	blt.n	8008dc4 <_strtol_l.isra.0+0xc4>
 8008d84:	45a9      	cmp	r9, r5
 8008d86:	d31d      	bcc.n	8008dc4 <_strtol_l.isra.0+0xc4>
 8008d88:	d101      	bne.n	8008d8e <_strtol_l.isra.0+0x8e>
 8008d8a:	45a2      	cmp	sl, r4
 8008d8c:	db1a      	blt.n	8008dc4 <_strtol_l.isra.0+0xc4>
 8008d8e:	fb05 4503 	mla	r5, r5, r3, r4
 8008d92:	2601      	movs	r6, #1
 8008d94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008d98:	e7eb      	b.n	8008d72 <_strtol_l.isra.0+0x72>
 8008d9a:	2c2b      	cmp	r4, #43	; 0x2b
 8008d9c:	bf08      	it	eq
 8008d9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008da2:	46a8      	mov	r8, r5
 8008da4:	bf08      	it	eq
 8008da6:	f106 0e02 	addeq.w	lr, r6, #2
 8008daa:	e7c7      	b.n	8008d3c <_strtol_l.isra.0+0x3c>
 8008dac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008db0:	2f19      	cmp	r7, #25
 8008db2:	d801      	bhi.n	8008db8 <_strtol_l.isra.0+0xb8>
 8008db4:	3c37      	subs	r4, #55	; 0x37
 8008db6:	e7e1      	b.n	8008d7c <_strtol_l.isra.0+0x7c>
 8008db8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008dbc:	2f19      	cmp	r7, #25
 8008dbe:	d804      	bhi.n	8008dca <_strtol_l.isra.0+0xca>
 8008dc0:	3c57      	subs	r4, #87	; 0x57
 8008dc2:	e7db      	b.n	8008d7c <_strtol_l.isra.0+0x7c>
 8008dc4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008dc8:	e7e4      	b.n	8008d94 <_strtol_l.isra.0+0x94>
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	da05      	bge.n	8008dda <_strtol_l.isra.0+0xda>
 8008dce:	2322      	movs	r3, #34	; 0x22
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	4665      	mov	r5, ip
 8008dd4:	b942      	cbnz	r2, 8008de8 <_strtol_l.isra.0+0xe8>
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	e79d      	b.n	8008d16 <_strtol_l.isra.0+0x16>
 8008dda:	f1b8 0f00 	cmp.w	r8, #0
 8008dde:	d000      	beq.n	8008de2 <_strtol_l.isra.0+0xe2>
 8008de0:	426d      	negs	r5, r5
 8008de2:	2a00      	cmp	r2, #0
 8008de4:	d0f7      	beq.n	8008dd6 <_strtol_l.isra.0+0xd6>
 8008de6:	b10e      	cbz	r6, 8008dec <_strtol_l.isra.0+0xec>
 8008de8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008dec:	6011      	str	r1, [r2, #0]
 8008dee:	e7f2      	b.n	8008dd6 <_strtol_l.isra.0+0xd6>
 8008df0:	2430      	movs	r4, #48	; 0x30
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1b3      	bne.n	8008d5e <_strtol_l.isra.0+0x5e>
 8008df6:	2308      	movs	r3, #8
 8008df8:	e7b1      	b.n	8008d5e <_strtol_l.isra.0+0x5e>
 8008dfa:	2c30      	cmp	r4, #48	; 0x30
 8008dfc:	d0a4      	beq.n	8008d48 <_strtol_l.isra.0+0x48>
 8008dfe:	230a      	movs	r3, #10
 8008e00:	e7ad      	b.n	8008d5e <_strtol_l.isra.0+0x5e>
 8008e02:	bf00      	nop
 8008e04:	0800b909 	.word	0x0800b909

08008e08 <_strtol_r>:
 8008e08:	f7ff bf7a 	b.w	8008d00 <_strtol_l.isra.0>

08008e0c <_write_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d07      	ldr	r5, [pc, #28]	; (8008e2c <_write_r+0x20>)
 8008e10:	4604      	mov	r4, r0
 8008e12:	4608      	mov	r0, r1
 8008e14:	4611      	mov	r1, r2
 8008e16:	2200      	movs	r2, #0
 8008e18:	602a      	str	r2, [r5, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7f9 f991 	bl	8002142 <_write>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_write_r+0x1e>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_write_r+0x1e>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20004498 	.word	0x20004498

08008e30 <_close_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	; (8008e4c <_close_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f9 f99d 	bl	800217a <_close>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_close_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_close_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20004498 	.word	0x20004498

08008e50 <quorem>:
 8008e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	6903      	ldr	r3, [r0, #16]
 8008e56:	690c      	ldr	r4, [r1, #16]
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	f2c0 8081 	blt.w	8008f62 <quorem+0x112>
 8008e60:	3c01      	subs	r4, #1
 8008e62:	f101 0814 	add.w	r8, r1, #20
 8008e66:	f100 0514 	add.w	r5, r0, #20
 8008e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e88:	d331      	bcc.n	8008eee <quorem+0x9e>
 8008e8a:	f04f 0e00 	mov.w	lr, #0
 8008e8e:	4640      	mov	r0, r8
 8008e90:	46ac      	mov	ip, r5
 8008e92:	46f2      	mov	sl, lr
 8008e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e98:	b293      	uxth	r3, r2
 8008e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ea8:	0c12      	lsrs	r2, r2, #16
 8008eaa:	f8dc a000 	ldr.w	sl, [ip]
 8008eae:	fb06 e202 	mla	r2, r6, r2, lr
 8008eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8008eb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008eba:	fa1f fa82 	uxth.w	sl, r2
 8008ebe:	f8dc 2000 	ldr.w	r2, [ip]
 8008ec2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	4581      	cmp	r9, r0
 8008ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008eda:	d2db      	bcs.n	8008e94 <quorem+0x44>
 8008edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ee0:	b92b      	cbnz	r3, 8008eee <quorem+0x9e>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	429d      	cmp	r5, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	d32e      	bcc.n	8008f4a <quorem+0xfa>
 8008eec:	613c      	str	r4, [r7, #16]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f001 fd54 	bl	800a99c <__mcmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	db24      	blt.n	8008f42 <quorem+0xf2>
 8008ef8:	3601      	adds	r6, #1
 8008efa:	4628      	mov	r0, r5
 8008efc:	f04f 0c00 	mov.w	ip, #0
 8008f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f04:	f8d0 e000 	ldr.w	lr, [r0]
 8008f08:	b293      	uxth	r3, r2
 8008f0a:	ebac 0303 	sub.w	r3, ip, r3
 8008f0e:	0c12      	lsrs	r2, r2, #16
 8008f10:	fa13 f38e 	uxtah	r3, r3, lr
 8008f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f22:	45c1      	cmp	r9, r8
 8008f24:	f840 3b04 	str.w	r3, [r0], #4
 8008f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f2c:	d2e8      	bcs.n	8008f00 <quorem+0xb0>
 8008f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f36:	b922      	cbnz	r2, 8008f42 <quorem+0xf2>
 8008f38:	3b04      	subs	r3, #4
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	d30a      	bcc.n	8008f56 <quorem+0x106>
 8008f40:	613c      	str	r4, [r7, #16]
 8008f42:	4630      	mov	r0, r6
 8008f44:	b003      	add	sp, #12
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d1cc      	bne.n	8008eec <quorem+0x9c>
 8008f52:	3c01      	subs	r4, #1
 8008f54:	e7c7      	b.n	8008ee6 <quorem+0x96>
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1f0      	bne.n	8008f40 <quorem+0xf0>
 8008f5e:	3c01      	subs	r4, #1
 8008f60:	e7eb      	b.n	8008f3a <quorem+0xea>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7ee      	b.n	8008f44 <quorem+0xf4>
	...

08008f68 <_dtoa_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	ed2d 8b02 	vpush	{d8}
 8008f70:	ec57 6b10 	vmov	r6, r7, d0
 8008f74:	b095      	sub	sp, #84	; 0x54
 8008f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f82:	4604      	mov	r4, r0
 8008f84:	9209      	str	r2, [sp, #36]	; 0x24
 8008f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f88:	b975      	cbnz	r5, 8008fa8 <_dtoa_r+0x40>
 8008f8a:	2010      	movs	r0, #16
 8008f8c:	f7fe f866 	bl	800705c <malloc>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6260      	str	r0, [r4, #36]	; 0x24
 8008f94:	b920      	cbnz	r0, 8008fa0 <_dtoa_r+0x38>
 8008f96:	4bb2      	ldr	r3, [pc, #712]	; (8009260 <_dtoa_r+0x2f8>)
 8008f98:	21ea      	movs	r1, #234	; 0xea
 8008f9a:	48b2      	ldr	r0, [pc, #712]	; (8009264 <_dtoa_r+0x2fc>)
 8008f9c:	f002 f898 	bl	800b0d0 <__assert_func>
 8008fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fa4:	6005      	str	r5, [r0, #0]
 8008fa6:	60c5      	str	r5, [r0, #12]
 8008fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008faa:	6819      	ldr	r1, [r3, #0]
 8008fac:	b151      	cbz	r1, 8008fc4 <_dtoa_r+0x5c>
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	604a      	str	r2, [r1, #4]
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4093      	lsls	r3, r2
 8008fb6:	608b      	str	r3, [r1, #8]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 fa67 	bl	800a48c <_Bfree>
 8008fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	1e3b      	subs	r3, r7, #0
 8008fc6:	bfb9      	ittee	lt
 8008fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fcc:	9303      	strlt	r3, [sp, #12]
 8008fce:	2300      	movge	r3, #0
 8008fd0:	f8c8 3000 	strge.w	r3, [r8]
 8008fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008fd8:	4ba3      	ldr	r3, [pc, #652]	; (8009268 <_dtoa_r+0x300>)
 8008fda:	bfbc      	itt	lt
 8008fdc:	2201      	movlt	r2, #1
 8008fde:	f8c8 2000 	strlt.w	r2, [r8]
 8008fe2:	ea33 0309 	bics.w	r3, r3, r9
 8008fe6:	d11b      	bne.n	8009020 <_dtoa_r+0xb8>
 8008fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ff4:	4333      	orrs	r3, r6
 8008ff6:	f000 857a 	beq.w	8009aee <_dtoa_r+0xb86>
 8008ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ffc:	b963      	cbnz	r3, 8009018 <_dtoa_r+0xb0>
 8008ffe:	4b9b      	ldr	r3, [pc, #620]	; (800926c <_dtoa_r+0x304>)
 8009000:	e024      	b.n	800904c <_dtoa_r+0xe4>
 8009002:	4b9b      	ldr	r3, [pc, #620]	; (8009270 <_dtoa_r+0x308>)
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	9800      	ldr	r0, [sp, #0]
 800900e:	b015      	add	sp, #84	; 0x54
 8009010:	ecbd 8b02 	vpop	{d8}
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	4b94      	ldr	r3, [pc, #592]	; (800926c <_dtoa_r+0x304>)
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	3303      	adds	r3, #3
 800901e:	e7f3      	b.n	8009008 <_dtoa_r+0xa0>
 8009020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	ec51 0b17 	vmov	r0, r1, d7
 800902a:	2300      	movs	r3, #0
 800902c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009030:	f7f7 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009034:	4680      	mov	r8, r0
 8009036:	b158      	cbz	r0, 8009050 <_dtoa_r+0xe8>
 8009038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800903a:	2301      	movs	r3, #1
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8551 	beq.w	8009ae8 <_dtoa_r+0xb80>
 8009046:	488b      	ldr	r0, [pc, #556]	; (8009274 <_dtoa_r+0x30c>)
 8009048:	6018      	str	r0, [r3, #0]
 800904a:	1e43      	subs	r3, r0, #1
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	e7dd      	b.n	800900c <_dtoa_r+0xa4>
 8009050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009054:	aa12      	add	r2, sp, #72	; 0x48
 8009056:	a913      	add	r1, sp, #76	; 0x4c
 8009058:	4620      	mov	r0, r4
 800905a:	f001 fdbf 	bl	800abdc <__d2b>
 800905e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009062:	4683      	mov	fp, r0
 8009064:	2d00      	cmp	r5, #0
 8009066:	d07c      	beq.n	8009162 <_dtoa_r+0x1fa>
 8009068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800906e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800907a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800907e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009082:	4b7d      	ldr	r3, [pc, #500]	; (8009278 <_dtoa_r+0x310>)
 8009084:	2200      	movs	r2, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 f8fd 	bl	8000288 <__aeabi_dsub>
 800908e:	a36e      	add	r3, pc, #440	; (adr r3, 8009248 <_dtoa_r+0x2e0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	a36d      	add	r3, pc, #436	; (adr r3, 8009250 <_dtoa_r+0x2e8>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 f8f5 	bl	800028c <__adddf3>
 80090a2:	4606      	mov	r6, r0
 80090a4:	4628      	mov	r0, r5
 80090a6:	460f      	mov	r7, r1
 80090a8:	f7f7 fa3c 	bl	8000524 <__aeabi_i2d>
 80090ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009258 <_dtoa_r+0x2f0>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	4606      	mov	r6, r0
 80090c4:	460f      	mov	r7, r1
 80090c6:	f7f7 fd47 	bl	8000b58 <__aeabi_d2iz>
 80090ca:	2200      	movs	r2, #0
 80090cc:	4682      	mov	sl, r0
 80090ce:	2300      	movs	r3, #0
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 fd02 	bl	8000adc <__aeabi_dcmplt>
 80090d8:	b148      	cbz	r0, 80090ee <_dtoa_r+0x186>
 80090da:	4650      	mov	r0, sl
 80090dc:	f7f7 fa22 	bl	8000524 <__aeabi_i2d>
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	f7f7 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e8:	b908      	cbnz	r0, 80090ee <_dtoa_r+0x186>
 80090ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090ee:	f1ba 0f16 	cmp.w	sl, #22
 80090f2:	d854      	bhi.n	800919e <_dtoa_r+0x236>
 80090f4:	4b61      	ldr	r3, [pc, #388]	; (800927c <_dtoa_r+0x314>)
 80090f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009102:	f7f7 fceb 	bl	8000adc <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d04b      	beq.n	80091a2 <_dtoa_r+0x23a>
 800910a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800910e:	2300      	movs	r3, #0
 8009110:	930e      	str	r3, [sp, #56]	; 0x38
 8009112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009114:	1b5d      	subs	r5, r3, r5
 8009116:	1e6b      	subs	r3, r5, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	bf43      	ittte	mi
 800911c:	2300      	movmi	r3, #0
 800911e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009122:	9304      	strmi	r3, [sp, #16]
 8009124:	f04f 0800 	movpl.w	r8, #0
 8009128:	f1ba 0f00 	cmp.w	sl, #0
 800912c:	db3b      	blt.n	80091a6 <_dtoa_r+0x23e>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009134:	4453      	add	r3, sl
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	2b09      	cmp	r3, #9
 8009140:	d869      	bhi.n	8009216 <_dtoa_r+0x2ae>
 8009142:	2b05      	cmp	r3, #5
 8009144:	bfc4      	itt	gt
 8009146:	3b04      	subgt	r3, #4
 8009148:	9305      	strgt	r3, [sp, #20]
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	f1a3 0302 	sub.w	r3, r3, #2
 8009150:	bfcc      	ite	gt
 8009152:	2500      	movgt	r5, #0
 8009154:	2501      	movle	r5, #1
 8009156:	2b03      	cmp	r3, #3
 8009158:	d869      	bhi.n	800922e <_dtoa_r+0x2c6>
 800915a:	e8df f003 	tbb	[pc, r3]
 800915e:	4e2c      	.short	0x4e2c
 8009160:	5a4c      	.short	0x5a4c
 8009162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009166:	441d      	add	r5, r3
 8009168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800916c:	2b20      	cmp	r3, #32
 800916e:	bfc1      	itttt	gt
 8009170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009178:	fa09 f303 	lslgt.w	r3, r9, r3
 800917c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009180:	bfda      	itte	le
 8009182:	f1c3 0320 	rsble	r3, r3, #32
 8009186:	fa06 f003 	lslle.w	r0, r6, r3
 800918a:	4318      	orrgt	r0, r3
 800918c:	f7f7 f9ba 	bl	8000504 <__aeabi_ui2d>
 8009190:	2301      	movs	r3, #1
 8009192:	4606      	mov	r6, r0
 8009194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009198:	3d01      	subs	r5, #1
 800919a:	9310      	str	r3, [sp, #64]	; 0x40
 800919c:	e771      	b.n	8009082 <_dtoa_r+0x11a>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7b6      	b.n	8009110 <_dtoa_r+0x1a8>
 80091a2:	900e      	str	r0, [sp, #56]	; 0x38
 80091a4:	e7b5      	b.n	8009112 <_dtoa_r+0x1aa>
 80091a6:	f1ca 0300 	rsb	r3, sl, #0
 80091aa:	9306      	str	r3, [sp, #24]
 80091ac:	2300      	movs	r3, #0
 80091ae:	eba8 080a 	sub.w	r8, r8, sl
 80091b2:	930d      	str	r3, [sp, #52]	; 0x34
 80091b4:	e7c2      	b.n	800913c <_dtoa_r+0x1d4>
 80091b6:	2300      	movs	r3, #0
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dc39      	bgt.n	8009234 <_dtoa_r+0x2cc>
 80091c0:	f04f 0901 	mov.w	r9, #1
 80091c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80091c8:	464b      	mov	r3, r9
 80091ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80091ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091d0:	2200      	movs	r2, #0
 80091d2:	6042      	str	r2, [r0, #4]
 80091d4:	2204      	movs	r2, #4
 80091d6:	f102 0614 	add.w	r6, r2, #20
 80091da:	429e      	cmp	r6, r3
 80091dc:	6841      	ldr	r1, [r0, #4]
 80091de:	d92f      	bls.n	8009240 <_dtoa_r+0x2d8>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 f913 	bl	800a40c <_Balloc>
 80091e6:	9000      	str	r0, [sp, #0]
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d14b      	bne.n	8009284 <_dtoa_r+0x31c>
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <_dtoa_r+0x318>)
 80091ee:	4602      	mov	r2, r0
 80091f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091f4:	e6d1      	b.n	8008f9a <_dtoa_r+0x32>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e7de      	b.n	80091b8 <_dtoa_r+0x250>
 80091fa:	2300      	movs	r3, #0
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	eb0a 0903 	add.w	r9, sl, r3
 8009204:	f109 0301 	add.w	r3, r9, #1
 8009208:	2b01      	cmp	r3, #1
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	bfb8      	it	lt
 800920e:	2301      	movlt	r3, #1
 8009210:	e7dd      	b.n	80091ce <_dtoa_r+0x266>
 8009212:	2301      	movs	r3, #1
 8009214:	e7f2      	b.n	80091fc <_dtoa_r+0x294>
 8009216:	2501      	movs	r5, #1
 8009218:	2300      	movs	r3, #0
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	9508      	str	r5, [sp, #32]
 800921e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009222:	2200      	movs	r2, #0
 8009224:	f8cd 9004 	str.w	r9, [sp, #4]
 8009228:	2312      	movs	r3, #18
 800922a:	9209      	str	r2, [sp, #36]	; 0x24
 800922c:	e7cf      	b.n	80091ce <_dtoa_r+0x266>
 800922e:	2301      	movs	r3, #1
 8009230:	9308      	str	r3, [sp, #32]
 8009232:	e7f4      	b.n	800921e <_dtoa_r+0x2b6>
 8009234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009238:	f8cd 9004 	str.w	r9, [sp, #4]
 800923c:	464b      	mov	r3, r9
 800923e:	e7c6      	b.n	80091ce <_dtoa_r+0x266>
 8009240:	3101      	adds	r1, #1
 8009242:	6041      	str	r1, [r0, #4]
 8009244:	0052      	lsls	r2, r2, #1
 8009246:	e7c6      	b.n	80091d6 <_dtoa_r+0x26e>
 8009248:	636f4361 	.word	0x636f4361
 800924c:	3fd287a7 	.word	0x3fd287a7
 8009250:	8b60c8b3 	.word	0x8b60c8b3
 8009254:	3fc68a28 	.word	0x3fc68a28
 8009258:	509f79fb 	.word	0x509f79fb
 800925c:	3fd34413 	.word	0x3fd34413
 8009260:	0800ba16 	.word	0x0800ba16
 8009264:	0800ba2d 	.word	0x0800ba2d
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	0800ba12 	.word	0x0800ba12
 8009270:	0800ba09 	.word	0x0800ba09
 8009274:	0800b88d 	.word	0x0800b88d
 8009278:	3ff80000 	.word	0x3ff80000
 800927c:	0800bba8 	.word	0x0800bba8
 8009280:	0800ba8c 	.word	0x0800ba8c
 8009284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009286:	9a00      	ldr	r2, [sp, #0]
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	2b0e      	cmp	r3, #14
 800928e:	f200 80ad 	bhi.w	80093ec <_dtoa_r+0x484>
 8009292:	2d00      	cmp	r5, #0
 8009294:	f000 80aa 	beq.w	80093ec <_dtoa_r+0x484>
 8009298:	f1ba 0f00 	cmp.w	sl, #0
 800929c:	dd36      	ble.n	800930c <_dtoa_r+0x3a4>
 800929e:	4ac3      	ldr	r2, [pc, #780]	; (80095ac <_dtoa_r+0x644>)
 80092a0:	f00a 030f 	and.w	r3, sl, #15
 80092a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092a8:	ed93 7b00 	vldr	d7, [r3]
 80092ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80092b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80092b4:	eeb0 8a47 	vmov.f32	s16, s14
 80092b8:	eef0 8a67 	vmov.f32	s17, s15
 80092bc:	d016      	beq.n	80092ec <_dtoa_r+0x384>
 80092be:	4bbc      	ldr	r3, [pc, #752]	; (80095b0 <_dtoa_r+0x648>)
 80092c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092c8:	f7f7 fac0 	bl	800084c <__aeabi_ddiv>
 80092cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d0:	f007 070f 	and.w	r7, r7, #15
 80092d4:	2503      	movs	r5, #3
 80092d6:	4eb6      	ldr	r6, [pc, #728]	; (80095b0 <_dtoa_r+0x648>)
 80092d8:	b957      	cbnz	r7, 80092f0 <_dtoa_r+0x388>
 80092da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092de:	ec53 2b18 	vmov	r2, r3, d8
 80092e2:	f7f7 fab3 	bl	800084c <__aeabi_ddiv>
 80092e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ea:	e029      	b.n	8009340 <_dtoa_r+0x3d8>
 80092ec:	2502      	movs	r5, #2
 80092ee:	e7f2      	b.n	80092d6 <_dtoa_r+0x36e>
 80092f0:	07f9      	lsls	r1, r7, #31
 80092f2:	d508      	bpl.n	8009306 <_dtoa_r+0x39e>
 80092f4:	ec51 0b18 	vmov	r0, r1, d8
 80092f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	ec41 0b18 	vmov	d8, r0, r1
 8009304:	3501      	adds	r5, #1
 8009306:	107f      	asrs	r7, r7, #1
 8009308:	3608      	adds	r6, #8
 800930a:	e7e5      	b.n	80092d8 <_dtoa_r+0x370>
 800930c:	f000 80a6 	beq.w	800945c <_dtoa_r+0x4f4>
 8009310:	f1ca 0600 	rsb	r6, sl, #0
 8009314:	4ba5      	ldr	r3, [pc, #660]	; (80095ac <_dtoa_r+0x644>)
 8009316:	4fa6      	ldr	r7, [pc, #664]	; (80095b0 <_dtoa_r+0x648>)
 8009318:	f006 020f 	and.w	r2, r6, #15
 800931c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009330:	1136      	asrs	r6, r6, #4
 8009332:	2300      	movs	r3, #0
 8009334:	2502      	movs	r5, #2
 8009336:	2e00      	cmp	r6, #0
 8009338:	f040 8085 	bne.w	8009446 <_dtoa_r+0x4de>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1d2      	bne.n	80092e6 <_dtoa_r+0x37e>
 8009340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 808c 	beq.w	8009460 <_dtoa_r+0x4f8>
 8009348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800934c:	4b99      	ldr	r3, [pc, #612]	; (80095b4 <_dtoa_r+0x64c>)
 800934e:	2200      	movs	r2, #0
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8009358:	2800      	cmp	r0, #0
 800935a:	f000 8081 	beq.w	8009460 <_dtoa_r+0x4f8>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d07d      	beq.n	8009460 <_dtoa_r+0x4f8>
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	dd3c      	ble.n	80093e4 <_dtoa_r+0x47c>
 800936a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	4b91      	ldr	r3, [pc, #580]	; (80095b8 <_dtoa_r+0x650>)
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009380:	3501      	adds	r5, #1
 8009382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800938a:	4628      	mov	r0, r5
 800938c:	f7f7 f8ca 	bl	8000524 <__aeabi_i2d>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4b88      	ldr	r3, [pc, #544]	; (80095bc <_dtoa_r+0x654>)
 800939a:	2200      	movs	r2, #0
 800939c:	f7f6 ff76 	bl	800028c <__adddf3>
 80093a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d15c      	bne.n	800946a <_dtoa_r+0x502>
 80093b0:	4b83      	ldr	r3, [pc, #524]	; (80095c0 <_dtoa_r+0x658>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4630      	mov	r0, r6
 80093b6:	4639      	mov	r1, r7
 80093b8:	f7f6 ff66 	bl	8000288 <__aeabi_dsub>
 80093bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	f7f7 fba8 	bl	8000b18 <__aeabi_dcmpgt>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f040 8296 	bne.w	80098fa <_dtoa_r+0x992>
 80093ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093d2:	4630      	mov	r0, r6
 80093d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093d8:	4639      	mov	r1, r7
 80093da:	f7f7 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f040 8288 	bne.w	80098f4 <_dtoa_r+0x98c>
 80093e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f2c0 8158 	blt.w	80096a4 <_dtoa_r+0x73c>
 80093f4:	f1ba 0f0e 	cmp.w	sl, #14
 80093f8:	f300 8154 	bgt.w	80096a4 <_dtoa_r+0x73c>
 80093fc:	4b6b      	ldr	r3, [pc, #428]	; (80095ac <_dtoa_r+0x644>)
 80093fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	f280 80e3 	bge.w	80095d4 <_dtoa_r+0x66c>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f300 80df 	bgt.w	80095d4 <_dtoa_r+0x66c>
 8009416:	f040 826d 	bne.w	80098f4 <_dtoa_r+0x98c>
 800941a:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <_dtoa_r+0x658>)
 800941c:	2200      	movs	r2, #0
 800941e:	4640      	mov	r0, r8
 8009420:	4649      	mov	r1, r9
 8009422:	f7f7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8009426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942a:	f7f7 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800942e:	9e01      	ldr	r6, [sp, #4]
 8009430:	4637      	mov	r7, r6
 8009432:	2800      	cmp	r0, #0
 8009434:	f040 8243 	bne.w	80098be <_dtoa_r+0x956>
 8009438:	9d00      	ldr	r5, [sp, #0]
 800943a:	2331      	movs	r3, #49	; 0x31
 800943c:	f805 3b01 	strb.w	r3, [r5], #1
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	e23f      	b.n	80098c6 <_dtoa_r+0x95e>
 8009446:	07f2      	lsls	r2, r6, #31
 8009448:	d505      	bpl.n	8009456 <_dtoa_r+0x4ee>
 800944a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	3501      	adds	r5, #1
 8009454:	2301      	movs	r3, #1
 8009456:	1076      	asrs	r6, r6, #1
 8009458:	3708      	adds	r7, #8
 800945a:	e76c      	b.n	8009336 <_dtoa_r+0x3ce>
 800945c:	2502      	movs	r5, #2
 800945e:	e76f      	b.n	8009340 <_dtoa_r+0x3d8>
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	f8cd a01c 	str.w	sl, [sp, #28]
 8009466:	930c      	str	r3, [sp, #48]	; 0x30
 8009468:	e78d      	b.n	8009386 <_dtoa_r+0x41e>
 800946a:	9900      	ldr	r1, [sp, #0]
 800946c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009470:	4b4e      	ldr	r3, [pc, #312]	; (80095ac <_dtoa_r+0x644>)
 8009472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009476:	4401      	add	r1, r0
 8009478:	9102      	str	r1, [sp, #8]
 800947a:	9908      	ldr	r1, [sp, #32]
 800947c:	eeb0 8a47 	vmov.f32	s16, s14
 8009480:	eef0 8a67 	vmov.f32	s17, s15
 8009484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800948c:	2900      	cmp	r1, #0
 800948e:	d045      	beq.n	800951c <_dtoa_r+0x5b4>
 8009490:	494c      	ldr	r1, [pc, #304]	; (80095c4 <_dtoa_r+0x65c>)
 8009492:	2000      	movs	r0, #0
 8009494:	f7f7 f9da 	bl	800084c <__aeabi_ddiv>
 8009498:	ec53 2b18 	vmov	r2, r3, d8
 800949c:	f7f6 fef4 	bl	8000288 <__aeabi_dsub>
 80094a0:	9d00      	ldr	r5, [sp, #0]
 80094a2:	ec41 0b18 	vmov	d8, r0, r1
 80094a6:	4639      	mov	r1, r7
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7f7 fb55 	bl	8000b58 <__aeabi_d2iz>
 80094ae:	900c      	str	r0, [sp, #48]	; 0x30
 80094b0:	f7f7 f838 	bl	8000524 <__aeabi_i2d>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f6 fee4 	bl	8000288 <__aeabi_dsub>
 80094c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c2:	3330      	adds	r3, #48	; 0x30
 80094c4:	f805 3b01 	strb.w	r3, [r5], #1
 80094c8:	ec53 2b18 	vmov	r2, r3, d8
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	f7f7 fb04 	bl	8000adc <__aeabi_dcmplt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d165      	bne.n	80095a4 <_dtoa_r+0x63c>
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4935      	ldr	r1, [pc, #212]	; (80095b4 <_dtoa_r+0x64c>)
 80094de:	2000      	movs	r0, #0
 80094e0:	f7f6 fed2 	bl	8000288 <__aeabi_dsub>
 80094e4:	ec53 2b18 	vmov	r2, r3, d8
 80094e8:	f7f7 faf8 	bl	8000adc <__aeabi_dcmplt>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f040 80b9 	bne.w	8009664 <_dtoa_r+0x6fc>
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	429d      	cmp	r5, r3
 80094f6:	f43f af75 	beq.w	80093e4 <_dtoa_r+0x47c>
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <_dtoa_r+0x650>)
 80094fc:	ec51 0b18 	vmov	r0, r1, d8
 8009500:	2200      	movs	r2, #0
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <_dtoa_r+0x650>)
 8009508:	ec41 0b18 	vmov	d8, r0, r1
 800950c:	2200      	movs	r2, #0
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	4606      	mov	r6, r0
 8009518:	460f      	mov	r7, r1
 800951a:	e7c4      	b.n	80094a6 <_dtoa_r+0x53e>
 800951c:	ec51 0b17 	vmov	r0, r1, d7
 8009520:	f7f7 f86a 	bl	80005f8 <__aeabi_dmul>
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	9d00      	ldr	r5, [sp, #0]
 8009528:	930c      	str	r3, [sp, #48]	; 0x30
 800952a:	ec41 0b18 	vmov	d8, r0, r1
 800952e:	4639      	mov	r1, r7
 8009530:	4630      	mov	r0, r6
 8009532:	f7f7 fb11 	bl	8000b58 <__aeabi_d2iz>
 8009536:	9011      	str	r0, [sp, #68]	; 0x44
 8009538:	f7f6 fff4 	bl	8000524 <__aeabi_i2d>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f6 fea0 	bl	8000288 <__aeabi_dsub>
 8009548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800954a:	3330      	adds	r3, #48	; 0x30
 800954c:	f805 3b01 	strb.w	r3, [r5], #1
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	429d      	cmp	r5, r3
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	d134      	bne.n	80095c8 <_dtoa_r+0x660>
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <_dtoa_r+0x65c>)
 8009560:	ec51 0b18 	vmov	r0, r1, d8
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8009574:	2800      	cmp	r0, #0
 8009576:	d175      	bne.n	8009664 <_dtoa_r+0x6fc>
 8009578:	ec53 2b18 	vmov	r2, r3, d8
 800957c:	4911      	ldr	r1, [pc, #68]	; (80095c4 <_dtoa_r+0x65c>)
 800957e:	2000      	movs	r0, #0
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f7 faa6 	bl	8000adc <__aeabi_dcmplt>
 8009590:	2800      	cmp	r0, #0
 8009592:	f43f af27 	beq.w	80093e4 <_dtoa_r+0x47c>
 8009596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009598:	1e6b      	subs	r3, r5, #1
 800959a:	930c      	str	r3, [sp, #48]	; 0x30
 800959c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095a0:	2b30      	cmp	r3, #48	; 0x30
 80095a2:	d0f8      	beq.n	8009596 <_dtoa_r+0x62e>
 80095a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095a8:	e04a      	b.n	8009640 <_dtoa_r+0x6d8>
 80095aa:	bf00      	nop
 80095ac:	0800bba8 	.word	0x0800bba8
 80095b0:	0800bb80 	.word	0x0800bb80
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	40240000 	.word	0x40240000
 80095bc:	401c0000 	.word	0x401c0000
 80095c0:	40140000 	.word	0x40140000
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	4baf      	ldr	r3, [pc, #700]	; (8009888 <_dtoa_r+0x920>)
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	e7ac      	b.n	800952e <_dtoa_r+0x5c6>
 80095d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095d8:	9d00      	ldr	r5, [sp, #0]
 80095da:	4642      	mov	r2, r8
 80095dc:	464b      	mov	r3, r9
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f7 f933 	bl	800084c <__aeabi_ddiv>
 80095e6:	f7f7 fab7 	bl	8000b58 <__aeabi_d2iz>
 80095ea:	9002      	str	r0, [sp, #8]
 80095ec:	f7f6 ff9a 	bl	8000524 <__aeabi_i2d>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f6 fe42 	bl	8000288 <__aeabi_dsub>
 8009604:	9e02      	ldr	r6, [sp, #8]
 8009606:	9f01      	ldr	r7, [sp, #4]
 8009608:	3630      	adds	r6, #48	; 0x30
 800960a:	f805 6b01 	strb.w	r6, [r5], #1
 800960e:	9e00      	ldr	r6, [sp, #0]
 8009610:	1bae      	subs	r6, r5, r6
 8009612:	42b7      	cmp	r7, r6
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	d137      	bne.n	800968a <_dtoa_r+0x722>
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4642      	mov	r2, r8
 8009620:	464b      	mov	r3, r9
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f7f7 fa77 	bl	8000b18 <__aeabi_dcmpgt>
 800962a:	b9c8      	cbnz	r0, 8009660 <_dtoa_r+0x6f8>
 800962c:	4642      	mov	r2, r8
 800962e:	464b      	mov	r3, r9
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f7 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009638:	b110      	cbz	r0, 8009640 <_dtoa_r+0x6d8>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	07d9      	lsls	r1, r3, #31
 800963e:	d40f      	bmi.n	8009660 <_dtoa_r+0x6f8>
 8009640:	4620      	mov	r0, r4
 8009642:	4659      	mov	r1, fp
 8009644:	f000 ff22 	bl	800a48c <_Bfree>
 8009648:	2300      	movs	r3, #0
 800964a:	702b      	strb	r3, [r5, #0]
 800964c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964e:	f10a 0001 	add.w	r0, sl, #1
 8009652:	6018      	str	r0, [r3, #0]
 8009654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009656:	2b00      	cmp	r3, #0
 8009658:	f43f acd8 	beq.w	800900c <_dtoa_r+0xa4>
 800965c:	601d      	str	r5, [r3, #0]
 800965e:	e4d5      	b.n	800900c <_dtoa_r+0xa4>
 8009660:	f8cd a01c 	str.w	sl, [sp, #28]
 8009664:	462b      	mov	r3, r5
 8009666:	461d      	mov	r5, r3
 8009668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966c:	2a39      	cmp	r2, #57	; 0x39
 800966e:	d108      	bne.n	8009682 <_dtoa_r+0x71a>
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d1f7      	bne.n	8009666 <_dtoa_r+0x6fe>
 8009676:	9a07      	ldr	r2, [sp, #28]
 8009678:	9900      	ldr	r1, [sp, #0]
 800967a:	3201      	adds	r2, #1
 800967c:	9207      	str	r2, [sp, #28]
 800967e:	2230      	movs	r2, #48	; 0x30
 8009680:	700a      	strb	r2, [r1, #0]
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	3201      	adds	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e78c      	b.n	80095a4 <_dtoa_r+0x63c>
 800968a:	4b7f      	ldr	r3, [pc, #508]	; (8009888 <_dtoa_r+0x920>)
 800968c:	2200      	movs	r2, #0
 800968e:	f7f6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8009692:	2200      	movs	r2, #0
 8009694:	2300      	movs	r3, #0
 8009696:	4606      	mov	r6, r0
 8009698:	460f      	mov	r7, r1
 800969a:	f7f7 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d09b      	beq.n	80095da <_dtoa_r+0x672>
 80096a2:	e7cd      	b.n	8009640 <_dtoa_r+0x6d8>
 80096a4:	9a08      	ldr	r2, [sp, #32]
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	f000 80c4 	beq.w	8009834 <_dtoa_r+0x8cc>
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	2a01      	cmp	r2, #1
 80096b0:	f300 80a8 	bgt.w	8009804 <_dtoa_r+0x89c>
 80096b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	f000 80a0 	beq.w	80097fc <_dtoa_r+0x894>
 80096bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096c0:	9e06      	ldr	r6, [sp, #24]
 80096c2:	4645      	mov	r5, r8
 80096c4:	9a04      	ldr	r2, [sp, #16]
 80096c6:	2101      	movs	r1, #1
 80096c8:	441a      	add	r2, r3
 80096ca:	4620      	mov	r0, r4
 80096cc:	4498      	add	r8, r3
 80096ce:	9204      	str	r2, [sp, #16]
 80096d0:	f000 ffe2 	bl	800a698 <__i2b>
 80096d4:	4607      	mov	r7, r0
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	dd0b      	ble.n	80096f2 <_dtoa_r+0x78a>
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd08      	ble.n	80096f2 <_dtoa_r+0x78a>
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	bfa8      	it	ge
 80096e6:	462b      	movge	r3, r5
 80096e8:	eba8 0803 	sub.w	r8, r8, r3
 80096ec:	1aed      	subs	r5, r5, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	9b06      	ldr	r3, [sp, #24]
 80096f4:	b1fb      	cbz	r3, 8009736 <_dtoa_r+0x7ce>
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 809f 	beq.w	800983c <_dtoa_r+0x8d4>
 80096fe:	2e00      	cmp	r6, #0
 8009700:	dd11      	ble.n	8009726 <_dtoa_r+0x7be>
 8009702:	4639      	mov	r1, r7
 8009704:	4632      	mov	r2, r6
 8009706:	4620      	mov	r0, r4
 8009708:	f001 f882 	bl	800a810 <__pow5mult>
 800970c:	465a      	mov	r2, fp
 800970e:	4601      	mov	r1, r0
 8009710:	4607      	mov	r7, r0
 8009712:	4620      	mov	r0, r4
 8009714:	f000 ffd6 	bl	800a6c4 <__multiply>
 8009718:	4659      	mov	r1, fp
 800971a:	9007      	str	r0, [sp, #28]
 800971c:	4620      	mov	r0, r4
 800971e:	f000 feb5 	bl	800a48c <_Bfree>
 8009722:	9b07      	ldr	r3, [sp, #28]
 8009724:	469b      	mov	fp, r3
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	1b9a      	subs	r2, r3, r6
 800972a:	d004      	beq.n	8009736 <_dtoa_r+0x7ce>
 800972c:	4659      	mov	r1, fp
 800972e:	4620      	mov	r0, r4
 8009730:	f001 f86e 	bl	800a810 <__pow5mult>
 8009734:	4683      	mov	fp, r0
 8009736:	2101      	movs	r1, #1
 8009738:	4620      	mov	r0, r4
 800973a:	f000 ffad 	bl	800a698 <__i2b>
 800973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009740:	2b00      	cmp	r3, #0
 8009742:	4606      	mov	r6, r0
 8009744:	dd7c      	ble.n	8009840 <_dtoa_r+0x8d8>
 8009746:	461a      	mov	r2, r3
 8009748:	4601      	mov	r1, r0
 800974a:	4620      	mov	r0, r4
 800974c:	f001 f860 	bl	800a810 <__pow5mult>
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	4606      	mov	r6, r0
 8009756:	dd76      	ble.n	8009846 <_dtoa_r+0x8de>
 8009758:	2300      	movs	r3, #0
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	6933      	ldr	r3, [r6, #16]
 800975e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009762:	6918      	ldr	r0, [r3, #16]
 8009764:	f000 ff48 	bl	800a5f8 <__hi0bits>
 8009768:	f1c0 0020 	rsb	r0, r0, #32
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	4418      	add	r0, r3
 8009770:	f010 001f 	ands.w	r0, r0, #31
 8009774:	f000 8086 	beq.w	8009884 <_dtoa_r+0x91c>
 8009778:	f1c0 0320 	rsb	r3, r0, #32
 800977c:	2b04      	cmp	r3, #4
 800977e:	dd7f      	ble.n	8009880 <_dtoa_r+0x918>
 8009780:	f1c0 001c 	rsb	r0, r0, #28
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	4403      	add	r3, r0
 8009788:	4480      	add	r8, r0
 800978a:	4405      	add	r5, r0
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	dd05      	ble.n	80097a0 <_dtoa_r+0x838>
 8009794:	4659      	mov	r1, fp
 8009796:	4642      	mov	r2, r8
 8009798:	4620      	mov	r0, r4
 800979a:	f001 f893 	bl	800a8c4 <__lshift>
 800979e:	4683      	mov	fp, r0
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd05      	ble.n	80097b2 <_dtoa_r+0x84a>
 80097a6:	4631      	mov	r1, r6
 80097a8:	461a      	mov	r2, r3
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 f88a 	bl	800a8c4 <__lshift>
 80097b0:	4606      	mov	r6, r0
 80097b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d069      	beq.n	800988c <_dtoa_r+0x924>
 80097b8:	4631      	mov	r1, r6
 80097ba:	4658      	mov	r0, fp
 80097bc:	f001 f8ee 	bl	800a99c <__mcmp>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	da63      	bge.n	800988c <_dtoa_r+0x924>
 80097c4:	2300      	movs	r3, #0
 80097c6:	4659      	mov	r1, fp
 80097c8:	220a      	movs	r2, #10
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fe80 	bl	800a4d0 <__multadd>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80097d6:	4683      	mov	fp, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 818f 	beq.w	8009afc <_dtoa_r+0xb94>
 80097de:	4639      	mov	r1, r7
 80097e0:	2300      	movs	r3, #0
 80097e2:	220a      	movs	r2, #10
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fe73 	bl	800a4d0 <__multadd>
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	4607      	mov	r7, r0
 80097f0:	f300 808e 	bgt.w	8009910 <_dtoa_r+0x9a8>
 80097f4:	9b05      	ldr	r3, [sp, #20]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	dc50      	bgt.n	800989c <_dtoa_r+0x934>
 80097fa:	e089      	b.n	8009910 <_dtoa_r+0x9a8>
 80097fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009802:	e75d      	b.n	80096c0 <_dtoa_r+0x758>
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	1e5e      	subs	r6, r3, #1
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	42b3      	cmp	r3, r6
 800980c:	bfbf      	itttt	lt
 800980e:	9b06      	ldrlt	r3, [sp, #24]
 8009810:	9606      	strlt	r6, [sp, #24]
 8009812:	1af2      	sublt	r2, r6, r3
 8009814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009816:	bfb6      	itet	lt
 8009818:	189b      	addlt	r3, r3, r2
 800981a:	1b9e      	subge	r6, r3, r6
 800981c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	bfb8      	it	lt
 8009822:	2600      	movlt	r6, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	bfb5      	itete	lt
 8009828:	eba8 0503 	sublt.w	r5, r8, r3
 800982c:	9b01      	ldrge	r3, [sp, #4]
 800982e:	2300      	movlt	r3, #0
 8009830:	4645      	movge	r5, r8
 8009832:	e747      	b.n	80096c4 <_dtoa_r+0x75c>
 8009834:	9e06      	ldr	r6, [sp, #24]
 8009836:	9f08      	ldr	r7, [sp, #32]
 8009838:	4645      	mov	r5, r8
 800983a:	e74c      	b.n	80096d6 <_dtoa_r+0x76e>
 800983c:	9a06      	ldr	r2, [sp, #24]
 800983e:	e775      	b.n	800972c <_dtoa_r+0x7c4>
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	2b01      	cmp	r3, #1
 8009844:	dc18      	bgt.n	8009878 <_dtoa_r+0x910>
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	b9b3      	cbnz	r3, 8009878 <_dtoa_r+0x910>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009850:	b9a3      	cbnz	r3, 800987c <_dtoa_r+0x914>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009858:	0d1b      	lsrs	r3, r3, #20
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	b12b      	cbz	r3, 800986a <_dtoa_r+0x902>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	f108 0801 	add.w	r8, r8, #1
 8009868:	2301      	movs	r3, #1
 800986a:	9306      	str	r3, [sp, #24]
 800986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800986e:	2b00      	cmp	r3, #0
 8009870:	f47f af74 	bne.w	800975c <_dtoa_r+0x7f4>
 8009874:	2001      	movs	r0, #1
 8009876:	e779      	b.n	800976c <_dtoa_r+0x804>
 8009878:	2300      	movs	r3, #0
 800987a:	e7f6      	b.n	800986a <_dtoa_r+0x902>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	e7f4      	b.n	800986a <_dtoa_r+0x902>
 8009880:	d085      	beq.n	800978e <_dtoa_r+0x826>
 8009882:	4618      	mov	r0, r3
 8009884:	301c      	adds	r0, #28
 8009886:	e77d      	b.n	8009784 <_dtoa_r+0x81c>
 8009888:	40240000 	.word	0x40240000
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	dc38      	bgt.n	8009904 <_dtoa_r+0x99c>
 8009892:	9b05      	ldr	r3, [sp, #20]
 8009894:	2b02      	cmp	r3, #2
 8009896:	dd35      	ble.n	8009904 <_dtoa_r+0x99c>
 8009898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800989c:	f1b9 0f00 	cmp.w	r9, #0
 80098a0:	d10d      	bne.n	80098be <_dtoa_r+0x956>
 80098a2:	4631      	mov	r1, r6
 80098a4:	464b      	mov	r3, r9
 80098a6:	2205      	movs	r2, #5
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fe11 	bl	800a4d0 <__multadd>
 80098ae:	4601      	mov	r1, r0
 80098b0:	4606      	mov	r6, r0
 80098b2:	4658      	mov	r0, fp
 80098b4:	f001 f872 	bl	800a99c <__mcmp>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f73f adbd 	bgt.w	8009438 <_dtoa_r+0x4d0>
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	9d00      	ldr	r5, [sp, #0]
 80098c2:	ea6f 0a03 	mvn.w	sl, r3
 80098c6:	f04f 0800 	mov.w	r8, #0
 80098ca:	4631      	mov	r1, r6
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fddd 	bl	800a48c <_Bfree>
 80098d2:	2f00      	cmp	r7, #0
 80098d4:	f43f aeb4 	beq.w	8009640 <_dtoa_r+0x6d8>
 80098d8:	f1b8 0f00 	cmp.w	r8, #0
 80098dc:	d005      	beq.n	80098ea <_dtoa_r+0x982>
 80098de:	45b8      	cmp	r8, r7
 80098e0:	d003      	beq.n	80098ea <_dtoa_r+0x982>
 80098e2:	4641      	mov	r1, r8
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fdd1 	bl	800a48c <_Bfree>
 80098ea:	4639      	mov	r1, r7
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fdcd 	bl	800a48c <_Bfree>
 80098f2:	e6a5      	b.n	8009640 <_dtoa_r+0x6d8>
 80098f4:	2600      	movs	r6, #0
 80098f6:	4637      	mov	r7, r6
 80098f8:	e7e1      	b.n	80098be <_dtoa_r+0x956>
 80098fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80098fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009900:	4637      	mov	r7, r6
 8009902:	e599      	b.n	8009438 <_dtoa_r+0x4d0>
 8009904:	9b08      	ldr	r3, [sp, #32]
 8009906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80fd 	beq.w	8009b0a <_dtoa_r+0xba2>
 8009910:	2d00      	cmp	r5, #0
 8009912:	dd05      	ble.n	8009920 <_dtoa_r+0x9b8>
 8009914:	4639      	mov	r1, r7
 8009916:	462a      	mov	r2, r5
 8009918:	4620      	mov	r0, r4
 800991a:	f000 ffd3 	bl	800a8c4 <__lshift>
 800991e:	4607      	mov	r7, r0
 8009920:	9b06      	ldr	r3, [sp, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d05c      	beq.n	80099e0 <_dtoa_r+0xa78>
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fd6f 	bl	800a40c <_Balloc>
 800992e:	4605      	mov	r5, r0
 8009930:	b928      	cbnz	r0, 800993e <_dtoa_r+0x9d6>
 8009932:	4b80      	ldr	r3, [pc, #512]	; (8009b34 <_dtoa_r+0xbcc>)
 8009934:	4602      	mov	r2, r0
 8009936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800993a:	f7ff bb2e 	b.w	8008f9a <_dtoa_r+0x32>
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	3202      	adds	r2, #2
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	f107 010c 	add.w	r1, r7, #12
 8009948:	300c      	adds	r0, #12
 800994a:	f7fd fb8f 	bl	800706c <memcpy>
 800994e:	2201      	movs	r2, #1
 8009950:	4629      	mov	r1, r5
 8009952:	4620      	mov	r0, r4
 8009954:	f000 ffb6 	bl	800a8c4 <__lshift>
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	3301      	adds	r3, #1
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	444b      	add	r3, r9
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	46b8      	mov	r8, r7
 800996c:	9306      	str	r3, [sp, #24]
 800996e:	4607      	mov	r7, r0
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	4631      	mov	r1, r6
 8009974:	3b01      	subs	r3, #1
 8009976:	4658      	mov	r0, fp
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	f7ff fa69 	bl	8008e50 <quorem>
 800997e:	4603      	mov	r3, r0
 8009980:	3330      	adds	r3, #48	; 0x30
 8009982:	9004      	str	r0, [sp, #16]
 8009984:	4641      	mov	r1, r8
 8009986:	4658      	mov	r0, fp
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	f001 f807 	bl	800a99c <__mcmp>
 800998e:	463a      	mov	r2, r7
 8009990:	4681      	mov	r9, r0
 8009992:	4631      	mov	r1, r6
 8009994:	4620      	mov	r0, r4
 8009996:	f001 f81d 	bl	800a9d4 <__mdiff>
 800999a:	68c2      	ldr	r2, [r0, #12]
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	4605      	mov	r5, r0
 80099a0:	bb02      	cbnz	r2, 80099e4 <_dtoa_r+0xa7c>
 80099a2:	4601      	mov	r1, r0
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fff9 	bl	800a99c <__mcmp>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	4602      	mov	r2, r0
 80099ae:	4629      	mov	r1, r5
 80099b0:	4620      	mov	r0, r4
 80099b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80099b6:	f000 fd69 	bl	800a48c <_Bfree>
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099be:	9d01      	ldr	r5, [sp, #4]
 80099c0:	ea43 0102 	orr.w	r1, r3, r2
 80099c4:	9b06      	ldr	r3, [sp, #24]
 80099c6:	430b      	orrs	r3, r1
 80099c8:	9b08      	ldr	r3, [sp, #32]
 80099ca:	d10d      	bne.n	80099e8 <_dtoa_r+0xa80>
 80099cc:	2b39      	cmp	r3, #57	; 0x39
 80099ce:	d029      	beq.n	8009a24 <_dtoa_r+0xabc>
 80099d0:	f1b9 0f00 	cmp.w	r9, #0
 80099d4:	dd01      	ble.n	80099da <_dtoa_r+0xa72>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3331      	adds	r3, #49	; 0x31
 80099da:	9a02      	ldr	r2, [sp, #8]
 80099dc:	7013      	strb	r3, [r2, #0]
 80099de:	e774      	b.n	80098ca <_dtoa_r+0x962>
 80099e0:	4638      	mov	r0, r7
 80099e2:	e7b9      	b.n	8009958 <_dtoa_r+0x9f0>
 80099e4:	2201      	movs	r2, #1
 80099e6:	e7e2      	b.n	80099ae <_dtoa_r+0xa46>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	db06      	blt.n	80099fc <_dtoa_r+0xa94>
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	ea41 0909 	orr.w	r9, r1, r9
 80099f4:	9906      	ldr	r1, [sp, #24]
 80099f6:	ea59 0101 	orrs.w	r1, r9, r1
 80099fa:	d120      	bne.n	8009a3e <_dtoa_r+0xad6>
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	ddec      	ble.n	80099da <_dtoa_r+0xa72>
 8009a00:	4659      	mov	r1, fp
 8009a02:	2201      	movs	r2, #1
 8009a04:	4620      	mov	r0, r4
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	f000 ff5c 	bl	800a8c4 <__lshift>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4683      	mov	fp, r0
 8009a10:	f000 ffc4 	bl	800a99c <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	dc02      	bgt.n	8009a20 <_dtoa_r+0xab8>
 8009a1a:	d1de      	bne.n	80099da <_dtoa_r+0xa72>
 8009a1c:	07da      	lsls	r2, r3, #31
 8009a1e:	d5dc      	bpl.n	80099da <_dtoa_r+0xa72>
 8009a20:	2b39      	cmp	r3, #57	; 0x39
 8009a22:	d1d8      	bne.n	80099d6 <_dtoa_r+0xa6e>
 8009a24:	9a02      	ldr	r2, [sp, #8]
 8009a26:	2339      	movs	r3, #57	; 0x39
 8009a28:	7013      	strb	r3, [r2, #0]
 8009a2a:	462b      	mov	r3, r5
 8009a2c:	461d      	mov	r5, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a34:	2a39      	cmp	r2, #57	; 0x39
 8009a36:	d050      	beq.n	8009ada <_dtoa_r+0xb72>
 8009a38:	3201      	adds	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e745      	b.n	80098ca <_dtoa_r+0x962>
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	dd03      	ble.n	8009a4a <_dtoa_r+0xae2>
 8009a42:	2b39      	cmp	r3, #57	; 0x39
 8009a44:	d0ee      	beq.n	8009a24 <_dtoa_r+0xabc>
 8009a46:	3301      	adds	r3, #1
 8009a48:	e7c7      	b.n	80099da <_dtoa_r+0xa72>
 8009a4a:	9a01      	ldr	r2, [sp, #4]
 8009a4c:	9907      	ldr	r1, [sp, #28]
 8009a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a52:	428a      	cmp	r2, r1
 8009a54:	d02a      	beq.n	8009aac <_dtoa_r+0xb44>
 8009a56:	4659      	mov	r1, fp
 8009a58:	2300      	movs	r3, #0
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fd37 	bl	800a4d0 <__multadd>
 8009a62:	45b8      	cmp	r8, r7
 8009a64:	4683      	mov	fp, r0
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	f04f 020a 	mov.w	r2, #10
 8009a6e:	4641      	mov	r1, r8
 8009a70:	4620      	mov	r0, r4
 8009a72:	d107      	bne.n	8009a84 <_dtoa_r+0xb1c>
 8009a74:	f000 fd2c 	bl	800a4d0 <__multadd>
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	e775      	b.n	8009970 <_dtoa_r+0xa08>
 8009a84:	f000 fd24 	bl	800a4d0 <__multadd>
 8009a88:	4639      	mov	r1, r7
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	220a      	movs	r2, #10
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fd1d 	bl	800a4d0 <__multadd>
 8009a96:	4607      	mov	r7, r0
 8009a98:	e7f0      	b.n	8009a7c <_dtoa_r+0xb14>
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	9a00      	ldr	r2, [sp, #0]
 8009aa0:	bfcc      	ite	gt
 8009aa2:	464d      	movgt	r5, r9
 8009aa4:	2501      	movle	r5, #1
 8009aa6:	4415      	add	r5, r2
 8009aa8:	f04f 0800 	mov.w	r8, #0
 8009aac:	4659      	mov	r1, fp
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f000 ff06 	bl	800a8c4 <__lshift>
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4683      	mov	fp, r0
 8009abc:	f000 ff6e 	bl	800a99c <__mcmp>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	dcb2      	bgt.n	8009a2a <_dtoa_r+0xac2>
 8009ac4:	d102      	bne.n	8009acc <_dtoa_r+0xb64>
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	07db      	lsls	r3, r3, #31
 8009aca:	d4ae      	bmi.n	8009a2a <_dtoa_r+0xac2>
 8009acc:	462b      	mov	r3, r5
 8009ace:	461d      	mov	r5, r3
 8009ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad4:	2a30      	cmp	r2, #48	; 0x30
 8009ad6:	d0fa      	beq.n	8009ace <_dtoa_r+0xb66>
 8009ad8:	e6f7      	b.n	80098ca <_dtoa_r+0x962>
 8009ada:	9a00      	ldr	r2, [sp, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d1a5      	bne.n	8009a2c <_dtoa_r+0xac4>
 8009ae0:	f10a 0a01 	add.w	sl, sl, #1
 8009ae4:	2331      	movs	r3, #49	; 0x31
 8009ae6:	e779      	b.n	80099dc <_dtoa_r+0xa74>
 8009ae8:	4b13      	ldr	r3, [pc, #76]	; (8009b38 <_dtoa_r+0xbd0>)
 8009aea:	f7ff baaf 	b.w	800904c <_dtoa_r+0xe4>
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f aa86 	bne.w	8009002 <_dtoa_r+0x9a>
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <_dtoa_r+0xbd4>)
 8009af8:	f7ff baa8 	b.w	800904c <_dtoa_r+0xe4>
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	dc03      	bgt.n	8009b0a <_dtoa_r+0xba2>
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	f73f aec9 	bgt.w	800989c <_dtoa_r+0x934>
 8009b0a:	9d00      	ldr	r5, [sp, #0]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4658      	mov	r0, fp
 8009b10:	f7ff f99e 	bl	8008e50 <quorem>
 8009b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b18:	f805 3b01 	strb.w	r3, [r5], #1
 8009b1c:	9a00      	ldr	r2, [sp, #0]
 8009b1e:	1aaa      	subs	r2, r5, r2
 8009b20:	4591      	cmp	r9, r2
 8009b22:	ddba      	ble.n	8009a9a <_dtoa_r+0xb32>
 8009b24:	4659      	mov	r1, fp
 8009b26:	2300      	movs	r3, #0
 8009b28:	220a      	movs	r2, #10
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 fcd0 	bl	800a4d0 <__multadd>
 8009b30:	4683      	mov	fp, r0
 8009b32:	e7eb      	b.n	8009b0c <_dtoa_r+0xba4>
 8009b34:	0800ba8c 	.word	0x0800ba8c
 8009b38:	0800b88c 	.word	0x0800b88c
 8009b3c:	0800ba09 	.word	0x0800ba09

08009b40 <__sflush_r>:
 8009b40:	898a      	ldrh	r2, [r1, #12]
 8009b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	0710      	lsls	r0, r2, #28
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	d458      	bmi.n	8009c00 <__sflush_r+0xc0>
 8009b4e:	684b      	ldr	r3, [r1, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dc05      	bgt.n	8009b60 <__sflush_r+0x20>
 8009b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dc02      	bgt.n	8009b60 <__sflush_r+0x20>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	d0f9      	beq.n	8009b5a <__sflush_r+0x1a>
 8009b66:	2300      	movs	r3, #0
 8009b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b6c:	682f      	ldr	r7, [r5, #0]
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	d032      	beq.n	8009bd8 <__sflush_r+0x98>
 8009b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	075a      	lsls	r2, r3, #29
 8009b78:	d505      	bpl.n	8009b86 <__sflush_r+0x46>
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	1ac0      	subs	r0, r0, r3
 8009b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b80:	b10b      	cbz	r3, 8009b86 <__sflush_r+0x46>
 8009b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b84:	1ac0      	subs	r0, r0, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	4602      	mov	r2, r0
 8009b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b8c:	6a21      	ldr	r1, [r4, #32]
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b0      	blx	r6
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	d106      	bne.n	8009ba6 <__sflush_r+0x66>
 8009b98:	6829      	ldr	r1, [r5, #0]
 8009b9a:	291d      	cmp	r1, #29
 8009b9c:	d82c      	bhi.n	8009bf8 <__sflush_r+0xb8>
 8009b9e:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <__sflush_r+0x108>)
 8009ba0:	40ca      	lsrs	r2, r1
 8009ba2:	07d6      	lsls	r6, r2, #31
 8009ba4:	d528      	bpl.n	8009bf8 <__sflush_r+0xb8>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6062      	str	r2, [r4, #4]
 8009baa:	04d9      	lsls	r1, r3, #19
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	6022      	str	r2, [r4, #0]
 8009bb0:	d504      	bpl.n	8009bbc <__sflush_r+0x7c>
 8009bb2:	1c42      	adds	r2, r0, #1
 8009bb4:	d101      	bne.n	8009bba <__sflush_r+0x7a>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b903      	cbnz	r3, 8009bbc <__sflush_r+0x7c>
 8009bba:	6560      	str	r0, [r4, #84]	; 0x54
 8009bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bbe:	602f      	str	r7, [r5, #0]
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d0ca      	beq.n	8009b5a <__sflush_r+0x1a>
 8009bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	d002      	beq.n	8009bd2 <__sflush_r+0x92>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f7fd fa63 	bl	8007098 <_free_r>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd6:	e7c1      	b.n	8009b5c <__sflush_r+0x1c>
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b0      	blx	r6
 8009be0:	1c41      	adds	r1, r0, #1
 8009be2:	d1c7      	bne.n	8009b74 <__sflush_r+0x34>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c4      	beq.n	8009b74 <__sflush_r+0x34>
 8009bea:	2b1d      	cmp	r3, #29
 8009bec:	d001      	beq.n	8009bf2 <__sflush_r+0xb2>
 8009bee:	2b16      	cmp	r3, #22
 8009bf0:	d101      	bne.n	8009bf6 <__sflush_r+0xb6>
 8009bf2:	602f      	str	r7, [r5, #0]
 8009bf4:	e7b1      	b.n	8009b5a <__sflush_r+0x1a>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	e7ad      	b.n	8009b5c <__sflush_r+0x1c>
 8009c00:	690f      	ldr	r7, [r1, #16]
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	d0a9      	beq.n	8009b5a <__sflush_r+0x1a>
 8009c06:	0793      	lsls	r3, r2, #30
 8009c08:	680e      	ldr	r6, [r1, #0]
 8009c0a:	bf08      	it	eq
 8009c0c:	694b      	ldreq	r3, [r1, #20]
 8009c0e:	600f      	str	r7, [r1, #0]
 8009c10:	bf18      	it	ne
 8009c12:	2300      	movne	r3, #0
 8009c14:	eba6 0807 	sub.w	r8, r6, r7
 8009c18:	608b      	str	r3, [r1, #8]
 8009c1a:	f1b8 0f00 	cmp.w	r8, #0
 8009c1e:	dd9c      	ble.n	8009b5a <__sflush_r+0x1a>
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c24:	4643      	mov	r3, r8
 8009c26:	463a      	mov	r2, r7
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b0      	blx	r6
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	dc06      	bgt.n	8009c3e <__sflush_r+0xfe>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c3c:	e78e      	b.n	8009b5c <__sflush_r+0x1c>
 8009c3e:	4407      	add	r7, r0
 8009c40:	eba8 0800 	sub.w	r8, r8, r0
 8009c44:	e7e9      	b.n	8009c1a <__sflush_r+0xda>
 8009c46:	bf00      	nop
 8009c48:	20400001 	.word	0x20400001

08009c4c <_fflush_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	690b      	ldr	r3, [r1, #16]
 8009c50:	4605      	mov	r5, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	b913      	cbnz	r3, 8009c5c <_fflush_r+0x10>
 8009c56:	2500      	movs	r5, #0
 8009c58:	4628      	mov	r0, r5
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	b118      	cbz	r0, 8009c66 <_fflush_r+0x1a>
 8009c5e:	6983      	ldr	r3, [r0, #24]
 8009c60:	b90b      	cbnz	r3, 8009c66 <_fflush_r+0x1a>
 8009c62:	f7fd f939 	bl	8006ed8 <__sinit>
 8009c66:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <_fflush_r+0x6c>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d11b      	bne.n	8009ca4 <_fflush_r+0x58>
 8009c6c:	686c      	ldr	r4, [r5, #4]
 8009c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0ef      	beq.n	8009c56 <_fflush_r+0xa>
 8009c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c78:	07d0      	lsls	r0, r2, #31
 8009c7a:	d404      	bmi.n	8009c86 <_fflush_r+0x3a>
 8009c7c:	0599      	lsls	r1, r3, #22
 8009c7e:	d402      	bmi.n	8009c86 <_fflush_r+0x3a>
 8009c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c82:	f7f8 fb90 	bl	80023a6 <__retarget_lock_acquire_recursive>
 8009c86:	4628      	mov	r0, r5
 8009c88:	4621      	mov	r1, r4
 8009c8a:	f7ff ff59 	bl	8009b40 <__sflush_r>
 8009c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c90:	07da      	lsls	r2, r3, #31
 8009c92:	4605      	mov	r5, r0
 8009c94:	d4e0      	bmi.n	8009c58 <_fflush_r+0xc>
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	059b      	lsls	r3, r3, #22
 8009c9a:	d4dd      	bmi.n	8009c58 <_fflush_r+0xc>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9e:	f7f8 fb96 	bl	80023ce <__retarget_lock_release_recursive>
 8009ca2:	e7d9      	b.n	8009c58 <_fflush_r+0xc>
 8009ca4:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <_fflush_r+0x70>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d101      	bne.n	8009cae <_fflush_r+0x62>
 8009caa:	68ac      	ldr	r4, [r5, #8]
 8009cac:	e7df      	b.n	8009c6e <_fflush_r+0x22>
 8009cae:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <_fflush_r+0x74>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	bf08      	it	eq
 8009cb4:	68ec      	ldreq	r4, [r5, #12]
 8009cb6:	e7da      	b.n	8009c6e <_fflush_r+0x22>
 8009cb8:	0800b838 	.word	0x0800b838
 8009cbc:	0800b858 	.word	0x0800b858
 8009cc0:	0800b818 	.word	0x0800b818

08009cc4 <rshift>:
 8009cc4:	6903      	ldr	r3, [r0, #16]
 8009cc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cd2:	f100 0414 	add.w	r4, r0, #20
 8009cd6:	dd45      	ble.n	8009d64 <rshift+0xa0>
 8009cd8:	f011 011f 	ands.w	r1, r1, #31
 8009cdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ce0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ce4:	d10c      	bne.n	8009d00 <rshift+0x3c>
 8009ce6:	f100 0710 	add.w	r7, r0, #16
 8009cea:	4629      	mov	r1, r5
 8009cec:	42b1      	cmp	r1, r6
 8009cee:	d334      	bcc.n	8009d5a <rshift+0x96>
 8009cf0:	1a9b      	subs	r3, r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	1eea      	subs	r2, r5, #3
 8009cf6:	4296      	cmp	r6, r2
 8009cf8:	bf38      	it	cc
 8009cfa:	2300      	movcc	r3, #0
 8009cfc:	4423      	add	r3, r4
 8009cfe:	e015      	b.n	8009d2c <rshift+0x68>
 8009d00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d04:	f1c1 0820 	rsb	r8, r1, #32
 8009d08:	40cf      	lsrs	r7, r1
 8009d0a:	f105 0e04 	add.w	lr, r5, #4
 8009d0e:	46a1      	mov	r9, r4
 8009d10:	4576      	cmp	r6, lr
 8009d12:	46f4      	mov	ip, lr
 8009d14:	d815      	bhi.n	8009d42 <rshift+0x7e>
 8009d16:	1a9b      	subs	r3, r3, r2
 8009d18:	009a      	lsls	r2, r3, #2
 8009d1a:	3a04      	subs	r2, #4
 8009d1c:	3501      	adds	r5, #1
 8009d1e:	42ae      	cmp	r6, r5
 8009d20:	bf38      	it	cc
 8009d22:	2200      	movcc	r2, #0
 8009d24:	18a3      	adds	r3, r4, r2
 8009d26:	50a7      	str	r7, [r4, r2]
 8009d28:	b107      	cbz	r7, 8009d2c <rshift+0x68>
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	1b1a      	subs	r2, r3, r4
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d34:	bf08      	it	eq
 8009d36:	2300      	moveq	r3, #0
 8009d38:	6102      	str	r2, [r0, #16]
 8009d3a:	bf08      	it	eq
 8009d3c:	6143      	streq	r3, [r0, #20]
 8009d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d42:	f8dc c000 	ldr.w	ip, [ip]
 8009d46:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d4a:	ea4c 0707 	orr.w	r7, ip, r7
 8009d4e:	f849 7b04 	str.w	r7, [r9], #4
 8009d52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d56:	40cf      	lsrs	r7, r1
 8009d58:	e7da      	b.n	8009d10 <rshift+0x4c>
 8009d5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d62:	e7c3      	b.n	8009cec <rshift+0x28>
 8009d64:	4623      	mov	r3, r4
 8009d66:	e7e1      	b.n	8009d2c <rshift+0x68>

08009d68 <__hexdig_fun>:
 8009d68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d6c:	2b09      	cmp	r3, #9
 8009d6e:	d802      	bhi.n	8009d76 <__hexdig_fun+0xe>
 8009d70:	3820      	subs	r0, #32
 8009d72:	b2c0      	uxtb	r0, r0
 8009d74:	4770      	bx	lr
 8009d76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	d801      	bhi.n	8009d82 <__hexdig_fun+0x1a>
 8009d7e:	3847      	subs	r0, #71	; 0x47
 8009d80:	e7f7      	b.n	8009d72 <__hexdig_fun+0xa>
 8009d82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d801      	bhi.n	8009d8e <__hexdig_fun+0x26>
 8009d8a:	3827      	subs	r0, #39	; 0x27
 8009d8c:	e7f1      	b.n	8009d72 <__hexdig_fun+0xa>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	4770      	bx	lr
	...

08009d94 <__gethex>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	ed2d 8b02 	vpush	{d8}
 8009d9c:	b089      	sub	sp, #36	; 0x24
 8009d9e:	ee08 0a10 	vmov	s16, r0
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	4bbc      	ldr	r3, [pc, #752]	; (800a098 <__gethex+0x304>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	4618      	mov	r0, r3
 8009dac:	468b      	mov	fp, r1
 8009dae:	4690      	mov	r8, r2
 8009db0:	f7f6 fa0e 	bl	80001d0 <strlen>
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	f8db 2000 	ldr.w	r2, [fp]
 8009dba:	4403      	add	r3, r0
 8009dbc:	4682      	mov	sl, r0
 8009dbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	1c93      	adds	r3, r2, #2
 8009dc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009dca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009dce:	32fe      	adds	r2, #254	; 0xfe
 8009dd0:	18d1      	adds	r1, r2, r3
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dd8:	9100      	str	r1, [sp, #0]
 8009dda:	2830      	cmp	r0, #48	; 0x30
 8009ddc:	d0f8      	beq.n	8009dd0 <__gethex+0x3c>
 8009dde:	f7ff ffc3 	bl	8009d68 <__hexdig_fun>
 8009de2:	4604      	mov	r4, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d13a      	bne.n	8009e5e <__gethex+0xca>
 8009de8:	9901      	ldr	r1, [sp, #4]
 8009dea:	4652      	mov	r2, sl
 8009dec:	4638      	mov	r0, r7
 8009dee:	f001 f94f 	bl	800b090 <strncmp>
 8009df2:	4605      	mov	r5, r0
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d168      	bne.n	8009eca <__gethex+0x136>
 8009df8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009dfc:	eb07 060a 	add.w	r6, r7, sl
 8009e00:	f7ff ffb2 	bl	8009d68 <__hexdig_fun>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d062      	beq.n	8009ece <__gethex+0x13a>
 8009e08:	4633      	mov	r3, r6
 8009e0a:	7818      	ldrb	r0, [r3, #0]
 8009e0c:	2830      	cmp	r0, #48	; 0x30
 8009e0e:	461f      	mov	r7, r3
 8009e10:	f103 0301 	add.w	r3, r3, #1
 8009e14:	d0f9      	beq.n	8009e0a <__gethex+0x76>
 8009e16:	f7ff ffa7 	bl	8009d68 <__hexdig_fun>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	fab0 f480 	clz	r4, r0
 8009e20:	0964      	lsrs	r4, r4, #5
 8009e22:	4635      	mov	r5, r6
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	463a      	mov	r2, r7
 8009e28:	4616      	mov	r6, r2
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	7830      	ldrb	r0, [r6, #0]
 8009e2e:	f7ff ff9b 	bl	8009d68 <__hexdig_fun>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d1f8      	bne.n	8009e28 <__gethex+0x94>
 8009e36:	9901      	ldr	r1, [sp, #4]
 8009e38:	4652      	mov	r2, sl
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f001 f928 	bl	800b090 <strncmp>
 8009e40:	b980      	cbnz	r0, 8009e64 <__gethex+0xd0>
 8009e42:	b94d      	cbnz	r5, 8009e58 <__gethex+0xc4>
 8009e44:	eb06 050a 	add.w	r5, r6, sl
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4616      	mov	r6, r2
 8009e4c:	3201      	adds	r2, #1
 8009e4e:	7830      	ldrb	r0, [r6, #0]
 8009e50:	f7ff ff8a 	bl	8009d68 <__hexdig_fun>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d1f8      	bne.n	8009e4a <__gethex+0xb6>
 8009e58:	1bad      	subs	r5, r5, r6
 8009e5a:	00ad      	lsls	r5, r5, #2
 8009e5c:	e004      	b.n	8009e68 <__gethex+0xd4>
 8009e5e:	2400      	movs	r4, #0
 8009e60:	4625      	mov	r5, r4
 8009e62:	e7e0      	b.n	8009e26 <__gethex+0x92>
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	d1f7      	bne.n	8009e58 <__gethex+0xc4>
 8009e68:	7833      	ldrb	r3, [r6, #0]
 8009e6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e6e:	2b50      	cmp	r3, #80	; 0x50
 8009e70:	d13b      	bne.n	8009eea <__gethex+0x156>
 8009e72:	7873      	ldrb	r3, [r6, #1]
 8009e74:	2b2b      	cmp	r3, #43	; 0x2b
 8009e76:	d02c      	beq.n	8009ed2 <__gethex+0x13e>
 8009e78:	2b2d      	cmp	r3, #45	; 0x2d
 8009e7a:	d02e      	beq.n	8009eda <__gethex+0x146>
 8009e7c:	1c71      	adds	r1, r6, #1
 8009e7e:	f04f 0900 	mov.w	r9, #0
 8009e82:	7808      	ldrb	r0, [r1, #0]
 8009e84:	f7ff ff70 	bl	8009d68 <__hexdig_fun>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b18      	cmp	r3, #24
 8009e8e:	d82c      	bhi.n	8009eea <__gethex+0x156>
 8009e90:	f1a0 0210 	sub.w	r2, r0, #16
 8009e94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e98:	f7ff ff66 	bl	8009d68 <__hexdig_fun>
 8009e9c:	1e43      	subs	r3, r0, #1
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b18      	cmp	r3, #24
 8009ea2:	d91d      	bls.n	8009ee0 <__gethex+0x14c>
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	d000      	beq.n	8009eac <__gethex+0x118>
 8009eaa:	4252      	negs	r2, r2
 8009eac:	4415      	add	r5, r2
 8009eae:	f8cb 1000 	str.w	r1, [fp]
 8009eb2:	b1e4      	cbz	r4, 8009eee <__gethex+0x15a>
 8009eb4:	9b00      	ldr	r3, [sp, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bf14      	ite	ne
 8009eba:	2700      	movne	r7, #0
 8009ebc:	2706      	moveq	r7, #6
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	b009      	add	sp, #36	; 0x24
 8009ec2:	ecbd 8b02 	vpop	{d8}
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	463e      	mov	r6, r7
 8009ecc:	4625      	mov	r5, r4
 8009ece:	2401      	movs	r4, #1
 8009ed0:	e7ca      	b.n	8009e68 <__gethex+0xd4>
 8009ed2:	f04f 0900 	mov.w	r9, #0
 8009ed6:	1cb1      	adds	r1, r6, #2
 8009ed8:	e7d3      	b.n	8009e82 <__gethex+0xee>
 8009eda:	f04f 0901 	mov.w	r9, #1
 8009ede:	e7fa      	b.n	8009ed6 <__gethex+0x142>
 8009ee0:	230a      	movs	r3, #10
 8009ee2:	fb03 0202 	mla	r2, r3, r2, r0
 8009ee6:	3a10      	subs	r2, #16
 8009ee8:	e7d4      	b.n	8009e94 <__gethex+0x100>
 8009eea:	4631      	mov	r1, r6
 8009eec:	e7df      	b.n	8009eae <__gethex+0x11a>
 8009eee:	1bf3      	subs	r3, r6, r7
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	2b07      	cmp	r3, #7
 8009ef6:	dc0b      	bgt.n	8009f10 <__gethex+0x17c>
 8009ef8:	ee18 0a10 	vmov	r0, s16
 8009efc:	f000 fa86 	bl	800a40c <_Balloc>
 8009f00:	4604      	mov	r4, r0
 8009f02:	b940      	cbnz	r0, 8009f16 <__gethex+0x182>
 8009f04:	4b65      	ldr	r3, [pc, #404]	; (800a09c <__gethex+0x308>)
 8009f06:	4602      	mov	r2, r0
 8009f08:	21de      	movs	r1, #222	; 0xde
 8009f0a:	4865      	ldr	r0, [pc, #404]	; (800a0a0 <__gethex+0x30c>)
 8009f0c:	f001 f8e0 	bl	800b0d0 <__assert_func>
 8009f10:	3101      	adds	r1, #1
 8009f12:	105b      	asrs	r3, r3, #1
 8009f14:	e7ee      	b.n	8009ef4 <__gethex+0x160>
 8009f16:	f100 0914 	add.w	r9, r0, #20
 8009f1a:	f04f 0b00 	mov.w	fp, #0
 8009f1e:	f1ca 0301 	rsb	r3, sl, #1
 8009f22:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f26:	f8cd b000 	str.w	fp, [sp]
 8009f2a:	9306      	str	r3, [sp, #24]
 8009f2c:	42b7      	cmp	r7, r6
 8009f2e:	d340      	bcc.n	8009fb2 <__gethex+0x21e>
 8009f30:	9802      	ldr	r0, [sp, #8]
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	f840 3b04 	str.w	r3, [r0], #4
 8009f38:	eba0 0009 	sub.w	r0, r0, r9
 8009f3c:	1080      	asrs	r0, r0, #2
 8009f3e:	0146      	lsls	r6, r0, #5
 8009f40:	6120      	str	r0, [r4, #16]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fb58 	bl	800a5f8 <__hi0bits>
 8009f48:	1a30      	subs	r0, r6, r0
 8009f4a:	f8d8 6000 	ldr.w	r6, [r8]
 8009f4e:	42b0      	cmp	r0, r6
 8009f50:	dd63      	ble.n	800a01a <__gethex+0x286>
 8009f52:	1b87      	subs	r7, r0, r6
 8009f54:	4639      	mov	r1, r7
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fef2 	bl	800ad40 <__any_on>
 8009f5c:	4682      	mov	sl, r0
 8009f5e:	b1a8      	cbz	r0, 8009f8c <__gethex+0x1f8>
 8009f60:	1e7b      	subs	r3, r7, #1
 8009f62:	1159      	asrs	r1, r3, #5
 8009f64:	f003 021f 	and.w	r2, r3, #31
 8009f68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f6c:	f04f 0a01 	mov.w	sl, #1
 8009f70:	fa0a f202 	lsl.w	r2, sl, r2
 8009f74:	420a      	tst	r2, r1
 8009f76:	d009      	beq.n	8009f8c <__gethex+0x1f8>
 8009f78:	4553      	cmp	r3, sl
 8009f7a:	dd05      	ble.n	8009f88 <__gethex+0x1f4>
 8009f7c:	1eb9      	subs	r1, r7, #2
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fede 	bl	800ad40 <__any_on>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d145      	bne.n	800a014 <__gethex+0x280>
 8009f88:	f04f 0a02 	mov.w	sl, #2
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff fe98 	bl	8009cc4 <rshift>
 8009f94:	443d      	add	r5, r7
 8009f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f9a:	42ab      	cmp	r3, r5
 8009f9c:	da4c      	bge.n	800a038 <__gethex+0x2a4>
 8009f9e:	ee18 0a10 	vmov	r0, s16
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f000 fa72 	bl	800a48c <_Bfree>
 8009fa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009faa:	2300      	movs	r3, #0
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	27a3      	movs	r7, #163	; 0xa3
 8009fb0:	e785      	b.n	8009ebe <__gethex+0x12a>
 8009fb2:	1e73      	subs	r3, r6, #1
 8009fb4:	9a05      	ldr	r2, [sp, #20]
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d019      	beq.n	8009ff4 <__gethex+0x260>
 8009fc0:	f1bb 0f20 	cmp.w	fp, #32
 8009fc4:	d107      	bne.n	8009fd6 <__gethex+0x242>
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	9a00      	ldr	r2, [sp, #0]
 8009fca:	f843 2b04 	str.w	r2, [r3], #4
 8009fce:	9302      	str	r3, [sp, #8]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	469b      	mov	fp, r3
 8009fd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fda:	f7ff fec5 	bl	8009d68 <__hexdig_fun>
 8009fde:	9b00      	ldr	r3, [sp, #0]
 8009fe0:	f000 000f 	and.w	r0, r0, #15
 8009fe4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fe8:	4303      	orrs	r3, r0
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	f10b 0b04 	add.w	fp, fp, #4
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	e00d      	b.n	800a010 <__gethex+0x27c>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	9a06      	ldr	r2, [sp, #24]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	42bb      	cmp	r3, r7
 8009ffc:	d3e0      	bcc.n	8009fc0 <__gethex+0x22c>
 8009ffe:	4618      	mov	r0, r3
 800a000:	9901      	ldr	r1, [sp, #4]
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	4652      	mov	r2, sl
 800a006:	f001 f843 	bl	800b090 <strncmp>
 800a00a:	9b07      	ldr	r3, [sp, #28]
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d1d7      	bne.n	8009fc0 <__gethex+0x22c>
 800a010:	461e      	mov	r6, r3
 800a012:	e78b      	b.n	8009f2c <__gethex+0x198>
 800a014:	f04f 0a03 	mov.w	sl, #3
 800a018:	e7b8      	b.n	8009f8c <__gethex+0x1f8>
 800a01a:	da0a      	bge.n	800a032 <__gethex+0x29e>
 800a01c:	1a37      	subs	r7, r6, r0
 800a01e:	4621      	mov	r1, r4
 800a020:	ee18 0a10 	vmov	r0, s16
 800a024:	463a      	mov	r2, r7
 800a026:	f000 fc4d 	bl	800a8c4 <__lshift>
 800a02a:	1bed      	subs	r5, r5, r7
 800a02c:	4604      	mov	r4, r0
 800a02e:	f100 0914 	add.w	r9, r0, #20
 800a032:	f04f 0a00 	mov.w	sl, #0
 800a036:	e7ae      	b.n	8009f96 <__gethex+0x202>
 800a038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a03c:	42a8      	cmp	r0, r5
 800a03e:	dd72      	ble.n	800a126 <__gethex+0x392>
 800a040:	1b45      	subs	r5, r0, r5
 800a042:	42ae      	cmp	r6, r5
 800a044:	dc36      	bgt.n	800a0b4 <__gethex+0x320>
 800a046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d02a      	beq.n	800a0a4 <__gethex+0x310>
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d02c      	beq.n	800a0ac <__gethex+0x318>
 800a052:	2b01      	cmp	r3, #1
 800a054:	d115      	bne.n	800a082 <__gethex+0x2ee>
 800a056:	42ae      	cmp	r6, r5
 800a058:	d113      	bne.n	800a082 <__gethex+0x2ee>
 800a05a:	2e01      	cmp	r6, #1
 800a05c:	d10b      	bne.n	800a076 <__gethex+0x2e2>
 800a05e:	9a04      	ldr	r2, [sp, #16]
 800a060:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	2301      	movs	r3, #1
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	f8c9 3000 	str.w	r3, [r9]
 800a06e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a070:	2762      	movs	r7, #98	; 0x62
 800a072:	601c      	str	r4, [r3, #0]
 800a074:	e723      	b.n	8009ebe <__gethex+0x12a>
 800a076:	1e71      	subs	r1, r6, #1
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 fe61 	bl	800ad40 <__any_on>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d1ed      	bne.n	800a05e <__gethex+0x2ca>
 800a082:	ee18 0a10 	vmov	r0, s16
 800a086:	4621      	mov	r1, r4
 800a088:	f000 fa00 	bl	800a48c <_Bfree>
 800a08c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a08e:	2300      	movs	r3, #0
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	2750      	movs	r7, #80	; 0x50
 800a094:	e713      	b.n	8009ebe <__gethex+0x12a>
 800a096:	bf00      	nop
 800a098:	0800bb08 	.word	0x0800bb08
 800a09c:	0800ba8c 	.word	0x0800ba8c
 800a0a0:	0800ba9d 	.word	0x0800ba9d
 800a0a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1eb      	bne.n	800a082 <__gethex+0x2ee>
 800a0aa:	e7d8      	b.n	800a05e <__gethex+0x2ca>
 800a0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1d5      	bne.n	800a05e <__gethex+0x2ca>
 800a0b2:	e7e6      	b.n	800a082 <__gethex+0x2ee>
 800a0b4:	1e6f      	subs	r7, r5, #1
 800a0b6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ba:	d131      	bne.n	800a120 <__gethex+0x38c>
 800a0bc:	b127      	cbz	r7, 800a0c8 <__gethex+0x334>
 800a0be:	4639      	mov	r1, r7
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fe3d 	bl	800ad40 <__any_on>
 800a0c6:	4682      	mov	sl, r0
 800a0c8:	117b      	asrs	r3, r7, #5
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a0d0:	f007 071f 	and.w	r7, r7, #31
 800a0d4:	fa01 f707 	lsl.w	r7, r1, r7
 800a0d8:	421f      	tst	r7, r3
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	bf18      	it	ne
 800a0e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0e4:	1b76      	subs	r6, r6, r5
 800a0e6:	f7ff fded 	bl	8009cc4 <rshift>
 800a0ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0ee:	2702      	movs	r7, #2
 800a0f0:	f1ba 0f00 	cmp.w	sl, #0
 800a0f4:	d048      	beq.n	800a188 <__gethex+0x3f4>
 800a0f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d015      	beq.n	800a12a <__gethex+0x396>
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d017      	beq.n	800a132 <__gethex+0x39e>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d109      	bne.n	800a11a <__gethex+0x386>
 800a106:	f01a 0f02 	tst.w	sl, #2
 800a10a:	d006      	beq.n	800a11a <__gethex+0x386>
 800a10c:	f8d9 0000 	ldr.w	r0, [r9]
 800a110:	ea4a 0a00 	orr.w	sl, sl, r0
 800a114:	f01a 0f01 	tst.w	sl, #1
 800a118:	d10e      	bne.n	800a138 <__gethex+0x3a4>
 800a11a:	f047 0710 	orr.w	r7, r7, #16
 800a11e:	e033      	b.n	800a188 <__gethex+0x3f4>
 800a120:	f04f 0a01 	mov.w	sl, #1
 800a124:	e7d0      	b.n	800a0c8 <__gethex+0x334>
 800a126:	2701      	movs	r7, #1
 800a128:	e7e2      	b.n	800a0f0 <__gethex+0x35c>
 800a12a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a12c:	f1c3 0301 	rsb	r3, r3, #1
 800a130:	9315      	str	r3, [sp, #84]	; 0x54
 800a132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0f0      	beq.n	800a11a <__gethex+0x386>
 800a138:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a13c:	f104 0314 	add.w	r3, r4, #20
 800a140:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a144:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a148:	f04f 0c00 	mov.w	ip, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a152:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a156:	d01c      	beq.n	800a192 <__gethex+0x3fe>
 800a158:	3201      	adds	r2, #1
 800a15a:	6002      	str	r2, [r0, #0]
 800a15c:	2f02      	cmp	r7, #2
 800a15e:	f104 0314 	add.w	r3, r4, #20
 800a162:	d13f      	bne.n	800a1e4 <__gethex+0x450>
 800a164:	f8d8 2000 	ldr.w	r2, [r8]
 800a168:	3a01      	subs	r2, #1
 800a16a:	42b2      	cmp	r2, r6
 800a16c:	d10a      	bne.n	800a184 <__gethex+0x3f0>
 800a16e:	1171      	asrs	r1, r6, #5
 800a170:	2201      	movs	r2, #1
 800a172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a176:	f006 061f 	and.w	r6, r6, #31
 800a17a:	fa02 f606 	lsl.w	r6, r2, r6
 800a17e:	421e      	tst	r6, r3
 800a180:	bf18      	it	ne
 800a182:	4617      	movne	r7, r2
 800a184:	f047 0720 	orr.w	r7, r7, #32
 800a188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a18a:	601c      	str	r4, [r3, #0]
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	601d      	str	r5, [r3, #0]
 800a190:	e695      	b.n	8009ebe <__gethex+0x12a>
 800a192:	4299      	cmp	r1, r3
 800a194:	f843 cc04 	str.w	ip, [r3, #-4]
 800a198:	d8d8      	bhi.n	800a14c <__gethex+0x3b8>
 800a19a:	68a3      	ldr	r3, [r4, #8]
 800a19c:	459b      	cmp	fp, r3
 800a19e:	db19      	blt.n	800a1d4 <__gethex+0x440>
 800a1a0:	6861      	ldr	r1, [r4, #4]
 800a1a2:	ee18 0a10 	vmov	r0, s16
 800a1a6:	3101      	adds	r1, #1
 800a1a8:	f000 f930 	bl	800a40c <_Balloc>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	b918      	cbnz	r0, 800a1b8 <__gethex+0x424>
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <__gethex+0x488>)
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	2184      	movs	r1, #132	; 0x84
 800a1b6:	e6a8      	b.n	8009f0a <__gethex+0x176>
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	3202      	adds	r2, #2
 800a1bc:	f104 010c 	add.w	r1, r4, #12
 800a1c0:	0092      	lsls	r2, r2, #2
 800a1c2:	300c      	adds	r0, #12
 800a1c4:	f7fc ff52 	bl	800706c <memcpy>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	ee18 0a10 	vmov	r0, s16
 800a1ce:	f000 f95d 	bl	800a48c <_Bfree>
 800a1d2:	464c      	mov	r4, r9
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1dc:	6122      	str	r2, [r4, #16]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	615a      	str	r2, [r3, #20]
 800a1e2:	e7bb      	b.n	800a15c <__gethex+0x3c8>
 800a1e4:	6922      	ldr	r2, [r4, #16]
 800a1e6:	455a      	cmp	r2, fp
 800a1e8:	dd0b      	ble.n	800a202 <__gethex+0x46e>
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff fd69 	bl	8009cc4 <rshift>
 800a1f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	f6ff aed0 	blt.w	8009f9e <__gethex+0x20a>
 800a1fe:	2701      	movs	r7, #1
 800a200:	e7c0      	b.n	800a184 <__gethex+0x3f0>
 800a202:	f016 061f 	ands.w	r6, r6, #31
 800a206:	d0fa      	beq.n	800a1fe <__gethex+0x46a>
 800a208:	449a      	add	sl, r3
 800a20a:	f1c6 0620 	rsb	r6, r6, #32
 800a20e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a212:	f000 f9f1 	bl	800a5f8 <__hi0bits>
 800a216:	42b0      	cmp	r0, r6
 800a218:	dbe7      	blt.n	800a1ea <__gethex+0x456>
 800a21a:	e7f0      	b.n	800a1fe <__gethex+0x46a>
 800a21c:	0800ba8c 	.word	0x0800ba8c

0800a220 <L_shift>:
 800a220:	f1c2 0208 	rsb	r2, r2, #8
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	b570      	push	{r4, r5, r6, lr}
 800a228:	f1c2 0620 	rsb	r6, r2, #32
 800a22c:	6843      	ldr	r3, [r0, #4]
 800a22e:	6804      	ldr	r4, [r0, #0]
 800a230:	fa03 f506 	lsl.w	r5, r3, r6
 800a234:	432c      	orrs	r4, r5
 800a236:	40d3      	lsrs	r3, r2
 800a238:	6004      	str	r4, [r0, #0]
 800a23a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a23e:	4288      	cmp	r0, r1
 800a240:	d3f4      	bcc.n	800a22c <L_shift+0xc>
 800a242:	bd70      	pop	{r4, r5, r6, pc}

0800a244 <__match>:
 800a244:	b530      	push	{r4, r5, lr}
 800a246:	6803      	ldr	r3, [r0, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24e:	b914      	cbnz	r4, 800a256 <__match+0x12>
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	bd30      	pop	{r4, r5, pc}
 800a256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a25a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a25e:	2d19      	cmp	r5, #25
 800a260:	bf98      	it	ls
 800a262:	3220      	addls	r2, #32
 800a264:	42a2      	cmp	r2, r4
 800a266:	d0f0      	beq.n	800a24a <__match+0x6>
 800a268:	2000      	movs	r0, #0
 800a26a:	e7f3      	b.n	800a254 <__match+0x10>

0800a26c <__hexnan>:
 800a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	680b      	ldr	r3, [r1, #0]
 800a272:	6801      	ldr	r1, [r0, #0]
 800a274:	115e      	asrs	r6, r3, #5
 800a276:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a27a:	f013 031f 	ands.w	r3, r3, #31
 800a27e:	b087      	sub	sp, #28
 800a280:	bf18      	it	ne
 800a282:	3604      	addne	r6, #4
 800a284:	2500      	movs	r5, #0
 800a286:	1f37      	subs	r7, r6, #4
 800a288:	4682      	mov	sl, r0
 800a28a:	4690      	mov	r8, r2
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a292:	46b9      	mov	r9, r7
 800a294:	463c      	mov	r4, r7
 800a296:	9502      	str	r5, [sp, #8]
 800a298:	46ab      	mov	fp, r5
 800a29a:	784a      	ldrb	r2, [r1, #1]
 800a29c:	1c4b      	adds	r3, r1, #1
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	b342      	cbz	r2, 800a2f4 <__hexnan+0x88>
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	9105      	str	r1, [sp, #20]
 800a2a6:	9204      	str	r2, [sp, #16]
 800a2a8:	f7ff fd5e 	bl	8009d68 <__hexdig_fun>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d14f      	bne.n	800a350 <__hexnan+0xe4>
 800a2b0:	9a04      	ldr	r2, [sp, #16]
 800a2b2:	9905      	ldr	r1, [sp, #20]
 800a2b4:	2a20      	cmp	r2, #32
 800a2b6:	d818      	bhi.n	800a2ea <__hexnan+0x7e>
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	459b      	cmp	fp, r3
 800a2bc:	dd13      	ble.n	800a2e6 <__hexnan+0x7a>
 800a2be:	454c      	cmp	r4, r9
 800a2c0:	d206      	bcs.n	800a2d0 <__hexnan+0x64>
 800a2c2:	2d07      	cmp	r5, #7
 800a2c4:	dc04      	bgt.n	800a2d0 <__hexnan+0x64>
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7ff ffa8 	bl	800a220 <L_shift>
 800a2d0:	4544      	cmp	r4, r8
 800a2d2:	d950      	bls.n	800a376 <__hexnan+0x10a>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a2da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2de:	f8cd b008 	str.w	fp, [sp, #8]
 800a2e2:	464c      	mov	r4, r9
 800a2e4:	461d      	mov	r5, r3
 800a2e6:	9903      	ldr	r1, [sp, #12]
 800a2e8:	e7d7      	b.n	800a29a <__hexnan+0x2e>
 800a2ea:	2a29      	cmp	r2, #41	; 0x29
 800a2ec:	d156      	bne.n	800a39c <__hexnan+0x130>
 800a2ee:	3102      	adds	r1, #2
 800a2f0:	f8ca 1000 	str.w	r1, [sl]
 800a2f4:	f1bb 0f00 	cmp.w	fp, #0
 800a2f8:	d050      	beq.n	800a39c <__hexnan+0x130>
 800a2fa:	454c      	cmp	r4, r9
 800a2fc:	d206      	bcs.n	800a30c <__hexnan+0xa0>
 800a2fe:	2d07      	cmp	r5, #7
 800a300:	dc04      	bgt.n	800a30c <__hexnan+0xa0>
 800a302:	462a      	mov	r2, r5
 800a304:	4649      	mov	r1, r9
 800a306:	4620      	mov	r0, r4
 800a308:	f7ff ff8a 	bl	800a220 <L_shift>
 800a30c:	4544      	cmp	r4, r8
 800a30e:	d934      	bls.n	800a37a <__hexnan+0x10e>
 800a310:	f1a8 0204 	sub.w	r2, r8, #4
 800a314:	4623      	mov	r3, r4
 800a316:	f853 1b04 	ldr.w	r1, [r3], #4
 800a31a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a31e:	429f      	cmp	r7, r3
 800a320:	d2f9      	bcs.n	800a316 <__hexnan+0xaa>
 800a322:	1b3b      	subs	r3, r7, r4
 800a324:	f023 0303 	bic.w	r3, r3, #3
 800a328:	3304      	adds	r3, #4
 800a32a:	3401      	adds	r4, #1
 800a32c:	3e03      	subs	r6, #3
 800a32e:	42b4      	cmp	r4, r6
 800a330:	bf88      	it	hi
 800a332:	2304      	movhi	r3, #4
 800a334:	4443      	add	r3, r8
 800a336:	2200      	movs	r2, #0
 800a338:	f843 2b04 	str.w	r2, [r3], #4
 800a33c:	429f      	cmp	r7, r3
 800a33e:	d2fb      	bcs.n	800a338 <__hexnan+0xcc>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	b91b      	cbnz	r3, 800a34c <__hexnan+0xe0>
 800a344:	4547      	cmp	r7, r8
 800a346:	d127      	bne.n	800a398 <__hexnan+0x12c>
 800a348:	2301      	movs	r3, #1
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	2005      	movs	r0, #5
 800a34e:	e026      	b.n	800a39e <__hexnan+0x132>
 800a350:	3501      	adds	r5, #1
 800a352:	2d08      	cmp	r5, #8
 800a354:	f10b 0b01 	add.w	fp, fp, #1
 800a358:	dd06      	ble.n	800a368 <__hexnan+0xfc>
 800a35a:	4544      	cmp	r4, r8
 800a35c:	d9c3      	bls.n	800a2e6 <__hexnan+0x7a>
 800a35e:	2300      	movs	r3, #0
 800a360:	f844 3c04 	str.w	r3, [r4, #-4]
 800a364:	2501      	movs	r5, #1
 800a366:	3c04      	subs	r4, #4
 800a368:	6822      	ldr	r2, [r4, #0]
 800a36a:	f000 000f 	and.w	r0, r0, #15
 800a36e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a372:	6022      	str	r2, [r4, #0]
 800a374:	e7b7      	b.n	800a2e6 <__hexnan+0x7a>
 800a376:	2508      	movs	r5, #8
 800a378:	e7b5      	b.n	800a2e6 <__hexnan+0x7a>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0df      	beq.n	800a340 <__hexnan+0xd4>
 800a380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a384:	f1c3 0320 	rsb	r3, r3, #32
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
 800a38c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a390:	401a      	ands	r2, r3
 800a392:	f846 2c04 	str.w	r2, [r6, #-4]
 800a396:	e7d3      	b.n	800a340 <__hexnan+0xd4>
 800a398:	3f04      	subs	r7, #4
 800a39a:	e7d1      	b.n	800a340 <__hexnan+0xd4>
 800a39c:	2004      	movs	r0, #4
 800a39e:	b007      	add	sp, #28
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a4 <_localeconv_r>:
 800a3a4:	4800      	ldr	r0, [pc, #0]	; (800a3a8 <_localeconv_r+0x4>)
 800a3a6:	4770      	bx	lr
 800a3a8:	20000168 	.word	0x20000168

0800a3ac <_lseek_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_lseek_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f7 ff04 	bl	80021c8 <_lseek>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_lseek_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_lseek_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20004498 	.word	0x20004498

0800a3d0 <__ascii_mbtowc>:
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	b901      	cbnz	r1, 800a3d6 <__ascii_mbtowc+0x6>
 800a3d4:	a901      	add	r1, sp, #4
 800a3d6:	b142      	cbz	r2, 800a3ea <__ascii_mbtowc+0x1a>
 800a3d8:	b14b      	cbz	r3, 800a3ee <__ascii_mbtowc+0x1e>
 800a3da:	7813      	ldrb	r3, [r2, #0]
 800a3dc:	600b      	str	r3, [r1, #0]
 800a3de:	7812      	ldrb	r2, [r2, #0]
 800a3e0:	1e10      	subs	r0, r2, #0
 800a3e2:	bf18      	it	ne
 800a3e4:	2001      	movne	r0, #1
 800a3e6:	b002      	add	sp, #8
 800a3e8:	4770      	bx	lr
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	e7fb      	b.n	800a3e6 <__ascii_mbtowc+0x16>
 800a3ee:	f06f 0001 	mvn.w	r0, #1
 800a3f2:	e7f8      	b.n	800a3e6 <__ascii_mbtowc+0x16>

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f7f7 bfd6 	b.w	80023a6 <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	20000520 	.word	0x20000520

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	; (800a408 <__malloc_unlock+0x8>)
 800a402:	f7f7 bfe4 	b.w	80023ce <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	20000520 	.word	0x20000520

0800a40c <_Balloc>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	b976      	cbnz	r6, 800a434 <_Balloc+0x28>
 800a416:	2010      	movs	r0, #16
 800a418:	f7fc fe20 	bl	800705c <malloc>
 800a41c:	4602      	mov	r2, r0
 800a41e:	6260      	str	r0, [r4, #36]	; 0x24
 800a420:	b920      	cbnz	r0, 800a42c <_Balloc+0x20>
 800a422:	4b18      	ldr	r3, [pc, #96]	; (800a484 <_Balloc+0x78>)
 800a424:	4818      	ldr	r0, [pc, #96]	; (800a488 <_Balloc+0x7c>)
 800a426:	2166      	movs	r1, #102	; 0x66
 800a428:	f000 fe52 	bl	800b0d0 <__assert_func>
 800a42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a430:	6006      	str	r6, [r0, #0]
 800a432:	60c6      	str	r6, [r0, #12]
 800a434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a436:	68f3      	ldr	r3, [r6, #12]
 800a438:	b183      	cbz	r3, 800a45c <_Balloc+0x50>
 800a43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a442:	b9b8      	cbnz	r0, 800a474 <_Balloc+0x68>
 800a444:	2101      	movs	r1, #1
 800a446:	fa01 f605 	lsl.w	r6, r1, r5
 800a44a:	1d72      	adds	r2, r6, #5
 800a44c:	0092      	lsls	r2, r2, #2
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 fc97 	bl	800ad82 <_calloc_r>
 800a454:	b160      	cbz	r0, 800a470 <_Balloc+0x64>
 800a456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a45a:	e00e      	b.n	800a47a <_Balloc+0x6e>
 800a45c:	2221      	movs	r2, #33	; 0x21
 800a45e:	2104      	movs	r1, #4
 800a460:	4620      	mov	r0, r4
 800a462:	f000 fc8e 	bl	800ad82 <_calloc_r>
 800a466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a468:	60f0      	str	r0, [r6, #12]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e4      	bne.n	800a43a <_Balloc+0x2e>
 800a470:	2000      	movs	r0, #0
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	6802      	ldr	r2, [r0, #0]
 800a476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a47a:	2300      	movs	r3, #0
 800a47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a480:	e7f7      	b.n	800a472 <_Balloc+0x66>
 800a482:	bf00      	nop
 800a484:	0800ba16 	.word	0x0800ba16
 800a488:	0800bb1c 	.word	0x0800bb1c

0800a48c <_Bfree>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a490:	4605      	mov	r5, r0
 800a492:	460c      	mov	r4, r1
 800a494:	b976      	cbnz	r6, 800a4b4 <_Bfree+0x28>
 800a496:	2010      	movs	r0, #16
 800a498:	f7fc fde0 	bl	800705c <malloc>
 800a49c:	4602      	mov	r2, r0
 800a49e:	6268      	str	r0, [r5, #36]	; 0x24
 800a4a0:	b920      	cbnz	r0, 800a4ac <_Bfree+0x20>
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <_Bfree+0x3c>)
 800a4a4:	4809      	ldr	r0, [pc, #36]	; (800a4cc <_Bfree+0x40>)
 800a4a6:	218a      	movs	r1, #138	; 0x8a
 800a4a8:	f000 fe12 	bl	800b0d0 <__assert_func>
 800a4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b0:	6006      	str	r6, [r0, #0]
 800a4b2:	60c6      	str	r6, [r0, #12]
 800a4b4:	b13c      	cbz	r4, 800a4c6 <_Bfree+0x3a>
 800a4b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4b8:	6862      	ldr	r2, [r4, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c0:	6021      	str	r1, [r4, #0]
 800a4c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	0800ba16 	.word	0x0800ba16
 800a4cc:	0800bb1c 	.word	0x0800bb1c

0800a4d0 <__multadd>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	690e      	ldr	r6, [r1, #16]
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	4698      	mov	r8, r3
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f101 0014 	add.w	r0, r1, #20
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6805      	ldr	r5, [r0, #0]
 800a4e4:	b2a9      	uxth	r1, r5
 800a4e6:	fb02 8101 	mla	r1, r2, r1, r8
 800a4ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a4ee:	0c2d      	lsrs	r5, r5, #16
 800a4f0:	fb02 c505 	mla	r5, r2, r5, ip
 800a4f4:	b289      	uxth	r1, r1
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a4fc:	429e      	cmp	r6, r3
 800a4fe:	f840 1b04 	str.w	r1, [r0], #4
 800a502:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a506:	dcec      	bgt.n	800a4e2 <__multadd+0x12>
 800a508:	f1b8 0f00 	cmp.w	r8, #0
 800a50c:	d022      	beq.n	800a554 <__multadd+0x84>
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	42b3      	cmp	r3, r6
 800a512:	dc19      	bgt.n	800a548 <__multadd+0x78>
 800a514:	6861      	ldr	r1, [r4, #4]
 800a516:	4638      	mov	r0, r7
 800a518:	3101      	adds	r1, #1
 800a51a:	f7ff ff77 	bl	800a40c <_Balloc>
 800a51e:	4605      	mov	r5, r0
 800a520:	b928      	cbnz	r0, 800a52e <__multadd+0x5e>
 800a522:	4602      	mov	r2, r0
 800a524:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <__multadd+0x8c>)
 800a526:	480e      	ldr	r0, [pc, #56]	; (800a560 <__multadd+0x90>)
 800a528:	21b5      	movs	r1, #181	; 0xb5
 800a52a:	f000 fdd1 	bl	800b0d0 <__assert_func>
 800a52e:	6922      	ldr	r2, [r4, #16]
 800a530:	3202      	adds	r2, #2
 800a532:	f104 010c 	add.w	r1, r4, #12
 800a536:	0092      	lsls	r2, r2, #2
 800a538:	300c      	adds	r0, #12
 800a53a:	f7fc fd97 	bl	800706c <memcpy>
 800a53e:	4621      	mov	r1, r4
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff ffa3 	bl	800a48c <_Bfree>
 800a546:	462c      	mov	r4, r5
 800a548:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a54c:	3601      	adds	r6, #1
 800a54e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a552:	6126      	str	r6, [r4, #16]
 800a554:	4620      	mov	r0, r4
 800a556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55a:	bf00      	nop
 800a55c:	0800ba8c 	.word	0x0800ba8c
 800a560:	0800bb1c 	.word	0x0800bb1c

0800a564 <__s2b>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	4615      	mov	r5, r2
 800a56c:	461f      	mov	r7, r3
 800a56e:	2209      	movs	r2, #9
 800a570:	3308      	adds	r3, #8
 800a572:	4606      	mov	r6, r0
 800a574:	fb93 f3f2 	sdiv	r3, r3, r2
 800a578:	2100      	movs	r1, #0
 800a57a:	2201      	movs	r2, #1
 800a57c:	429a      	cmp	r2, r3
 800a57e:	db09      	blt.n	800a594 <__s2b+0x30>
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff ff43 	bl	800a40c <_Balloc>
 800a586:	b940      	cbnz	r0, 800a59a <__s2b+0x36>
 800a588:	4602      	mov	r2, r0
 800a58a:	4b19      	ldr	r3, [pc, #100]	; (800a5f0 <__s2b+0x8c>)
 800a58c:	4819      	ldr	r0, [pc, #100]	; (800a5f4 <__s2b+0x90>)
 800a58e:	21ce      	movs	r1, #206	; 0xce
 800a590:	f000 fd9e 	bl	800b0d0 <__assert_func>
 800a594:	0052      	lsls	r2, r2, #1
 800a596:	3101      	adds	r1, #1
 800a598:	e7f0      	b.n	800a57c <__s2b+0x18>
 800a59a:	9b08      	ldr	r3, [sp, #32]
 800a59c:	6143      	str	r3, [r0, #20]
 800a59e:	2d09      	cmp	r5, #9
 800a5a0:	f04f 0301 	mov.w	r3, #1
 800a5a4:	6103      	str	r3, [r0, #16]
 800a5a6:	dd16      	ble.n	800a5d6 <__s2b+0x72>
 800a5a8:	f104 0909 	add.w	r9, r4, #9
 800a5ac:	46c8      	mov	r8, r9
 800a5ae:	442c      	add	r4, r5
 800a5b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	3b30      	subs	r3, #48	; 0x30
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ff88 	bl	800a4d0 <__multadd>
 800a5c0:	45a0      	cmp	r8, r4
 800a5c2:	d1f5      	bne.n	800a5b0 <__s2b+0x4c>
 800a5c4:	f1a5 0408 	sub.w	r4, r5, #8
 800a5c8:	444c      	add	r4, r9
 800a5ca:	1b2d      	subs	r5, r5, r4
 800a5cc:	1963      	adds	r3, r4, r5
 800a5ce:	42bb      	cmp	r3, r7
 800a5d0:	db04      	blt.n	800a5dc <__s2b+0x78>
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	340a      	adds	r4, #10
 800a5d8:	2509      	movs	r5, #9
 800a5da:	e7f6      	b.n	800a5ca <__s2b+0x66>
 800a5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	3b30      	subs	r3, #48	; 0x30
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff ff72 	bl	800a4d0 <__multadd>
 800a5ec:	e7ee      	b.n	800a5cc <__s2b+0x68>
 800a5ee:	bf00      	nop
 800a5f0:	0800ba8c 	.word	0x0800ba8c
 800a5f4:	0800bb1c 	.word	0x0800bb1c

0800a5f8 <__hi0bits>:
 800a5f8:	0c03      	lsrs	r3, r0, #16
 800a5fa:	041b      	lsls	r3, r3, #16
 800a5fc:	b9d3      	cbnz	r3, 800a634 <__hi0bits+0x3c>
 800a5fe:	0400      	lsls	r0, r0, #16
 800a600:	2310      	movs	r3, #16
 800a602:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a606:	bf04      	itt	eq
 800a608:	0200      	lsleq	r0, r0, #8
 800a60a:	3308      	addeq	r3, #8
 800a60c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a610:	bf04      	itt	eq
 800a612:	0100      	lsleq	r0, r0, #4
 800a614:	3304      	addeq	r3, #4
 800a616:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a61a:	bf04      	itt	eq
 800a61c:	0080      	lsleq	r0, r0, #2
 800a61e:	3302      	addeq	r3, #2
 800a620:	2800      	cmp	r0, #0
 800a622:	db05      	blt.n	800a630 <__hi0bits+0x38>
 800a624:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a628:	f103 0301 	add.w	r3, r3, #1
 800a62c:	bf08      	it	eq
 800a62e:	2320      	moveq	r3, #32
 800a630:	4618      	mov	r0, r3
 800a632:	4770      	bx	lr
 800a634:	2300      	movs	r3, #0
 800a636:	e7e4      	b.n	800a602 <__hi0bits+0xa>

0800a638 <__lo0bits>:
 800a638:	6803      	ldr	r3, [r0, #0]
 800a63a:	f013 0207 	ands.w	r2, r3, #7
 800a63e:	4601      	mov	r1, r0
 800a640:	d00b      	beq.n	800a65a <__lo0bits+0x22>
 800a642:	07da      	lsls	r2, r3, #31
 800a644:	d424      	bmi.n	800a690 <__lo0bits+0x58>
 800a646:	0798      	lsls	r0, r3, #30
 800a648:	bf49      	itett	mi
 800a64a:	085b      	lsrmi	r3, r3, #1
 800a64c:	089b      	lsrpl	r3, r3, #2
 800a64e:	2001      	movmi	r0, #1
 800a650:	600b      	strmi	r3, [r1, #0]
 800a652:	bf5c      	itt	pl
 800a654:	600b      	strpl	r3, [r1, #0]
 800a656:	2002      	movpl	r0, #2
 800a658:	4770      	bx	lr
 800a65a:	b298      	uxth	r0, r3
 800a65c:	b9b0      	cbnz	r0, 800a68c <__lo0bits+0x54>
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	2010      	movs	r0, #16
 800a662:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a666:	bf04      	itt	eq
 800a668:	0a1b      	lsreq	r3, r3, #8
 800a66a:	3008      	addeq	r0, #8
 800a66c:	071a      	lsls	r2, r3, #28
 800a66e:	bf04      	itt	eq
 800a670:	091b      	lsreq	r3, r3, #4
 800a672:	3004      	addeq	r0, #4
 800a674:	079a      	lsls	r2, r3, #30
 800a676:	bf04      	itt	eq
 800a678:	089b      	lsreq	r3, r3, #2
 800a67a:	3002      	addeq	r0, #2
 800a67c:	07da      	lsls	r2, r3, #31
 800a67e:	d403      	bmi.n	800a688 <__lo0bits+0x50>
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	f100 0001 	add.w	r0, r0, #1
 800a686:	d005      	beq.n	800a694 <__lo0bits+0x5c>
 800a688:	600b      	str	r3, [r1, #0]
 800a68a:	4770      	bx	lr
 800a68c:	4610      	mov	r0, r2
 800a68e:	e7e8      	b.n	800a662 <__lo0bits+0x2a>
 800a690:	2000      	movs	r0, #0
 800a692:	4770      	bx	lr
 800a694:	2020      	movs	r0, #32
 800a696:	4770      	bx	lr

0800a698 <__i2b>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	460c      	mov	r4, r1
 800a69c:	2101      	movs	r1, #1
 800a69e:	f7ff feb5 	bl	800a40c <_Balloc>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	b928      	cbnz	r0, 800a6b2 <__i2b+0x1a>
 800a6a6:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <__i2b+0x24>)
 800a6a8:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <__i2b+0x28>)
 800a6aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a6ae:	f000 fd0f 	bl	800b0d0 <__assert_func>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	6144      	str	r4, [r0, #20]
 800a6b6:	6103      	str	r3, [r0, #16]
 800a6b8:	bd10      	pop	{r4, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800ba8c 	.word	0x0800ba8c
 800a6c0:	0800bb1c 	.word	0x0800bb1c

0800a6c4 <__multiply>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	690a      	ldr	r2, [r1, #16]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	bfb8      	it	lt
 800a6d2:	460b      	movlt	r3, r1
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	bfbc      	itt	lt
 800a6d8:	4625      	movlt	r5, r4
 800a6da:	461c      	movlt	r4, r3
 800a6dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a6e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6e4:	68ab      	ldr	r3, [r5, #8]
 800a6e6:	6869      	ldr	r1, [r5, #4]
 800a6e8:	eb0a 0709 	add.w	r7, sl, r9
 800a6ec:	42bb      	cmp	r3, r7
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	bfb8      	it	lt
 800a6f2:	3101      	addlt	r1, #1
 800a6f4:	f7ff fe8a 	bl	800a40c <_Balloc>
 800a6f8:	b930      	cbnz	r0, 800a708 <__multiply+0x44>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b42      	ldr	r3, [pc, #264]	; (800a808 <__multiply+0x144>)
 800a6fe:	4843      	ldr	r0, [pc, #268]	; (800a80c <__multiply+0x148>)
 800a700:	f240 115d 	movw	r1, #349	; 0x15d
 800a704:	f000 fce4 	bl	800b0d0 <__assert_func>
 800a708:	f100 0614 	add.w	r6, r0, #20
 800a70c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a710:	4633      	mov	r3, r6
 800a712:	2200      	movs	r2, #0
 800a714:	4543      	cmp	r3, r8
 800a716:	d31e      	bcc.n	800a756 <__multiply+0x92>
 800a718:	f105 0c14 	add.w	ip, r5, #20
 800a71c:	f104 0314 	add.w	r3, r4, #20
 800a720:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a724:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a728:	9202      	str	r2, [sp, #8]
 800a72a:	ebac 0205 	sub.w	r2, ip, r5
 800a72e:	3a15      	subs	r2, #21
 800a730:	f022 0203 	bic.w	r2, r2, #3
 800a734:	3204      	adds	r2, #4
 800a736:	f105 0115 	add.w	r1, r5, #21
 800a73a:	458c      	cmp	ip, r1
 800a73c:	bf38      	it	cc
 800a73e:	2204      	movcc	r2, #4
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	9a02      	ldr	r2, [sp, #8]
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	429a      	cmp	r2, r3
 800a748:	d808      	bhi.n	800a75c <__multiply+0x98>
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	dc55      	bgt.n	800a7fa <__multiply+0x136>
 800a74e:	6107      	str	r7, [r0, #16]
 800a750:	b005      	add	sp, #20
 800a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a756:	f843 2b04 	str.w	r2, [r3], #4
 800a75a:	e7db      	b.n	800a714 <__multiply+0x50>
 800a75c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a760:	f1ba 0f00 	cmp.w	sl, #0
 800a764:	d020      	beq.n	800a7a8 <__multiply+0xe4>
 800a766:	f105 0e14 	add.w	lr, r5, #20
 800a76a:	46b1      	mov	r9, r6
 800a76c:	2200      	movs	r2, #0
 800a76e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a772:	f8d9 b000 	ldr.w	fp, [r9]
 800a776:	b2a1      	uxth	r1, r4
 800a778:	fa1f fb8b 	uxth.w	fp, fp
 800a77c:	fb0a b101 	mla	r1, sl, r1, fp
 800a780:	4411      	add	r1, r2
 800a782:	f8d9 2000 	ldr.w	r2, [r9]
 800a786:	0c24      	lsrs	r4, r4, #16
 800a788:	0c12      	lsrs	r2, r2, #16
 800a78a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a78e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a792:	b289      	uxth	r1, r1
 800a794:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a798:	45f4      	cmp	ip, lr
 800a79a:	f849 1b04 	str.w	r1, [r9], #4
 800a79e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a7a2:	d8e4      	bhi.n	800a76e <__multiply+0xaa>
 800a7a4:	9901      	ldr	r1, [sp, #4]
 800a7a6:	5072      	str	r2, [r6, r1]
 800a7a8:	9a03      	ldr	r2, [sp, #12]
 800a7aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	f1b9 0f00 	cmp.w	r9, #0
 800a7b4:	d01f      	beq.n	800a7f6 <__multiply+0x132>
 800a7b6:	6834      	ldr	r4, [r6, #0]
 800a7b8:	f105 0114 	add.w	r1, r5, #20
 800a7bc:	46b6      	mov	lr, r6
 800a7be:	f04f 0a00 	mov.w	sl, #0
 800a7c2:	880a      	ldrh	r2, [r1, #0]
 800a7c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a7c8:	fb09 b202 	mla	r2, r9, r2, fp
 800a7cc:	4492      	add	sl, r2
 800a7ce:	b2a4      	uxth	r4, r4
 800a7d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a7d4:	f84e 4b04 	str.w	r4, [lr], #4
 800a7d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a7dc:	f8be 2000 	ldrh.w	r2, [lr]
 800a7e0:	0c24      	lsrs	r4, r4, #16
 800a7e2:	fb09 2404 	mla	r4, r9, r4, r2
 800a7e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a7ea:	458c      	cmp	ip, r1
 800a7ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a7f0:	d8e7      	bhi.n	800a7c2 <__multiply+0xfe>
 800a7f2:	9a01      	ldr	r2, [sp, #4]
 800a7f4:	50b4      	str	r4, [r6, r2]
 800a7f6:	3604      	adds	r6, #4
 800a7f8:	e7a3      	b.n	800a742 <__multiply+0x7e>
 800a7fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1a5      	bne.n	800a74e <__multiply+0x8a>
 800a802:	3f01      	subs	r7, #1
 800a804:	e7a1      	b.n	800a74a <__multiply+0x86>
 800a806:	bf00      	nop
 800a808:	0800ba8c 	.word	0x0800ba8c
 800a80c:	0800bb1c 	.word	0x0800bb1c

0800a810 <__pow5mult>:
 800a810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a814:	4615      	mov	r5, r2
 800a816:	f012 0203 	ands.w	r2, r2, #3
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	d007      	beq.n	800a830 <__pow5mult+0x20>
 800a820:	4c25      	ldr	r4, [pc, #148]	; (800a8b8 <__pow5mult+0xa8>)
 800a822:	3a01      	subs	r2, #1
 800a824:	2300      	movs	r3, #0
 800a826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a82a:	f7ff fe51 	bl	800a4d0 <__multadd>
 800a82e:	4607      	mov	r7, r0
 800a830:	10ad      	asrs	r5, r5, #2
 800a832:	d03d      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a836:	b97c      	cbnz	r4, 800a858 <__pow5mult+0x48>
 800a838:	2010      	movs	r0, #16
 800a83a:	f7fc fc0f 	bl	800705c <malloc>
 800a83e:	4602      	mov	r2, r0
 800a840:	6270      	str	r0, [r6, #36]	; 0x24
 800a842:	b928      	cbnz	r0, 800a850 <__pow5mult+0x40>
 800a844:	4b1d      	ldr	r3, [pc, #116]	; (800a8bc <__pow5mult+0xac>)
 800a846:	481e      	ldr	r0, [pc, #120]	; (800a8c0 <__pow5mult+0xb0>)
 800a848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a84c:	f000 fc40 	bl	800b0d0 <__assert_func>
 800a850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a854:	6004      	str	r4, [r0, #0]
 800a856:	60c4      	str	r4, [r0, #12]
 800a858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a860:	b94c      	cbnz	r4, 800a876 <__pow5mult+0x66>
 800a862:	f240 2171 	movw	r1, #625	; 0x271
 800a866:	4630      	mov	r0, r6
 800a868:	f7ff ff16 	bl	800a698 <__i2b>
 800a86c:	2300      	movs	r3, #0
 800a86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a872:	4604      	mov	r4, r0
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	f04f 0900 	mov.w	r9, #0
 800a87a:	07eb      	lsls	r3, r5, #31
 800a87c:	d50a      	bpl.n	800a894 <__pow5mult+0x84>
 800a87e:	4639      	mov	r1, r7
 800a880:	4622      	mov	r2, r4
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ff1e 	bl	800a6c4 <__multiply>
 800a888:	4639      	mov	r1, r7
 800a88a:	4680      	mov	r8, r0
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fdfd 	bl	800a48c <_Bfree>
 800a892:	4647      	mov	r7, r8
 800a894:	106d      	asrs	r5, r5, #1
 800a896:	d00b      	beq.n	800a8b0 <__pow5mult+0xa0>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	b938      	cbnz	r0, 800a8ac <__pow5mult+0x9c>
 800a89c:	4622      	mov	r2, r4
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff ff0f 	bl	800a6c4 <__multiply>
 800a8a6:	6020      	str	r0, [r4, #0]
 800a8a8:	f8c0 9000 	str.w	r9, [r0]
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	e7e4      	b.n	800a87a <__pow5mult+0x6a>
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800bc70 	.word	0x0800bc70
 800a8bc:	0800ba16 	.word	0x0800ba16
 800a8c0:	0800bb1c 	.word	0x0800bb1c

0800a8c4 <__lshift>:
 800a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	6849      	ldr	r1, [r1, #4]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	4691      	mov	r9, r2
 800a8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8dc:	f108 0601 	add.w	r6, r8, #1
 800a8e0:	42b3      	cmp	r3, r6
 800a8e2:	db0b      	blt.n	800a8fc <__lshift+0x38>
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f7ff fd91 	bl	800a40c <_Balloc>
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b948      	cbnz	r0, 800a902 <__lshift+0x3e>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <__lshift+0xd0>)
 800a8f2:	4829      	ldr	r0, [pc, #164]	; (800a998 <__lshift+0xd4>)
 800a8f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8f8:	f000 fbea 	bl	800b0d0 <__assert_func>
 800a8fc:	3101      	adds	r1, #1
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	e7ee      	b.n	800a8e0 <__lshift+0x1c>
 800a902:	2300      	movs	r3, #0
 800a904:	f100 0114 	add.w	r1, r0, #20
 800a908:	f100 0210 	add.w	r2, r0, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	4553      	cmp	r3, sl
 800a910:	db33      	blt.n	800a97a <__lshift+0xb6>
 800a912:	6920      	ldr	r0, [r4, #16]
 800a914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a918:	f104 0314 	add.w	r3, r4, #20
 800a91c:	f019 091f 	ands.w	r9, r9, #31
 800a920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a928:	d02b      	beq.n	800a982 <__lshift+0xbe>
 800a92a:	f1c9 0e20 	rsb	lr, r9, #32
 800a92e:	468a      	mov	sl, r1
 800a930:	2200      	movs	r2, #0
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	fa00 f009 	lsl.w	r0, r0, r9
 800a938:	4302      	orrs	r2, r0
 800a93a:	f84a 2b04 	str.w	r2, [sl], #4
 800a93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a942:	459c      	cmp	ip, r3
 800a944:	fa22 f20e 	lsr.w	r2, r2, lr
 800a948:	d8f3      	bhi.n	800a932 <__lshift+0x6e>
 800a94a:	ebac 0304 	sub.w	r3, ip, r4
 800a94e:	3b15      	subs	r3, #21
 800a950:	f023 0303 	bic.w	r3, r3, #3
 800a954:	3304      	adds	r3, #4
 800a956:	f104 0015 	add.w	r0, r4, #21
 800a95a:	4584      	cmp	ip, r0
 800a95c:	bf38      	it	cc
 800a95e:	2304      	movcc	r3, #4
 800a960:	50ca      	str	r2, [r1, r3]
 800a962:	b10a      	cbz	r2, 800a968 <__lshift+0xa4>
 800a964:	f108 0602 	add.w	r6, r8, #2
 800a968:	3e01      	subs	r6, #1
 800a96a:	4638      	mov	r0, r7
 800a96c:	612e      	str	r6, [r5, #16]
 800a96e:	4621      	mov	r1, r4
 800a970:	f7ff fd8c 	bl	800a48c <_Bfree>
 800a974:	4628      	mov	r0, r5
 800a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a97e:	3301      	adds	r3, #1
 800a980:	e7c5      	b.n	800a90e <__lshift+0x4a>
 800a982:	3904      	subs	r1, #4
 800a984:	f853 2b04 	ldr.w	r2, [r3], #4
 800a988:	f841 2f04 	str.w	r2, [r1, #4]!
 800a98c:	459c      	cmp	ip, r3
 800a98e:	d8f9      	bhi.n	800a984 <__lshift+0xc0>
 800a990:	e7ea      	b.n	800a968 <__lshift+0xa4>
 800a992:	bf00      	nop
 800a994:	0800ba8c 	.word	0x0800ba8c
 800a998:	0800bb1c 	.word	0x0800bb1c

0800a99c <__mcmp>:
 800a99c:	b530      	push	{r4, r5, lr}
 800a99e:	6902      	ldr	r2, [r0, #16]
 800a9a0:	690c      	ldr	r4, [r1, #16]
 800a9a2:	1b12      	subs	r2, r2, r4
 800a9a4:	d10e      	bne.n	800a9c4 <__mcmp+0x28>
 800a9a6:	f100 0314 	add.w	r3, r0, #20
 800a9aa:	3114      	adds	r1, #20
 800a9ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9bc:	42a5      	cmp	r5, r4
 800a9be:	d003      	beq.n	800a9c8 <__mcmp+0x2c>
 800a9c0:	d305      	bcc.n	800a9ce <__mcmp+0x32>
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	bd30      	pop	{r4, r5, pc}
 800a9c8:	4283      	cmp	r3, r0
 800a9ca:	d3f3      	bcc.n	800a9b4 <__mcmp+0x18>
 800a9cc:	e7fa      	b.n	800a9c4 <__mcmp+0x28>
 800a9ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9d2:	e7f7      	b.n	800a9c4 <__mcmp+0x28>

0800a9d4 <__mdiff>:
 800a9d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	4606      	mov	r6, r0
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4617      	mov	r7, r2
 800a9e2:	f7ff ffdb 	bl	800a99c <__mcmp>
 800a9e6:	1e05      	subs	r5, r0, #0
 800a9e8:	d110      	bne.n	800aa0c <__mdiff+0x38>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff fd0d 	bl	800a40c <_Balloc>
 800a9f2:	b930      	cbnz	r0, 800aa02 <__mdiff+0x2e>
 800a9f4:	4b39      	ldr	r3, [pc, #228]	; (800aadc <__mdiff+0x108>)
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	f240 2132 	movw	r1, #562	; 0x232
 800a9fc:	4838      	ldr	r0, [pc, #224]	; (800aae0 <__mdiff+0x10c>)
 800a9fe:	f000 fb67 	bl	800b0d0 <__assert_func>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	bfa4      	itt	ge
 800aa0e:	463b      	movge	r3, r7
 800aa10:	4627      	movge	r7, r4
 800aa12:	4630      	mov	r0, r6
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	bfa6      	itte	ge
 800aa18:	461c      	movge	r4, r3
 800aa1a:	2500      	movge	r5, #0
 800aa1c:	2501      	movlt	r5, #1
 800aa1e:	f7ff fcf5 	bl	800a40c <_Balloc>
 800aa22:	b920      	cbnz	r0, 800aa2e <__mdiff+0x5a>
 800aa24:	4b2d      	ldr	r3, [pc, #180]	; (800aadc <__mdiff+0x108>)
 800aa26:	4602      	mov	r2, r0
 800aa28:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa2c:	e7e6      	b.n	800a9fc <__mdiff+0x28>
 800aa2e:	693e      	ldr	r6, [r7, #16]
 800aa30:	60c5      	str	r5, [r0, #12]
 800aa32:	6925      	ldr	r5, [r4, #16]
 800aa34:	f107 0114 	add.w	r1, r7, #20
 800aa38:	f104 0914 	add.w	r9, r4, #20
 800aa3c:	f100 0e14 	add.w	lr, r0, #20
 800aa40:	f107 0210 	add.w	r2, r7, #16
 800aa44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aa48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aa4c:	46f2      	mov	sl, lr
 800aa4e:	2700      	movs	r7, #0
 800aa50:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa58:	fa1f f883 	uxth.w	r8, r3
 800aa5c:	fa17 f78b 	uxtah	r7, r7, fp
 800aa60:	0c1b      	lsrs	r3, r3, #16
 800aa62:	eba7 0808 	sub.w	r8, r7, r8
 800aa66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa6e:	fa1f f888 	uxth.w	r8, r8
 800aa72:	141f      	asrs	r7, r3, #16
 800aa74:	454d      	cmp	r5, r9
 800aa76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa7a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa7e:	d8e7      	bhi.n	800aa50 <__mdiff+0x7c>
 800aa80:	1b2b      	subs	r3, r5, r4
 800aa82:	3b15      	subs	r3, #21
 800aa84:	f023 0303 	bic.w	r3, r3, #3
 800aa88:	3304      	adds	r3, #4
 800aa8a:	3415      	adds	r4, #21
 800aa8c:	42a5      	cmp	r5, r4
 800aa8e:	bf38      	it	cc
 800aa90:	2304      	movcc	r3, #4
 800aa92:	4419      	add	r1, r3
 800aa94:	4473      	add	r3, lr
 800aa96:	469e      	mov	lr, r3
 800aa98:	460d      	mov	r5, r1
 800aa9a:	4565      	cmp	r5, ip
 800aa9c:	d30e      	bcc.n	800aabc <__mdiff+0xe8>
 800aa9e:	f10c 0203 	add.w	r2, ip, #3
 800aaa2:	1a52      	subs	r2, r2, r1
 800aaa4:	f022 0203 	bic.w	r2, r2, #3
 800aaa8:	3903      	subs	r1, #3
 800aaaa:	458c      	cmp	ip, r1
 800aaac:	bf38      	it	cc
 800aaae:	2200      	movcc	r2, #0
 800aab0:	441a      	add	r2, r3
 800aab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aab6:	b17b      	cbz	r3, 800aad8 <__mdiff+0x104>
 800aab8:	6106      	str	r6, [r0, #16]
 800aaba:	e7a5      	b.n	800aa08 <__mdiff+0x34>
 800aabc:	f855 8b04 	ldr.w	r8, [r5], #4
 800aac0:	fa17 f488 	uxtah	r4, r7, r8
 800aac4:	1422      	asrs	r2, r4, #16
 800aac6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aaca:	b2a4      	uxth	r4, r4
 800aacc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aad0:	f84e 4b04 	str.w	r4, [lr], #4
 800aad4:	1417      	asrs	r7, r2, #16
 800aad6:	e7e0      	b.n	800aa9a <__mdiff+0xc6>
 800aad8:	3e01      	subs	r6, #1
 800aada:	e7ea      	b.n	800aab2 <__mdiff+0xde>
 800aadc:	0800ba8c 	.word	0x0800ba8c
 800aae0:	0800bb1c 	.word	0x0800bb1c

0800aae4 <__ulp>:
 800aae4:	b082      	sub	sp, #8
 800aae6:	ed8d 0b00 	vstr	d0, [sp]
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	4912      	ldr	r1, [pc, #72]	; (800ab38 <__ulp+0x54>)
 800aaee:	4019      	ands	r1, r3
 800aaf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	dd05      	ble.n	800ab04 <__ulp+0x20>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	460b      	mov	r3, r1
 800aafc:	ec43 2b10 	vmov	d0, r2, r3
 800ab00:	b002      	add	sp, #8
 800ab02:	4770      	bx	lr
 800ab04:	4249      	negs	r1, r1
 800ab06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ab0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	da04      	bge.n	800ab22 <__ulp+0x3e>
 800ab18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ab1c:	fa41 f300 	asr.w	r3, r1, r0
 800ab20:	e7ec      	b.n	800aafc <__ulp+0x18>
 800ab22:	f1a0 0114 	sub.w	r1, r0, #20
 800ab26:	291e      	cmp	r1, #30
 800ab28:	bfda      	itte	le
 800ab2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ab2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ab32:	2101      	movgt	r1, #1
 800ab34:	460a      	mov	r2, r1
 800ab36:	e7e1      	b.n	800aafc <__ulp+0x18>
 800ab38:	7ff00000 	.word	0x7ff00000

0800ab3c <__b2d>:
 800ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3e:	6905      	ldr	r5, [r0, #16]
 800ab40:	f100 0714 	add.w	r7, r0, #20
 800ab44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ab48:	1f2e      	subs	r6, r5, #4
 800ab4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f7ff fd52 	bl	800a5f8 <__hi0bits>
 800ab54:	f1c0 0320 	rsb	r3, r0, #32
 800ab58:	280a      	cmp	r0, #10
 800ab5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800abd8 <__b2d+0x9c>
 800ab5e:	600b      	str	r3, [r1, #0]
 800ab60:	dc14      	bgt.n	800ab8c <__b2d+0x50>
 800ab62:	f1c0 0e0b 	rsb	lr, r0, #11
 800ab66:	fa24 f10e 	lsr.w	r1, r4, lr
 800ab6a:	42b7      	cmp	r7, r6
 800ab6c:	ea41 030c 	orr.w	r3, r1, ip
 800ab70:	bf34      	ite	cc
 800ab72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab76:	2100      	movcs	r1, #0
 800ab78:	3015      	adds	r0, #21
 800ab7a:	fa04 f000 	lsl.w	r0, r4, r0
 800ab7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ab82:	ea40 0201 	orr.w	r2, r0, r1
 800ab86:	ec43 2b10 	vmov	d0, r2, r3
 800ab8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab8c:	42b7      	cmp	r7, r6
 800ab8e:	bf3a      	itte	cc
 800ab90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ab94:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab98:	2100      	movcs	r1, #0
 800ab9a:	380b      	subs	r0, #11
 800ab9c:	d017      	beq.n	800abce <__b2d+0x92>
 800ab9e:	f1c0 0c20 	rsb	ip, r0, #32
 800aba2:	fa04 f500 	lsl.w	r5, r4, r0
 800aba6:	42be      	cmp	r6, r7
 800aba8:	fa21 f40c 	lsr.w	r4, r1, ip
 800abac:	ea45 0504 	orr.w	r5, r5, r4
 800abb0:	bf8c      	ite	hi
 800abb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800abb6:	2400      	movls	r4, #0
 800abb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800abbc:	fa01 f000 	lsl.w	r0, r1, r0
 800abc0:	fa24 f40c 	lsr.w	r4, r4, ip
 800abc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800abc8:	ea40 0204 	orr.w	r2, r0, r4
 800abcc:	e7db      	b.n	800ab86 <__b2d+0x4a>
 800abce:	ea44 030c 	orr.w	r3, r4, ip
 800abd2:	460a      	mov	r2, r1
 800abd4:	e7d7      	b.n	800ab86 <__b2d+0x4a>
 800abd6:	bf00      	nop
 800abd8:	3ff00000 	.word	0x3ff00000

0800abdc <__d2b>:
 800abdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4689      	mov	r9, r1
 800abe2:	2101      	movs	r1, #1
 800abe4:	ec57 6b10 	vmov	r6, r7, d0
 800abe8:	4690      	mov	r8, r2
 800abea:	f7ff fc0f 	bl	800a40c <_Balloc>
 800abee:	4604      	mov	r4, r0
 800abf0:	b930      	cbnz	r0, 800ac00 <__d2b+0x24>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <__d2b+0xb0>)
 800abf6:	4826      	ldr	r0, [pc, #152]	; (800ac90 <__d2b+0xb4>)
 800abf8:	f240 310a 	movw	r1, #778	; 0x30a
 800abfc:	f000 fa68 	bl	800b0d0 <__assert_func>
 800ac00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac08:	bb35      	cbnz	r5, 800ac58 <__d2b+0x7c>
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	d028      	beq.n	800ac62 <__d2b+0x86>
 800ac10:	4668      	mov	r0, sp
 800ac12:	9600      	str	r6, [sp, #0]
 800ac14:	f7ff fd10 	bl	800a638 <__lo0bits>
 800ac18:	9900      	ldr	r1, [sp, #0]
 800ac1a:	b300      	cbz	r0, 800ac5e <__d2b+0x82>
 800ac1c:	9a01      	ldr	r2, [sp, #4]
 800ac1e:	f1c0 0320 	rsb	r3, r0, #32
 800ac22:	fa02 f303 	lsl.w	r3, r2, r3
 800ac26:	430b      	orrs	r3, r1
 800ac28:	40c2      	lsrs	r2, r0
 800ac2a:	6163      	str	r3, [r4, #20]
 800ac2c:	9201      	str	r2, [sp, #4]
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	61a3      	str	r3, [r4, #24]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2202      	movne	r2, #2
 800ac38:	2201      	moveq	r2, #1
 800ac3a:	6122      	str	r2, [r4, #16]
 800ac3c:	b1d5      	cbz	r5, 800ac74 <__d2b+0x98>
 800ac3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac42:	4405      	add	r5, r0
 800ac44:	f8c9 5000 	str.w	r5, [r9]
 800ac48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac4c:	f8c8 0000 	str.w	r0, [r8]
 800ac50:	4620      	mov	r0, r4
 800ac52:	b003      	add	sp, #12
 800ac54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac5c:	e7d5      	b.n	800ac0a <__d2b+0x2e>
 800ac5e:	6161      	str	r1, [r4, #20]
 800ac60:	e7e5      	b.n	800ac2e <__d2b+0x52>
 800ac62:	a801      	add	r0, sp, #4
 800ac64:	f7ff fce8 	bl	800a638 <__lo0bits>
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	6163      	str	r3, [r4, #20]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	6122      	str	r2, [r4, #16]
 800ac70:	3020      	adds	r0, #32
 800ac72:	e7e3      	b.n	800ac3c <__d2b+0x60>
 800ac74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac7c:	f8c9 0000 	str.w	r0, [r9]
 800ac80:	6918      	ldr	r0, [r3, #16]
 800ac82:	f7ff fcb9 	bl	800a5f8 <__hi0bits>
 800ac86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac8a:	e7df      	b.n	800ac4c <__d2b+0x70>
 800ac8c:	0800ba8c 	.word	0x0800ba8c
 800ac90:	0800bb1c 	.word	0x0800bb1c

0800ac94 <__ratio>:
 800ac94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	4688      	mov	r8, r1
 800ac9a:	4669      	mov	r1, sp
 800ac9c:	4681      	mov	r9, r0
 800ac9e:	f7ff ff4d 	bl	800ab3c <__b2d>
 800aca2:	a901      	add	r1, sp, #4
 800aca4:	4640      	mov	r0, r8
 800aca6:	ec55 4b10 	vmov	r4, r5, d0
 800acaa:	f7ff ff47 	bl	800ab3c <__b2d>
 800acae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800acb6:	eba3 0c02 	sub.w	ip, r3, r2
 800acba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800acbe:	1a9b      	subs	r3, r3, r2
 800acc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800acc4:	ec51 0b10 	vmov	r0, r1, d0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfd6      	itet	le
 800accc:	460a      	movle	r2, r1
 800acce:	462a      	movgt	r2, r5
 800acd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acd4:	468b      	mov	fp, r1
 800acd6:	462f      	mov	r7, r5
 800acd8:	bfd4      	ite	le
 800acda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800acde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ace2:	4620      	mov	r0, r4
 800ace4:	ee10 2a10 	vmov	r2, s0
 800ace8:	465b      	mov	r3, fp
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 fdae 	bl	800084c <__aeabi_ddiv>
 800acf0:	ec41 0b10 	vmov	d0, r0, r1
 800acf4:	b003      	add	sp, #12
 800acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acfa <__copybits>:
 800acfa:	3901      	subs	r1, #1
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	1149      	asrs	r1, r1, #5
 800ad00:	6914      	ldr	r4, [r2, #16]
 800ad02:	3101      	adds	r1, #1
 800ad04:	f102 0314 	add.w	r3, r2, #20
 800ad08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad10:	1f05      	subs	r5, r0, #4
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	d30c      	bcc.n	800ad30 <__copybits+0x36>
 800ad16:	1aa3      	subs	r3, r4, r2
 800ad18:	3b11      	subs	r3, #17
 800ad1a:	f023 0303 	bic.w	r3, r3, #3
 800ad1e:	3211      	adds	r2, #17
 800ad20:	42a2      	cmp	r2, r4
 800ad22:	bf88      	it	hi
 800ad24:	2300      	movhi	r3, #0
 800ad26:	4418      	add	r0, r3
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4288      	cmp	r0, r1
 800ad2c:	d305      	bcc.n	800ad3a <__copybits+0x40>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad34:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad38:	e7eb      	b.n	800ad12 <__copybits+0x18>
 800ad3a:	f840 3b04 	str.w	r3, [r0], #4
 800ad3e:	e7f4      	b.n	800ad2a <__copybits+0x30>

0800ad40 <__any_on>:
 800ad40:	f100 0214 	add.w	r2, r0, #20
 800ad44:	6900      	ldr	r0, [r0, #16]
 800ad46:	114b      	asrs	r3, r1, #5
 800ad48:	4298      	cmp	r0, r3
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	db11      	blt.n	800ad72 <__any_on+0x32>
 800ad4e:	dd0a      	ble.n	800ad66 <__any_on+0x26>
 800ad50:	f011 011f 	ands.w	r1, r1, #31
 800ad54:	d007      	beq.n	800ad66 <__any_on+0x26>
 800ad56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad5a:	fa24 f001 	lsr.w	r0, r4, r1
 800ad5e:	fa00 f101 	lsl.w	r1, r0, r1
 800ad62:	428c      	cmp	r4, r1
 800ad64:	d10b      	bne.n	800ad7e <__any_on+0x3e>
 800ad66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d803      	bhi.n	800ad76 <__any_on+0x36>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	4603      	mov	r3, r0
 800ad74:	e7f7      	b.n	800ad66 <__any_on+0x26>
 800ad76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad7a:	2900      	cmp	r1, #0
 800ad7c:	d0f5      	beq.n	800ad6a <__any_on+0x2a>
 800ad7e:	2001      	movs	r0, #1
 800ad80:	e7f6      	b.n	800ad70 <__any_on+0x30>

0800ad82 <_calloc_r>:
 800ad82:	b513      	push	{r0, r1, r4, lr}
 800ad84:	434a      	muls	r2, r1
 800ad86:	4611      	mov	r1, r2
 800ad88:	9201      	str	r2, [sp, #4]
 800ad8a:	f7fc f9d5 	bl	8007138 <_malloc_r>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	b118      	cbz	r0, 800ad9a <_calloc_r+0x18>
 800ad92:	9a01      	ldr	r2, [sp, #4]
 800ad94:	2100      	movs	r1, #0
 800ad96:	f7fc f977 	bl	8007088 <memset>
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	b002      	add	sp, #8
 800ad9e:	bd10      	pop	{r4, pc}

0800ada0 <__ssputs_r>:
 800ada0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada4:	688e      	ldr	r6, [r1, #8]
 800ada6:	429e      	cmp	r6, r3
 800ada8:	4682      	mov	sl, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	4690      	mov	r8, r2
 800adae:	461f      	mov	r7, r3
 800adb0:	d838      	bhi.n	800ae24 <__ssputs_r+0x84>
 800adb2:	898a      	ldrh	r2, [r1, #12]
 800adb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adb8:	d032      	beq.n	800ae20 <__ssputs_r+0x80>
 800adba:	6825      	ldr	r5, [r4, #0]
 800adbc:	6909      	ldr	r1, [r1, #16]
 800adbe:	eba5 0901 	sub.w	r9, r5, r1
 800adc2:	6965      	ldr	r5, [r4, #20]
 800adc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adcc:	3301      	adds	r3, #1
 800adce:	444b      	add	r3, r9
 800add0:	106d      	asrs	r5, r5, #1
 800add2:	429d      	cmp	r5, r3
 800add4:	bf38      	it	cc
 800add6:	461d      	movcc	r5, r3
 800add8:	0553      	lsls	r3, r2, #21
 800adda:	d531      	bpl.n	800ae40 <__ssputs_r+0xa0>
 800addc:	4629      	mov	r1, r5
 800adde:	f7fc f9ab 	bl	8007138 <_malloc_r>
 800ade2:	4606      	mov	r6, r0
 800ade4:	b950      	cbnz	r0, 800adfc <__ssputs_r+0x5c>
 800ade6:	230c      	movs	r3, #12
 800ade8:	f8ca 3000 	str.w	r3, [sl]
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfc:	6921      	ldr	r1, [r4, #16]
 800adfe:	464a      	mov	r2, r9
 800ae00:	f7fc f934 	bl	800706c <memcpy>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	6126      	str	r6, [r4, #16]
 800ae12:	6165      	str	r5, [r4, #20]
 800ae14:	444e      	add	r6, r9
 800ae16:	eba5 0509 	sub.w	r5, r5, r9
 800ae1a:	6026      	str	r6, [r4, #0]
 800ae1c:	60a5      	str	r5, [r4, #8]
 800ae1e:	463e      	mov	r6, r7
 800ae20:	42be      	cmp	r6, r7
 800ae22:	d900      	bls.n	800ae26 <__ssputs_r+0x86>
 800ae24:	463e      	mov	r6, r7
 800ae26:	4632      	mov	r2, r6
 800ae28:	6820      	ldr	r0, [r4, #0]
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	f000 f980 	bl	800b130 <memmove>
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	6822      	ldr	r2, [r4, #0]
 800ae34:	1b9b      	subs	r3, r3, r6
 800ae36:	4432      	add	r2, r6
 800ae38:	60a3      	str	r3, [r4, #8]
 800ae3a:	6022      	str	r2, [r4, #0]
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e7db      	b.n	800adf8 <__ssputs_r+0x58>
 800ae40:	462a      	mov	r2, r5
 800ae42:	f000 f98f 	bl	800b164 <_realloc_r>
 800ae46:	4606      	mov	r6, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1e1      	bne.n	800ae10 <__ssputs_r+0x70>
 800ae4c:	6921      	ldr	r1, [r4, #16]
 800ae4e:	4650      	mov	r0, sl
 800ae50:	f7fc f922 	bl	8007098 <_free_r>
 800ae54:	e7c7      	b.n	800ade6 <__ssputs_r+0x46>
	...

0800ae58 <_svfiprintf_r>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	4698      	mov	r8, r3
 800ae5e:	898b      	ldrh	r3, [r1, #12]
 800ae60:	061b      	lsls	r3, r3, #24
 800ae62:	b09d      	sub	sp, #116	; 0x74
 800ae64:	4607      	mov	r7, r0
 800ae66:	460d      	mov	r5, r1
 800ae68:	4614      	mov	r4, r2
 800ae6a:	d50e      	bpl.n	800ae8a <_svfiprintf_r+0x32>
 800ae6c:	690b      	ldr	r3, [r1, #16]
 800ae6e:	b963      	cbnz	r3, 800ae8a <_svfiprintf_r+0x32>
 800ae70:	2140      	movs	r1, #64	; 0x40
 800ae72:	f7fc f961 	bl	8007138 <_malloc_r>
 800ae76:	6028      	str	r0, [r5, #0]
 800ae78:	6128      	str	r0, [r5, #16]
 800ae7a:	b920      	cbnz	r0, 800ae86 <_svfiprintf_r+0x2e>
 800ae7c:	230c      	movs	r3, #12
 800ae7e:	603b      	str	r3, [r7, #0]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	e0d1      	b.n	800b02a <_svfiprintf_r+0x1d2>
 800ae86:	2340      	movs	r3, #64	; 0x40
 800ae88:	616b      	str	r3, [r5, #20]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8e:	2320      	movs	r3, #32
 800ae90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae98:	2330      	movs	r3, #48	; 0x30
 800ae9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b044 <_svfiprintf_r+0x1ec>
 800ae9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea2:	f04f 0901 	mov.w	r9, #1
 800aea6:	4623      	mov	r3, r4
 800aea8:	469a      	mov	sl, r3
 800aeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeae:	b10a      	cbz	r2, 800aeb4 <_svfiprintf_r+0x5c>
 800aeb0:	2a25      	cmp	r2, #37	; 0x25
 800aeb2:	d1f9      	bne.n	800aea8 <_svfiprintf_r+0x50>
 800aeb4:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb8:	d00b      	beq.n	800aed2 <_svfiprintf_r+0x7a>
 800aeba:	465b      	mov	r3, fp
 800aebc:	4622      	mov	r2, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7ff ff6d 	bl	800ada0 <__ssputs_r>
 800aec6:	3001      	adds	r0, #1
 800aec8:	f000 80aa 	beq.w	800b020 <_svfiprintf_r+0x1c8>
 800aecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aece:	445a      	add	r2, fp
 800aed0:	9209      	str	r2, [sp, #36]	; 0x24
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 80a2 	beq.w	800b020 <_svfiprintf_r+0x1c8>
 800aedc:	2300      	movs	r3, #0
 800aede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee6:	f10a 0a01 	add.w	sl, sl, #1
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	9307      	str	r3, [sp, #28]
 800aeee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef2:	931a      	str	r3, [sp, #104]	; 0x68
 800aef4:	4654      	mov	r4, sl
 800aef6:	2205      	movs	r2, #5
 800aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefc:	4851      	ldr	r0, [pc, #324]	; (800b044 <_svfiprintf_r+0x1ec>)
 800aefe:	f7f5 f96f 	bl	80001e0 <memchr>
 800af02:	9a04      	ldr	r2, [sp, #16]
 800af04:	b9d8      	cbnz	r0, 800af3e <_svfiprintf_r+0xe6>
 800af06:	06d0      	lsls	r0, r2, #27
 800af08:	bf44      	itt	mi
 800af0a:	2320      	movmi	r3, #32
 800af0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af10:	0711      	lsls	r1, r2, #28
 800af12:	bf44      	itt	mi
 800af14:	232b      	movmi	r3, #43	; 0x2b
 800af16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b2a      	cmp	r3, #42	; 0x2a
 800af20:	d015      	beq.n	800af4e <_svfiprintf_r+0xf6>
 800af22:	9a07      	ldr	r2, [sp, #28]
 800af24:	4654      	mov	r4, sl
 800af26:	2000      	movs	r0, #0
 800af28:	f04f 0c0a 	mov.w	ip, #10
 800af2c:	4621      	mov	r1, r4
 800af2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af32:	3b30      	subs	r3, #48	; 0x30
 800af34:	2b09      	cmp	r3, #9
 800af36:	d94e      	bls.n	800afd6 <_svfiprintf_r+0x17e>
 800af38:	b1b0      	cbz	r0, 800af68 <_svfiprintf_r+0x110>
 800af3a:	9207      	str	r2, [sp, #28]
 800af3c:	e014      	b.n	800af68 <_svfiprintf_r+0x110>
 800af3e:	eba0 0308 	sub.w	r3, r0, r8
 800af42:	fa09 f303 	lsl.w	r3, r9, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	9304      	str	r3, [sp, #16]
 800af4a:	46a2      	mov	sl, r4
 800af4c:	e7d2      	b.n	800aef4 <_svfiprintf_r+0x9c>
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	1d19      	adds	r1, r3, #4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9103      	str	r1, [sp, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfbb      	ittet	lt
 800af5a:	425b      	neglt	r3, r3
 800af5c:	f042 0202 	orrlt.w	r2, r2, #2
 800af60:	9307      	strge	r3, [sp, #28]
 800af62:	9307      	strlt	r3, [sp, #28]
 800af64:	bfb8      	it	lt
 800af66:	9204      	strlt	r2, [sp, #16]
 800af68:	7823      	ldrb	r3, [r4, #0]
 800af6a:	2b2e      	cmp	r3, #46	; 0x2e
 800af6c:	d10c      	bne.n	800af88 <_svfiprintf_r+0x130>
 800af6e:	7863      	ldrb	r3, [r4, #1]
 800af70:	2b2a      	cmp	r3, #42	; 0x2a
 800af72:	d135      	bne.n	800afe0 <_svfiprintf_r+0x188>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	9203      	str	r2, [sp, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bfb8      	it	lt
 800af80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af84:	3402      	adds	r4, #2
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b054 <_svfiprintf_r+0x1fc>
 800af8c:	7821      	ldrb	r1, [r4, #0]
 800af8e:	2203      	movs	r2, #3
 800af90:	4650      	mov	r0, sl
 800af92:	f7f5 f925 	bl	80001e0 <memchr>
 800af96:	b140      	cbz	r0, 800afaa <_svfiprintf_r+0x152>
 800af98:	2340      	movs	r3, #64	; 0x40
 800af9a:	eba0 000a 	sub.w	r0, r0, sl
 800af9e:	fa03 f000 	lsl.w	r0, r3, r0
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	4303      	orrs	r3, r0
 800afa6:	3401      	adds	r4, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afae:	4826      	ldr	r0, [pc, #152]	; (800b048 <_svfiprintf_r+0x1f0>)
 800afb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb4:	2206      	movs	r2, #6
 800afb6:	f7f5 f913 	bl	80001e0 <memchr>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d038      	beq.n	800b030 <_svfiprintf_r+0x1d8>
 800afbe:	4b23      	ldr	r3, [pc, #140]	; (800b04c <_svfiprintf_r+0x1f4>)
 800afc0:	bb1b      	cbnz	r3, 800b00a <_svfiprintf_r+0x1b2>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	3307      	adds	r3, #7
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	3308      	adds	r3, #8
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	4433      	add	r3, r6
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	e767      	b.n	800aea6 <_svfiprintf_r+0x4e>
 800afd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afda:	460c      	mov	r4, r1
 800afdc:	2001      	movs	r0, #1
 800afde:	e7a5      	b.n	800af2c <_svfiprintf_r+0xd4>
 800afe0:	2300      	movs	r3, #0
 800afe2:	3401      	adds	r4, #1
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	4619      	mov	r1, r3
 800afe8:	f04f 0c0a 	mov.w	ip, #10
 800afec:	4620      	mov	r0, r4
 800afee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff2:	3a30      	subs	r2, #48	; 0x30
 800aff4:	2a09      	cmp	r2, #9
 800aff6:	d903      	bls.n	800b000 <_svfiprintf_r+0x1a8>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0c5      	beq.n	800af88 <_svfiprintf_r+0x130>
 800affc:	9105      	str	r1, [sp, #20]
 800affe:	e7c3      	b.n	800af88 <_svfiprintf_r+0x130>
 800b000:	fb0c 2101 	mla	r1, ip, r1, r2
 800b004:	4604      	mov	r4, r0
 800b006:	2301      	movs	r3, #1
 800b008:	e7f0      	b.n	800afec <_svfiprintf_r+0x194>
 800b00a:	ab03      	add	r3, sp, #12
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	462a      	mov	r2, r5
 800b010:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <_svfiprintf_r+0x1f8>)
 800b012:	a904      	add	r1, sp, #16
 800b014:	4638      	mov	r0, r7
 800b016:	f7fc f989 	bl	800732c <_printf_float>
 800b01a:	1c42      	adds	r2, r0, #1
 800b01c:	4606      	mov	r6, r0
 800b01e:	d1d6      	bne.n	800afce <_svfiprintf_r+0x176>
 800b020:	89ab      	ldrh	r3, [r5, #12]
 800b022:	065b      	lsls	r3, r3, #25
 800b024:	f53f af2c 	bmi.w	800ae80 <_svfiprintf_r+0x28>
 800b028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02a:	b01d      	add	sp, #116	; 0x74
 800b02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b030:	ab03      	add	r3, sp, #12
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	462a      	mov	r2, r5
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <_svfiprintf_r+0x1f8>)
 800b038:	a904      	add	r1, sp, #16
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7fc fc1a 	bl	8007874 <_printf_i>
 800b040:	e7eb      	b.n	800b01a <_svfiprintf_r+0x1c2>
 800b042:	bf00      	nop
 800b044:	0800bc7c 	.word	0x0800bc7c
 800b048:	0800bc86 	.word	0x0800bc86
 800b04c:	0800732d 	.word	0x0800732d
 800b050:	0800ada1 	.word	0x0800ada1
 800b054:	0800bc82 	.word	0x0800bc82

0800b058 <_read_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d07      	ldr	r5, [pc, #28]	; (800b078 <_read_r+0x20>)
 800b05c:	4604      	mov	r4, r0
 800b05e:	4608      	mov	r0, r1
 800b060:	4611      	mov	r1, r2
 800b062:	2200      	movs	r2, #0
 800b064:	602a      	str	r2, [r5, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	f7f7 f84e 	bl	8002108 <_read>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_read_r+0x1e>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_read_r+0x1e>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20004498 	.word	0x20004498
 800b07c:	00000000 	.word	0x00000000

0800b080 <nan>:
 800b080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b088 <nan+0x8>
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	00000000 	.word	0x00000000
 800b08c:	7ff80000 	.word	0x7ff80000

0800b090 <strncmp>:
 800b090:	b510      	push	{r4, lr}
 800b092:	b16a      	cbz	r2, 800b0b0 <strncmp+0x20>
 800b094:	3901      	subs	r1, #1
 800b096:	1884      	adds	r4, r0, r2
 800b098:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b09c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d103      	bne.n	800b0ac <strncmp+0x1c>
 800b0a4:	42a0      	cmp	r0, r4
 800b0a6:	d001      	beq.n	800b0ac <strncmp+0x1c>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f5      	bne.n	800b098 <strncmp+0x8>
 800b0ac:	1a98      	subs	r0, r3, r2
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	e7fc      	b.n	800b0ae <strncmp+0x1e>

0800b0b4 <__ascii_wctomb>:
 800b0b4:	b149      	cbz	r1, 800b0ca <__ascii_wctomb+0x16>
 800b0b6:	2aff      	cmp	r2, #255	; 0xff
 800b0b8:	bf85      	ittet	hi
 800b0ba:	238a      	movhi	r3, #138	; 0x8a
 800b0bc:	6003      	strhi	r3, [r0, #0]
 800b0be:	700a      	strbls	r2, [r1, #0]
 800b0c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b0c4:	bf98      	it	ls
 800b0c6:	2001      	movls	r0, #1
 800b0c8:	4770      	bx	lr
 800b0ca:	4608      	mov	r0, r1
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <__assert_func>:
 800b0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0d2:	4614      	mov	r4, r2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <__assert_func+0x2c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4605      	mov	r5, r0
 800b0dc:	68d8      	ldr	r0, [r3, #12]
 800b0de:	b14c      	cbz	r4, 800b0f4 <__assert_func+0x24>
 800b0e0:	4b07      	ldr	r3, [pc, #28]	; (800b100 <__assert_func+0x30>)
 800b0e2:	9100      	str	r1, [sp, #0]
 800b0e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0e8:	4906      	ldr	r1, [pc, #24]	; (800b104 <__assert_func+0x34>)
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	f000 f80e 	bl	800b10c <fiprintf>
 800b0f0:	f000 fa78 	bl	800b5e4 <abort>
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <__assert_func+0x38>)
 800b0f6:	461c      	mov	r4, r3
 800b0f8:	e7f3      	b.n	800b0e2 <__assert_func+0x12>
 800b0fa:	bf00      	nop
 800b0fc:	20000010 	.word	0x20000010
 800b100:	0800bc8d 	.word	0x0800bc8d
 800b104:	0800bc9a 	.word	0x0800bc9a
 800b108:	0800bcc8 	.word	0x0800bcc8

0800b10c <fiprintf>:
 800b10c:	b40e      	push	{r1, r2, r3}
 800b10e:	b503      	push	{r0, r1, lr}
 800b110:	4601      	mov	r1, r0
 800b112:	ab03      	add	r3, sp, #12
 800b114:	4805      	ldr	r0, [pc, #20]	; (800b12c <fiprintf+0x20>)
 800b116:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	f000 f871 	bl	800b204 <_vfiprintf_r>
 800b122:	b002      	add	sp, #8
 800b124:	f85d eb04 	ldr.w	lr, [sp], #4
 800b128:	b003      	add	sp, #12
 800b12a:	4770      	bx	lr
 800b12c:	20000010 	.word	0x20000010

0800b130 <memmove>:
 800b130:	4288      	cmp	r0, r1
 800b132:	b510      	push	{r4, lr}
 800b134:	eb01 0402 	add.w	r4, r1, r2
 800b138:	d902      	bls.n	800b140 <memmove+0x10>
 800b13a:	4284      	cmp	r4, r0
 800b13c:	4623      	mov	r3, r4
 800b13e:	d807      	bhi.n	800b150 <memmove+0x20>
 800b140:	1e43      	subs	r3, r0, #1
 800b142:	42a1      	cmp	r1, r4
 800b144:	d008      	beq.n	800b158 <memmove+0x28>
 800b146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b14e:	e7f8      	b.n	800b142 <memmove+0x12>
 800b150:	4402      	add	r2, r0
 800b152:	4601      	mov	r1, r0
 800b154:	428a      	cmp	r2, r1
 800b156:	d100      	bne.n	800b15a <memmove+0x2a>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b162:	e7f7      	b.n	800b154 <memmove+0x24>

0800b164 <_realloc_r>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	4607      	mov	r7, r0
 800b168:	4614      	mov	r4, r2
 800b16a:	460e      	mov	r6, r1
 800b16c:	b921      	cbnz	r1, 800b178 <_realloc_r+0x14>
 800b16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b172:	4611      	mov	r1, r2
 800b174:	f7fb bfe0 	b.w	8007138 <_malloc_r>
 800b178:	b922      	cbnz	r2, 800b184 <_realloc_r+0x20>
 800b17a:	f7fb ff8d 	bl	8007098 <_free_r>
 800b17e:	4625      	mov	r5, r4
 800b180:	4628      	mov	r0, r5
 800b182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b184:	f000 fa9a 	bl	800b6bc <_malloc_usable_size_r>
 800b188:	42a0      	cmp	r0, r4
 800b18a:	d20f      	bcs.n	800b1ac <_realloc_r+0x48>
 800b18c:	4621      	mov	r1, r4
 800b18e:	4638      	mov	r0, r7
 800b190:	f7fb ffd2 	bl	8007138 <_malloc_r>
 800b194:	4605      	mov	r5, r0
 800b196:	2800      	cmp	r0, #0
 800b198:	d0f2      	beq.n	800b180 <_realloc_r+0x1c>
 800b19a:	4631      	mov	r1, r6
 800b19c:	4622      	mov	r2, r4
 800b19e:	f7fb ff65 	bl	800706c <memcpy>
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	f7fb ff77 	bl	8007098 <_free_r>
 800b1aa:	e7e9      	b.n	800b180 <_realloc_r+0x1c>
 800b1ac:	4635      	mov	r5, r6
 800b1ae:	e7e7      	b.n	800b180 <_realloc_r+0x1c>

0800b1b0 <__sfputc_r>:
 800b1b0:	6893      	ldr	r3, [r2, #8]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	b410      	push	{r4}
 800b1b8:	6093      	str	r3, [r2, #8]
 800b1ba:	da08      	bge.n	800b1ce <__sfputc_r+0x1e>
 800b1bc:	6994      	ldr	r4, [r2, #24]
 800b1be:	42a3      	cmp	r3, r4
 800b1c0:	db01      	blt.n	800b1c6 <__sfputc_r+0x16>
 800b1c2:	290a      	cmp	r1, #10
 800b1c4:	d103      	bne.n	800b1ce <__sfputc_r+0x1e>
 800b1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ca:	f000 b94b 	b.w	800b464 <__swbuf_r>
 800b1ce:	6813      	ldr	r3, [r2, #0]
 800b1d0:	1c58      	adds	r0, r3, #1
 800b1d2:	6010      	str	r0, [r2, #0]
 800b1d4:	7019      	strb	r1, [r3, #0]
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <__sfputs_r>:
 800b1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	18d5      	adds	r5, r2, r3
 800b1e8:	42ac      	cmp	r4, r5
 800b1ea:	d101      	bne.n	800b1f0 <__sfputs_r+0x12>
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e007      	b.n	800b200 <__sfputs_r+0x22>
 800b1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ffda 	bl	800b1b0 <__sfputc_r>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d1f3      	bne.n	800b1e8 <__sfputs_r+0xa>
 800b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b204 <_vfiprintf_r>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	460d      	mov	r5, r1
 800b20a:	b09d      	sub	sp, #116	; 0x74
 800b20c:	4614      	mov	r4, r2
 800b20e:	4698      	mov	r8, r3
 800b210:	4606      	mov	r6, r0
 800b212:	b118      	cbz	r0, 800b21c <_vfiprintf_r+0x18>
 800b214:	6983      	ldr	r3, [r0, #24]
 800b216:	b90b      	cbnz	r3, 800b21c <_vfiprintf_r+0x18>
 800b218:	f7fb fe5e 	bl	8006ed8 <__sinit>
 800b21c:	4b89      	ldr	r3, [pc, #548]	; (800b444 <_vfiprintf_r+0x240>)
 800b21e:	429d      	cmp	r5, r3
 800b220:	d11b      	bne.n	800b25a <_vfiprintf_r+0x56>
 800b222:	6875      	ldr	r5, [r6, #4]
 800b224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d405      	bmi.n	800b236 <_vfiprintf_r+0x32>
 800b22a:	89ab      	ldrh	r3, [r5, #12]
 800b22c:	059a      	lsls	r2, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_vfiprintf_r+0x32>
 800b230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b232:	f7f7 f8b8 	bl	80023a6 <__retarget_lock_acquire_recursive>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	071b      	lsls	r3, r3, #28
 800b23a:	d501      	bpl.n	800b240 <_vfiprintf_r+0x3c>
 800b23c:	692b      	ldr	r3, [r5, #16]
 800b23e:	b9eb      	cbnz	r3, 800b27c <_vfiprintf_r+0x78>
 800b240:	4629      	mov	r1, r5
 800b242:	4630      	mov	r0, r6
 800b244:	f000 f960 	bl	800b508 <__swsetup_r>
 800b248:	b1c0      	cbz	r0, 800b27c <_vfiprintf_r+0x78>
 800b24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b24c:	07dc      	lsls	r4, r3, #31
 800b24e:	d50e      	bpl.n	800b26e <_vfiprintf_r+0x6a>
 800b250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b254:	b01d      	add	sp, #116	; 0x74
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	4b7b      	ldr	r3, [pc, #492]	; (800b448 <_vfiprintf_r+0x244>)
 800b25c:	429d      	cmp	r5, r3
 800b25e:	d101      	bne.n	800b264 <_vfiprintf_r+0x60>
 800b260:	68b5      	ldr	r5, [r6, #8]
 800b262:	e7df      	b.n	800b224 <_vfiprintf_r+0x20>
 800b264:	4b79      	ldr	r3, [pc, #484]	; (800b44c <_vfiprintf_r+0x248>)
 800b266:	429d      	cmp	r5, r3
 800b268:	bf08      	it	eq
 800b26a:	68f5      	ldreq	r5, [r6, #12]
 800b26c:	e7da      	b.n	800b224 <_vfiprintf_r+0x20>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	0598      	lsls	r0, r3, #22
 800b272:	d4ed      	bmi.n	800b250 <_vfiprintf_r+0x4c>
 800b274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b276:	f7f7 f8aa 	bl	80023ce <__retarget_lock_release_recursive>
 800b27a:	e7e9      	b.n	800b250 <_vfiprintf_r+0x4c>
 800b27c:	2300      	movs	r3, #0
 800b27e:	9309      	str	r3, [sp, #36]	; 0x24
 800b280:	2320      	movs	r3, #32
 800b282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b286:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28a:	2330      	movs	r3, #48	; 0x30
 800b28c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b450 <_vfiprintf_r+0x24c>
 800b290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b294:	f04f 0901 	mov.w	r9, #1
 800b298:	4623      	mov	r3, r4
 800b29a:	469a      	mov	sl, r3
 800b29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a0:	b10a      	cbz	r2, 800b2a6 <_vfiprintf_r+0xa2>
 800b2a2:	2a25      	cmp	r2, #37	; 0x25
 800b2a4:	d1f9      	bne.n	800b29a <_vfiprintf_r+0x96>
 800b2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2aa:	d00b      	beq.n	800b2c4 <_vfiprintf_r+0xc0>
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7ff ff93 	bl	800b1de <__sfputs_r>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f000 80aa 	beq.w	800b412 <_vfiprintf_r+0x20e>
 800b2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c0:	445a      	add	r2, fp
 800b2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 80a2 	beq.w	800b412 <_vfiprintf_r+0x20e>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2d8:	f10a 0a01 	add.w	sl, sl, #1
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	9307      	str	r3, [sp, #28]
 800b2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2e6:	4654      	mov	r4, sl
 800b2e8:	2205      	movs	r2, #5
 800b2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ee:	4858      	ldr	r0, [pc, #352]	; (800b450 <_vfiprintf_r+0x24c>)
 800b2f0:	f7f4 ff76 	bl	80001e0 <memchr>
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	b9d8      	cbnz	r0, 800b330 <_vfiprintf_r+0x12c>
 800b2f8:	06d1      	lsls	r1, r2, #27
 800b2fa:	bf44      	itt	mi
 800b2fc:	2320      	movmi	r3, #32
 800b2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b302:	0713      	lsls	r3, r2, #28
 800b304:	bf44      	itt	mi
 800b306:	232b      	movmi	r3, #43	; 0x2b
 800b308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30c:	f89a 3000 	ldrb.w	r3, [sl]
 800b310:	2b2a      	cmp	r3, #42	; 0x2a
 800b312:	d015      	beq.n	800b340 <_vfiprintf_r+0x13c>
 800b314:	9a07      	ldr	r2, [sp, #28]
 800b316:	4654      	mov	r4, sl
 800b318:	2000      	movs	r0, #0
 800b31a:	f04f 0c0a 	mov.w	ip, #10
 800b31e:	4621      	mov	r1, r4
 800b320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b324:	3b30      	subs	r3, #48	; 0x30
 800b326:	2b09      	cmp	r3, #9
 800b328:	d94e      	bls.n	800b3c8 <_vfiprintf_r+0x1c4>
 800b32a:	b1b0      	cbz	r0, 800b35a <_vfiprintf_r+0x156>
 800b32c:	9207      	str	r2, [sp, #28]
 800b32e:	e014      	b.n	800b35a <_vfiprintf_r+0x156>
 800b330:	eba0 0308 	sub.w	r3, r0, r8
 800b334:	fa09 f303 	lsl.w	r3, r9, r3
 800b338:	4313      	orrs	r3, r2
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	46a2      	mov	sl, r4
 800b33e:	e7d2      	b.n	800b2e6 <_vfiprintf_r+0xe2>
 800b340:	9b03      	ldr	r3, [sp, #12]
 800b342:	1d19      	adds	r1, r3, #4
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	9103      	str	r1, [sp, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	bfbb      	ittet	lt
 800b34c:	425b      	neglt	r3, r3
 800b34e:	f042 0202 	orrlt.w	r2, r2, #2
 800b352:	9307      	strge	r3, [sp, #28]
 800b354:	9307      	strlt	r3, [sp, #28]
 800b356:	bfb8      	it	lt
 800b358:	9204      	strlt	r2, [sp, #16]
 800b35a:	7823      	ldrb	r3, [r4, #0]
 800b35c:	2b2e      	cmp	r3, #46	; 0x2e
 800b35e:	d10c      	bne.n	800b37a <_vfiprintf_r+0x176>
 800b360:	7863      	ldrb	r3, [r4, #1]
 800b362:	2b2a      	cmp	r3, #42	; 0x2a
 800b364:	d135      	bne.n	800b3d2 <_vfiprintf_r+0x1ce>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	9203      	str	r2, [sp, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfb8      	it	lt
 800b372:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b376:	3402      	adds	r4, #2
 800b378:	9305      	str	r3, [sp, #20]
 800b37a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b460 <_vfiprintf_r+0x25c>
 800b37e:	7821      	ldrb	r1, [r4, #0]
 800b380:	2203      	movs	r2, #3
 800b382:	4650      	mov	r0, sl
 800b384:	f7f4 ff2c 	bl	80001e0 <memchr>
 800b388:	b140      	cbz	r0, 800b39c <_vfiprintf_r+0x198>
 800b38a:	2340      	movs	r3, #64	; 0x40
 800b38c:	eba0 000a 	sub.w	r0, r0, sl
 800b390:	fa03 f000 	lsl.w	r0, r3, r0
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	4303      	orrs	r3, r0
 800b398:	3401      	adds	r4, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a0:	482c      	ldr	r0, [pc, #176]	; (800b454 <_vfiprintf_r+0x250>)
 800b3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	f7f4 ff1a 	bl	80001e0 <memchr>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d03f      	beq.n	800b430 <_vfiprintf_r+0x22c>
 800b3b0:	4b29      	ldr	r3, [pc, #164]	; (800b458 <_vfiprintf_r+0x254>)
 800b3b2:	bb1b      	cbnz	r3, 800b3fc <_vfiprintf_r+0x1f8>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	3307      	adds	r3, #7
 800b3b8:	f023 0307 	bic.w	r3, r3, #7
 800b3bc:	3308      	adds	r3, #8
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c2:	443b      	add	r3, r7
 800b3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c6:	e767      	b.n	800b298 <_vfiprintf_r+0x94>
 800b3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	e7a5      	b.n	800b31e <_vfiprintf_r+0x11a>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	3401      	adds	r4, #1
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f04f 0c0a 	mov.w	ip, #10
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3e4:	3a30      	subs	r2, #48	; 0x30
 800b3e6:	2a09      	cmp	r2, #9
 800b3e8:	d903      	bls.n	800b3f2 <_vfiprintf_r+0x1ee>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0c5      	beq.n	800b37a <_vfiprintf_r+0x176>
 800b3ee:	9105      	str	r1, [sp, #20]
 800b3f0:	e7c3      	b.n	800b37a <_vfiprintf_r+0x176>
 800b3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7f0      	b.n	800b3de <_vfiprintf_r+0x1da>
 800b3fc:	ab03      	add	r3, sp, #12
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	462a      	mov	r2, r5
 800b402:	4b16      	ldr	r3, [pc, #88]	; (800b45c <_vfiprintf_r+0x258>)
 800b404:	a904      	add	r1, sp, #16
 800b406:	4630      	mov	r0, r6
 800b408:	f7fb ff90 	bl	800732c <_printf_float>
 800b40c:	4607      	mov	r7, r0
 800b40e:	1c78      	adds	r0, r7, #1
 800b410:	d1d6      	bne.n	800b3c0 <_vfiprintf_r+0x1bc>
 800b412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b414:	07d9      	lsls	r1, r3, #31
 800b416:	d405      	bmi.n	800b424 <_vfiprintf_r+0x220>
 800b418:	89ab      	ldrh	r3, [r5, #12]
 800b41a:	059a      	lsls	r2, r3, #22
 800b41c:	d402      	bmi.n	800b424 <_vfiprintf_r+0x220>
 800b41e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b420:	f7f6 ffd5 	bl	80023ce <__retarget_lock_release_recursive>
 800b424:	89ab      	ldrh	r3, [r5, #12]
 800b426:	065b      	lsls	r3, r3, #25
 800b428:	f53f af12 	bmi.w	800b250 <_vfiprintf_r+0x4c>
 800b42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b42e:	e711      	b.n	800b254 <_vfiprintf_r+0x50>
 800b430:	ab03      	add	r3, sp, #12
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	462a      	mov	r2, r5
 800b436:	4b09      	ldr	r3, [pc, #36]	; (800b45c <_vfiprintf_r+0x258>)
 800b438:	a904      	add	r1, sp, #16
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7fc fa1a 	bl	8007874 <_printf_i>
 800b440:	e7e4      	b.n	800b40c <_vfiprintf_r+0x208>
 800b442:	bf00      	nop
 800b444:	0800b838 	.word	0x0800b838
 800b448:	0800b858 	.word	0x0800b858
 800b44c:	0800b818 	.word	0x0800b818
 800b450:	0800bc7c 	.word	0x0800bc7c
 800b454:	0800bc86 	.word	0x0800bc86
 800b458:	0800732d 	.word	0x0800732d
 800b45c:	0800b1df 	.word	0x0800b1df
 800b460:	0800bc82 	.word	0x0800bc82

0800b464 <__swbuf_r>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	460e      	mov	r6, r1
 800b468:	4614      	mov	r4, r2
 800b46a:	4605      	mov	r5, r0
 800b46c:	b118      	cbz	r0, 800b476 <__swbuf_r+0x12>
 800b46e:	6983      	ldr	r3, [r0, #24]
 800b470:	b90b      	cbnz	r3, 800b476 <__swbuf_r+0x12>
 800b472:	f7fb fd31 	bl	8006ed8 <__sinit>
 800b476:	4b21      	ldr	r3, [pc, #132]	; (800b4fc <__swbuf_r+0x98>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	d12b      	bne.n	800b4d4 <__swbuf_r+0x70>
 800b47c:	686c      	ldr	r4, [r5, #4]
 800b47e:	69a3      	ldr	r3, [r4, #24]
 800b480:	60a3      	str	r3, [r4, #8]
 800b482:	89a3      	ldrh	r3, [r4, #12]
 800b484:	071a      	lsls	r2, r3, #28
 800b486:	d52f      	bpl.n	800b4e8 <__swbuf_r+0x84>
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	b36b      	cbz	r3, 800b4e8 <__swbuf_r+0x84>
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	1ac0      	subs	r0, r0, r3
 800b492:	6963      	ldr	r3, [r4, #20]
 800b494:	b2f6      	uxtb	r6, r6
 800b496:	4283      	cmp	r3, r0
 800b498:	4637      	mov	r7, r6
 800b49a:	dc04      	bgt.n	800b4a6 <__swbuf_r+0x42>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7fe fbd4 	bl	8009c4c <_fflush_r>
 800b4a4:	bb30      	cbnz	r0, 800b4f4 <__swbuf_r+0x90>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	60a3      	str	r3, [r4, #8]
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	6022      	str	r2, [r4, #0]
 800b4b2:	701e      	strb	r6, [r3, #0]
 800b4b4:	6963      	ldr	r3, [r4, #20]
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	4283      	cmp	r3, r0
 800b4ba:	d004      	beq.n	800b4c6 <__swbuf_r+0x62>
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	07db      	lsls	r3, r3, #31
 800b4c0:	d506      	bpl.n	800b4d0 <__swbuf_r+0x6c>
 800b4c2:	2e0a      	cmp	r6, #10
 800b4c4:	d104      	bne.n	800b4d0 <__swbuf_r+0x6c>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7fe fbbf 	bl	8009c4c <_fflush_r>
 800b4ce:	b988      	cbnz	r0, 800b4f4 <__swbuf_r+0x90>
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d4:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <__swbuf_r+0x9c>)
 800b4d6:	429c      	cmp	r4, r3
 800b4d8:	d101      	bne.n	800b4de <__swbuf_r+0x7a>
 800b4da:	68ac      	ldr	r4, [r5, #8]
 800b4dc:	e7cf      	b.n	800b47e <__swbuf_r+0x1a>
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <__swbuf_r+0xa0>)
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	bf08      	it	eq
 800b4e4:	68ec      	ldreq	r4, [r5, #12]
 800b4e6:	e7ca      	b.n	800b47e <__swbuf_r+0x1a>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f000 f80c 	bl	800b508 <__swsetup_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d0cb      	beq.n	800b48c <__swbuf_r+0x28>
 800b4f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b4f8:	e7ea      	b.n	800b4d0 <__swbuf_r+0x6c>
 800b4fa:	bf00      	nop
 800b4fc:	0800b838 	.word	0x0800b838
 800b500:	0800b858 	.word	0x0800b858
 800b504:	0800b818 	.word	0x0800b818

0800b508 <__swsetup_r>:
 800b508:	4b32      	ldr	r3, [pc, #200]	; (800b5d4 <__swsetup_r+0xcc>)
 800b50a:	b570      	push	{r4, r5, r6, lr}
 800b50c:	681d      	ldr	r5, [r3, #0]
 800b50e:	4606      	mov	r6, r0
 800b510:	460c      	mov	r4, r1
 800b512:	b125      	cbz	r5, 800b51e <__swsetup_r+0x16>
 800b514:	69ab      	ldr	r3, [r5, #24]
 800b516:	b913      	cbnz	r3, 800b51e <__swsetup_r+0x16>
 800b518:	4628      	mov	r0, r5
 800b51a:	f7fb fcdd 	bl	8006ed8 <__sinit>
 800b51e:	4b2e      	ldr	r3, [pc, #184]	; (800b5d8 <__swsetup_r+0xd0>)
 800b520:	429c      	cmp	r4, r3
 800b522:	d10f      	bne.n	800b544 <__swsetup_r+0x3c>
 800b524:	686c      	ldr	r4, [r5, #4]
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b52c:	0719      	lsls	r1, r3, #28
 800b52e:	d42c      	bmi.n	800b58a <__swsetup_r+0x82>
 800b530:	06dd      	lsls	r5, r3, #27
 800b532:	d411      	bmi.n	800b558 <__swsetup_r+0x50>
 800b534:	2309      	movs	r3, #9
 800b536:	6033      	str	r3, [r6, #0]
 800b538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b542:	e03e      	b.n	800b5c2 <__swsetup_r+0xba>
 800b544:	4b25      	ldr	r3, [pc, #148]	; (800b5dc <__swsetup_r+0xd4>)
 800b546:	429c      	cmp	r4, r3
 800b548:	d101      	bne.n	800b54e <__swsetup_r+0x46>
 800b54a:	68ac      	ldr	r4, [r5, #8]
 800b54c:	e7eb      	b.n	800b526 <__swsetup_r+0x1e>
 800b54e:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <__swsetup_r+0xd8>)
 800b550:	429c      	cmp	r4, r3
 800b552:	bf08      	it	eq
 800b554:	68ec      	ldreq	r4, [r5, #12]
 800b556:	e7e6      	b.n	800b526 <__swsetup_r+0x1e>
 800b558:	0758      	lsls	r0, r3, #29
 800b55a:	d512      	bpl.n	800b582 <__swsetup_r+0x7a>
 800b55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b55e:	b141      	cbz	r1, 800b572 <__swsetup_r+0x6a>
 800b560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b564:	4299      	cmp	r1, r3
 800b566:	d002      	beq.n	800b56e <__swsetup_r+0x66>
 800b568:	4630      	mov	r0, r6
 800b56a:	f7fb fd95 	bl	8007098 <_free_r>
 800b56e:	2300      	movs	r3, #0
 800b570:	6363      	str	r3, [r4, #52]	; 0x34
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b578:	81a3      	strh	r3, [r4, #12]
 800b57a:	2300      	movs	r3, #0
 800b57c:	6063      	str	r3, [r4, #4]
 800b57e:	6923      	ldr	r3, [r4, #16]
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	f043 0308 	orr.w	r3, r3, #8
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	b94b      	cbnz	r3, 800b5a2 <__swsetup_r+0x9a>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b598:	d003      	beq.n	800b5a2 <__swsetup_r+0x9a>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	f000 f84d 	bl	800b63c <__smakebuf_r>
 800b5a2:	89a0      	ldrh	r0, [r4, #12]
 800b5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5a8:	f010 0301 	ands.w	r3, r0, #1
 800b5ac:	d00a      	beq.n	800b5c4 <__swsetup_r+0xbc>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60a3      	str	r3, [r4, #8]
 800b5b2:	6963      	ldr	r3, [r4, #20]
 800b5b4:	425b      	negs	r3, r3
 800b5b6:	61a3      	str	r3, [r4, #24]
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	b943      	cbnz	r3, 800b5ce <__swsetup_r+0xc6>
 800b5bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5c0:	d1ba      	bne.n	800b538 <__swsetup_r+0x30>
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	0781      	lsls	r1, r0, #30
 800b5c6:	bf58      	it	pl
 800b5c8:	6963      	ldrpl	r3, [r4, #20]
 800b5ca:	60a3      	str	r3, [r4, #8]
 800b5cc:	e7f4      	b.n	800b5b8 <__swsetup_r+0xb0>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e7f7      	b.n	800b5c2 <__swsetup_r+0xba>
 800b5d2:	bf00      	nop
 800b5d4:	20000010 	.word	0x20000010
 800b5d8:	0800b838 	.word	0x0800b838
 800b5dc:	0800b858 	.word	0x0800b858
 800b5e0:	0800b818 	.word	0x0800b818

0800b5e4 <abort>:
 800b5e4:	b508      	push	{r3, lr}
 800b5e6:	2006      	movs	r0, #6
 800b5e8:	f000 f898 	bl	800b71c <raise>
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	f7f6 fd81 	bl	80020f4 <_exit>

0800b5f2 <__swhatbuf_r>:
 800b5f2:	b570      	push	{r4, r5, r6, lr}
 800b5f4:	460e      	mov	r6, r1
 800b5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	b096      	sub	sp, #88	; 0x58
 800b5fe:	4614      	mov	r4, r2
 800b600:	461d      	mov	r5, r3
 800b602:	da07      	bge.n	800b614 <__swhatbuf_r+0x22>
 800b604:	2300      	movs	r3, #0
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	89b3      	ldrh	r3, [r6, #12]
 800b60a:	061a      	lsls	r2, r3, #24
 800b60c:	d410      	bmi.n	800b630 <__swhatbuf_r+0x3e>
 800b60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b612:	e00e      	b.n	800b632 <__swhatbuf_r+0x40>
 800b614:	466a      	mov	r2, sp
 800b616:	f000 f89d 	bl	800b754 <_fstat_r>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	dbf2      	blt.n	800b604 <__swhatbuf_r+0x12>
 800b61e:	9a01      	ldr	r2, [sp, #4]
 800b620:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b624:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b628:	425a      	negs	r2, r3
 800b62a:	415a      	adcs	r2, r3
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	e7ee      	b.n	800b60e <__swhatbuf_r+0x1c>
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	2000      	movs	r0, #0
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	b016      	add	sp, #88	; 0x58
 800b638:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b63c <__smakebuf_r>:
 800b63c:	898b      	ldrh	r3, [r1, #12]
 800b63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b640:	079d      	lsls	r5, r3, #30
 800b642:	4606      	mov	r6, r0
 800b644:	460c      	mov	r4, r1
 800b646:	d507      	bpl.n	800b658 <__smakebuf_r+0x1c>
 800b648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	2301      	movs	r3, #1
 800b652:	6163      	str	r3, [r4, #20]
 800b654:	b002      	add	sp, #8
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	ab01      	add	r3, sp, #4
 800b65a:	466a      	mov	r2, sp
 800b65c:	f7ff ffc9 	bl	800b5f2 <__swhatbuf_r>
 800b660:	9900      	ldr	r1, [sp, #0]
 800b662:	4605      	mov	r5, r0
 800b664:	4630      	mov	r0, r6
 800b666:	f7fb fd67 	bl	8007138 <_malloc_r>
 800b66a:	b948      	cbnz	r0, 800b680 <__smakebuf_r+0x44>
 800b66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b670:	059a      	lsls	r2, r3, #22
 800b672:	d4ef      	bmi.n	800b654 <__smakebuf_r+0x18>
 800b674:	f023 0303 	bic.w	r3, r3, #3
 800b678:	f043 0302 	orr.w	r3, r3, #2
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e7e3      	b.n	800b648 <__smakebuf_r+0xc>
 800b680:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <__smakebuf_r+0x7c>)
 800b682:	62b3      	str	r3, [r6, #40]	; 0x28
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	6163      	str	r3, [r4, #20]
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	6120      	str	r0, [r4, #16]
 800b696:	b15b      	cbz	r3, 800b6b0 <__smakebuf_r+0x74>
 800b698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 f86b 	bl	800b778 <_isatty_r>
 800b6a2:	b128      	cbz	r0, 800b6b0 <__smakebuf_r+0x74>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	f043 0301 	orr.w	r3, r3, #1
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	89a0      	ldrh	r0, [r4, #12]
 800b6b2:	4305      	orrs	r5, r0
 800b6b4:	81a5      	strh	r5, [r4, #12]
 800b6b6:	e7cd      	b.n	800b654 <__smakebuf_r+0x18>
 800b6b8:	08006e71 	.word	0x08006e71

0800b6bc <_malloc_usable_size_r>:
 800b6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c0:	1f18      	subs	r0, r3, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	bfbc      	itt	lt
 800b6c6:	580b      	ldrlt	r3, [r1, r0]
 800b6c8:	18c0      	addlt	r0, r0, r3
 800b6ca:	4770      	bx	lr

0800b6cc <_raise_r>:
 800b6cc:	291f      	cmp	r1, #31
 800b6ce:	b538      	push	{r3, r4, r5, lr}
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	d904      	bls.n	800b6e0 <_raise_r+0x14>
 800b6d6:	2316      	movs	r3, #22
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6e2:	b112      	cbz	r2, 800b6ea <_raise_r+0x1e>
 800b6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e8:	b94b      	cbnz	r3, 800b6fe <_raise_r+0x32>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f000 f830 	bl	800b750 <_getpid_r>
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fa:	f000 b817 	b.w	800b72c <_kill_r>
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d00a      	beq.n	800b718 <_raise_r+0x4c>
 800b702:	1c59      	adds	r1, r3, #1
 800b704:	d103      	bne.n	800b70e <_raise_r+0x42>
 800b706:	2316      	movs	r3, #22
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7e7      	b.n	800b6de <_raise_r+0x12>
 800b70e:	2400      	movs	r4, #0
 800b710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b714:	4628      	mov	r0, r5
 800b716:	4798      	blx	r3
 800b718:	2000      	movs	r0, #0
 800b71a:	e7e0      	b.n	800b6de <_raise_r+0x12>

0800b71c <raise>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <raise+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f7ff bfd3 	b.w	800b6cc <_raise_r>
 800b726:	bf00      	nop
 800b728:	20000010 	.word	0x20000010

0800b72c <_kill_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_kill_r+0x20>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	4611      	mov	r1, r2
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	f7f6 fccb 	bl	80020d4 <_kill>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d102      	bne.n	800b748 <_kill_r+0x1c>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b103      	cbz	r3, 800b748 <_kill_r+0x1c>
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	bd38      	pop	{r3, r4, r5, pc}
 800b74a:	bf00      	nop
 800b74c:	20004498 	.word	0x20004498

0800b750 <_getpid_r>:
 800b750:	f7f6 bcb8 	b.w	80020c4 <_getpid>

0800b754 <_fstat_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d07      	ldr	r5, [pc, #28]	; (800b774 <_fstat_r+0x20>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f7f6 fd16 	bl	8002192 <_fstat>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d102      	bne.n	800b770 <_fstat_r+0x1c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b103      	cbz	r3, 800b770 <_fstat_r+0x1c>
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	20004498 	.word	0x20004498

0800b778 <_isatty_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d06      	ldr	r5, [pc, #24]	; (800b794 <_isatty_r+0x1c>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f6 fd15 	bl	80021b2 <_isatty>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_isatty_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_isatty_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	20004498 	.word	0x20004498

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
