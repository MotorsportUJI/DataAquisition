
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a91c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae20  0800ae20  00020854  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae28  0800ae28  00020854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae30  0800ae30  0001ae30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000854  20000000  0800ae34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020854  2**0
                  CONTENTS
 10 .bss          00008ffc  20000858  20000858  00020858  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009854  20009854  00020858  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a032  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b70  00000000  00000000  0004a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  00050428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b90  00000000  00000000  000521e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bcb  00000000  00000000  00053d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026ea7  00000000  00000000  0007c93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee642  00000000  00000000  000a37e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00191e24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007db8  00000000  00000000  00191e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000858 	.word	0x20000858
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa94 	.word	0x0800aa94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000085c 	.word	0x2000085c
 80001cc:	0800aa94 	.word	0x0800aa94

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <InitTask>:
void updateUI(void *pvParams){

}

//  task for initializing stuff ()
void InitTask(void * pvParams){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// initialize peripherals
	//leds
	initializeLEDS(&hdac);
 80004d0:	4807      	ldr	r0, [pc, #28]	; (80004f0 <InitTask+0x28>)
 80004d2:	f000 f837 	bl	8000544 <initializeLEDS>
	// ADC start in DMA mode
	HAL_ADC_Start_DMA(&hadc1, ADCvalues, sizeof(ADCvalues));
 80004d6:	2258      	movs	r2, #88	; 0x58
 80004d8:	4906      	ldr	r1, [pc, #24]	; (80004f4 <InitTask+0x2c>)
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <InitTask+0x30>)
 80004dc:	f001 fb20 	bl	8001b20 <HAL_ADC_Start_DMA>


	// exit init task, important, if not hard fault
	vTaskDelete(NULL);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f008 fe35 	bl	8009150 <vTaskDelete>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200091dc 	.word	0x200091dc
 80004f4:	20009094 	.word	0x20009094
 80004f8:	20009194 	.word	0x20009194

080004fc <SecondMain>:

int SecondMain(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af02      	add	r7, sp, #8


	// start initialize task, (maybe some stuff needs a started scheduler for running)
	xTaskCreate(InitTask, "Initializing Task", 128, NULL, 1, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	4906      	ldr	r1, [pc, #24]	; (8000528 <SecondMain+0x2c>)
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <SecondMain+0x30>)
 8000512:	f008 fca6 	bl	8008e62 <xTaskCreate>

	// start scheduler, this won't return unless there is an error
	vTaskStartScheduler();
 8000516:	f008 fedf 	bl	80092d8 <vTaskStartScheduler>
	// endless loop so we never return to that hell of a main
			halt();
 800051a:	f000 f82d 	bl	8000578 <halt>
	return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	0800aaac 	.word	0x0800aaac
 800052c:	080004c9 	.word	0x080004c9

08000530 <HAL_ADC_ErrorCallback>:

// Interruption Callbacks
// ADC error handling (restart ADC)
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <initializeLEDS+0x30>)
 8000552:	f003 fc43 	bl	8003ddc <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 8000556:	2100      	movs	r1, #0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f002 fa9d 	bl	8002a98 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 800055e:	2300      	movs	r3, #0
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f002 fb4f 	bl	8002c08 <HAL_DAC_SetValue>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <halt>:
}

/**
  * @brief  halts system and puts all 4 leds on
  */
void halt(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <halt+0x3c>)
 8000584:	f003 fc2a 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <halt+0x3c>)
 8000590:	f003 fc24 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <halt+0x3c>)
 800059c:	f003 fc1e 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <halt+0x3c>)
 80005a8:	f003 fc18 	bl	8003ddc <HAL_GPIO_WritePin>

	vTaskEndScheduler();
 80005ac:	f008 fefe 	bl	80093ac <vTaskEndScheduler>
	for (;;);
 80005b0:	e7fe      	b.n	80005b0 <halt+0x38>
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000878 	.word	0x20000878
 80005e8:	20000cf8 	.word	0x20000cf8

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f8c3 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f833 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 faeb 	bl	8000bd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005fe:	f000 fa09 	bl	8000a14 <MX_SPI1_Init>
  MX_DAC_Init();
 8000602:	f000 f9bd 	bl	8000980 <MX_DAC_Init>
  MX_CAN1_Init();
 8000606:	f000 f973 	bl	80008f0 <MX_CAN1_Init>
  MX_SPI2_Init();
 800060a:	f000 fa39 	bl	8000a80 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800060e:	f000 fa6d 	bl	8000aec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000612:	f000 fa95 	bl	8000b40 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8000616:	f000 f99f 	bl	8000958 <MX_CRC_Init>
  MX_SDIO_SD_Init();
 800061a:	f000 f9db 	bl	80009d4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800061e:	f007 f995 	bl	800794c <MX_FATFS_Init>
  MX_DMA_Init();
 8000622:	f000 fab7 	bl	8000b94 <MX_DMA_Init>
  MX_ADC1_Init();
 8000626:	f000 f885 	bl	8000734 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // From here we abdup the workflow
  SecondMain();
 800062a:	f7ff ff67 	bl	80004fc <SecondMain>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0x6c>)
 8000630:	1d3c      	adds	r4, r7, #4
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f007 fc79 	bl	8007f3c <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <main+0x70>)
 800064e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000650:	f007 fc51 	bl	8007ef6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x68>
 8000656:	bf00      	nop
 8000658:	0800aacc 	.word	0x0800aacc
 800065c:	200090ec 	.word	0x200090ec

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a f814 	bl	800a69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006de:	2307      	movs	r3, #7
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fbaa 	bl	8003e40 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 fbb1 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2105      	movs	r1, #5
 8000714:	4618      	mov	r0, r3
 8000716:	f003 febb 	bl	8004490 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000720:	f000 fb9a 	bl	8000e58 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b67      	ldr	r3, [pc, #412]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000748:	4a67      	ldr	r2, [pc, #412]	; (80008e8 <MX_ADC1_Init+0x1b4>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b65      	ldr	r3, [pc, #404]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800075c:	2201      	movs	r2, #1
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000762:	2201      	movs	r2, #1
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b5b      	ldr	r3, [pc, #364]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000776:	4a5d      	ldr	r2, [pc, #372]	; (80008ec <MX_ADC1_Init+0x1b8>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000780:	4b58      	ldr	r3, [pc, #352]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000782:	220b      	movs	r2, #11
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000786:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000788:	2201      	movs	r2, #1
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	4853      	ldr	r0, [pc, #332]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000796:	f001 f857 	bl	8001848 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fb5a 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	484b      	ldr	r0, [pc, #300]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 80007b6:	f001 fafd 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 fb4a 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4844      	ldr	r0, [pc, #272]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 80007d2:	f001 faef 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007dc:	f000 fb3c 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007e4:	2303      	movs	r3, #3
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	483d      	ldr	r0, [pc, #244]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 80007ee:	f001 fae1 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007f8:	f000 fb2e 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4836      	ldr	r0, [pc, #216]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800080a:	f001 fad3 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000814:	f000 fb20 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000818:	2309      	movs	r3, #9
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800081c:	2305      	movs	r3, #5
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000826:	f001 fac5 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000830:	f000 fb12 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000834:	230b      	movs	r3, #11
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000838:	2306      	movs	r3, #6
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4828      	ldr	r0, [pc, #160]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000842:	f001 fab7 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800084c:	f000 fb04 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000850:	230e      	movs	r3, #14
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000854:	2307      	movs	r3, #7
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4821      	ldr	r0, [pc, #132]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800085e:	f001 faa9 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000868:	f000 faf6 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800086c:	230f      	movs	r3, #15
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	481a      	ldr	r0, [pc, #104]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 800087a:	f001 fa9b 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000884:	f000 fae8 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000888:	2310      	movs	r3, #16
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800088c:	2309      	movs	r3, #9
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 8000896:	f001 fa8d 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80008a0:	f000 fada 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008a4:	2311      	movs	r3, #17
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80008a8:	230a      	movs	r3, #10
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 80008b2:	f001 fa7f 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80008bc:	f000 facc 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80008c0:	2312      	movs	r3, #18
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80008c4:	230b      	movs	r3, #11
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_ADC1_Init+0x1b0>)
 80008ce:	f001 fa71 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80008d8:	f000 fabe 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20009194 	.word	0x20009194
 80008e8:	40012000 	.word	0x40012000
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_CAN1_Init+0x60>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_CAN1_Init+0x64>)
 80008f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_CAN1_Init+0x60>)
 80008fc:	2210      	movs	r2, #16
 80008fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_CAN1_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_CAN1_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_CAN1_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_CAN1_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_CAN1_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_CAN1_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_CAN1_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_CAN1_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_CAN1_Init+0x60>)
 8000932:	2200      	movs	r2, #0
 8000934:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_CAN1_Init+0x60>)
 8000938:	2200      	movs	r2, #0
 800093a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_CAN1_Init+0x60>)
 800093e:	f001 fd23 	bl	8002388 <HAL_CAN_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fa86 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20009370 	.word	0x20009370
 8000954:	40006400 	.word	0x40006400

08000958 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_CRC_Init+0x20>)
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <MX_CRC_Init+0x24>)
 8000960:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_CRC_Init+0x20>)
 8000964:	f002 f83e 	bl	80029e4 <HAL_CRC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800096e:	f000 fa73 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000918c 	.word	0x2000918c
 800097c:	40023000 	.word	0x40023000

08000980 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DAC_Init+0x4c>)
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_DAC_Init+0x50>)
 8000992:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_DAC_Init+0x4c>)
 8000996:	f002 f84f 	bl	8002a38 <HAL_DAC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009a0:	f000 fa5a 	bl	8000e58 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_DAC_Init+0x4c>)
 80009b4:	f002 f97a 	bl	8002cac <HAL_DAC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009be:	f000 fa4b 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200091dc 	.word	0x200091dc
 80009d0:	40007400 	.word	0x40007400

080009d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <MX_SDIO_SD_Init+0x3c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20009250 	.word	0x20009250
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SPI1_Init+0x64>)
 8000a66:	f005 f8f3 	bl	8005c50 <HAL_SPI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a70:	f000 f9f2 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20009318 	.word	0x20009318
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <MX_SPI2_Init+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000acc:	220a      	movs	r2, #10
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_SPI2_Init+0x64>)
 8000ad2:	f005 f8bd 	bl	8005c50 <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000adc:	f000 f9bc 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200090f0 	.word	0x200090f0
 8000ae8:	40003800 	.word	0x40003800

08000aec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART3_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART3_UART_Init+0x4c>)
 8000b24:	f005 fdc6 	bl	80066b4 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f000 f993 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20009148 	.word	0x20009148
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART6_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART6_UART_Init+0x4c>)
 8000b78:	f005 fd9c 	bl	80066b4 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f969 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200092d4 	.word	0x200092d4
 8000b90:	40011400 	.word	0x40011400

08000b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x3c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <MX_DMA_Init+0x3c>)
 8000ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x3c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	2038      	movs	r0, #56	; 0x38
 8000bbc:	f001 fece 	bl	800295c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc0:	2038      	movs	r0, #56	; 0x38
 8000bc2:	f001 fef7 	bl	80029b4 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	4b87      	ldr	r3, [pc, #540]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a86      	ldr	r2, [pc, #536]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b84      	ldr	r3, [pc, #528]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	4b80      	ldr	r3, [pc, #512]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a7f      	ldr	r2, [pc, #508]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b7d      	ldr	r3, [pc, #500]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b79      	ldr	r3, [pc, #484]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a78      	ldr	r2, [pc, #480]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b76      	ldr	r3, [pc, #472]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b72      	ldr	r3, [pc, #456]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a71      	ldr	r2, [pc, #452]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b6b      	ldr	r3, [pc, #428]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a6a      	ldr	r2, [pc, #424]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b64      	ldr	r3, [pc, #400]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a63      	ldr	r2, [pc, #396]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b61      	ldr	r3, [pc, #388]	; (8000e0c <MX_GPIO_Init+0x238>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2108      	movs	r1, #8
 8000c96:	485e      	ldr	r0, [pc, #376]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000c98:	f003 f8a0 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	485c      	ldr	r0, [pc, #368]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000ca2:	f003 f89b 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8000cac:	485a      	ldr	r0, [pc, #360]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000cae:	f003 f895 	bl	8003ddc <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4851      	ldr	r0, [pc, #324]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000cca:	f002 fd81 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	484b      	ldr	r0, [pc, #300]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000ce6:	f002 fd73 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cea:	2308      	movs	r3, #8
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4843      	ldr	r0, [pc, #268]	; (8000e14 <MX_GPIO_Init+0x240>)
 8000d06:	f002 fd63 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	483f      	ldr	r0, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x248>)
 8000d20:	f002 fd56 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d24:	2304      	movs	r3, #4
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	483a      	ldr	r0, [pc, #232]	; (8000e20 <MX_GPIO_Init+0x24c>)
 8000d38:	f002 fd4a 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d3c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000d40:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	482f      	ldr	r0, [pc, #188]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000d52:	f002 fd3d 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	482b      	ldr	r0, [pc, #172]	; (8000e20 <MX_GPIO_Init+0x24c>)
 8000d74:	f002 fd2c 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8000d78:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000d7c:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000d92:	f002 fd1d 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x248>)
 8000dac:	f002 fd10 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000db0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_GPIO_Init+0x248>)
 8000dce:	f002 fcff 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_GPIO_Init+0x244>)
 8000de6:	f002 fcf3 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_GPIO_Init+0x23c>)
 8000e00:	f002 fce6 	bl	80037d0 <HAL_GPIO_Init>

}
 8000e04:	bf00      	nop
 8000e06:	3730      	adds	r7, #48	; 0x30
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400

08000e24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f007 f8d1 	bl	8007fd4 <osDelay>
 8000e32:	e7fb      	b.n	8000e2c <StartDefaultTask+0x8>

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e46:	f000 fcbb 	bl	80017c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
#ifdef DEBUG
	asm("BKPT #0");
 8000e5c:	be00      	bkpt	0x0000
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5e:	b672      	cpsid	i
}
 8000e60:	bf00      	nop
#endif
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0xa>

08000e64 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
#ifdef DEBUG
	asm("BKPT #0");
 8000e6e:	be00      	bkpt	0x0000
#endif
  /* USER CODE END 6 */
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f001 fd4b 	bl	800295c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	; (8001018 <HAL_ADC_MspInit+0x144>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 808c 	bne.w	8001010 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	4b47      	ldr	r3, [pc, #284]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a46      	ldr	r2, [pc, #280]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a3f      	ldr	r2, [pc, #252]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a38      	ldr	r2, [pc, #224]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_ADC_MspInit+0x148>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f68:	2332      	movs	r3, #50	; 0x32
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <HAL_ADC_MspInit+0x14c>)
 8000f7c:	f002 fc28 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f80:	230e      	movs	r3, #14
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <HAL_ADC_MspInit+0x150>)
 8000f94:	f002 fc1c 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481f      	ldr	r0, [pc, #124]	; (8001028 <HAL_ADC_MspInit+0x154>)
 8000fac:	f002 fc10 	bl	80037d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <HAL_ADC_MspInit+0x15c>)
 8000fb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fde:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <HAL_ADC_MspInit+0x158>)
 8000ff6:	f001 fef3 	bl	8002de0 <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001000:	f7ff ff2a 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_ADC_MspInit+0x158>)
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_ADC_MspInit+0x158>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	; 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	200091f0 	.word	0x200091f0
 8001030:	40026410 	.word	0x40026410

08001034 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_CAN_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_CAN_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_CAN_MspInit+0x88>)
 8001060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_CAN_MspInit+0x88>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_CAN_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_CAN_MspInit+0x88>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_CAN_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800108e:	2303      	movs	r3, #3
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800109e:	2309      	movs	r3, #9
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_CAN_MspInit+0x8c>)
 80010aa:	f002 fb91 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40006400 	.word	0x40006400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_CRC_MspInit+0x3c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10d      	bne.n	80010f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_CRC_MspInit+0x40>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023000 	.word	0x40023000
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_DAC_MspInit+0x8c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12f      	bne.n	800118a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_DAC_MspInit+0x90>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_DAC_MspInit+0x90>)
 8001134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_DAC_MspInit+0x90>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_DAC_MspInit+0x90>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_DAC_MspInit+0x90>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_DAC_MspInit+0x90>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001162:	2310      	movs	r3, #16
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_DAC_MspInit+0x94>)
 8001176:	f002 fb2b 	bl	80037d0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	2036      	movs	r0, #54	; 0x36
 8001180:	f001 fbec 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001184:	2036      	movs	r0, #54	; 0x36
 8001186:	f001 fc15 	bl	80029b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40007400 	.word	0x40007400
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_SD_MspInit+0xc0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d14a      	bne.n	8001258 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_SD_MspInit+0xc4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_SD_MspInit+0xc4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_SD_MspInit+0xc4>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_SD_MspInit+0xc4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001216:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800121a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001228:	230c      	movs	r3, #12
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <HAL_SD_MspInit+0xc8>)
 8001234:	f002 facc 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001238:	2304      	movs	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001248:	230c      	movs	r3, #12
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <HAL_SD_MspInit+0xcc>)
 8001254:	f002 fabc 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40012c00 	.word	0x40012c00
 8001264:	40023800 	.word	0x40023800
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00

08001270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a32      	ldr	r2, [pc, #200]	; (8001358 <HAL_SPI_MspInit+0xe8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12c      	bne.n	80012ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_SPI_MspInit+0xec>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a30      	ldr	r2, [pc, #192]	; (800135c <HAL_SPI_MspInit+0xec>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_SPI_MspInit+0xec>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_SPI_MspInit+0xec>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a29      	ldr	r2, [pc, #164]	; (800135c <HAL_SPI_MspInit+0xec>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_SPI_MspInit+0xec>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012ca:	23e0      	movs	r3, #224	; 0xe0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012da:	2305      	movs	r3, #5
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481e      	ldr	r0, [pc, #120]	; (8001360 <HAL_SPI_MspInit+0xf0>)
 80012e6:	f002 fa73 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012ea:	e031      	b.n	8001350 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_SPI_MspInit+0xf4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12c      	bne.n	8001350 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_SPI_MspInit+0xec>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_SPI_MspInit+0xec>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_SPI_MspInit+0xec>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_SPI_MspInit+0xec>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_SPI_MspInit+0xec>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_SPI_MspInit+0xec>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_MISO_Pin|CAN_MOSI_Pin;
 800132e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001340:	2305      	movs	r3, #5
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <HAL_SPI_MspInit+0xf8>)
 800134c:	f002 fa40 	bl	80037d0 <HAL_GPIO_Init>
}
 8001350:	bf00      	nop
 8001352:	3730      	adds	r7, #48	; 0x30
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013000 	.word	0x40013000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40003800 	.word	0x40003800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a42      	ldr	r2, [pc, #264]	; (8001494 <HAL_UART_MspInit+0x128>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d14c      	bne.n	8001428 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a39      	ldr	r2, [pc, #228]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_UART_MspInit+0x12c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f4:	2307      	movs	r3, #7
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4827      	ldr	r0, [pc, #156]	; (800149c <HAL_UART_MspInit+0x130>)
 8001400:	f002 f9e6 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001416:	2307      	movs	r3, #7
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <HAL_UART_MspInit+0x134>)
 8001422:	f002 f9d5 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001426:	e030      	b.n	800148a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_UART_MspInit+0x138>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x12c>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_UART_MspInit+0x12c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800147a:	2308      	movs	r3, #8
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <HAL_UART_MspInit+0x13c>)
 8001486:	f002 f9a3 	bl	80037d0 <HAL_GPIO_Init>
}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40004800 	.word	0x40004800
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40020800 	.word	0x40020800

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  // fix for https://community.st.com/s/global-search/uwTickPrio
  uwTickPrio = TickPriority;
 80014bc:	4a26      	ldr	r2, [pc, #152]	; (8001558 <HAL_InitTick+0xac>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	2036      	movs	r0, #54	; 0x36
 80014c8:	f001 fa48 	bl	800295c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014cc:	2036      	movs	r0, #54	; 0x36
 80014ce:	f001 fa71 	bl	80029b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_InitTick+0xb0>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a20      	ldr	r2, [pc, #128]	; (800155c <HAL_InitTick+0xb0>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_InitTick+0xb0>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ee:	f107 0210 	add.w	r2, r7, #16
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fa6d 	bl	80049d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014fe:	f003 fa43 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8001502:	4603      	mov	r3, r0
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_InitTick+0xb4>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	3b01      	subs	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_InitTick+0xb8>)
 8001518:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_InitTick+0xbc>)
 800151a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_InitTick+0xb8>)
 800151e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001522:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_InitTick+0xb8>)
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_InitTick+0xb8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_InitTick+0xb8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <HAL_InitTick+0xb8>)
 8001538:	f004 fd18 	bl	8005f6c <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d104      	bne.n	800154c <HAL_InitTick+0xa0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <HAL_InitTick+0xb8>)
 8001544:	f004 fe0c 	bl	8006160 <HAL_TIM_Base_Start_IT>
 8001548:	4603      	mov	r3, r0
 800154a:	e000      	b.n	800154e <HAL_InitTick+0xa2>
  }

  /* Return function status */
  return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	3730      	adds	r7, #48	; 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000004 	.word	0x20000004
 800155c:	40023800 	.word	0x40023800
 8001560:	431bde83 	.word	0x431bde83
 8001564:	20009398 	.word	0x20009398
 8001568:	40001000 	.word	0x40001000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <TIM6_DAC_IRQHandler+0x20>)
 800159e:	791b      	ldrb	r3, [r3, #4]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <TIM6_DAC_IRQHandler+0x20>)
 80015a8:	f001 fad4 	bl	8002b54 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <TIM6_DAC_IRQHandler+0x24>)
 80015ae:	f004 fe9d 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200091dc 	.word	0x200091dc
 80015bc:	20009398 	.word	0x20009398

080015c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA2_Stream0_IRQHandler+0x10>)
 80015c6:	f001 fe8d 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200091f0 	.word	0x200091f0

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f009 f812 	bl	800a62c <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20020000 	.word	0x20020000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000ef8 	.word	0x20000ef8
 800163c:	20009858 	.word	0x20009858

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001680:	4c0b      	ldr	r4, [pc, #44]	; (80016b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd7 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f008 ffd1 	bl	800a638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7fe ffa9 	bl	80005ec <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000854 	.word	0x20000854
  ldr r2, =_sidata
 80016a8:	0800ae34 	.word	0x0800ae34
  ldr r2, =_sbss
 80016ac:	20000858 	.word	0x20000858
  ldr r4, =_ebss
 80016b0:	20009854 	.word	0x20009854

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>

080016b6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
 80016c8:	f7ff fbc6 	bl	8000e58 <Error_Handler>
 80016cc:	e7fe      	b.n	80016cc <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016ce:	f3ef 8305 	mrs	r3, IPSR
 80016d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80016d4:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80016da:	b672      	cpsid	i
}
 80016dc:	bf00      	nop
 80016de:	f7ff fbbb 	bl	8000e58 <Error_Handler>
 80016e2:	e7fe      	b.n	80016e2 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 80016e4:	f007 fe7a 	bl	80093dc <vTaskSuspendAll>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80016fe:	b672      	cpsid	i
}
 8001700:	bf00      	nop
 8001702:	f7ff fba9 	bl	8000e58 <Error_Handler>
 8001706:	e7fe      	b.n	8001706 <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001708:	f3ef 8305 	mrs	r3, IPSR
 800170c:	60fb      	str	r3, [r7, #12]
  return(result);
 800170e:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
 8001718:	f7ff fb9e 	bl	8000e58 <Error_Handler>
 800171c:	e7fe      	b.n	800171c <stm32_lock_release+0x2c>
  xTaskResumeAll();
 800171e:	f007 fe6b 	bl	80093f8 <xTaskResumeAll>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
 800173c:	f7ff fb8c 	bl	8000e58 <Error_Handler>
 8001740:	e7fe      	b.n	8001740 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ffb6 	bl	80016b6 <stm32_lock_acquire>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
 8001764:	f7ff fb78 	bl	8000e58 <Error_Handler>
 8001768:	e7fe      	b.n	8001768 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ffbf 	bl	80016f0 <stm32_lock_release>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f001 f8b9 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f7ff fe7e 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fb64 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	200093e0 	.word	0x200093e0

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200093e0 	.word	0x200093e0

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e15b      	b.n	8001b16 <HAL_ADC_Init+0x2ce>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4aa4      	ldr	r2, [pc, #656]	; (8001af4 <HAL_ADC_Init+0x2ac>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00e      	beq.n	8001886 <HAL_ADC_Init+0x3e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4aa2      	ldr	r2, [pc, #648]	; (8001af8 <HAL_ADC_Init+0x2b0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d009      	beq.n	8001886 <HAL_ADC_Init+0x3e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4aa1      	ldr	r2, [pc, #644]	; (8001afc <HAL_ADC_Init+0x2b4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d004      	beq.n	8001886 <HAL_ADC_Init+0x3e>
 800187c:	f240 1143 	movw	r1, #323	; 0x143
 8001880:	489f      	ldr	r0, [pc, #636]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001882:	f7ff faef 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d013      	beq.n	80018b6 <HAL_ADC_Init+0x6e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001896:	d00e      	beq.n	80018b6 <HAL_ADC_Init+0x6e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018a0:	d009      	beq.n	80018b6 <HAL_ADC_Init+0x6e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80018aa:	d004      	beq.n	80018b6 <HAL_ADC_Init+0x6e>
 80018ac:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80018b0:	4893      	ldr	r0, [pc, #588]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80018b2:	f7ff fad7 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d013      	beq.n	80018e6 <HAL_ADC_Init+0x9e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c6:	d00e      	beq.n	80018e6 <HAL_ADC_Init+0x9e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018d0:	d009      	beq.n	80018e6 <HAL_ADC_Init+0x9e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018da:	d004      	beq.n	80018e6 <HAL_ADC_Init+0x9e>
 80018dc:	f240 1145 	movw	r1, #325	; 0x145
 80018e0:	4887      	ldr	r0, [pc, #540]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80018e2:	f7ff fabf 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_ADC_Init+0xb8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d004      	beq.n	8001900 <HAL_ADC_Init+0xb8>
 80018f6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80018fa:	4881      	ldr	r0, [pc, #516]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80018fc:	f7ff fab2 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e1b      	ldrb	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_ADC_Init+0xd2>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e1b      	ldrb	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d004      	beq.n	800191a <HAL_ADC_Init+0xd2>
 8001910:	f240 1147 	movw	r1, #327	; 0x147
 8001914:	487a      	ldr	r0, [pc, #488]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001916:	f7ff faa5 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	d054      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192a:	d04f      	beq.n	80019cc <HAL_ADC_Init+0x184>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001934:	d04a      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800193e:	d045      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001948:	d040      	beq.n	80019cc <HAL_ADC_Init+0x184>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001952:	d03b      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800195c:	d036      	beq.n	80019cc <HAL_ADC_Init+0x184>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001966:	d031      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001970:	d02c      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800197a:	d027      	beq.n	80019cc <HAL_ADC_Init+0x184>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001984:	d022      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800198e:	d01d      	beq.n	80019cc <HAL_ADC_Init+0x184>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001998:	d018      	beq.n	80019cc <HAL_ADC_Init+0x184>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80019a2:	d013      	beq.n	80019cc <HAL_ADC_Init+0x184>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80019ac:	d00e      	beq.n	80019cc <HAL_ADC_Init+0x184>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80019b6:	d009      	beq.n	80019cc <HAL_ADC_Init+0x184>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <HAL_ADC_Init+0x2bc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_ADC_Init+0x184>
 80019c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80019c6:	484e      	ldr	r0, [pc, #312]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80019c8:	f7ff fa4c 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_ADC_Init+0x1a0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019dc:	d004      	beq.n	80019e8 <HAL_ADC_Init+0x1a0>
 80019de:	f240 1149 	movw	r1, #329	; 0x149
 80019e2:	4847      	ldr	r0, [pc, #284]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80019e4:	f7ff fa3e 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_ADC_Init+0x1b0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d904      	bls.n	8001a02 <HAL_ADC_Init+0x1ba>
 80019f8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80019fc:	4840      	ldr	r0, [pc, #256]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 80019fe:	f7ff fa31 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <HAL_ADC_Init+0x1d8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d004      	beq.n	8001a20 <HAL_ADC_Init+0x1d8>
 8001a16:	f240 114b 	movw	r1, #331	; 0x14b
 8001a1a:	4839      	ldr	r0, [pc, #228]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001a1c:	f7ff fa22 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d00c      	beq.n	8001a42 <HAL_ADC_Init+0x1fa>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_ADC_Init+0x1fa>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_Init+0x1fa>
 8001a38:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001a3c:	4830      	ldr	r0, [pc, #192]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001a3e:	f7ff fa11 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_ADC_Init+0x218>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d004      	beq.n	8001a60 <HAL_ADC_Init+0x218>
 8001a56:	f240 114d 	movw	r1, #333	; 0x14d
 8001a5a:	4829      	ldr	r0, [pc, #164]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001a5c:	f7ff fa02 	bl	8000e64 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_ADC_Init+0x2bc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d017      	beq.n	8001a9a <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_ADC_Init+0x252>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a7a:	d00e      	beq.n	8001a9a <HAL_ADC_Init+0x252>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a84:	d009      	beq.n	8001a9a <HAL_ADC_Init+0x252>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_Init+0x252>
 8001a90:	f240 1151 	movw	r1, #337	; 0x151
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <HAL_ADC_Init+0x2b8>)
 8001a96:	f7ff f9e5 	bl	8000e64 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_Init+0x26e>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fa16 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d122      	bne.n	8001b08 <HAL_ADC_Init+0x2c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aca:	f023 0302 	bic.w	r3, r3, #2
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 faca 	bl	8002070 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
 8001af2:	e00b      	b.n	8001b0c <HAL_ADC_Init+0x2c4>
 8001af4:	40012000 	.word	0x40012000
 8001af8:	40012100 	.word	0x40012100
 8001afc:	40012200 	.word	0x40012200
 8001b00:	0800aae8 	.word	0x0800aae8
 8001b04:	0f000001 	.word	0x0f000001
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	7e1b      	ldrb	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x2a>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x2a>
 8001b40:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8001b44:	4887      	ldr	r0, [pc, #540]	; (8001d64 <HAL_ADC_Start_DMA+0x244>)
 8001b46:	f7ff f98d 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d013      	beq.n	8001b7a <HAL_ADC_Start_DMA+0x5a>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5a:	d00e      	beq.n	8001b7a <HAL_ADC_Start_DMA+0x5a>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b64:	d009      	beq.n	8001b7a <HAL_ADC_Start_DMA+0x5a>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_Start_DMA+0x5a>
 8001b70:	f240 5159 	movw	r1, #1369	; 0x559
 8001b74:	487b      	ldr	r0, [pc, #492]	; (8001d64 <HAL_ADC_Start_DMA+0x244>)
 8001b76:	f7ff f975 	bl	8000e64 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_Start_DMA+0x68>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e0e9      	b.n	8001d5c <HAL_ADC_Start_DMA+0x23c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d018      	beq.n	8001bd0 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <HAL_ADC_Start_DMA+0x248>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_ADC_Start_DMA+0x24c>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bc2:	e002      	b.n	8001bca <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bde:	d107      	bne.n	8001bf0 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bee:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 80a1 	bne.w	8001d42 <HAL_ADC_Start_DMA+0x222>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f023 0206 	bic.w	r2, r3, #6
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_ADC_Start_DMA+0x250>)
 8001c5e:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <HAL_ADC_Start_DMA+0x254>)
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_ADC_Start_DMA+0x258>)
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	4a41      	ldr	r2, [pc, #260]	; (8001d7c <HAL_ADC_Start_DMA+0x25c>)
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c80:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c90:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	334c      	adds	r3, #76	; 0x4c
 8001cac:	4619      	mov	r1, r3
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f001 fab1 	bl	8003218 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12a      	bne.n	8001d18 <HAL_ADC_Start_DMA+0x1f8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <HAL_ADC_Start_DMA+0x260>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d015      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0x1d8>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_ADC_Start_DMA+0x264>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_Start_DMA+0x1c2>
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_ADC_Start_DMA+0x250>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0x1d8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_ADC_Start_DMA+0x268>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d136      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_ADC_Start_DMA+0x250>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d130      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d129      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	e020      	b.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <HAL_ADC_Start_DMA+0x260>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11b      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d114      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e00b      	b.n	8001d5a <HAL_ADC_Start_DMA+0x23a>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	0800aae8 	.word	0x0800aae8
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83
 8001d70:	40012300 	.word	0x40012300
 8001d74:	08002285 	.word	0x08002285
 8001d78:	0800233f 	.word	0x0800233f
 8001d7c:	0800235b 	.word	0x0800235b
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40012100 	.word	0x40012100
 8001d88:	40012200 	.word	0x40012200

08001d8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b12      	cmp	r3, #18
 8001dc8:	d904      	bls.n	8001dd4 <HAL_ADC_ConfigChannel+0x20>
 8001dca:	f240 6189 	movw	r1, #1673	; 0x689
 8001dce:	489b      	ldr	r0, [pc, #620]	; (800203c <HAL_ADC_ConfigChannel+0x288>)
 8001dd0:	f7ff f848 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_ADC_ConfigChannel+0x30>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d904      	bls.n	8001dee <HAL_ADC_ConfigChannel+0x3a>
 8001de4:	f240 618a 	movw	r1, #1674	; 0x68a
 8001de8:	4894      	ldr	r0, [pc, #592]	; (800203c <HAL_ADC_ConfigChannel+0x288>)
 8001dea:	f7ff f83b 	bl	8000e64 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d01c      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d018      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d014      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d010      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d00c      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d008      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x84>
 8001e2e:	f240 618b 	movw	r1, #1675	; 0x68b
 8001e32:	4882      	ldr	r0, [pc, #520]	; (800203c <HAL_ADC_ConfigChannel+0x288>)
 8001e34:	f7ff f816 	bl	8000e64 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x92>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e10f      	b.n	8002066 <HAL_ADC_ConfigChannel+0x2b2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d925      	bls.n	8001ea2 <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68d9      	ldr	r1, [r3, #12]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4403      	add	r3, r0
 8001e94:	3b1e      	subs	r3, #30
 8001e96:	409a      	lsls	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	e022      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6919      	ldr	r1, [r3, #16]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4403      	add	r3, r0
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d824      	bhi.n	8001f3a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b05      	subs	r3, #5
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b05      	subs	r3, #5
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
 8001f38:	e04c      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d824      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b23      	subs	r3, #35	; 0x23
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b23      	subs	r3, #35	; 0x23
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8a:	e023      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x220>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b41      	subs	r3, #65	; 0x41
 8001f9e:	221f      	movs	r2, #31
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b41      	subs	r3, #65	; 0x41
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_ADC_ConfigChannel+0x28c>)
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_ADC_ConfigChannel+0x290>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d109      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x242>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x242>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_ADC_ConfigChannel+0x290>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d12d      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2a8>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b10      	cmp	r3, #16
 8002006:	d003      	beq.n	8002010 <HAL_ADC_ConfigChannel+0x25c>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b11      	cmp	r3, #17
 800200e:	d125      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2a8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b10      	cmp	r3, #16
 8002022:	d11b      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2a8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_ADC_ConfigChannel+0x294>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_ADC_ConfigChannel+0x298>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9a      	lsrs	r2, r3, #18
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800203a:	e00c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x2a2>
 800203c:	0800aae8 	.word	0x0800aae8
 8002040:	40012300 	.word	0x40012300
 8002044:	40012000 	.word	0x40012000
 8002048:	20000000 	.word	0x20000000
 800204c:	431bde83 	.word	0x431bde83
      {
        counter--;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3b01      	subs	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f9      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x29c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <ADC_Init+0x208>)
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	021a      	lsls	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	4a5e      	ldr	r2, [pc, #376]	; (800227c <ADC_Init+0x20c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e00f      	b.n	800216e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800216c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0202 	bic.w	r2, r2, #2
 800217c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	005a      	lsls	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d028      	beq.n	80021ee <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <ADC_Init+0x13c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d904      	bls.n	80021b6 <ADC_Init+0x146>
 80021ac:	f240 71a6 	movw	r1, #1958	; 0x7a6
 80021b0:	4833      	ldr	r0, [pc, #204]	; (8002280 <ADC_Init+0x210>)
 80021b2:	f7fe fe57 	bl	8000e64 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021d4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	3b01      	subs	r3, #1
 80021e2:	035a      	lsls	r2, r3, #13
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	e007      	b.n	80021fe <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	3b01      	subs	r3, #1
 800221a:	051a      	lsls	r2, r3, #20
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002240:	025a      	lsls	r2, r3, #9
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	029a      	lsls	r2, r3, #10
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40012300 	.word	0x40012300
 800227c:	0f000001 	.word	0x0f000001
 8002280:	0800aae8 	.word	0x0800aae8

08002284 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800229a:	2b00      	cmp	r3, #0
 800229c:	d13c      	bne.n	8002318 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d12b      	bne.n	8002310 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d127      	bne.n	8002310 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d119      	bne.n	8002310 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0220 	bic.w	r2, r2, #32
 80022ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fd3b 	bl	8001d8c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002316:	e00e      	b.n	8002336 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7fe f903 	bl	8000530 <HAL_ADC_ErrorCallback>
}
 800232a:	e004      	b.n	8002336 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fd27 	bl	8001da0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7fe f8d8 	bl	8000530 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e20e      	b.n	80027b8 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4aa0      	ldr	r2, [pc, #640]	; (8002620 <HAL_CAN_Init+0x298>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_CAN_Init+0x30>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a9e      	ldr	r2, [pc, #632]	; (8002624 <HAL_CAN_Init+0x29c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_CAN_Init+0x30>
 80023ae:	f240 111d 	movw	r1, #285	; 0x11d
 80023b2:	489d      	ldr	r0, [pc, #628]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80023b4:	f7fe fd56 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_CAN_Init+0x4a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e1b      	ldrb	r3, [r3, #24]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d004      	beq.n	80023d2 <HAL_CAN_Init+0x4a>
 80023c8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80023cc:	4896      	ldr	r0, [pc, #600]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80023ce:	f7fe fd49 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e5b      	ldrb	r3, [r3, #25]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_CAN_Init+0x64>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7e5b      	ldrb	r3, [r3, #25]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d004      	beq.n	80023ec <HAL_CAN_Init+0x64>
 80023e2:	f240 111f 	movw	r1, #287	; 0x11f
 80023e6:	4890      	ldr	r0, [pc, #576]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80023e8:	f7fe fd3c 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e9b      	ldrb	r3, [r3, #26]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_CAN_Init+0x7e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e9b      	ldrb	r3, [r3, #26]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d004      	beq.n	8002406 <HAL_CAN_Init+0x7e>
 80023fc:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002400:	4889      	ldr	r0, [pc, #548]	; (8002628 <HAL_CAN_Init+0x2a0>)
 8002402:	f7fe fd2f 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7edb      	ldrb	r3, [r3, #27]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_CAN_Init+0x98>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7edb      	ldrb	r3, [r3, #27]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d004      	beq.n	8002420 <HAL_CAN_Init+0x98>
 8002416:	f240 1121 	movw	r1, #289	; 0x121
 800241a:	4883      	ldr	r0, [pc, #524]	; (8002628 <HAL_CAN_Init+0x2a0>)
 800241c:	f7fe fd22 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7f1b      	ldrb	r3, [r3, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_CAN_Init+0xb2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7f1b      	ldrb	r3, [r3, #28]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d004      	beq.n	800243a <HAL_CAN_Init+0xb2>
 8002430:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002434:	487c      	ldr	r0, [pc, #496]	; (8002628 <HAL_CAN_Init+0x2a0>)
 8002436:	f7fe fd15 	bl	8000e64 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7f5b      	ldrb	r3, [r3, #29]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_CAN_Init+0xcc>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7f5b      	ldrb	r3, [r3, #29]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d004      	beq.n	8002454 <HAL_CAN_Init+0xcc>
 800244a:	f240 1123 	movw	r1, #291	; 0x123
 800244e:	4876      	ldr	r0, [pc, #472]	; (8002628 <HAL_CAN_Init+0x2a0>)
 8002450:	f7fe fd08 	bl	8000e64 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_CAN_Init+0xfc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d00e      	beq.n	8002484 <HAL_CAN_Init+0xfc>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800246e:	d009      	beq.n	8002484 <HAL_CAN_Init+0xfc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002478:	d004      	beq.n	8002484 <HAL_CAN_Init+0xfc>
 800247a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800247e:	486a      	ldr	r0, [pc, #424]	; (8002628 <HAL_CAN_Init+0x2a0>)
 8002480:	f7fe fcf0 	bl	8000e64 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_CAN_Init+0x12c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d00e      	beq.n	80024b4 <HAL_CAN_Init+0x12c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800249e:	d009      	beq.n	80024b4 <HAL_CAN_Init+0x12c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024a8:	d004      	beq.n	80024b4 <HAL_CAN_Init+0x12c>
 80024aa:	f240 1125 	movw	r1, #293	; 0x125
 80024ae:	485e      	ldr	r0, [pc, #376]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80024b0:	f7fe fcd8 	bl	8000e64 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d04f      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d04a      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ce:	d045      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024d8:	d040      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024e2:	d03b      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d036      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80024f6:	d031      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8002500:	d02c      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250a:	d027      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8002514:	d022      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800251e:	d01d      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8002528:	d018      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002532:	d013      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800253c:	d00e      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002546:	d009      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8002550:	d004      	beq.n	800255c <HAL_CAN_Init+0x1d4>
 8002552:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002556:	4834      	ldr	r0, [pc, #208]	; (8002628 <HAL_CAN_Init+0x2a0>)
 8002558:	f7fe fc84 	bl	8000e64 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d027      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256c:	d022      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002576:	d01d      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002580:	d018      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258a:	d013      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002594:	d00e      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800259e:	d009      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80025a8:	d004      	beq.n	80025b4 <HAL_CAN_Init+0x22c>
 80025aa:	f240 1127 	movw	r1, #295	; 0x127
 80025ae:	481e      	ldr	r0, [pc, #120]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80025b0:	f7fe fc58 	bl	8000e64 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_CAN_Init+0x23e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d904      	bls.n	80025d0 <HAL_CAN_Init+0x248>
 80025c6:	f44f 7194 	mov.w	r1, #296	; 0x128
 80025ca:	4817      	ldr	r0, [pc, #92]	; (8002628 <HAL_CAN_Init+0x2a0>)
 80025cc:	f7fe fc4a 	bl	8000e64 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fe fd29 	bl	8001034 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f2:	f7ff f8f9 	bl	80017e8 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025f8:	e018      	b.n	800262c <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025fa:	f7ff f8f5 	bl	80017e8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b0a      	cmp	r3, #10
 8002606:	d911      	bls.n	800262c <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2205      	movs	r2, #5
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0cb      	b.n	80027b8 <HAL_CAN_Init+0x430>
 8002620:	40006400 	.word	0x40006400
 8002624:	40006800 	.word	0x40006800
 8002628:	0800ab20 	.word	0x0800ab20
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0df      	beq.n	80025fa <HAL_CAN_Init+0x272>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0202 	bic.w	r2, r2, #2
 8002648:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800264a:	f7ff f8cd 	bl	80017e8 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002650:	e012      	b.n	8002678 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002652:	f7ff f8c9 	bl	80017e8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b0a      	cmp	r3, #10
 800265e:	d90b      	bls.n	8002678 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2205      	movs	r2, #5
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e09f      	b.n	80027b8 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7e1b      	ldrb	r3, [r3, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e5b      	ldrb	r3, [r3, #25]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e007      	b.n	80026da <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7e9b      	ldrb	r3, [r3, #26]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e007      	b.n	8002704 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0220 	bic.w	r2, r2, #32
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7edb      	ldrb	r3, [r3, #27]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0210 	bic.w	r2, r2, #16
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e007      	b.n	800272e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0210 	orr.w	r2, r2, #16
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0208 	orr.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e007      	b.n	8002758 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7f5b      	ldrb	r3, [r3, #29]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0204 	orr.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e007      	b.n	8002782 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0204 	bic.w	r2, r2, #4
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	ea42 0103 	orr.w	r1, r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4907      	ldr	r1, [pc, #28]	; (800285c <__NVIC_EnableIRQ+0x38>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	; (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	; (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
         );
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b07      	cmp	r3, #7
 8002928:	d00f      	beq.n	800294a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d00c      	beq.n	800294a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d009      	beq.n	800294a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d006      	beq.n	800294a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d003      	beq.n	800294a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002942:	2192      	movs	r1, #146	; 0x92
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002946:	f7fe fa8d 	bl	8000e64 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff38 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	0800ab58 	.word	0x0800ab58

0800295c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d903      	bls.n	800297c <HAL_NVIC_SetPriority+0x20>
 8002974:	21aa      	movs	r1, #170	; 0xaa
 8002976:	480e      	ldr	r0, [pc, #56]	; (80029b0 <HAL_NVIC_SetPriority+0x54>)
 8002978:	f7fe fa74 	bl	8000e64 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b0f      	cmp	r3, #15
 8002980:	d903      	bls.n	800298a <HAL_NVIC_SetPriority+0x2e>
 8002982:	21ab      	movs	r1, #171	; 0xab
 8002984:	480a      	ldr	r0, [pc, #40]	; (80029b0 <HAL_NVIC_SetPriority+0x54>)
 8002986:	f7fe fa6d 	bl	8000e64 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298a:	f7ff ff3d 	bl	8002808 <__NVIC_GetPriorityGrouping>
 800298e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7ff ff8d 	bl	80028b4 <NVIC_EncodePriority>
 800299a:	4602      	mov	r2, r0
 800299c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff5c 	bl	8002860 <__NVIC_SetPriority>
}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800ab58 	.word	0x0800ab58

080029b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da03      	bge.n	80029ce <HAL_NVIC_EnableIRQ+0x1a>
 80029c6:	21be      	movs	r1, #190	; 0xbe
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <HAL_NVIC_EnableIRQ+0x2c>)
 80029ca:	f7fe fa4b 	bl	8000e64 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff26 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800ab58 	.word	0x0800ab58

080029e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e017      	b.n	8002a26 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_CRC_Init+0x4c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <HAL_CRC_Init+0x24>
 8002a00:	2168      	movs	r1, #104	; 0x68
 8002a02:	480c      	ldr	r0, [pc, #48]	; (8002a34 <HAL_CRC_Init+0x50>)
 8002a04:	f7fe fa2e 	bl	8000e64 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fb53 	bl	80010c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023000 	.word	0x40023000
 8002a34:	0800ab94 	.word	0x0800ab94

08002a38 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01e      	b.n	8002a88 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_DAC_Init+0x58>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DAC_Init+0x26>
 8002a54:	f240 1117 	movw	r1, #279	; 0x117
 8002a58:	480e      	ldr	r0, [pc, #56]	; (8002a94 <HAL_DAC_Init+0x5c>)
 8002a5a:	f7fe fa03 	bl	8000e64 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	791b      	ldrb	r3, [r3, #4]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fb4a 	bl	8001108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40007400 	.word	0x40007400
 8002a94:	0800abcc 	.word	0x0800abcc

08002a98 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_DAC_Start+0x20>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d004      	beq.n	8002ab8 <HAL_DAC_Start+0x20>
 8002aae:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002ab2:	4827      	ldr	r0, [pc, #156]	; (8002b50 <HAL_DAC_Start+0xb8>)
 8002ab4:	f7fe f9d6 	bl	8000e64 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	795b      	ldrb	r3, [r3, #5]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_Start+0x2c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e040      	b.n	8002b46 <HAL_DAC_Start+0xae>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_DAC_Start+0x76>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002af8:	2b3c      	cmp	r3, #60	; 0x3c
 8002afa:	d11d      	bne.n	8002b38 <HAL_DAC_Start+0xa0>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	e014      	b.n	8002b38 <HAL_DAC_Start+0xa0>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	213c      	movs	r1, #60	; 0x3c
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_DAC_Start+0xa0>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0202 	orr.w	r2, r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	0800abcc 	.word	0x0800abcc

08002b54 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d120      	bne.n	8002bae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	d118      	bne.n	8002bae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f875 	bl	8002c98 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbc:	d120      	bne.n	8002c00 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bcc:	d118      	bne.n	8002c00 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f043 0202 	orr.w	r2, r3, #2
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8e6 	bl	8002dcc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_DAC_SetValue+0x28>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d004      	beq.n	8002c30 <HAL_DAC_SetValue+0x28>
 8002c26:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8002c2a:	481a      	ldr	r0, [pc, #104]	; (8002c94 <HAL_DAC_SetValue+0x8c>)
 8002c2c:	f7fe f91a 	bl	8000e64 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_DAC_SetValue+0x44>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d007      	beq.n	8002c4c <HAL_DAC_SetValue+0x44>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d004      	beq.n	8002c4c <HAL_DAC_SetValue+0x44>
 8002c42:	f240 310d 	movw	r1, #781	; 0x30d
 8002c46:	4813      	ldr	r0, [pc, #76]	; (8002c94 <HAL_DAC_SetValue+0x8c>)
 8002c48:	f7fe f90c 	bl	8000e64 <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d904      	bls.n	8002c60 <HAL_DAC_SetValue+0x58>
 8002c56:	f240 310e 	movw	r1, #782	; 0x30e
 8002c5a:	480e      	ldr	r0, [pc, #56]	; (8002c94 <HAL_DAC_SetValue+0x8c>)
 8002c5c:	f7fe f902 	bl	8000e64 <assert_failed>

  tmp = (uint32_t)hdac->Instance;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	3308      	adds	r3, #8
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e004      	b.n	8002c82 <HAL_DAC_SetValue+0x7a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3314      	adds	r3, #20
 8002c80:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	461a      	mov	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	0800abcc 	.word	0x0800abcc

08002c98 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b24      	cmp	r3, #36	; 0x24
 8002cc6:	d020      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d01c      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b14      	cmp	r3, #20
 8002cd6:	d018      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b1c      	cmp	r3, #28
 8002cde:	d014      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d010      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b2c      	cmp	r3, #44	; 0x2c
 8002cee:	d00c      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b34      	cmp	r3, #52	; 0x34
 8002cf6:	d008      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b3c      	cmp	r3, #60	; 0x3c
 8002cfe:	d004      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x5e>
 8002d00:	f240 31a6 	movw	r1, #934	; 0x3a6
 8002d04:	4830      	ldr	r0, [pc, #192]	; (8002dc8 <HAL_DAC_ConfigChannel+0x11c>)
 8002d06:	f7fe f8ad 	bl	8000e64 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_DAC_ConfigChannel+0x78>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d004      	beq.n	8002d24 <HAL_DAC_ConfigChannel+0x78>
 8002d1a:	f240 31a7 	movw	r1, #935	; 0x3a7
 8002d1e:	482a      	ldr	r0, [pc, #168]	; (8002dc8 <HAL_DAC_ConfigChannel+0x11c>)
 8002d20:	f7fe f8a0 	bl	8000e64 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DAC_ConfigChannel+0x8e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d004      	beq.n	8002d3a <HAL_DAC_ConfigChannel+0x8e>
 8002d30:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8002d34:	4824      	ldr	r0, [pc, #144]	; (8002dc8 <HAL_DAC_ConfigChannel+0x11c>)
 8002d36:	f7fe f895 	bl	8000e64 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_DAC_ConfigChannel+0x9a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e03c      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x114>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	22c0      	movs	r2, #192	; 0xc0
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0800abcc 	.word	0x0800abcc

08002dcc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7fe fcfc 	bl	80017e8 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e204      	b.n	8003206 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a97      	ldr	r2, [pc, #604]	; (8003060 <HAL_DMA_Init+0x280>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d04e      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a96      	ldr	r2, [pc, #600]	; (8003064 <HAL_DMA_Init+0x284>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d049      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a94      	ldr	r2, [pc, #592]	; (8003068 <HAL_DMA_Init+0x288>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d044      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a93      	ldr	r2, [pc, #588]	; (800306c <HAL_DMA_Init+0x28c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d03f      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a91      	ldr	r2, [pc, #580]	; (8003070 <HAL_DMA_Init+0x290>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_DMA_Init+0x294>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d035      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a8e      	ldr	r2, [pc, #568]	; (8003078 <HAL_DMA_Init+0x298>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d030      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a8d      	ldr	r2, [pc, #564]	; (800307c <HAL_DMA_Init+0x29c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d02b      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a8b      	ldr	r2, [pc, #556]	; (8003080 <HAL_DMA_Init+0x2a0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d026      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_DMA_Init+0x2a4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d021      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a88      	ldr	r2, [pc, #544]	; (8003088 <HAL_DMA_Init+0x2a8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01c      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a87      	ldr	r2, [pc, #540]	; (800308c <HAL_DMA_Init+0x2ac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d017      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a85      	ldr	r2, [pc, #532]	; (8003090 <HAL_DMA_Init+0x2b0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a84      	ldr	r2, [pc, #528]	; (8003094 <HAL_DMA_Init+0x2b4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00d      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a82      	ldr	r2, [pc, #520]	; (8003098 <HAL_DMA_Init+0x2b8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d008      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a81      	ldr	r2, [pc, #516]	; (800309c <HAL_DMA_Init+0x2bc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <HAL_DMA_Init+0xc4>
 8002e9c:	21b8      	movs	r1, #184	; 0xb8
 8002e9e:	4880      	ldr	r0, [pc, #512]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002ea0:	f7fd ffe0 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d026      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb4:	d021      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d01c      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ec8:	d017      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed2:	d012      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002edc:	d00d      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ee6:	d008      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002ef0:	d003      	beq.n	8002efa <HAL_DMA_Init+0x11a>
 8002ef2:	21b9      	movs	r1, #185	; 0xb9
 8002ef4:	486a      	ldr	r0, [pc, #424]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002ef6:	f7fd ffb5 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_DMA_Init+0x13a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA_Init+0x13a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d003      	beq.n	8002f1a <HAL_DMA_Init+0x13a>
 8002f12:	21ba      	movs	r1, #186	; 0xba
 8002f14:	4862      	ldr	r0, [pc, #392]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002f16:	f7fd ffa5 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f22:	d007      	beq.n	8002f34 <HAL_DMA_Init+0x154>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_Init+0x154>
 8002f2c:	21bb      	movs	r1, #187	; 0xbb
 8002f2e:	485c      	ldr	r0, [pc, #368]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002f30:	f7fd ff98 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d007      	beq.n	8002f4e <HAL_DMA_Init+0x16e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_DMA_Init+0x16e>
 8002f46:	21bc      	movs	r1, #188	; 0xbc
 8002f48:	4855      	ldr	r0, [pc, #340]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002f4a:	f7fd ff8b 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <HAL_DMA_Init+0x192>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Init+0x192>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f68:	d003      	beq.n	8002f72 <HAL_DMA_Init+0x192>
 8002f6a:	21bd      	movs	r1, #189	; 0xbd
 8002f6c:	484c      	ldr	r0, [pc, #304]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002f6e:	f7fd ff79 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_DMA_Init+0x1b6>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	d008      	beq.n	8002f96 <HAL_DMA_Init+0x1b6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA_Init+0x1b6>
 8002f8e:	21be      	movs	r1, #190	; 0xbe
 8002f90:	4843      	ldr	r0, [pc, #268]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002f92:	f7fd ff67 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_DMA_Init+0x1d8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa6:	d007      	beq.n	8002fb8 <HAL_DMA_Init+0x1d8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA_Init+0x1d8>
 8002fb0:	21bf      	movs	r1, #191	; 0xbf
 8002fb2:	483b      	ldr	r0, [pc, #236]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002fb4:	f7fd ff56 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_DMA_Init+0x206>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_DMA_Init+0x206>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd2:	d008      	beq.n	8002fe6 <HAL_DMA_Init+0x206>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fdc:	d003      	beq.n	8002fe6 <HAL_DMA_Init+0x206>
 8002fde:	21c0      	movs	r1, #192	; 0xc0
 8002fe0:	482f      	ldr	r0, [pc, #188]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002fe2:	f7fd ff3f 	bl	8000e64 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_DMA_Init+0x21e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_DMA_Init+0x21e>
 8002ff6:	21c1      	movs	r1, #193	; 0xc1
 8002ff8:	4829      	ldr	r0, [pc, #164]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8002ffa:	f7fd ff33 	bl	8000e64 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d065      	beq.n	80030d2 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00f      	beq.n	800302e <HAL_DMA_Init+0x24e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	2b01      	cmp	r3, #1
 8003014:	d00b      	beq.n	800302e <HAL_DMA_Init+0x24e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	2b02      	cmp	r3, #2
 800301c:	d007      	beq.n	800302e <HAL_DMA_Init+0x24e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	d003      	beq.n	800302e <HAL_DMA_Init+0x24e>
 8003026:	21c6      	movs	r1, #198	; 0xc6
 8003028:	481d      	ldr	r0, [pc, #116]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 800302a:	f7fd ff1b 	bl	8000e64 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d036      	beq.n	80030a4 <HAL_DMA_Init+0x2c4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800303e:	d031      	beq.n	80030a4 <HAL_DMA_Init+0x2c4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d02c      	beq.n	80030a4 <HAL_DMA_Init+0x2c4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003052:	d027      	beq.n	80030a4 <HAL_DMA_Init+0x2c4>
 8003054:	21c7      	movs	r1, #199	; 0xc7
 8003056:	4812      	ldr	r0, [pc, #72]	; (80030a0 <HAL_DMA_Init+0x2c0>)
 8003058:	f7fd ff04 	bl	8000e64 <assert_failed>
 800305c:	e022      	b.n	80030a4 <HAL_DMA_Init+0x2c4>
 800305e:	bf00      	nop
 8003060:	40026010 	.word	0x40026010
 8003064:	40026028 	.word	0x40026028
 8003068:	40026040 	.word	0x40026040
 800306c:	40026058 	.word	0x40026058
 8003070:	40026070 	.word	0x40026070
 8003074:	40026088 	.word	0x40026088
 8003078:	400260a0 	.word	0x400260a0
 800307c:	400260b8 	.word	0x400260b8
 8003080:	40026410 	.word	0x40026410
 8003084:	40026428 	.word	0x40026428
 8003088:	40026440 	.word	0x40026440
 800308c:	40026458 	.word	0x40026458
 8003090:	40026470 	.word	0x40026470
 8003094:	40026488 	.word	0x40026488
 8003098:	400264a0 	.word	0x400264a0
 800309c:	400264b8 	.word	0x400264b8
 80030a0:	0800ac04 	.word	0x0800ac04
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_DMA_Init+0x2f2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030b4:	d00d      	beq.n	80030d2 <HAL_DMA_Init+0x2f2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Init+0x2f2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030c8:	d003      	beq.n	80030d2 <HAL_DMA_Init+0x2f2>
 80030ca:	21c8      	movs	r1, #200	; 0xc8
 80030cc:	4850      	ldr	r0, [pc, #320]	; (8003210 <HAL_DMA_Init+0x430>)
 80030ce:	f7fd fec9 	bl	8000e64 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f4:	f7fe fb78 	bl	80017e8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d908      	bls.n	8003114 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e078      	b.n	8003206 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e8      	bne.n	80030f4 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4b39      	ldr	r3, [pc, #228]	; (8003214 <HAL_DMA_Init+0x434>)
 800312e:	4013      	ands	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4313      	orrs	r3, r2
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f023 0307 	bic.w	r3, r3, #7
 8003194:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d117      	bne.n	80031d8 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fa8c 	bl	80036d8 <DMA_CheckFifoParam>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2240      	movs	r2, #64	; 0x40
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d4:	2301      	movs	r3, #1
 80031d6:	e016      	b.n	8003206 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa43 	bl	800366c <DMA_CalcBaseAndBitshift>
 80031e6:	4603      	mov	r3, r0
 80031e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	223f      	movs	r2, #63	; 0x3f
 80031f0:	409a      	lsls	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	0800ac04 	.word	0x0800ac04
 8003214:	f010803f 	.word	0xf010803f

08003218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_DMA_Start_IT+0x26>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d304      	bcc.n	8003248 <HAL_DMA_Start_IT+0x30>
 800323e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003242:	4827      	ldr	r0, [pc, #156]	; (80032e0 <HAL_DMA_Start_IT+0xc8>)
 8003244:	f7fd fe0e 	bl	8000e64 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Start_IT+0x3e>
 8003252:	2302      	movs	r3, #2
 8003254:	e040      	b.n	80032d8 <HAL_DMA_Start_IT+0xc0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12f      	bne.n	80032ca <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f9c6 	bl	8003610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	223f      	movs	r2, #63	; 0x3f
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0216 	orr.w	r2, r2, #22
 800329e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	0800ac04 	.word	0x0800ac04

080032e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f0:	4b92      	ldr	r3, [pc, #584]	; (800353c <HAL_DMA_IRQHandler+0x258>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a92      	ldr	r2, [pc, #584]	; (8003540 <HAL_DMA_IRQHandler+0x25c>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2208      	movs	r2, #8
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01a      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2208      	movs	r2, #8
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2204      	movs	r2, #4
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2204      	movs	r2, #4
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f043 0204 	orr.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2210      	movs	r2, #16
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d043      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03c      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2210      	movs	r2, #16
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
 8003412:	e01f      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e016      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	2220      	movs	r2, #32
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808e 	beq.w	8003582 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8086 	beq.w	8003582 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2220      	movs	r2, #32
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d136      	bne.n	80034fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0216 	bic.w	r2, r2, #22
 800349c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_DMA_IRQHandler+0x1da>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	223f      	movs	r2, #63	; 0x3f
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07d      	beq.n	80035ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
        }
        return;
 80034fa:	e078      	b.n	80035ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01c      	beq.n	8003544 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	2b00      	cmp	r3, #0
 800351e:	d030      	beq.n	8003582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
 8003528:	e02b      	b.n	8003582 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
 800353a:	e022      	b.n	8003582 <HAL_DMA_IRQHandler+0x29e>
 800353c:	20000000 	.word	0x20000000
 8003540:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0210 	bic.w	r2, r2, #16
 8003560:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	2b00      	cmp	r3, #0
 8003588:	d032      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d022      	beq.n	80035dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2205      	movs	r2, #5
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3301      	adds	r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d307      	bcc.n	80035ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f2      	bne.n	80035ae <HAL_DMA_IRQHandler+0x2ca>
 80035c8:	e000      	b.n	80035cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e000      	b.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035ee:	bf00      	nop
    }
  }
}
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop

080035f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800362c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d108      	bne.n	8003650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800364e:	e007      	b.n	8003660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3b10      	subs	r3, #16
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <DMA_CalcBaseAndBitshift+0x64>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d909      	bls.n	80036ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	659a      	str	r2, [r3, #88]	; 0x58
 80036ac:	e007      	b.n	80036be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	aaaaaaab 	.word	0xaaaaaaab
 80036d4:	0800ae00 	.word	0x0800ae00

080036d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11f      	bne.n	8003732 <DMA_CheckFifoParam+0x5a>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d856      	bhi.n	80037a6 <DMA_CheckFifoParam+0xce>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <DMA_CheckFifoParam+0x28>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003711 	.word	0x08003711
 8003704:	08003723 	.word	0x08003723
 8003708:	08003711 	.word	0x08003711
 800370c:	080037a7 	.word	0x080037a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d046      	beq.n	80037aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e043      	b.n	80037aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800372a:	d140      	bne.n	80037ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e03d      	b.n	80037ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373a:	d121      	bne.n	8003780 <DMA_CheckFifoParam+0xa8>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d837      	bhi.n	80037b2 <DMA_CheckFifoParam+0xda>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <DMA_CheckFifoParam+0x70>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003759 	.word	0x08003759
 800374c:	0800375f 	.word	0x0800375f
 8003750:	08003759 	.word	0x08003759
 8003754:	08003771 	.word	0x08003771
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e030      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d025      	beq.n	80037b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e022      	b.n	80037b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003778:	d11f      	bne.n	80037ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800377e:	e01c      	b.n	80037ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d903      	bls.n	800378e <DMA_CheckFifoParam+0xb6>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800378c:	e018      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
      break;
 8003792:	e015      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e00b      	b.n	80037be <DMA_CheckFifoParam+0xe6>
      break;
 80037a6:	bf00      	nop
 80037a8:	e00a      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e008      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e006      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
    }
  } 
  
  return status; 
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a39      	ldr	r2, [pc, #228]	; (80038d0 <HAL_GPIO_Init+0x100>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d023      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a38      	ldr	r2, [pc, #224]	; (80038d4 <HAL_GPIO_Init+0x104>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <HAL_GPIO_Init+0x108>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01b      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a36      	ldr	r2, [pc, #216]	; (80038dc <HAL_GPIO_Init+0x10c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d017      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <HAL_GPIO_Init+0x110>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_GPIO_Init+0x114>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00f      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <HAL_GPIO_Init+0x118>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00b      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a32      	ldr	r2, [pc, #200]	; (80038ec <HAL_GPIO_Init+0x11c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <HAL_GPIO_Init+0x120>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x66>
 800382e:	21ac      	movs	r1, #172	; 0xac
 8003830:	4830      	ldr	r0, [pc, #192]	; (80038f4 <HAL_GPIO_Init+0x124>)
 8003832:	f7fd fb17 	bl	8000e64 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_GPIO_Init+0x7c>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x84>
 800384c:	21ad      	movs	r1, #173	; 0xad
 800384e:	4829      	ldr	r0, [pc, #164]	; (80038f4 <HAL_GPIO_Init+0x124>)
 8003850:	f7fd fb08 	bl	8000e64 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d035      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d031      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b11      	cmp	r3, #17
 800386a:	d02d      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d029      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b12      	cmp	r3, #18
 800387a:	d025      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003884:	d020      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800388e:	d01b      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003898:	d016      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80038a2:	d011      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80038ac:	d00c      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0xf8>
 80038c0:	21ae      	movs	r1, #174	; 0xae
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <HAL_GPIO_Init+0x124>)
 80038c4:	f7fd face 	bl	8000e64 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e240      	b.n	8003d50 <HAL_GPIO_Init+0x580>
 80038ce:	bf00      	nop
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40021400 	.word	0x40021400
 80038e8:	40021800 	.word	0x40021800
 80038ec:	40021c00 	.word	0x40021c00
 80038f0:	40022000 	.word	0x40022000
 80038f4:	0800ac3c 	.word	0x0800ac3c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	f040 821a 	bne.w	8003d4a <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d005      	beq.n	800392e <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392a:	2b02      	cmp	r3, #2
 800392c:	d144      	bne.n	80039b8 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00f      	beq.n	8003956 <HAL_GPIO_Init+0x186>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d00b      	beq.n	8003956 <HAL_GPIO_Init+0x186>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x186>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x186>
 800394e:	21c0      	movs	r1, #192	; 0xc0
 8003950:	4892      	ldr	r0, [pc, #584]	; (8003b9c <HAL_GPIO_Init+0x3cc>)
 8003952:	f7fd fa87 	bl	8000e64 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0201 	and.w	r2, r3, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d027      	beq.n	8003a14 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <HAL_GPIO_Init+0x214>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d007      	beq.n	80039e4 <HAL_GPIO_Init+0x214>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x214>
 80039dc:	21d1      	movs	r1, #209	; 0xd1
 80039de:	486f      	ldr	r0, [pc, #444]	; (8003b9c <HAL_GPIO_Init+0x3cc>)
 80039e0:	f7fd fa40 	bl	8000e64 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f040 80bf 	bne.w	8003ba0 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8093 	beq.w	8003b52 <HAL_GPIO_Init+0x382>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	f000 808e 	beq.w	8003b52 <HAL_GPIO_Init+0x382>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8089 	beq.w	8003b52 <HAL_GPIO_Init+0x382>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8084 	beq.w	8003b52 <HAL_GPIO_Init+0x382>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d07f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d07b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d077      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d073      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d06f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d06b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d067      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d063      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d05f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d05b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d057      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d053      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d04f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	d04b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d047      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d043      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b07      	cmp	r3, #7
 8003ad0:	d03f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	d03b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b07      	cmp	r3, #7
 8003ae0:	d037      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d033      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d02f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d02b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b09      	cmp	r3, #9
 8003b00:	d027      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b09      	cmp	r3, #9
 8003b08:	d023      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b0a      	cmp	r3, #10
 8003b10:	d01f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	d01b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b0b      	cmp	r3, #11
 8003b20:	d017      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d013      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d00f      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b0d      	cmp	r3, #13
 8003b38:	d00b      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x382>
 8003b4a:	21de      	movs	r1, #222	; 0xde
 8003b4c:	4813      	ldr	r0, [pc, #76]	; (8003b9c <HAL_GPIO_Init+0x3cc>)
 8003b4e:	f7fd f989 	bl	8000e64 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	08da      	lsrs	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3208      	adds	r2, #8
 8003b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	69b9      	ldr	r1, [r7, #24]
 8003b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b9a:	e001      	b.n	8003ba0 <HAL_GPIO_Init+0x3d0>
 8003b9c:	0800ac3c 	.word	0x0800ac3c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80b4 	beq.w	8003d4a <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_GPIO_Init+0x594>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_GPIO_Init+0x594>)
 8003bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_GPIO_Init+0x594>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <HAL_GPIO_Init+0x598>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_GPIO_Init+0x59c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02b      	beq.n	8003c82 <HAL_GPIO_Init+0x4b2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <HAL_GPIO_Init+0x5a0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d025      	beq.n	8003c7e <HAL_GPIO_Init+0x4ae>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4f      	ldr	r2, [pc, #316]	; (8003d74 <HAL_GPIO_Init+0x5a4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <HAL_GPIO_Init+0x4aa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_GPIO_Init+0x5a8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x4a6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <HAL_GPIO_Init+0x5ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x4a2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_GPIO_Init+0x5b0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x49e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4b      	ldr	r2, [pc, #300]	; (8003d84 <HAL_GPIO_Init+0x5b4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x49a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_GPIO_Init+0x5b8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x496>
 8003c62:	2307      	movs	r3, #7
 8003c64:	e00e      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c66:	2308      	movs	r3, #8
 8003c68:	e00c      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	e00a      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e008      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c72:	2304      	movs	r3, #4
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c76:	2303      	movs	r3, #3
 8003c78:	e004      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x4b4>
 8003c82:	2300      	movs	r3, #0
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	f002 0203 	and.w	r2, r2, #3
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	4093      	lsls	r3, r2
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c94:	4934      	ldr	r1, [pc, #208]	; (8003d68 <HAL_GPIO_Init+0x598>)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc6:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_GPIO_Init+0x5bc>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	f67f add0 	bls.w	80038f8 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40021400 	.word	0x40021400
 8003d84:	40021800 	.word	0x40021800
 8003d88:	40021c00 	.word	0x40021c00
 8003d8c:	40013c00 	.word	0x40013c00

08003d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_GPIO_ReadPin+0x1c>
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_GPIO_ReadPin+0x26>
 8003dac:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <HAL_GPIO_ReadPin+0x48>)
 8003db2:	f7fd f857 	bl	8000e64 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e001      	b.n	8003dcc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	0800ac3c 	.word	0x0800ac3c

08003ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
 8003de8:	4613      	mov	r3, r2
 8003dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_GPIO_WritePin+0x20>
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_GPIO_WritePin+0x2a>
 8003dfc:	f240 119d 	movw	r1, #413	; 0x19d
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <HAL_GPIO_WritePin+0x60>)
 8003e02:	f7fd f82f 	bl	8000e64 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003e06:	787b      	ldrb	r3, [r7, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_GPIO_WritePin+0x40>
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d004      	beq.n	8003e1c <HAL_GPIO_WritePin+0x40>
 8003e12:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003e16:	4809      	ldr	r0, [pc, #36]	; (8003e3c <HAL_GPIO_WritePin+0x60>)
 8003e18:	f7fd f824 	bl	8000e64 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	619a      	str	r2, [r3, #24]
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0800ac3c 	.word	0x0800ac3c

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e316      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d903      	bls.n	8003e62 <HAL_RCC_OscConfig+0x22>
 8003e5a:	21e8      	movs	r1, #232	; 0xe8
 8003e5c:	48a3      	ldr	r0, [pc, #652]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	f7fd f801 	bl	8000e64 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8088 	beq.w	8003f80 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d008      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54>
 8003e8c:	21ed      	movs	r1, #237	; 0xed
 8003e8e:	4897      	ldr	r0, [pc, #604]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	f7fc ffe8 	bl	8000e64 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00c      	beq.n	8003eba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d112      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eac:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eba:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x13e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d157      	bne.n	8003f7e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e2d6      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0xaa>
 8003edc:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a83      	ldr	r2, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e01d      	b.n	8003f26 <HAL_RCC_OscConfig+0xe6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0xce>
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7a      	ldr	r2, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0xe6>
 8003f0e:	4b78      	ldr	r3, [pc, #480]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a77      	ldr	r2, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a74      	ldr	r2, [pc, #464]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fc5b 	bl	80017e8 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f36:	f7fd fc57 	bl	80017e8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e29b      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0xf6>
 8003f54:	e014      	b.n	8003f80 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd fc47 	bl	80017e8 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5e:	f7fd fc43 	bl	80017e8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b64      	cmp	r3, #100	; 0x64
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e287      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f70:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x11e>
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d079      	beq.n	8004080 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x166>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d004      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x166>
 8003f9c:	f240 111f 	movw	r1, #287	; 0x11f
 8003fa0:	4852      	ldr	r0, [pc, #328]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	f7fc ff5f 	bl	8000e64 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b1f      	cmp	r3, #31
 8003fac:	d904      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x178>
 8003fae:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003fb2:	484e      	ldr	r0, [pc, #312]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f7fc ff56 	bl	8000e64 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb8:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc4:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d11c      	bne.n	800400a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d116      	bne.n	800400a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fdc:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1b4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e245      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	493b      	ldr	r1, [pc, #236]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004008:	e03a      	b.n	8004080 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d020      	beq.n	8004054 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004012:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x2b4>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fbe6 	bl	80017e8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004020:	f7fd fbe2 	bl	80017e8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e226      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4928      	ldr	r1, [pc, #160]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
 8004052:	e015      	b.n	8004080 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_OscConfig+0x2b4>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fbc5 	bl	80017e8 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004062:	f7fd fbc1 	bl	80017e8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e205      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d046      	beq.n	800411a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_OscConfig+0x266>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d004      	beq.n	80040a6 <HAL_RCC_OscConfig+0x266>
 800409c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80040a0:	4812      	ldr	r0, [pc, #72]	; (80040ec <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	f7fc fedf 	bl	8000e64 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x2b8>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fd fb98 	bl	80017e8 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fd fb94 	bl	80017e8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1d8      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_RCC_OscConfig+0x2b0>)
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x27c>
 80040da:	e01e      	b.n	800411a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x2b8>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fd fb81 	bl	80017e8 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e8:	e011      	b.n	800410e <HAL_RCC_OscConfig+0x2ce>
 80040ea:	bf00      	nop
 80040ec:	0800ac78 	.word	0x0800ac78
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd fb74 	bl	80017e8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1b8      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	4b97      	ldr	r3, [pc, #604]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80a8 	beq.w	8004278 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d008      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d004      	beq.n	800414e <HAL_RCC_OscConfig+0x30e>
 8004144:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004148:	4889      	ldr	r0, [pc, #548]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 800414a:	f7fc fe8b 	bl	8000e64 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b87      	ldr	r3, [pc, #540]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	4b83      	ldr	r3, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a82      	ldr	r2, [pc, #520]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
 800416a:	4b80      	ldr	r3, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b7e      	ldr	r3, [pc, #504]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d118      	bne.n	80041b8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7a      	ldr	r2, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004192:	f7fd fb29 	bl	80017e8 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419a:	f7fd fb25 	bl	80017e8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e169      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	4b71      	ldr	r3, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x534>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x38e>
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	e01c      	b.n	8004208 <HAL_RCC_OscConfig+0x3c8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3b0>
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a64      	ldr	r2, [pc, #400]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a61      	ldr	r2, [pc, #388]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0x3c8>
 80041f0:	4b5e      	ldr	r3, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a5d      	ldr	r2, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	4b5b      	ldr	r3, [pc, #364]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a5a      	ldr	r2, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004202:	f023 0304 	bic.w	r3, r3, #4
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fd faea 	bl	80017e8 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fd fae6 	bl	80017e8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e128      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ee      	beq.n	8004218 <HAL_RCC_OscConfig+0x3d8>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fd fad4 	bl	80017e8 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fd fad0 	bl	80017e8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e112      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1ee      	bne.n	8004244 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a3e      	ldr	r2, [pc, #248]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d008      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HAL_RCC_OscConfig+0x45a>
 8004290:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004294:	4836      	ldr	r0, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004296:	f7fc fde5 	bl	8000e64 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80ed 	beq.w	800447e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_OscConfig+0x52c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	f000 80ae 	beq.w	800440e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	f040 8092 	bne.w	80043e0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_RCC_OscConfig+0x498>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042cc:	d004      	beq.n	80042d8 <HAL_RCC_OscConfig+0x498>
 80042ce:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80042d2:	4827      	ldr	r0, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 80042d4:	f7fc fdc6 	bl	8000e64 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	2b3f      	cmp	r3, #63	; 0x3f
 80042de:	d904      	bls.n	80042ea <HAL_RCC_OscConfig+0x4aa>
 80042e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80042e4:	4822      	ldr	r0, [pc, #136]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 80042e6:	f7fc fdbd 	bl	8000e64 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b31      	cmp	r3, #49	; 0x31
 80042f0:	d904      	bls.n	80042fc <HAL_RCC_OscConfig+0x4bc>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80042fa:	d904      	bls.n	8004306 <HAL_RCC_OscConfig+0x4c6>
 80042fc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004300:	481b      	ldr	r0, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004302:	f7fc fdaf 	bl	8000e64 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	2b02      	cmp	r3, #2
 800430c:	d010      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00c      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	2b06      	cmp	r3, #6
 800431c:	d008      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	2b08      	cmp	r3, #8
 8004324:	d004      	beq.n	8004330 <HAL_RCC_OscConfig+0x4f0>
 8004326:	f240 11db 	movw	r1, #475	; 0x1db
 800432a:	4811      	ldr	r0, [pc, #68]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 800432c:	f7fc fd9a 	bl	8000e64 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d903      	bls.n	8004340 <HAL_RCC_OscConfig+0x500>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d904      	bls.n	800434a <HAL_RCC_OscConfig+0x50a>
 8004340:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004344:	480a      	ldr	r0, [pc, #40]	; (8004370 <HAL_RCC_OscConfig+0x530>)
 8004346:	f7fc fd8d 	bl	8000e64 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x538>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd fa4a 	bl	80017e8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e011      	b.n	800437c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fa46 	bl	80017e8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d90a      	bls.n	800437c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e08a      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	0800ac78 	.word	0x0800ac78
 8004374:	40007000 	.word	0x40007000
 8004378:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437c:	4b42      	ldr	r3, [pc, #264]	; (8004488 <HAL_RCC_OscConfig+0x648>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e7      	bne.n	8004358 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	019b      	lsls	r3, r3, #6
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	3b01      	subs	r3, #1
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	4936      	ldr	r1, [pc, #216]	; (8004488 <HAL_RCC_OscConfig+0x648>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b2:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_RCC_OscConfig+0x64c>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd fa16 	bl	80017e8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fa12 	bl	80017e8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e056      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCC_OscConfig+0x648>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x580>
 80043de:	e04e      	b.n	800447e <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <HAL_RCC_OscConfig+0x64c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fd f9ff 	bl	80017e8 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fd f9fb 	bl	80017e8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e03f      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCC_OscConfig+0x648>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x5ae>
 800440c:	e037      	b.n	800447e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e032      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x648>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d028      	beq.n	800447a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d121      	bne.n	800447a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d11a      	bne.n	800447a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800444a:	4013      	ands	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004450:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004452:	4293      	cmp	r3, r2
 8004454:	d111      	bne.n	800447a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d107      	bne.n	800447a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	42470060 	.word	0x42470060

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e174      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x24>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d904      	bls.n	80044be <HAL_RCC_ClockConfig+0x2e>
 80044b4:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80044b8:	487b      	ldr	r0, [pc, #492]	; (80046a8 <HAL_RCC_ClockConfig+0x218>)
 80044ba:	f7fc fcd3 	bl	8000e64 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d016      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d010      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d007      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d004      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
 80044ee:	f240 215d 	movw	r1, #605	; 0x25d
 80044f2:	486d      	ldr	r0, [pc, #436]	; (80046a8 <HAL_RCC_ClockConfig+0x218>)
 80044f4:	f7fc fcb6 	bl	8000e64 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d90c      	bls.n	8004520 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b69      	ldr	r3, [pc, #420]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e136      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d049      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004538:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a5c      	ldr	r2, [pc, #368]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 800453e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004550:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d024      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b80      	cmp	r3, #128	; 0x80
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b90      	cmp	r3, #144	; 0x90
 8004572:	d01c      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2ba0      	cmp	r3, #160	; 0xa0
 800457a:	d018      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2bb0      	cmp	r3, #176	; 0xb0
 8004582:	d014      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2bc0      	cmp	r3, #192	; 0xc0
 800458a:	d010      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2bd0      	cmp	r3, #208	; 0xd0
 8004592:	d00c      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2be0      	cmp	r3, #224	; 0xe0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2bf0      	cmp	r3, #240	; 0xf0
 80045a2:	d004      	beq.n	80045ae <HAL_RCC_ClockConfig+0x11e>
 80045a4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80045a8:	483f      	ldr	r0, [pc, #252]	; (80046a8 <HAL_RCC_ClockConfig+0x218>)
 80045aa:	f7fc fc5b 	bl	8000e64 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ae:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	493d      	ldr	r1, [pc, #244]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d059      	beq.n	8004680 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x166>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d00c      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x166>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d008      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x166>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d004      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x166>
 80045ec:	f240 2187 	movw	r1, #647	; 0x287
 80045f0:	482d      	ldr	r0, [pc, #180]	; (80046a8 <HAL_RCC_ClockConfig+0x218>)
 80045f2:	f7fc fc37 	bl	8000e64 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d119      	bne.n	800463e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0bf      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d003      	beq.n	800461e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	2b03      	cmp	r3, #3
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0af      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0a7      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4919      	ldr	r1, [pc, #100]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd f8ca 	bl	80017e8 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fd f8c6 	bl	80017e8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e08f      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_RCC_ClockConfig+0x220>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d212      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_ClockConfig+0x21c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d007      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e072      	b.n	800478e <HAL_RCC_ClockConfig+0x2fe>
 80046a8:	0800ac78 	.word	0x0800ac78
 80046ac:	40023c00 	.word	0x40023c00
 80046b0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d025      	beq.n	800470c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d018      	beq.n	80046fa <HAL_RCC_ClockConfig+0x26a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	d013      	beq.n	80046fa <HAL_RCC_ClockConfig+0x26a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046da:	d00e      	beq.n	80046fa <HAL_RCC_ClockConfig+0x26a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x26a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80046ee:	d004      	beq.n	80046fa <HAL_RCC_ClockConfig+0x26a>
 80046f0:	f240 21c5 	movw	r1, #709	; 0x2c5
 80046f4:	4828      	ldr	r0, [pc, #160]	; (8004798 <HAL_RCC_ClockConfig+0x308>)
 80046f6:	f7fc fbb5 	bl	8000e64 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_RCC_ClockConfig+0x30c>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4925      	ldr	r1, [pc, #148]	; (800479c <HAL_RCC_ClockConfig+0x30c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d026      	beq.n	8004766 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d018      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2c2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d013      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2c2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004732:	d00e      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2c2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2c2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004746:	d004      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2c2>
 8004748:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 800474c:	4812      	ldr	r0, [pc, #72]	; (8004798 <HAL_RCC_ClockConfig+0x308>)
 800474e:	f7fc fb89 	bl	8000e64 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x30c>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x30c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x30c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <HAL_RCC_ClockConfig+0x310>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x314>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x318>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fe90 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	0800ac78 	.word	0x0800ac78
 800479c:	40023800 	.word	0x40023800
 80047a0:	0800ade8 	.word	0x0800ade8
 80047a4:	20000000 	.word	0x20000000
 80047a8:	20000004 	.word	0x20000004

080047ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	2300      	movs	r3, #0
 80047be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c4:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d00d      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x40>
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	f200 80bd 	bhi.w	8004950 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x34>
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047de:	e0b7      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047e2:	60bb      	str	r3, [r7, #8]
       break;
 80047e4:	e0b7      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047e8:	60bb      	str	r3, [r7, #8]
      break;
 80047ea:	e0b4      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ec:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f6:	4b5b      	ldr	r3, [pc, #364]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04d      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004802:	4b58      	ldr	r3, [pc, #352]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	ea02 0800 	and.w	r8, r2, r0
 800481a:	ea03 0901 	and.w	r9, r3, r1
 800481e:	4640      	mov	r0, r8
 8004820:	4649      	mov	r1, r9
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	014b      	lsls	r3, r1, #5
 800482c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004830:	0142      	lsls	r2, r0, #5
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	ebb0 0008 	subs.w	r0, r0, r8
 800483a:	eb61 0109 	sbc.w	r1, r1, r9
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	018b      	lsls	r3, r1, #6
 8004848:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800484c:	0182      	lsls	r2, r0, #6
 800484e:	1a12      	subs	r2, r2, r0
 8004850:	eb63 0301 	sbc.w	r3, r3, r1
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	00d9      	lsls	r1, r3, #3
 800485e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004862:	00d0      	lsls	r0, r2, #3
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	eb12 0208 	adds.w	r2, r2, r8
 800486c:	eb43 0309 	adc.w	r3, r3, r9
 8004870:	f04f 0000 	mov.w	r0, #0
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	0259      	lsls	r1, r3, #9
 800487a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800487e:	0250      	lsls	r0, r2, #9
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	461a      	mov	r2, r3
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	f7fb fc9e 	bl	80001d0 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4613      	mov	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e04a      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	ea02 0400 	and.w	r4, r2, r0
 80048b6:	ea03 0501 	and.w	r5, r3, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	014b      	lsls	r3, r1, #5
 80048c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048cc:	0142      	lsls	r2, r0, #5
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	1b00      	subs	r0, r0, r4
 80048d4:	eb61 0105 	sbc.w	r1, r1, r5
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	018b      	lsls	r3, r1, #6
 80048e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048e6:	0182      	lsls	r2, r0, #6
 80048e8:	1a12      	subs	r2, r2, r0
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	00d9      	lsls	r1, r3, #3
 80048f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048fc:	00d0      	lsls	r0, r2, #3
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	1912      	adds	r2, r2, r4
 8004904:	eb45 0303 	adc.w	r3, r5, r3
 8004908:	f04f 0000 	mov.w	r0, #0
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	0299      	lsls	r1, r3, #10
 8004912:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004916:	0290      	lsls	r0, r2, #10
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	461a      	mov	r2, r3
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	f7fb fc52 	bl	80001d0 <__aeabi_uldivmod>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4613      	mov	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	60bb      	str	r3, [r7, #8]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004952:	60bb      	str	r3, [r7, #8]
      break;
 8004954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004956:	68bb      	ldr	r3, [r7, #8]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	00f42400 	.word	0x00f42400
 800496c:	007a1200 	.word	0x007a1200

08004970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCC_GetHCLKFreq+0x14>)
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000000 	.word	0x20000000

08004988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800498c:	f7ff fff0 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	0a9b      	lsrs	r3, r3, #10
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	; (80049ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	0800adf8 	.word	0x0800adf8

080049b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b4:	f7ff ffdc 	bl	8004970 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0b5b      	lsrs	r3, r3, #13
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40023800 	.word	0x40023800
 80049d4:	0800adf8 	.word	0x0800adf8

080049d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	220f      	movs	r2, #15
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0203 	and.w	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <HAL_RCC_GetClockConfig+0x60>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0207 	and.w	r2, r3, #7
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40023c00 	.word	0x40023c00

08004a3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e080      	b.n	8004b50 <HAL_SD_Init+0x114>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a41      	ldr	r2, [pc, #260]	; (8004b58 <HAL_SD_Init+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_SD_Init+0x26>
 8004a58:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004a5c:	483f      	ldr	r0, [pc, #252]	; (8004b5c <HAL_SD_Init+0x120>)
 8004a5e:	f7fc fa01 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_SD_Init+0x42>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	d004      	beq.n	8004a7e <HAL_SD_Init+0x42>
 8004a74:	f240 1159 	movw	r1, #345	; 0x159
 8004a78:	4838      	ldr	r0, [pc, #224]	; (8004b5c <HAL_SD_Init+0x120>)
 8004a7a:	f7fc f9f3 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_SD_Init+0x5e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d004      	beq.n	8004a9a <HAL_SD_Init+0x5e>
 8004a90:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004a94:	4831      	ldr	r0, [pc, #196]	; (8004b5c <HAL_SD_Init+0x120>)
 8004a96:	f7fc f9e5 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_SD_Init+0x7a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d004      	beq.n	8004ab6 <HAL_SD_Init+0x7a>
 8004aac:	f240 115b 	movw	r1, #347	; 0x15b
 8004ab0:	482a      	ldr	r0, [pc, #168]	; (8004b5c <HAL_SD_Init+0x120>)
 8004ab2:	f7fc f9d7 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <HAL_SD_Init+0xa0>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac6:	d009      	beq.n	8004adc <HAL_SD_Init+0xa0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	d004      	beq.n	8004adc <HAL_SD_Init+0xa0>
 8004ad2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004ad6:	4821      	ldr	r0, [pc, #132]	; (8004b5c <HAL_SD_Init+0x120>)
 8004ad8:	f7fc f9c4 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_SD_Init+0xbc>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aec:	d004      	beq.n	8004af8 <HAL_SD_Init+0xbc>
 8004aee:	f240 115d 	movw	r1, #349	; 0x15d
 8004af2:	481a      	ldr	r0, [pc, #104]	; (8004b5c <HAL_SD_Init+0x120>)
 8004af4:	f7fc f9b6 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2bff      	cmp	r3, #255	; 0xff
 8004afe:	d904      	bls.n	8004b0a <HAL_SD_Init+0xce>
 8004b00:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004b04:	4815      	ldr	r0, [pc, #84]	; (8004b5c <HAL_SD_Init+0x120>)
 8004b06:	f7fc f9ad 	bl	8000e64 <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_SD_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7fc fb3f 	bl	80011a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2203      	movs	r2, #3
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f818 	bl	8004b60 <HAL_SD_InitCard>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_SD_Init+0xfe>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00a      	b.n	8004b50 <HAL_SD_Init+0x114>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	0800acb0 	.word	0x0800acb0

08004b60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b60:	b5b0      	push	{r4, r5, r7, lr}
 8004b62:	b08e      	sub	sp, #56	; 0x38
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004b7c:	2376      	movs	r3, #118	; 0x76
 8004b7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681d      	ldr	r5, [r3, #0]
 8004b84:	466c      	mov	r4, sp
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f002 f865 	bl	8006c68 <SDIO_Init>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04c      	b.n	8004c4a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_SD_InitCard+0xf4>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 f8db 	bl	8006d76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_SD_InitCard+0xf4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fe22 	bl	8005810 <SD_PowerON>
 8004bcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02e      	b.n	8004c4a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fd43 	bl	8005678 <SD_InitCard>
 8004bf2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e01b      	b.n	8004c4a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f002 f9fe 	bl	800701c <SDMMC_CmdBlockLength>
 8004c20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <HAL_SD_InitCard+0xf8>)
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bdb0      	pop	{r4, r5, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	422580a0 	.word	0x422580a0
 8004c58:	004005ff 	.word	0x004005ff

08004c5c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0c0      	b.n	8004e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f040 80b9 	bne.w	8004e04 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d907      	bls.n	8004cb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0a7      	b.n	8004e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	4a4c      	ldr	r2, [pc, #304]	; (8004e10 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a4b      	ldr	r2, [pc, #300]	; (8004e14 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2200      	movs	r2, #0
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3380      	adds	r3, #128	; 0x80
 8004d20:	4619      	mov	r1, r3
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	025b      	lsls	r3, r3, #9
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	f7fe fa75 	bl	8003218 <HAL_DMA_Start_IT>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d017      	beq.n	8004d64 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e050      	b.n	8004e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004d64:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d002      	beq.n	8004d78 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d7c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d84:	2390      	movs	r3, #144	; 0x90
 8004d86:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f107 0210 	add.w	r2, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 f89e 	bl	8006ee0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d90a      	bls.n	8004dc0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2282      	movs	r2, #130	; 0x82
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db6:	4618      	mov	r0, r3
 8004db8:	f002 f974 	bl	80070a4 <SDMMC_CmdReadMultiBlock>
 8004dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004dbe:	e009      	b.n	8004dd4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2281      	movs	r2, #129	; 0x81
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f002 f947 	bl	8007060 <SDMMC_CmdReadSingleBlock>
 8004dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e002      	b.n	8004e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	08005563 	.word	0x08005563
 8004e14:	080055d5 	.word	0x080055d5
 8004e18:	004005ff 	.word	0x004005ff
 8004e1c:	4225858c 	.word	0x4225858c

08004e20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0c5      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	f040 80be 	bne.w	8004fd2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d907      	bls.n	8004e7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0ac      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	4a4e      	ldr	r2, [pc, #312]	; (8004fdc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	4a4d      	ldr	r2, [pc, #308]	; (8004fe0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	025b      	lsls	r3, r3, #9
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d90a      	bls.n	8004ee0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22a0      	movs	r2, #160	; 0xa0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f002 f928 	bl	800712c <SDMMC_CmdWriteMultiBlock>
 8004edc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ede:	e009      	b.n	8004ef4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2290      	movs	r2, #144	; 0x90
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 f8fb 	bl	80070e8 <SDMMC_CmdWriteSingleBlock>
 8004ef2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d012      	beq.n	8004f20 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a39      	ldr	r2, [pc, #228]	; (8004fe4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e059      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004f20:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3380      	adds	r3, #128	; 0x80
 8004f56:	461a      	mov	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	025b      	lsls	r3, r3, #9
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	f7fe f95b 	bl	8003218 <HAL_DMA_Start_IT>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01c      	beq.n	8004fa2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004f76:	f023 0302 	bic.w	r3, r3, #2
 8004f7a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e018      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	025b      	lsls	r3, r3, #9
 8004fac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004fae:	2390      	movs	r3, #144	; 0x90
 8004fb0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f107 0210 	add.w	r2, r7, #16
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 ff89 	bl	8006ee0 <SDIO_ConfigData>

      return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	; 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08005539 	.word	0x08005539
 8004fe0:	080055d5 	.word	0x080055d5
 8004fe4:	004005ff 	.word	0x004005ff
 8004fe8:	4225858c 	.word	0x4225858c

08004fec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500e:	0f9b      	lsrs	r3, r3, #30
 8005010:	b2da      	uxtb	r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800501a:	0e9b      	lsrs	r3, r3, #26
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	b2da      	uxtb	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	b2da      	uxtb	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	b2da      	uxtb	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005056:	b2da      	uxtb	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005060:	0d1b      	lsrs	r3, r3, #20
 8005062:	b29a      	uxth	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	b2da      	uxtb	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800507e:	0bdb      	lsrs	r3, r3, #15
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005090:	0b9b      	lsrs	r3, r3, #14
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	b2da      	uxtb	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a2:	0b5b      	lsrs	r3, r3, #13
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b4:	0b1b      	lsrs	r3, r3, #12
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d163      	bne.n	8005198 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d4:	009a      	lsls	r2, r3, #2
 80050d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050e0:	0f92      	lsrs	r2, r2, #30
 80050e2:	431a      	orrs	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ec:	0edb      	lsrs	r3, r3, #27
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	0e1b      	lsrs	r3, r3, #24
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	b2da      	uxtb	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005110:	0d5b      	lsrs	r3, r3, #21
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	b2da      	uxtb	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	0c9b      	lsrs	r3, r3, #18
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	b2da      	uxtb	r2, r3
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005134:	0bdb      	lsrs	r3, r3, #15
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	b2da      	uxtb	r2, r3
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	7e1b      	ldrb	r3, [r3, #24]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	3302      	adds	r3, #2
 8005158:	2201      	movs	r2, #1
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005162:	fb02 f203 	mul.w	r2, r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	7a1b      	ldrb	r3, [r3, #8]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005184:	0a52      	lsrs	r2, r2, #9
 8005186:	fb02 f203 	mul.w	r2, r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005194:	661a      	str	r2, [r3, #96]	; 0x60
 8005196:	e031      	b.n	80051fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	2b01      	cmp	r3, #1
 800519e:	d11d      	bne.n	80051dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	431a      	orrs	r2, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	3301      	adds	r3, #1
 80051bc:	029a      	lsls	r2, r3, #10
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	661a      	str	r2, [r3, #96]	; 0x60
 80051da:	e00f      	b.n	80051fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a58      	ldr	r2, [pc, #352]	; (8005344 <HAL_SD_GetCardCSD+0x344>)
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e09d      	b.n	8005338 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005200:	0b9b      	lsrs	r3, r3, #14
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	09db      	lsrs	r3, r3, #7
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521a:	b2da      	uxtb	r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	0fdb      	lsrs	r3, r3, #31
 8005236:	b2da      	uxtb	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	0f5b      	lsrs	r3, r3, #29
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	b2da      	uxtb	r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	0e9b      	lsrs	r3, r3, #26
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	b2da      	uxtb	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	0d9b      	lsrs	r3, r3, #22
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	b2da      	uxtb	r2, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	0d5b      	lsrs	r3, r3, #21
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	0bdb      	lsrs	r3, r3, #15
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	0b9b      	lsrs	r3, r3, #14
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	0b5b      	lsrs	r3, r3, #13
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	0b1b      	lsrs	r3, r3, #12
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	0a9b      	lsrs	r3, r3, #10
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005326:	b2da      	uxtb	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	004005ff 	.word	0x004005ff

08005348 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	b08e      	sub	sp, #56	; 0x38
 80053a4:	af04      	add	r7, sp, #16
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d008      	beq.n	80053d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d004      	beq.n	80053d0 <HAL_SD_ConfigWideBusOperation+0x30>
 80053c6:	f640 01c1 	movw	r1, #2241	; 0x8c1
 80053ca:	4849      	ldr	r0, [pc, #292]	; (80054f0 <HAL_SD_ConfigWideBusOperation+0x150>)
 80053cc:	f7fb fd4a 	bl	8000e64 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2203      	movs	r2, #3
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d02e      	beq.n	800543e <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d106      	bne.n	80053f6 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
 80053f4:	e029      	b.n	800544a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fc:	d10a      	bne.n	8005414 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fabc 	bl	800597c <SD_WideBus_Enable>
 8005404:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
 8005412:	e01a      	b.n	800544a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 faf9 	bl	8005a12 <SD_WideBus_Disable>
 8005420:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
 800542e:	e00c      	b.n	800544a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
 800543c:	e005      	b.n	800544a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_SD_ConfigWideBusOperation+0xca>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <HAL_SD_ConfigWideBusOperation+0x154>)
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005468:	e01f      	b.n	80054aa <HAL_SD_ConfigWideBusOperation+0x10a>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681d      	ldr	r5, [r3, #0]
 8005490:	466c      	mov	r4, sp
 8005492:	f107 0314 	add.w	r3, r7, #20
 8005496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800549a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054a4:	4628      	mov	r0, r5
 80054a6:	f001 fbdf 	bl	8006c68 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 fdb2 	bl	800701c <SDMMC_CmdBlockLength>
 80054b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_SD_ConfigWideBusOperation+0x13a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <HAL_SD_ConfigWideBusOperation+0x154>)
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80054e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	; 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bdb0      	pop	{r4, r5, r7, pc}
 80054ee:	bf00      	nop
 80054f0:	0800acb0 	.word	0x0800acb0
 80054f4:	004005ff 	.word	0x004005ff

080054f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa0e 	bl	800592c <SD_SendStatus>
 8005510:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	0a5b      	lsrs	r3, r3, #9
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005554:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	2b82      	cmp	r3, #130	; 0x82
 8005576:	d111      	bne.n	800559c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f001 fdf7 	bl	8007170 <SDMMC_CmdStopTransfer>
 8005582:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	431a      	orrs	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fd28 	bl	8004fec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0208 	bic.w	r2, r2, #8
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f002 fa4b 	bl	8007a60 <HAL_SD_RxCpltCallback>
#endif
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fe f808 	bl	80035f8 <HAL_DMA_GetError>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d03e      	beq.n	800566c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d002      	beq.n	800560a <SD_DMAError+0x36>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d12d      	bne.n	8005666 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a19      	ldr	r2, [pc, #100]	; (8005674 <SD_DMAError+0xa0>)
 8005610:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff ff62 	bl	80054f8 <HAL_SD_GetCardState>
 8005634:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d002      	beq.n	8005642 <SD_DMAError+0x6e>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d10a      	bne.n	8005658 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fd92 	bl	8007170 <SDMMC_CmdStopTransfer>
 800564c:	4602      	mov	r2, r0
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	431a      	orrs	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f7ff fcc0 	bl	8004fec <HAL_SD_ErrorCallback>
#endif
  }
}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	004005ff 	.word	0x004005ff

08005678 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005678:	b5b0      	push	{r4, r5, r7, lr}
 800567a:	b094      	sub	sp, #80	; 0x50
 800567c:	af04      	add	r7, sp, #16
 800567e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005680:	2301      	movs	r3, #1
 8005682:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fb83 	bl	8006d94 <SDIO_GetPowerState>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005698:	e0b6      	b.n	8005808 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d02f      	beq.n	8005702 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fe6c 	bl	8007384 <SDMMC_CmdSendCID>
 80056ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	e0a7      	b.n	8005808 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fbea 	bl	8006e98 <SDIO_GetResponse>
 80056c4:	4602      	mov	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2104      	movs	r1, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fbe1 	bl	8006e98 <SDIO_GetResponse>
 80056d6:	4602      	mov	r2, r0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2108      	movs	r1, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fbd8 	bl	8006e98 <SDIO_GetResponse>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	210c      	movs	r1, #12
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 fbcf 	bl	8006e98 <SDIO_GetResponse>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	2b03      	cmp	r3, #3
 8005708:	d00d      	beq.n	8005726 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f107 020e 	add.w	r2, r7, #14
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f001 fe72 	bl	80073fe <SDMMC_CmdSetRelAdd>
 800571a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <SD_InitCard+0xae>
    {
      return errorstate;
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	e070      	b.n	8005808 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	2b03      	cmp	r3, #3
 800572c:	d036      	beq.n	800579c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f001 fe3c 	bl	80073c0 <SDMMC_CmdSendCSD>
 8005748:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005752:	e059      	b.n	8005808 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fb9c 	bl	8006e98 <SDIO_GetResponse>
 8005760:	4602      	mov	r2, r0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2104      	movs	r1, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fb93 	bl	8006e98 <SDIO_GetResponse>
 8005772:	4602      	mov	r2, r0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2108      	movs	r1, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fb8a 	bl	8006e98 <SDIO_GetResponse>
 8005784:	4602      	mov	r2, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	210c      	movs	r1, #12
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fb81 	bl	8006e98 <SDIO_GetResponse>
 8005796:	4602      	mov	r2, r0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2104      	movs	r1, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fb78 	bl	8006e98 <SDIO_GetResponse>
 80057a8:	4603      	mov	r3, r0
 80057aa:	0d1a      	lsrs	r2, r3, #20
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fc22 	bl	8005000 <HAL_SD_GetCardCSD>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057c6:	e01f      	b.n	8005808 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	461a      	mov	r2, r3
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	4608      	mov	r0, r1
 80057da:	f001 fceb 	bl	80071b4 <SDMMC_CmdSelDesel>
 80057de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <SD_InitCard+0x172>
  {
    return errorstate;
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	e00e      	b.n	8005808 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681d      	ldr	r5, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	466c      	mov	r4, sp
 80057f2:	f103 0210 	add.w	r2, r3, #16
 80057f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80057f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057fc:	3304      	adds	r3, #4
 80057fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005800:	4628      	mov	r0, r5
 8005802:	f001 fa31 	bl	8006c68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3740      	adds	r7, #64	; 0x40
 800580c:	46bd      	mov	sp, r7
 800580e:	bdb0      	pop	{r4, r5, r7, pc}

08005810 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fce6 	bl	80071fa <SDMMC_CmdGoIdleState>
 800582e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	e072      	b.n	8005920 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fcf9 	bl	8007236 <SDMMC_CmdOperCond>
 8005844:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00d      	beq.n	8005868 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fccf 	bl	80071fa <SDMMC_CmdGoIdleState>
 800585c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	e05b      	b.n	8005920 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	2b01      	cmp	r3, #1
 8005874:	d137      	bne.n	80058e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fcf9 	bl	8007274 <SDMMC_CmdAppCommand>
 8005882:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d02d      	beq.n	80058e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800588e:	e047      	b.n	8005920 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fcec 	bl	8007274 <SDMMC_CmdAppCommand>
 800589c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	e03b      	b.n	8005920 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	491e      	ldr	r1, [pc, #120]	; (8005928 <SD_PowerON+0x118>)
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fd02 	bl	80072b8 <SDMMC_CmdAppOperCommand>
 80058b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058c0:	e02e      	b.n	8005920 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fae5 	bl	8006e98 <SDIO_GetResponse>
 80058ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	0fdb      	lsrs	r3, r3, #31
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <SD_PowerON+0xcc>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <SD_PowerON+0xce>
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]

    count++;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d802      	bhi.n	80058f6 <SD_PowerON+0xe6>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0cc      	beq.n	8005890 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d902      	bls.n	8005906 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005904:	e00c      	b.n	8005920 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
 8005916:	e002      	b.n	800591e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	c1100000 	.word	0xc1100000

0800592c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800593c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005940:	e018      	b.n	8005974 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f001 fd76 	bl	8007440 <SDMMC_CmdSendStatus>
 8005954:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <SD_SendStatus+0x34>
  {
    return errorstate;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e009      	b.n	8005974 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fa96 	bl	8006e98 <SDIO_GetResponse>
 800596c:	4602      	mov	r2, r0
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fa80 	bl	8006e98 <SDIO_GetResponse>
 8005998:	4603      	mov	r3, r0
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059a2:	d102      	bne.n	80059aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059a8:	e02f      	b.n	8005a0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80059aa:	f107 030c 	add.w	r3, r7, #12
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f879 	bl	8005aa8 <SD_FindSCR>
 80059b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	e023      	b.n	8005a0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01c      	beq.n	8005a06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f001 fc4b 	bl	8007274 <SDMMC_CmdAppCommand>
 80059de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	e00f      	b.n	8005a0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fc84 	bl	80072fe <SDMMC_CmdBusWidth>
 80059f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	e003      	b.n	8005a0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e001      	b.n	8005a0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 fa35 	bl	8006e98 <SDIO_GetResponse>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a38:	d102      	bne.n	8005a40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a3e:	e02f      	b.n	8005aa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f82e 	bl	8005aa8 <SD_FindSCR>
 8005a4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	e023      	b.n	8005aa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01c      	beq.n	8005a9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f001 fc00 	bl	8007274 <SDMMC_CmdAppCommand>
 8005a74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	e00f      	b.n	8005aa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fc39 	bl	80072fe <SDMMC_CmdBusWidth>
 8005a8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	e003      	b.n	8005aa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e001      	b.n	8005aa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b08f      	sub	sp, #60	; 0x3c
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ab2:	f7fb fe99 	bl	80017e8 <HAL_GetTick>
 8005ab6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2108      	movs	r1, #8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 faa4 	bl	800701c <SDMMC_CmdBlockLength>
 8005ad4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	e0b2      	b.n	8005c46 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f001 fbc1 	bl	8007274 <SDMMC_CmdAppCommand>
 8005af2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <SD_FindSCR+0x56>
  {
    return errorstate;
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	e0a3      	b.n	8005c46 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005b04:	2308      	movs	r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005b08:	2330      	movs	r3, #48	; 0x30
 8005b0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f107 0210 	add.w	r2, r7, #16
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f9dc 	bl	8006ee0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fc08 	bl	8007342 <SDMMC_CmdSendSCR>
 8005b32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02a      	beq.n	8005b90 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	e083      	b.n	8005c46 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00f      	beq.n	8005b6c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	f107 0208 	add.w	r2, r7, #8
 8005b58:	18d4      	adds	r4, r2, r3
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	f001 f8fe 	bl	8006d5c <SDIO_ReadFIFO>
 8005b60:	4603      	mov	r3, r0
 8005b62:	6023      	str	r3, [r4, #0]
      index++;
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	3301      	adds	r3, #1
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6a:	e006      	b.n	8005b7a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d012      	beq.n	8005ba0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b7a:	f7fb fe35 	bl	80017e8 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b88:	d102      	bne.n	8005b90 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b8e:	e05a      	b.n	8005c46 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0cf      	beq.n	8005b3e <SD_FindSCR+0x96>
 8005b9e:	e000      	b.n	8005ba2 <SD_FindSCR+0xfa>
      break;
 8005ba0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005bb8:	2308      	movs	r3, #8
 8005bba:	e044      	b.n	8005c46 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e037      	b.n	8005c46 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2220      	movs	r2, #32
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e02a      	b.n	8005c46 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	061a      	lsls	r2, r3, #24
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005c10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0e1b      	lsrs	r3, r3, #24
 8005c16:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	601a      	str	r2, [r3, #0]
    scr++;
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	3304      	adds	r3, #4
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	061a      	lsls	r2, r3, #24
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	373c      	adds	r7, #60	; 0x3c
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}
	...

08005c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e17e      	b.n	8005f60 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a70      	ldr	r2, [pc, #448]	; (8005e28 <HAL_SPI_Init+0x1d8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_SPI_Init+0x3a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a6e      	ldr	r2, [pc, #440]	; (8005e2c <HAL_SPI_Init+0x1dc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_SPI_Init+0x3a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6d      	ldr	r2, [pc, #436]	; (8005e30 <HAL_SPI_Init+0x1e0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_SPI_Init+0x3a>
 8005c80:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005c84:	486b      	ldr	r0, [pc, #428]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005c86:	f7fb f8ed 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_SPI_Init+0x56>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d004      	beq.n	8005ca6 <HAL_SPI_Init+0x56>
 8005c9c:	f240 1143 	movw	r1, #323	; 0x143
 8005ca0:	4864      	ldr	r0, [pc, #400]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005ca2:	f7fb f8df 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <HAL_SPI_Init+0x7c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb6:	d009      	beq.n	8005ccc <HAL_SPI_Init+0x7c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d004      	beq.n	8005ccc <HAL_SPI_Init+0x7c>
 8005cc2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005cc6:	485b      	ldr	r0, [pc, #364]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005cc8:	f7fb f8cc 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd4:	d008      	beq.n	8005ce8 <HAL_SPI_Init+0x98>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <HAL_SPI_Init+0x98>
 8005cde:	f240 1145 	movw	r1, #325	; 0x145
 8005ce2:	4854      	ldr	r0, [pc, #336]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005ce4:	f7fb f8be 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d00d      	beq.n	8005d0e <HAL_SPI_Init+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_SPI_Init+0xbe>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d02:	d004      	beq.n	8005d0e <HAL_SPI_Init+0xbe>
 8005d04:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005d08:	484a      	ldr	r0, [pc, #296]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005d0a:	f7fb f8ab 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d020      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d01c      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d018      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b18      	cmp	r3, #24
 8005d2c:	d014      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d010      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	2b28      	cmp	r3, #40	; 0x28
 8005d3c:	d00c      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	d008      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	2b38      	cmp	r3, #56	; 0x38
 8005d4c:	d004      	beq.n	8005d58 <HAL_SPI_Init+0x108>
 8005d4e:	f240 1147 	movw	r1, #327	; 0x147
 8005d52:	4838      	ldr	r0, [pc, #224]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005d54:	f7fb f886 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_SPI_Init+0x122>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d004      	beq.n	8005d72 <HAL_SPI_Init+0x122>
 8005d68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d6c:	4831      	ldr	r0, [pc, #196]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005d6e:	f7fb f879 	bl	8000e64 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_SPI_Init+0x13c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d004      	beq.n	8005d8c <HAL_SPI_Init+0x13c>
 8005d82:	f240 1149 	movw	r1, #329	; 0x149
 8005d86:	482b      	ldr	r0, [pc, #172]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005d88:	f7fb f86c 	bl	8000e64 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d151      	bne.n	8005e38 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_SPI_Init+0x15e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d004      	beq.n	8005dae <HAL_SPI_Init+0x15e>
 8005da4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005da8:	4822      	ldr	r0, [pc, #136]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005daa:	f7fb f85b 	bl	8000e64 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_SPI_Init+0x178>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d004      	beq.n	8005dc8 <HAL_SPI_Init+0x178>
 8005dbe:	f240 114d 	movw	r1, #333	; 0x14d
 8005dc2:	481c      	ldr	r0, [pc, #112]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005dc4:	f7fb f84e 	bl	8000e64 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd0:	d125      	bne.n	8005e1e <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d059      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d055      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d051      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	2b18      	cmp	r3, #24
 8005df0:	d04d      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d049      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	2b28      	cmp	r3, #40	; 0x28
 8005e00:	d045      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	2b30      	cmp	r3, #48	; 0x30
 8005e08:	d041      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	2b38      	cmp	r3, #56	; 0x38
 8005e10:	d03d      	beq.n	8005e8e <HAL_SPI_Init+0x23e>
 8005e12:	f240 1151 	movw	r1, #337	; 0x151
 8005e16:	4807      	ldr	r0, [pc, #28]	; (8005e34 <HAL_SPI_Init+0x1e4>)
 8005e18:	f7fb f824 	bl	8000e64 <assert_failed>
 8005e1c:	e037      	b.n	8005e8e <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	61da      	str	r2, [r3, #28]
 8005e24:	e033      	b.n	8005e8e <HAL_SPI_Init+0x23e>
 8005e26:	bf00      	nop
 8005e28:	40013000 	.word	0x40013000
 8005e2c:	40003800 	.word	0x40003800
 8005e30:	40003c00 	.word	0x40003c00
 8005e34:	0800ace8 	.word	0x0800ace8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d01c      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d018      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	2b18      	cmp	r3, #24
 8005e56:	d014      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d010      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b28      	cmp	r3, #40	; 0x28
 8005e66:	d00c      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d008      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	2b38      	cmp	r3, #56	; 0x38
 8005e76:	d004      	beq.n	8005e82 <HAL_SPI_Init+0x232>
 8005e78:	f240 115b 	movw	r1, #347	; 0x15b
 8005e7c:	483a      	ldr	r0, [pc, #232]	; (8005f68 <HAL_SPI_Init+0x318>)
 8005e7e:	f7fa fff1 	bl	8000e64 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fb f9e1 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	ea42 0103 	orr.w	r1, r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	f003 0104 	and.w	r1, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	f003 0210 	and.w	r2, r3, #16
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	0800ace8 	.word	0x0800ace8

08005f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0c5      	b.n	800610a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a64      	ldr	r2, [pc, #400]	; (8006114 <HAL_TIM_Base_Init+0x1a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d045      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d040      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a60      	ldr	r2, [pc, #384]	; (8006118 <HAL_TIM_Base_Init+0x1ac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d03b      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5e      	ldr	r2, [pc, #376]	; (800611c <HAL_TIM_Base_Init+0x1b0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d036      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_TIM_Base_Init+0x1b4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d031      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a5b      	ldr	r2, [pc, #364]	; (8006124 <HAL_TIM_Base_Init+0x1b8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d02c      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5a      	ldr	r2, [pc, #360]	; (8006128 <HAL_TIM_Base_Init+0x1bc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d027      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a58      	ldr	r2, [pc, #352]	; (800612c <HAL_TIM_Base_Init+0x1c0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d022      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a57      	ldr	r2, [pc, #348]	; (8006130 <HAL_TIM_Base_Init+0x1c4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d01d      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a55      	ldr	r2, [pc, #340]	; (8006134 <HAL_TIM_Base_Init+0x1c8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d018      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a54      	ldr	r2, [pc, #336]	; (8006138 <HAL_TIM_Base_Init+0x1cc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a52      	ldr	r2, [pc, #328]	; (800613c <HAL_TIM_Base_Init+0x1d0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00e      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a51      	ldr	r2, [pc, #324]	; (8006140 <HAL_TIM_Base_Init+0x1d4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a4f      	ldr	r2, [pc, #316]	; (8006144 <HAL_TIM_Base_Init+0x1d8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_TIM_Base_Init+0xa8>
 800600a:	f240 1113 	movw	r1, #275	; 0x113
 800600e:	484e      	ldr	r0, [pc, #312]	; (8006148 <HAL_TIM_Base_Init+0x1dc>)
 8006010:	f7fa ff28 	bl	8000e64 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d014      	beq.n	8006046 <HAL_TIM_Base_Init+0xda>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b10      	cmp	r3, #16
 8006022:	d010      	beq.n	8006046 <HAL_TIM_Base_Init+0xda>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b20      	cmp	r3, #32
 800602a:	d00c      	beq.n	8006046 <HAL_TIM_Base_Init+0xda>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d008      	beq.n	8006046 <HAL_TIM_Base_Init+0xda>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d004      	beq.n	8006046 <HAL_TIM_Base_Init+0xda>
 800603c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006040:	4841      	ldr	r0, [pc, #260]	; (8006148 <HAL_TIM_Base_Init+0x1dc>)
 8006042:	f7fa ff0f 	bl	8000e64 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <HAL_TIM_Base_Init+0x100>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Init+0x100>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Init+0x100>
 8006062:	f240 1115 	movw	r1, #277	; 0x115
 8006066:	4838      	ldr	r0, [pc, #224]	; (8006148 <HAL_TIM_Base_Init+0x1dc>)
 8006068:	f7fa fefc 	bl	8000e64 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_TIM_Base_Init+0x11a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d004      	beq.n	8006086 <HAL_TIM_Base_Init+0x11a>
 800607c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006080:	4831      	ldr	r0, [pc, #196]	; (8006148 <HAL_TIM_Base_Init+0x1dc>)
 8006082:	f7fa feef 	bl	8000e64 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f856 	bl	800614c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f000 fa4a 	bl	800654c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40001000 	.word	0x40001000
 8006128:	40001400 	.word	0x40001400
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800
 800613c:	40001800 	.word	0x40001800
 8006140:	40001c00 	.word	0x40001c00
 8006144:	40002000 	.word	0x40002000
 8006148:	0800ad20 	.word	0x0800ad20

0800614c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a51      	ldr	r2, [pc, #324]	; (80062b4 <HAL_TIM_Base_Start_IT+0x154>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d045      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d040      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4d      	ldr	r2, [pc, #308]	; (80062b8 <HAL_TIM_Base_Start_IT+0x158>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d03b      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4c      	ldr	r2, [pc, #304]	; (80062bc <HAL_TIM_Base_Start_IT+0x15c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d036      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <HAL_TIM_Base_Start_IT+0x160>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d031      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a49      	ldr	r2, [pc, #292]	; (80062c4 <HAL_TIM_Base_Start_IT+0x164>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d02c      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a47      	ldr	r2, [pc, #284]	; (80062c8 <HAL_TIM_Base_Start_IT+0x168>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d027      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a46      	ldr	r2, [pc, #280]	; (80062cc <HAL_TIM_Base_Start_IT+0x16c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a44      	ldr	r2, [pc, #272]	; (80062d0 <HAL_TIM_Base_Start_IT+0x170>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a43      	ldr	r2, [pc, #268]	; (80062d4 <HAL_TIM_Base_Start_IT+0x174>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a41      	ldr	r2, [pc, #260]	; (80062d8 <HAL_TIM_Base_Start_IT+0x178>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a40      	ldr	r2, [pc, #256]	; (80062dc <HAL_TIM_Base_Start_IT+0x17c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a3e      	ldr	r2, [pc, #248]	; (80062e0 <HAL_TIM_Base_Start_IT+0x180>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a3d      	ldr	r2, [pc, #244]	; (80062e4 <HAL_TIM_Base_Start_IT+0x184>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_Base_Start_IT+0x9e>
 80061f4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80061f8:	483b      	ldr	r0, [pc, #236]	; (80062e8 <HAL_TIM_Base_Start_IT+0x188>)
 80061fa:	f7fa fe33 	bl	8000e64 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d001      	beq.n	800620e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e04e      	b.n	80062ac <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <HAL_TIM_Base_Start_IT+0x154>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d01d      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_TIM_Base_Start_IT+0x158>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <HAL_TIM_Base_Start_IT+0x15c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_TIM_Base_Start_IT+0x160>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <HAL_TIM_Base_Start_IT+0x16c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1a      	ldr	r2, [pc, #104]	; (80062d0 <HAL_TIM_Base_Start_IT+0x170>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x116>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_TIM_Base_Start_IT+0x17c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d111      	bne.n	800629a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b06      	cmp	r3, #6
 8006286:	d010      	beq.n	80062aa <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006298:	e007      	b.n	80062aa <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40001000 	.word	0x40001000
 80062c8:	40001400 	.word	0x40001400
 80062cc:	40010400 	.word	0x40010400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800
 80062dc:	40001800 	.word	0x40001800
 80062e0:	40001c00 	.word	0x40001c00
 80062e4:	40002000 	.word	0x40002000
 80062e8:	0800ad20 	.word	0x0800ad20

080062ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0202 	mvn.w	r2, #2
 8006318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8ee 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8e0 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8f1 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b04      	cmp	r3, #4
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0204 	mvn.w	r2, #4
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8c4 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8b6 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8c7 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0208 	mvn.w	r2, #8
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2204      	movs	r2, #4
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f89a 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f88c 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f89d 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d122      	bne.n	8006444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b10      	cmp	r3, #16
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0210 	mvn.w	r2, #16
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2208      	movs	r2, #8
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f870 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f862 	bl	80064fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f873 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10e      	bne.n	8006470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0201 	mvn.w	r2, #1
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa fce2 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f902 	bl	80066a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d10e      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d107      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f838 	bl	8006538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0220 	mvn.w	r2, #32
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8cc 	bl	800668c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a40      	ldr	r2, [pc, #256]	; (8006660 <TIM_Base_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <TIM_Base_SetConfig+0x118>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <TIM_Base_SetConfig+0x11c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3b      	ldr	r2, [pc, #236]	; (800666c <TIM_Base_SetConfig+0x120>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3a      	ldr	r2, [pc, #232]	; (8006670 <TIM_Base_SetConfig+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d108      	bne.n	800659e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <TIM_Base_SetConfig+0x114>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d027      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <TIM_Base_SetConfig+0x118>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d023      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <TIM_Base_SetConfig+0x11c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2a      	ldr	r2, [pc, #168]	; (800666c <TIM_Base_SetConfig+0x120>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a29      	ldr	r2, [pc, #164]	; (8006670 <TIM_Base_SetConfig+0x124>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d017      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a28      	ldr	r2, [pc, #160]	; (8006674 <TIM_Base_SetConfig+0x128>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a27      	ldr	r2, [pc, #156]	; (8006678 <TIM_Base_SetConfig+0x12c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <TIM_Base_SetConfig+0x130>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <TIM_Base_SetConfig+0x134>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a24      	ldr	r2, [pc, #144]	; (8006684 <TIM_Base_SetConfig+0x138>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a23      	ldr	r2, [pc, #140]	; (8006688 <TIM_Base_SetConfig+0x13c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <TIM_Base_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_Base_SetConfig+0xf8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <TIM_Base_SetConfig+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d103      	bne.n	800664c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	615a      	str	r2, [r3, #20]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40010400 	.word	0x40010400
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800
 8006680:	40001800 	.word	0x40001800
 8006684:	40001c00 	.word	0x40001c00
 8006688:	40002000 	.word	0x40002000

0800668c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e0b4      	b.n	8006830 <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d031      	beq.n	8006732 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a59      	ldr	r2, [pc, #356]	; (8006838 <HAL_UART_Init+0x184>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_UART_Init+0x4c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a57      	ldr	r2, [pc, #348]	; (800683c <HAL_UART_Init+0x188>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_UART_Init+0x4c>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a56      	ldr	r2, [pc, #344]	; (8006840 <HAL_UART_Init+0x18c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_UART_Init+0x4c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a54      	ldr	r2, [pc, #336]	; (8006844 <HAL_UART_Init+0x190>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_UART_Init+0x4c>
 80066f6:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80066fa:	4853      	ldr	r0, [pc, #332]	; (8006848 <HAL_UART_Init+0x194>)
 80066fc:	f7fa fbb2 	bl	8000e64 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d037      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d032      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671a:	d02d      	beq.n	8006778 <HAL_UART_Init+0xc4>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006724:	d028      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006726:	f240 1173 	movw	r1, #371	; 0x173
 800672a:	4847      	ldr	r0, [pc, #284]	; (8006848 <HAL_UART_Init+0x194>)
 800672c:	f7fa fb9a 	bl	8000e64 <assert_failed>
 8006730:	e022      	b.n	8006778 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a40      	ldr	r2, [pc, #256]	; (8006838 <HAL_UART_Init+0x184>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d01d      	beq.n	8006778 <HAL_UART_Init+0xc4>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3e      	ldr	r2, [pc, #248]	; (800683c <HAL_UART_Init+0x188>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d018      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_UART_Init+0x18c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3d      	ldr	r2, [pc, #244]	; (800684c <HAL_UART_Init+0x198>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_UART_Init+0xc4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a3c      	ldr	r2, [pc, #240]	; (8006850 <HAL_UART_Init+0x19c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_UART_Init+0xc4>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a36      	ldr	r2, [pc, #216]	; (8006844 <HAL_UART_Init+0x190>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_UART_Init+0xc4>
 800676e:	f240 1177 	movw	r1, #375	; 0x177
 8006772:	4835      	ldr	r0, [pc, #212]	; (8006848 <HAL_UART_Init+0x194>)
 8006774:	f7fa fb76 	bl	8000e64 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <HAL_UART_Init+0xe0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d004      	beq.n	8006794 <HAL_UART_Init+0xe0>
 800678a:	f240 1179 	movw	r1, #377	; 0x179
 800678e:	482e      	ldr	r0, [pc, #184]	; (8006848 <HAL_UART_Init+0x194>)
 8006790:	f7fa fb68 	bl	8000e64 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <HAL_UART_Init+0xfc>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a4:	d004      	beq.n	80067b0 <HAL_UART_Init+0xfc>
 80067a6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80067aa:	4827      	ldr	r0, [pc, #156]	; (8006848 <HAL_UART_Init+0x194>)
 80067ac:	f7fa fb5a 	bl	8000e64 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fa fdd1 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2224      	movs	r2, #36	; 0x24
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f836 	bl	8006854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006806:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006816:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40011000 	.word	0x40011000
 800683c:	40004400 	.word	0x40004400
 8006840:	40004800 	.word	0x40004800
 8006844:	40011400 	.word	0x40011400
 8006848:	0800ad58 	.word	0x0800ad58
 800684c:	40004c00 	.word	0x40004c00
 8006850:	40005000 	.word	0x40005000

08006854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	b09f      	sub	sp, #124	; 0x7c
 800685a:	af00      	add	r7, sp, #0
 800685c:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800685e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b9b      	ldr	r3, [pc, #620]	; (8006ad0 <UART_SetConfig+0x27c>)
 8006864:	429a      	cmp	r2, r3
 8006866:	d904      	bls.n	8006872 <UART_SetConfig+0x1e>
 8006868:	f640 6156 	movw	r1, #3670	; 0xe56
 800686c:	4899      	ldr	r0, [pc, #612]	; (8006ad4 <UART_SetConfig+0x280>)
 800686e:	f7fa faf9 	bl	8000e64 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <UART_SetConfig+0x3a>
 800687a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006882:	d004      	beq.n	800688e <UART_SetConfig+0x3a>
 8006884:	f640 6157 	movw	r1, #3671	; 0xe57
 8006888:	4892      	ldr	r0, [pc, #584]	; (8006ad4 <UART_SetConfig+0x280>)
 800688a:	f7fa faeb 	bl	8000e64 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <UART_SetConfig+0x60>
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800689e:	d009      	beq.n	80068b4 <UART_SetConfig+0x60>
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068a8:	d004      	beq.n	80068b4 <UART_SetConfig+0x60>
 80068aa:	f640 6158 	movw	r1, #3672	; 0xe58
 80068ae:	4889      	ldr	r0, [pc, #548]	; (8006ad4 <UART_SetConfig+0x280>)
 80068b0:	f7fa fad8 	bl	8000e64 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80068b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <UART_SetConfig+0x76>
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <UART_SetConfig+0x80>
 80068ca:	f640 6159 	movw	r1, #3673	; 0xe59
 80068ce:	4881      	ldr	r0, [pc, #516]	; (8006ad4 <UART_SetConfig+0x280>)
 80068d0:	f7fa fac8 	bl	8000e64 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e0:	68d9      	ldr	r1, [r3, #12]
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	ea40 0301 	orr.w	r3, r0, r1
 80068ea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	4313      	orrs	r3, r2
 8006902:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800690e:	f021 010c 	bic.w	r1, r1, #12
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006918:	430b      	orrs	r3, r1
 800691a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006928:	6999      	ldr	r1, [r3, #24]
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	ea40 0301 	orr.w	r3, r0, r1
 8006932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b67      	ldr	r3, [pc, #412]	; (8006ad8 <UART_SetConfig+0x284>)
 800693a:	429a      	cmp	r2, r3
 800693c:	d004      	beq.n	8006948 <UART_SetConfig+0xf4>
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b66      	ldr	r3, [pc, #408]	; (8006adc <UART_SetConfig+0x288>)
 8006944:	429a      	cmp	r2, r3
 8006946:	d103      	bne.n	8006950 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006948:	f7fe f832 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 800694c:	6778      	str	r0, [r7, #116]	; 0x74
 800694e:	e002      	b.n	8006956 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fe f81a 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8006954:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695e:	f040 80c1 	bne.w	8006ae4 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006964:	461c      	mov	r4, r3
 8006966:	f04f 0500 	mov.w	r5, #0
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	1891      	adds	r1, r2, r2
 8006970:	6439      	str	r1, [r7, #64]	; 0x40
 8006972:	415b      	adcs	r3, r3
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800697a:	1912      	adds	r2, r2, r4
 800697c:	eb45 0303 	adc.w	r3, r5, r3
 8006980:	f04f 0000 	mov.w	r0, #0
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	00d9      	lsls	r1, r3, #3
 800698a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800698e:	00d0      	lsls	r0, r2, #3
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	1911      	adds	r1, r2, r4
 8006996:	6639      	str	r1, [r7, #96]	; 0x60
 8006998:	416b      	adcs	r3, r5
 800699a:	667b      	str	r3, [r7, #100]	; 0x64
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	1891      	adds	r1, r2, r2
 80069a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80069aa:	415b      	adcs	r3, r3
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069b2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069b6:	f7f9 fc0b 	bl	80001d0 <__aeabi_uldivmod>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4b48      	ldr	r3, [pc, #288]	; (8006ae0 <UART_SetConfig+0x28c>)
 80069c0:	fba3 2302 	umull	r2, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	011e      	lsls	r6, r3, #4
 80069c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ca:	461c      	mov	r4, r3
 80069cc:	f04f 0500 	mov.w	r5, #0
 80069d0:	4622      	mov	r2, r4
 80069d2:	462b      	mov	r3, r5
 80069d4:	1891      	adds	r1, r2, r2
 80069d6:	6339      	str	r1, [r7, #48]	; 0x30
 80069d8:	415b      	adcs	r3, r3
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
 80069dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069e0:	1912      	adds	r2, r2, r4
 80069e2:	eb45 0303 	adc.w	r3, r5, r3
 80069e6:	f04f 0000 	mov.w	r0, #0
 80069ea:	f04f 0100 	mov.w	r1, #0
 80069ee:	00d9      	lsls	r1, r3, #3
 80069f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f4:	00d0      	lsls	r0, r2, #3
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	1911      	adds	r1, r2, r4
 80069fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80069fe:	416b      	adcs	r3, r5
 8006a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	1891      	adds	r1, r2, r2
 8006a0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a10:	415b      	adcs	r3, r3
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a18:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a1c:	f7f9 fbd8 	bl	80001d0 <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <UART_SetConfig+0x28c>)
 8006a26:	fba3 1302 	umull	r1, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	2164      	movs	r1, #100	; 0x64
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	3332      	adds	r3, #50	; 0x32
 8006a38:	4a29      	ldr	r2, [pc, #164]	; (8006ae0 <UART_SetConfig+0x28c>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a46:	441e      	add	r6, r3
 8006a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f04f 0100 	mov.w	r1, #0
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	1894      	adds	r4, r2, r2
 8006a56:	623c      	str	r4, [r7, #32]
 8006a58:	415b      	adcs	r3, r3
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a60:	1812      	adds	r2, r2, r0
 8006a62:	eb41 0303 	adc.w	r3, r1, r3
 8006a66:	f04f 0400 	mov.w	r4, #0
 8006a6a:	f04f 0500 	mov.w	r5, #0
 8006a6e:	00dd      	lsls	r5, r3, #3
 8006a70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a74:	00d4      	lsls	r4, r2, #3
 8006a76:	4622      	mov	r2, r4
 8006a78:	462b      	mov	r3, r5
 8006a7a:	1814      	adds	r4, r2, r0
 8006a7c:	653c      	str	r4, [r7, #80]	; 0x50
 8006a7e:	414b      	adcs	r3, r1
 8006a80:	657b      	str	r3, [r7, #84]	; 0x54
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	1891      	adds	r1, r2, r2
 8006a8e:	61b9      	str	r1, [r7, #24]
 8006a90:	415b      	adcs	r3, r3
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a9c:	f7f9 fb98 	bl	80001d0 <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <UART_SetConfig+0x28c>)
 8006aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2164      	movs	r1, #100	; 0x64
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	3332      	adds	r3, #50	; 0x32
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <UART_SetConfig+0x28c>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 0207 	and.w	r2, r3, #7
 8006ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4432      	add	r2, r6
 8006aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006acc:	e0c4      	b.n	8006c58 <UART_SetConfig+0x404>
 8006ace:	bf00      	nop
 8006ad0:	00a037a0 	.word	0x00a037a0
 8006ad4:	0800ad58 	.word	0x0800ad58
 8006ad8:	40011000 	.word	0x40011000
 8006adc:	40011400 	.word	0x40011400
 8006ae0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	f04f 0500 	mov.w	r5, #0
 8006aec:	4622      	mov	r2, r4
 8006aee:	462b      	mov	r3, r5
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	6139      	str	r1, [r7, #16]
 8006af4:	415b      	adcs	r3, r3
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006afc:	1912      	adds	r2, r2, r4
 8006afe:	eb45 0303 	adc.w	r3, r5, r3
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f04f 0100 	mov.w	r1, #0
 8006b0a:	00d9      	lsls	r1, r3, #3
 8006b0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b10:	00d0      	lsls	r0, r2, #3
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	eb12 0804 	adds.w	r8, r2, r4
 8006b1a:	eb43 0905 	adc.w	r9, r3, r5
 8006b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f04f 0100 	mov.w	r1, #0
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	008b      	lsls	r3, r1, #2
 8006b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b36:	0082      	lsls	r2, r0, #2
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fb48 	bl	80001d0 <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <UART_SetConfig+0x410>)
 8006b46:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	011e      	lsls	r6, r3, #4
 8006b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b50:	4618      	mov	r0, r3
 8006b52:	f04f 0100 	mov.w	r1, #0
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	1894      	adds	r4, r2, r2
 8006b5c:	60bc      	str	r4, [r7, #8]
 8006b5e:	415b      	adcs	r3, r3
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b66:	1812      	adds	r2, r2, r0
 8006b68:	eb41 0303 	adc.w	r3, r1, r3
 8006b6c:	f04f 0400 	mov.w	r4, #0
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	00dd      	lsls	r5, r3, #3
 8006b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b7a:	00d4      	lsls	r4, r2, #3
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	462b      	mov	r3, r5
 8006b80:	1814      	adds	r4, r2, r0
 8006b82:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b84:	414b      	adcs	r3, r1
 8006b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	008b      	lsls	r3, r1, #2
 8006b9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ba0:	0082      	lsls	r2, r0, #2
 8006ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ba6:	f7f9 fb13 	bl	80001d0 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <UART_SetConfig+0x410>)
 8006bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	2164      	movs	r1, #100	; 0x64
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	3332      	adds	r3, #50	; 0x32
 8006bc2:	4a28      	ldr	r2, [pc, #160]	; (8006c64 <UART_SetConfig+0x410>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bce:	441e      	add	r6, r3
 8006bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	1894      	adds	r4, r2, r2
 8006bde:	603c      	str	r4, [r7, #0]
 8006be0:	415b      	adcs	r3, r3
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be8:	1812      	adds	r2, r2, r0
 8006bea:	eb41 0303 	adc.w	r3, r1, r3
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	f04f 0500 	mov.w	r5, #0
 8006bf6:	00dd      	lsls	r5, r3, #3
 8006bf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bfc:	00d4      	lsls	r4, r2, #3
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	eb12 0a00 	adds.w	sl, r2, r0
 8006c06:	eb43 0b01 	adc.w	fp, r3, r1
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	008b      	lsls	r3, r1, #2
 8006c1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c22:	0082      	lsls	r2, r0, #2
 8006c24:	4650      	mov	r0, sl
 8006c26:	4659      	mov	r1, fp
 8006c28:	f7f9 fad2 	bl	80001d0 <__aeabi_uldivmod>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <UART_SetConfig+0x410>)
 8006c32:	fba3 1302 	umull	r1, r3, r3, r2
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	2164      	movs	r1, #100	; 0x64
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	3332      	adds	r3, #50	; 0x32
 8006c44:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <UART_SetConfig+0x410>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4432      	add	r2, r6
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	377c      	adds	r7, #124	; 0x7c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	51eb851f 	.word	0x51eb851f

08006c68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006c68:	b084      	sub	sp, #16
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	f107 001c 	add.w	r0, r7, #28
 8006c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a34      	ldr	r2, [pc, #208]	; (8006d54 <SDIO_Init+0xec>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <SDIO_Init+0x26>
 8006c86:	21d9      	movs	r1, #217	; 0xd9
 8006c88:	4833      	ldr	r0, [pc, #204]	; (8006d58 <SDIO_Init+0xf0>)
 8006c8a:	f7fa f8eb 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <SDIO_Init+0x3c>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9a:	d003      	beq.n	8006ca4 <SDIO_Init+0x3c>
 8006c9c:	21da      	movs	r1, #218	; 0xda
 8006c9e:	482e      	ldr	r0, [pc, #184]	; (8006d58 <SDIO_Init+0xf0>)
 8006ca0:	f7fa f8e0 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SDIO_Init+0x52>
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb0:	d003      	beq.n	8006cba <SDIO_Init+0x52>
 8006cb2:	21db      	movs	r1, #219	; 0xdb
 8006cb4:	4828      	ldr	r0, [pc, #160]	; (8006d58 <SDIO_Init+0xf0>)
 8006cb6:	f7fa f8d5 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <SDIO_Init+0x68>
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d003      	beq.n	8006cd0 <SDIO_Init+0x68>
 8006cc8:	21dc      	movs	r1, #220	; 0xdc
 8006cca:	4823      	ldr	r0, [pc, #140]	; (8006d58 <SDIO_Init+0xf0>)
 8006ccc:	f7fa f8ca 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <SDIO_Init+0x86>
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cdc:	d007      	beq.n	8006cee <SDIO_Init+0x86>
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce4:	d003      	beq.n	8006cee <SDIO_Init+0x86>
 8006ce6:	21dd      	movs	r1, #221	; 0xdd
 8006ce8:	481b      	ldr	r0, [pc, #108]	; (8006d58 <SDIO_Init+0xf0>)
 8006cea:	f7fa f8bb 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <SDIO_Init+0x9c>
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfa:	d003      	beq.n	8006d04 <SDIO_Init+0x9c>
 8006cfc:	21de      	movs	r1, #222	; 0xde
 8006cfe:	4816      	ldr	r0, [pc, #88]	; (8006d58 <SDIO_Init+0xf0>)
 8006d00:	f7fa f8b0 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2bff      	cmp	r3, #255	; 0xff
 8006d08:	d903      	bls.n	8006d12 <SDIO_Init+0xaa>
 8006d0a:	21df      	movs	r1, #223	; 0xdf
 8006d0c:	4812      	ldr	r0, [pc, #72]	; (8006d58 <SDIO_Init+0xf0>)
 8006d0e:	f7fa f8a9 	bl	8000e64 <assert_failed>
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006d12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006d14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006d16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006d1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006d1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006d22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006d26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4e:	b004      	add	sp, #16
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	0800ad94 	.word	0x0800ad94

08006d5c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2203      	movs	r2, #3
 8006d82:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006d84:	2002      	movs	r0, #2
 8006d86:	f7fa fd3b 	bl	8001800 <HAL_Delay>
  
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0303 	and.w	r3, r3, #3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8006dc4:	d904      	bls.n	8006dd0 <SDIO_SendCommand+0x20>
 8006dc6:	f240 1169 	movw	r1, #361	; 0x169
 8006dca:	482b      	ldr	r0, [pc, #172]	; (8006e78 <SDIO_SendCommand+0xc8>)
 8006dcc:	f7fa f84a 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <SDIO_SendCommand+0x42>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d008      	beq.n	8006df2 <SDIO_SendCommand+0x42>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2bc0      	cmp	r3, #192	; 0xc0
 8006de6:	d004      	beq.n	8006df2 <SDIO_SendCommand+0x42>
 8006de8:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8006dec:	4822      	ldr	r0, [pc, #136]	; (8006e78 <SDIO_SendCommand+0xc8>)
 8006dee:	f7fa f839 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <SDIO_SendCommand+0x68>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d009      	beq.n	8006e18 <SDIO_SendCommand+0x68>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d004      	beq.n	8006e18 <SDIO_SendCommand+0x68>
 8006e0e:	f240 116b 	movw	r1, #363	; 0x16b
 8006e12:	4819      	ldr	r0, [pc, #100]	; (8006e78 <SDIO_SendCommand+0xc8>)
 8006e14:	f7fa f826 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_CPSM(Command->CPSM));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d009      	beq.n	8006e34 <SDIO_SendCommand+0x84>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d004      	beq.n	8006e34 <SDIO_SendCommand+0x84>
 8006e2a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006e2e:	4812      	ldr	r0, [pc, #72]	; (8006e78 <SDIO_SendCommand+0xc8>)
 8006e30:	f7fa f818 	bl	8000e64 <assert_failed>

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e44:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006e4a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006e50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e60:	f023 030f 	bic.w	r3, r3, #15
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	0800ad94 	.word	0x0800ad94

08006e7c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	b2db      	uxtb	r3, r3
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00d      	beq.n	8006ec4 <SDIO_GetResponse+0x2c>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d00a      	beq.n	8006ec4 <SDIO_GetResponse+0x2c>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d007      	beq.n	8006ec4 <SDIO_GetResponse+0x2c>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b0c      	cmp	r3, #12
 8006eb8:	d004      	beq.n	8006ec4 <SDIO_GetResponse+0x2c>
 8006eba:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8006ebe:	4807      	ldr	r0, [pc, #28]	; (8006edc <SDIO_GetResponse+0x44>)
 8006ec0:	f7f9 ffd0 	bl	8000e64 <assert_failed>
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	461a      	mov	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	4413      	add	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
}  
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	0800ad94 	.word	0x0800ad94

08006ee0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef6:	d304      	bcc.n	8006f02 <SDIO_ConfigData+0x22>
 8006ef8:	f240 11ad 	movw	r1, #429	; 0x1ad
 8006efc:	4846      	ldr	r0, [pc, #280]	; (8007018 <SDIO_ConfigData+0x138>)
 8006efe:	f7f9 ffb1 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d03c      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d038      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d034      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	d030      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d02c      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b50      	cmp	r3, #80	; 0x50
 8006f30:	d028      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b60      	cmp	r3, #96	; 0x60
 8006f38:	d024      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b70      	cmp	r3, #112	; 0x70
 8006f40:	d020      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	d01c      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b90      	cmp	r3, #144	; 0x90
 8006f50:	d018      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2ba0      	cmp	r3, #160	; 0xa0
 8006f58:	d014      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2bb0      	cmp	r3, #176	; 0xb0
 8006f60:	d010      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2bc0      	cmp	r3, #192	; 0xc0
 8006f68:	d00c      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2bd0      	cmp	r3, #208	; 0xd0
 8006f70:	d008      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2be0      	cmp	r3, #224	; 0xe0
 8006f78:	d004      	beq.n	8006f84 <SDIO_ConfigData+0xa4>
 8006f7a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f7e:	4826      	ldr	r0, [pc, #152]	; (8007018 <SDIO_ConfigData+0x138>)
 8006f80:	f7f9 ff70 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <SDIO_ConfigData+0xbe>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d004      	beq.n	8006f9e <SDIO_ConfigData+0xbe>
 8006f94:	f240 11af 	movw	r1, #431	; 0x1af
 8006f98:	481f      	ldr	r0, [pc, #124]	; (8007018 <SDIO_ConfigData+0x138>)
 8006f9a:	f7f9 ff63 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <SDIO_ConfigData+0xd8>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d004      	beq.n	8006fb8 <SDIO_ConfigData+0xd8>
 8006fae:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006fb2:	4819      	ldr	r0, [pc, #100]	; (8007018 <SDIO_ConfigData+0x138>)
 8006fb4:	f7f9 ff56 	bl	8000e64 <assert_failed>
  assert_param(IS_SDIO_DPSM(Data->DPSM));
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <SDIO_ConfigData+0xf2>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d004      	beq.n	8006fd2 <SDIO_ConfigData+0xf2>
 8006fc8:	f240 11b1 	movw	r1, #433	; 0x1b1
 8006fcc:	4812      	ldr	r0, [pc, #72]	; (8007018 <SDIO_ConfigData+0x138>)
 8006fce:	f7f9 ff49 	bl	8000e64 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006fea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006ff0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006ff6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800700e:	2300      	movs	r3, #0

}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	0800ad94 	.word	0x0800ad94

0800701c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800702a:	2310      	movs	r3, #16
 800702c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800703a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800703c:	f107 0308 	add.w	r3, r7, #8
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff feb4 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	2110      	movs	r1, #16
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa44 	bl	80074dc <SDMMC_GetCmdResp1>
 8007054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800706e:	2311      	movs	r3, #17
 8007070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800707a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fe92 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	2111      	movs	r1, #17
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa22 	bl	80074dc <SDMMC_GetCmdResp1>
 8007098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800709a:	69fb      	ldr	r3, [r7, #28]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80070b2:	2312      	movs	r3, #18
 80070b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c4:	f107 0308 	add.w	r3, r7, #8
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fe70 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80070d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d4:	2112      	movs	r1, #18
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa00 	bl	80074dc <SDMMC_GetCmdResp1>
 80070dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070de:	69fb      	ldr	r3, [r7, #28]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80070f6:	2318      	movs	r3, #24
 80070f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fe4e 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007114:	f241 3288 	movw	r2, #5000	; 0x1388
 8007118:	2118      	movs	r1, #24
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f9de 	bl	80074dc <SDMMC_GetCmdResp1>
 8007120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007122:	69fb      	ldr	r3, [r7, #28]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800713a:	2319      	movs	r3, #25
 800713c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800714a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fe2c 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	2119      	movs	r1, #25
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f9bc 	bl	80074dc <SDMMC_GetCmdResp1>
 8007164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007166:	69fb      	ldr	r3, [r7, #28]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800717c:	230c      	movs	r3, #12
 800717e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fe0b 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800719a:	4a05      	ldr	r2, [pc, #20]	; (80071b0 <SDMMC_CmdStopTransfer+0x40>)
 800719c:	210c      	movs	r1, #12
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f99c 	bl	80074dc <SDMMC_GetCmdResp1>
 80071a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a6:	69fb      	ldr	r3, [r7, #28]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	05f5e100 	.word	0x05f5e100

080071b4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80071c4:	2307      	movs	r3, #7
 80071c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071c8:	2340      	movs	r3, #64	; 0x40
 80071ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d6:	f107 0310 	add.w	r3, r7, #16
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff fde7 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80071e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e6:	2107      	movs	r1, #7
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f977 	bl	80074dc <SDMMC_GetCmdResp1>
 80071ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b088      	sub	sp, #32
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800720a:	2300      	movs	r3, #0
 800720c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007218:	f107 0308 	add.w	r3, r7, #8
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fdc6 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f92d 	bl	8007484 <SDMMC_GetCmdError>
 800722a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3720      	adds	r7, #32
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b088      	sub	sp, #32
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800723e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007244:	2308      	movs	r3, #8
 8007246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007256:	f107 0308 	add.w	r3, r7, #8
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff fda7 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fb24 	bl	80078b0 <SDMMC_GetCmdResp7>
 8007268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800726a:	69fb      	ldr	r3, [r7, #28]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007282:	2337      	movs	r3, #55	; 0x37
 8007284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007286:	2340      	movs	r3, #64	; 0x40
 8007288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800728e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007294:	f107 0308 	add.w	r3, r7, #8
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff fd88 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	2137      	movs	r1, #55	; 0x37
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f918 	bl	80074dc <SDMMC_GetCmdResp1>
 80072ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ae:	69fb      	ldr	r3, [r7, #28]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80072ce:	2329      	movs	r3, #41	; 0x29
 80072d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072d2:	2340      	movs	r3, #64	; 0x40
 80072d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fd62 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa2b 	bl	8007748 <SDMMC_GetCmdResp3>
 80072f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f4:	69fb      	ldr	r3, [r7, #28]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b088      	sub	sp, #32
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800730c:	2306      	movs	r3, #6
 800730e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800731c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800731e:	f107 0308 	add.w	r3, r7, #8
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fd43 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	2106      	movs	r1, #6
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8d3 	bl	80074dc <SDMMC_GetCmdResp1>
 8007336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007338:	69fb      	ldr	r3, [r7, #28]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b088      	sub	sp, #32
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800734e:	2333      	movs	r3, #51	; 0x33
 8007350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800735a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800735e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fd22 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	2133      	movs	r1, #51	; 0x33
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f8b2 	bl	80074dc <SDMMC_GetCmdResp1>
 8007378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800737a:	69fb      	ldr	r3, [r7, #28]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007390:	2302      	movs	r3, #2
 8007392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007394:	23c0      	movs	r3, #192	; 0xc0
 8007396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800739c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff fd01 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f982 	bl	80076b8 <SDMMC_GetCmdResp2>
 80073b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b6:	69fb      	ldr	r3, [r7, #28]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073ce:	2309      	movs	r3, #9
 80073d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073d2:	23c0      	movs	r3, #192	; 0xc0
 80073d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e0:	f107 0308 	add.w	r3, r7, #8
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fce2 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f963 	bl	80076b8 <SDMMC_GetCmdResp2>
 80073f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f4:	69fb      	ldr	r3, [r7, #28]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3720      	adds	r7, #32
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800740c:	2303      	movs	r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007410:	2340      	movs	r3, #64	; 0x40
 8007412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fcc3 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	2103      	movs	r1, #3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9c8 	bl	80077c4 <SDMMC_GetCmdResp6>
 8007434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007436:	69fb      	ldr	r3, [r7, #28]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800744e:	230d      	movs	r3, #13
 8007450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800745a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fca2 	bl	8006db0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	210d      	movs	r1, #13
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f832 	bl	80074dc <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800748c:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <SDMMC_GetCmdError+0x50>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a11      	ldr	r2, [pc, #68]	; (80074d8 <SDMMC_GetCmdError+0x54>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	0a5b      	lsrs	r3, r3, #9
 8007498:	f241 3288 	movw	r2, #5000	; 0x1388
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	1e5a      	subs	r2, r3, #1
 80074a6:	60fa      	str	r2, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074b0:	e009      	b.n	80074c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f1      	beq.n	80074a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	22c5      	movs	r2, #197	; 0xc5
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	20000000 	.word	0x20000000
 80074d8:	10624dd3 	.word	0x10624dd3

080074dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	460b      	mov	r3, r1
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074ea:	4b70      	ldr	r3, [pc, #448]	; (80076ac <SDMMC_GetCmdResp1+0x1d0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a70      	ldr	r2, [pc, #448]	; (80076b0 <SDMMC_GetCmdResp1+0x1d4>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	0a5a      	lsrs	r2, r3, #9
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	fb02 f303 	mul.w	r3, r2, r3
 80074fc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	61fa      	str	r2, [r7, #28]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800750c:	e0c9      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0ef      	beq.n	80074fe <SDMMC_GetCmdResp1+0x22>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1ea      	bne.n	80074fe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2204      	movs	r2, #4
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800753a:	2304      	movs	r3, #4
 800753c:	e0b1      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007550:	2301      	movs	r3, #1
 8007552:	e0a6      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	22c5      	movs	r2, #197	; 0xc5
 8007558:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff fc8e 	bl	8006e7c <SDIO_GetCommandResponse>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	4293      	cmp	r3, r2
 8007568:	d001      	beq.n	800756e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800756a:	2301      	movs	r3, #1
 800756c:	e099      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800756e:	2100      	movs	r1, #0
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fc91 	bl	8006e98 <SDIO_GetResponse>
 8007576:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <SDMMC_GetCmdResp1+0x1d8>)
 800757c:	4013      	ands	r3, r2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007582:	2300      	movs	r3, #0
 8007584:	e08d      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	da02      	bge.n	8007592 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800758c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007590:	e087      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	e080      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075aa:	2380      	movs	r3, #128	; 0x80
 80075ac:	e079      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075bc:	e071      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80075c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075cc:	e069      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80075d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075dc:	e061      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80075e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075ec:	e059      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fc:	e051      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800760c:	e049      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800761c:	e041      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762c:	e039      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800763c:	e031      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800764c:	e029      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800765c:	e021      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800766c:	e019      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007678:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800767c:	e011      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800768c:	e009      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007698:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800769c:	e001      	b.n	80076a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800769e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000000 	.word	0x20000000
 80076b0:	10624dd3 	.word	0x10624dd3
 80076b4:	fdffe008 	.word	0xfdffe008

080076b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076c0:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <SDMMC_GetCmdResp2+0x88>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <SDMMC_GetCmdResp2+0x8c>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	0a5b      	lsrs	r3, r3, #9
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	fb02 f303 	mul.w	r3, r2, r3
 80076d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1e5a      	subs	r2, r3, #1
 80076da:	60fa      	str	r2, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076e4:	e026      	b.n	8007734 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ef      	beq.n	80076d6 <SDMMC_GetCmdResp2+0x1e>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ea      	bne.n	80076d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2204      	movs	r2, #4
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007712:	2304      	movs	r3, #4
 8007714:	e00e      	b.n	8007734 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007728:	2301      	movs	r3, #1
 800772a:	e003      	b.n	8007734 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	22c5      	movs	r2, #197	; 0xc5
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	20000000 	.word	0x20000000
 8007744:	10624dd3 	.word	0x10624dd3

08007748 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007750:	4b1a      	ldr	r3, [pc, #104]	; (80077bc <SDMMC_GetCmdResp3+0x74>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <SDMMC_GetCmdResp3+0x78>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	0a5b      	lsrs	r3, r3, #9
 800775c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007760:	fb02 f303 	mul.w	r3, r2, r3
 8007764:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	1e5a      	subs	r2, r3, #1
 800776a:	60fa      	str	r2, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007774:	e01b      	b.n	80077ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0ef      	beq.n	8007766 <SDMMC_GetCmdResp3+0x1e>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ea      	bne.n	8007766 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2204      	movs	r2, #4
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077a2:	2304      	movs	r3, #4
 80077a4:	e003      	b.n	80077ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	22c5      	movs	r2, #197	; 0xc5
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000000 	.word	0x20000000
 80077c0:	10624dd3 	.word	0x10624dd3

080077c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077d2:	4b35      	ldr	r3, [pc, #212]	; (80078a8 <SDMMC_GetCmdResp6+0xe4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a35      	ldr	r2, [pc, #212]	; (80078ac <SDMMC_GetCmdResp6+0xe8>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	0a5b      	lsrs	r3, r3, #9
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	61fa      	str	r2, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077f6:	e052      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ef      	beq.n	80077e8 <SDMMC_GetCmdResp6+0x24>
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ea      	bne.n	80077e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2204      	movs	r2, #4
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007824:	2304      	movs	r3, #4
 8007826:	e03a      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800783a:	2301      	movs	r3, #1
 800783c:	e02f      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff fb1c 	bl	8006e7c <SDIO_GetCommandResponse>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	4293      	cmp	r3, r2
 800784c:	d001      	beq.n	8007852 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800784e:	2301      	movs	r3, #1
 8007850:	e025      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	22c5      	movs	r2, #197	; 0xc5
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007858:	2100      	movs	r1, #0
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fb1c 	bl	8006e98 <SDIO_GetResponse>
 8007860:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	b29a      	uxth	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007876:	2300      	movs	r3, #0
 8007878:	e011      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007888:	e009      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007898:	e001      	b.n	800789e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800789a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000000 	.word	0x20000000
 80078ac:	10624dd3 	.word	0x10624dd3

080078b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078b8:	4b22      	ldr	r3, [pc, #136]	; (8007944 <SDMMC_GetCmdResp7+0x94>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a22      	ldr	r2, [pc, #136]	; (8007948 <SDMMC_GetCmdResp7+0x98>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	0a5b      	lsrs	r3, r3, #9
 80078c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	60fa      	str	r2, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078dc:	e02c      	b.n	8007938 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0ef      	beq.n	80078ce <SDMMC_GetCmdResp7+0x1e>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1ea      	bne.n	80078ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2204      	movs	r2, #4
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800790a:	2304      	movs	r3, #4
 800790c:	e014      	b.n	8007938 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007920:	2301      	movs	r3, #1
 8007922:	e009      	b.n	8007938 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007936:	2300      	movs	r3, #0
  
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000000 	.word	0x20000000
 8007948:	10624dd3 	.word	0x10624dd3

0800794c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007950:	4904      	ldr	r1, [pc, #16]	; (8007964 <MX_FATFS_Init+0x18>)
 8007952:	4805      	ldr	r0, [pc, #20]	; (8007968 <MX_FATFS_Init+0x1c>)
 8007954:	f000 fa96 	bl	8007e84 <FATFS_LinkDriver>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	4b03      	ldr	r3, [pc, #12]	; (800796c <MX_FATFS_Init+0x20>)
 800795e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007960:	bf00      	nop
 8007962:	bd80      	pop	{r7, pc}
 8007964:	200093e8 	.word	0x200093e8
 8007968:	0800ae08 	.word	0x0800ae08
 800796c:	200093e4 	.word	0x200093e4

08007970 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800797a:	f000 f87b 	bl	8007a74 <BSP_SD_IsDetected>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d001      	beq.n	8007988 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e012      	b.n	80079ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007988:	480b      	ldr	r0, [pc, #44]	; (80079b8 <BSP_SD_Init+0x48>)
 800798a:	f7fd f857 	bl	8004a3c <HAL_SD_Init>
 800798e:	4603      	mov	r3, r0
 8007990:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800799c:	4806      	ldr	r0, [pc, #24]	; (80079b8 <BSP_SD_Init+0x48>)
 800799e:	f7fd fcff 	bl	80053a0 <HAL_SD_ConfigWideBusOperation>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80079ac:	79fb      	ldrb	r3, [r7, #7]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20009250 	.word	0x20009250

080079bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	68f9      	ldr	r1, [r7, #12]
 80079d2:	4806      	ldr	r0, [pc, #24]	; (80079ec <BSP_SD_ReadBlocks_DMA+0x30>)
 80079d4:	f7fd f942 	bl	8004c5c <HAL_SD_ReadBlocks_DMA>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20009250 	.word	0x20009250

080079f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	4806      	ldr	r0, [pc, #24]	; (8007a20 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007a08:	f7fd fa0a 	bl	8004e20 <HAL_SD_WriteBlocks_DMA>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20009250 	.word	0x20009250

08007a24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <BSP_SD_GetCardState+0x1c>)
 8007a2a:	f7fd fd65 	bl	80054f8 <HAL_SD_GetCardState>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20009250 	.word	0x20009250

08007a44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4803      	ldr	r0, [pc, #12]	; (8007a5c <BSP_SD_GetCardInfo+0x18>)
 8007a50:	f7fd fc7a 	bl	8005348 <HAL_SD_GetCardInfo>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20009250 	.word	0x20009250

08007a60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007a68:	f000 f9b2 	bl	8007dd0 <BSP_SD_ReadCpltCallback>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007a7e:	f000 f80b 	bl	8007a98 <BSP_PlatformIsDetected>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	b2db      	uxtb	r3, r3
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	4806      	ldr	r0, [pc, #24]	; (8007ac0 <BSP_PlatformIsDetected+0x28>)
 8007aa6:	f7fc f973 	bl	8003d90 <HAL_GPIO_ReadPin>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40020400 	.word	0x40020400

08007ac4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007acc:	f000 fa26 	bl	8007f1c <osKernelSysTick>
 8007ad0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007ad2:	e006      	b.n	8007ae2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ad4:	f7ff ffa6 	bl	8007a24 <BSP_SD_GetCardState>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e009      	b.n	8007af6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8007ae2:	f000 fa1b 	bl	8007f1c <osKernelSysTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d8f0      	bhi.n	8007ad4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <SD_CheckStatus+0x38>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007b10:	f7ff ff88 	bl	8007a24 <BSP_SD_GetCardState>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d107      	bne.n	8007b2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b1a:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <SD_CheckStatus+0x38>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <SD_CheckStatus+0x38>)
 8007b28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b2a:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <SD_CheckStatus+0x38>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b2db      	uxtb	r3, r3
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000009 	.word	0x20000009

08007b3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007b46:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <SD_initialize+0x8c>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007b4c:	f000 f9da 	bl	8007f04 <osKernelRunning>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d030      	beq.n	8007bb8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007b56:	f7ff ff0b 	bl	8007970 <BSP_SD_Init>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d107      	bne.n	8007b70 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff ffcc 	bl	8007b00 <SD_CheckStatus>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <SD_initialize+0x8c>)
 8007b6e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007b70:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <SD_initialize+0x8c>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d01e      	beq.n	8007bb8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8007b7a:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <SD_initialize+0x90>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10e      	bne.n	8007ba0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <SD_initialize+0x94>)
 8007b84:	f107 0408 	add.w	r4, r7, #8
 8007b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007b8e:	f107 0308 	add.w	r3, r7, #8
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fa31 	bl	8007ffc <osMessageCreate>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4a0b      	ldr	r2, [pc, #44]	; (8007bcc <SD_initialize+0x90>)
 8007b9e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <SD_initialize+0x90>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d107      	bne.n	8007bb8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007ba8:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <SD_initialize+0x8c>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <SD_initialize+0x8c>)
 8007bb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007bb8:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <SD_initialize+0x8c>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd90      	pop	{r4, r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000009 	.word	0x20000009
 8007bcc:	20000f04 	.word	0x20000f04
 8007bd0:	0800add0 	.word	0x0800add0

08007bd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff ff8d 	bl	8007b00 <SD_CheckStatus>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c06:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c0a:	f7ff ff5b 	bl	8007ac4 <SD_CheckStatusWithTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da02      	bge.n	8007c1a <SD_read+0x2a>
  {
    return res;
 8007c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c18:	e032      	b.n	8007c80 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68b8      	ldr	r0, [r7, #8]
 8007c20:	f7ff fecc 	bl	80079bc <BSP_SD_ReadBlocks_DMA>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8007c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d124      	bne.n	8007c7c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <SD_read+0x98>)
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	f107 0314 	add.w	r3, r7, #20
 8007c3a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fa44 	bl	80080cc <osMessageGet>

    if (event.status == osEventMessage)
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b10      	cmp	r3, #16
 8007c48:	d118      	bne.n	8007c7c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d115      	bne.n	8007c7c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007c50:	f000 f964 	bl	8007f1c <osKernelSysTick>
 8007c54:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007c56:	e008      	b.n	8007c6a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c58:	f7ff fee4 	bl	8007a24 <BSP_SD_GetCardState>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <SD_read+0x7a>
              {
                res = RES_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007c68:	e008      	b.n	8007c7c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007c6a:	f000 f957 	bl	8007f1c <osKernelSysTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d9ed      	bls.n	8007c58 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000f04 	.word	0x20000f04

08007c8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08a      	sub	sp, #40	; 0x28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ca2:	f247 5030 	movw	r0, #30000	; 0x7530
 8007ca6:	f7ff ff0d 	bl	8007ac4 <SD_CheckStatusWithTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da02      	bge.n	8007cb6 <SD_write+0x2a>
  {
    return res;
 8007cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb4:	e02e      	b.n	8007d14 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	68b8      	ldr	r0, [r7, #8]
 8007cbc:	f7ff fe98 	bl	80079f0 <BSP_SD_WriteBlocks_DMA>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d124      	bne.n	8007d10 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <SD_write+0x90>)
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	f107 0314 	add.w	r3, r7, #20
 8007cce:	f247 5230 	movw	r2, #30000	; 0x7530
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f9fa 	bl	80080cc <osMessageGet>

    if (event.status == osEventMessage)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d118      	bne.n	8007d10 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d115      	bne.n	8007d10 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007ce4:	f000 f91a 	bl	8007f1c <osKernelSysTick>
 8007ce8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007cea:	e008      	b.n	8007cfe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cec:	f7ff fe9a 	bl	8007a24 <BSP_SD_GetCardState>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d103      	bne.n	8007cfe <SD_write+0x72>
          {
            res = RES_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007cfc:	e008      	b.n	8007d10 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007cfe:	f000 f90d 	bl	8007f1c <osKernelSysTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	f247 522f 	movw	r2, #29999	; 0x752f
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d9ed      	bls.n	8007cec <SD_write+0x60>
    }

  }
#endif

  return res;
 8007d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3728      	adds	r7, #40	; 0x28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000f04 	.word	0x20000f04

08007d20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	603a      	str	r2, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d36:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <SD_ioctl+0xac>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <SD_ioctl+0x28>
 8007d44:	2303      	movs	r3, #3
 8007d46:	e03c      	b.n	8007dc2 <SD_ioctl+0xa2>

  switch (cmd)
 8007d48:	79bb      	ldrb	r3, [r7, #6]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d834      	bhi.n	8007db8 <SD_ioctl+0x98>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <SD_ioctl+0x34>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d65 	.word	0x08007d65
 8007d58:	08007d6d 	.word	0x08007d6d
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d9f 	.word	0x08007d9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d6a:	e028      	b.n	8007dbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fe67 	bl	8007a44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d82:	e01c      	b.n	8007dbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d84:	f107 030c 	add.w	r3, r7, #12
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fe5b 	bl	8007a44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d9c:	e00f      	b.n	8007dbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fe4e 	bl	8007a44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	0a5a      	lsrs	r2, r3, #9
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007db6:	e002      	b.n	8007dbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007db8:	2304      	movs	r3, #4
 8007dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3730      	adds	r7, #48	; 0x30
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000009 	.word	0x20000009

08007dd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <BSP_SD_ReadCpltCallback+0x18>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f935 	bl	800804c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007de2:	bf00      	nop
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000f04 	.word	0x20000f04

08007dec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e02:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e04:	7a5b      	ldrb	r3, [r3, #9]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d131      	bne.n	8007e70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e0c:	4b1c      	ldr	r3, [pc, #112]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e0e:	7a5b      	ldrb	r3, [r3, #9]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e16:	2100      	movs	r1, #0
 8007e18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e1a:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e1c:	7a5b      	ldrb	r3, [r3, #9]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e2a:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e2c:	7a5b      	ldrb	r3, [r3, #9]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e34:	4413      	add	r3, r2
 8007e36:	79fa      	ldrb	r2, [r7, #7]
 8007e38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e3a:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e3c:	7a5b      	ldrb	r3, [r3, #9]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	b2d1      	uxtb	r1, r2
 8007e44:	4a0e      	ldr	r2, [pc, #56]	; (8007e80 <FATFS_LinkDriverEx+0x94>)
 8007e46:	7251      	strb	r1, [r2, #9]
 8007e48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e4a:	7dbb      	ldrb	r3, [r7, #22]
 8007e4c:	3330      	adds	r3, #48	; 0x30
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3301      	adds	r3, #1
 8007e58:	223a      	movs	r2, #58	; 0x3a
 8007e5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	222f      	movs	r2, #47	; 0x2f
 8007e62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	3303      	adds	r3, #3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000f08 	.word	0x20000f08

08007e84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff ffaa 	bl	8007dec <FATFS_LinkDriverEx>
 8007e98:	4603      	mov	r3, r0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007eb4:	2b84      	cmp	r3, #132	; 0x84
 8007eb6:	d005      	beq.n	8007ec4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007eb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed8:	f3ef 8305 	mrs	r3, IPSR
 8007edc:	607b      	str	r3, [r7, #4]
  return(result);
 8007ede:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007efa:	f001 f9ed 	bl	80092d8 <vTaskStartScheduler>
  
  return osOK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007f08:	f001 fe32 	bl	8009b70 <xTaskGetSchedulerState>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <osKernelRunning+0x12>
    return 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e000      	b.n	8007f18 <osKernelRunning+0x14>
  else
    return 1;
 8007f16:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007f20:	f7ff ffd7 	bl	8007ed2 <inHandlerMode>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007f2a:	f001 fb11 	bl	8009550 <xTaskGetTickCountFromISR>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	e002      	b.n	8007f38 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007f32:	f001 fafd 	bl	8009530 <xTaskGetTickCount>
 8007f36:	4603      	mov	r3, r0
  }
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d020      	beq.n	8007f90 <osThreadCreate+0x54>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01c      	beq.n	8007f90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685c      	ldr	r4, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681d      	ldr	r5, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691e      	ldr	r6, [r3, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ff9a 	bl	8007ea2 <makeFreeRtosPriority>
 8007f6e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f78:	9202      	str	r2, [sp, #8]
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	9100      	str	r1, [sp, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	4632      	mov	r2, r6
 8007f82:	4629      	mov	r1, r5
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 ff0d 	bl	8008da4 <xTaskCreateStatic>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e01c      	b.n	8007fca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685c      	ldr	r4, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f9c:	b29e      	uxth	r6, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff ff7c 	bl	8007ea2 <makeFreeRtosPriority>
 8007faa:	4602      	mov	r2, r0
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	9200      	str	r2, [sp, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	4632      	mov	r2, r6
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 ff51 	bl	8008e62 <xTaskCreate>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d001      	beq.n	8007fca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fca:	68fb      	ldr	r3, [r7, #12]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fd4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <osDelay+0x16>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	e000      	b.n	8007fec <osDelay+0x18>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 f93f 	bl	8009270 <vTaskDelay>
  
  return osOK;
 8007ff2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d011      	beq.n	8008032 <osMessageCreate+0x36>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00d      	beq.n	8008032 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6859      	ldr	r1, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2400      	movs	r4, #0
 8008028:	9400      	str	r4, [sp, #0]
 800802a:	f000 f9df 	bl	80083ec <xQueueGenericCreateStatic>
 800802e:	4603      	mov	r3, r0
 8008030:	e008      	b.n	8008044 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	4619      	mov	r1, r3
 800803e:	f000 fa4d 	bl	80084dc <xQueueGenericCreate>
 8008042:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bd90      	pop	{r4, r7, pc}

0800804c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <osMessagePut+0x1e>
    ticks = 1;
 8008066:	2301      	movs	r3, #1
 8008068:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800806a:	f7ff ff32 	bl	8007ed2 <inHandlerMode>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d018      	beq.n	80080a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008074:	f107 0210 	add.w	r2, r7, #16
 8008078:	f107 0108 	add.w	r1, r7, #8
 800807c:	2300      	movs	r3, #0
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fb84 	bl	800878c <xQueueGenericSendFromISR>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <osMessagePut+0x42>
      return osErrorOS;
 800808a:	23ff      	movs	r3, #255	; 0xff
 800808c:	e018      	b.n	80080c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <osMessagePut+0x72>
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <osMessagePut+0x7c>)
 8008096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	e00b      	b.n	80080be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80080a6:	f107 0108 	add.w	r1, r7, #8
 80080aa:	2300      	movs	r3, #0
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fa6e 	bl	8008590 <xQueueGenericSend>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d001      	beq.n	80080be <osMessagePut+0x72>
      return osErrorOS;
 80080ba:	23ff      	movs	r3, #255	; 0xff
 80080bc:	e000      	b.n	80080c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b08b      	sub	sp, #44	; 0x2c
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	617b      	str	r3, [r7, #20]
    return event;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	461c      	mov	r4, r3
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080fa:	e054      	b.n	80081a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810a:	d103      	bne.n	8008114 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800810c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	e009      	b.n	8008128 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <osMessageGet+0x5c>
      ticks = 1;
 8008124:	2301      	movs	r3, #1
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008128:	f7ff fed3 	bl	8007ed2 <inHandlerMode>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01c      	beq.n	800816c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008132:	f107 0220 	add.w	r2, r7, #32
 8008136:	f107 0314 	add.w	r3, r7, #20
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f000 fca0 	bl	8008a84 <xQueueReceiveFromISR>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d102      	bne.n	8008150 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800814a:	2310      	movs	r3, #16
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e001      	b.n	8008154 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01d      	beq.n	8008196 <osMessageGet+0xca>
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <osMessageGet+0xe4>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	e014      	b.n	8008196 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	3304      	adds	r3, #4
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	4619      	mov	r1, r3
 8008176:	68b8      	ldr	r0, [r7, #8]
 8008178:	f000 fba4 	bl	80088c4 <xQueueReceive>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d102      	bne.n	8008188 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008182:	2310      	movs	r3, #16
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e006      	b.n	8008196 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <osMessageGet+0xc6>
 800818e:	2300      	movs	r3, #0
 8008190:	e000      	b.n	8008194 <osMessageGet+0xc8>
 8008192:	2340      	movs	r3, #64	; 0x40
 8008194:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	461c      	mov	r4, r3
 800819a:	f107 0314 	add.w	r3, r7, #20
 800819e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	372c      	adds	r7, #44	; 0x2c
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	bf00      	nop
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0208 	add.w	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f103 0208 	add.w	r2, r3, #8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f103 0208 	add.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826c:	d103      	bne.n	8008276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e00c      	b.n	8008290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3308      	adds	r3, #8
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e002      	b.n	8008284 <vListInsert+0x2e>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	d2f6      	bcs.n	800827e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]
}
 80082bc:	bf00      	nop
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6892      	ldr	r2, [r2, #8]
 80082de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6852      	ldr	r2, [r2, #4]
 80082e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d103      	bne.n	80082fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	1e5a      	subs	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008346:	f001 fe69 	bl	800a01c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	441a      	add	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	3b01      	subs	r3, #1
 8008378:	68f9      	ldr	r1, [r7, #12]
 800837a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	441a      	add	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	22ff      	movs	r2, #255	; 0xff
 800838a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	22ff      	movs	r2, #255	; 0xff
 8008392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d114      	bne.n	80083c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01a      	beq.n	80083da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3310      	adds	r3, #16
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fa21 	bl	80097f0 <xTaskRemoveFromEventList>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d012      	beq.n	80083da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083b4:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <xQueueGenericReset+0xcc>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	e009      	b.n	80083da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3310      	adds	r3, #16
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fef2 	bl	80081b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3324      	adds	r3, #36	; 0x24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff feed 	bl	80081b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083da:	f001 fe4f 	bl	800a07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083de:	2301      	movs	r3, #1
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08e      	sub	sp, #56	; 0x38
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <xQueueGenericCreateStatic+0x52>
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <xQueueGenericCreateStatic+0x56>
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <xQueueGenericCreateStatic+0x58>
 8008442:	2300      	movs	r3, #0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	623b      	str	r3, [r7, #32]
}
 800845a:	bf00      	nop
 800845c:	e7fe      	b.n	800845c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <xQueueGenericCreateStatic+0x7e>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <xQueueGenericCreateStatic+0x82>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <xQueueGenericCreateStatic+0x84>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	61fb      	str	r3, [r7, #28]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800848a:	2348      	movs	r3, #72	; 0x48
 800848c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b48      	cmp	r3, #72	; 0x48
 8008492:	d00a      	beq.n	80084aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	61bb      	str	r3, [r7, #24]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f83f 	bl	8008550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3730      	adds	r7, #48	; 0x30
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericCreate+0x2a>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	3348      	adds	r3, #72	; 0x48
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fe9f 	bl	800a258 <pvPortMalloc>
 800851a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d011      	beq.n	8008546 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3348      	adds	r3, #72	; 0x48
 800852a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008534:	79fa      	ldrb	r2, [r7, #7]
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	4613      	mov	r3, r2
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f805 	bl	8008550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008546:	69bb      	ldr	r3, [r7, #24]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d103      	bne.n	800856c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e002      	b.n	8008572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800857e:	2101      	movs	r1, #1
 8008580:	69b8      	ldr	r0, [r7, #24]
 8008582:	f7ff fecb 	bl	800831c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08e      	sub	sp, #56	; 0x38
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800859e:	2300      	movs	r3, #0
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericSend+0x32>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <xQueueGenericSend+0x40>
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <xQueueGenericSend+0x44>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <xQueueGenericSend+0x46>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <xQueueGenericSend+0x60>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d103      	bne.n	80085fe <xQueueGenericSend+0x6e>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <xQueueGenericSend+0x72>
 80085fe:	2301      	movs	r3, #1
 8008600:	e000      	b.n	8008604 <xQueueGenericSend+0x74>
 8008602:	2300      	movs	r3, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xQueueGenericSend+0x8e>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	623b      	str	r3, [r7, #32]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800861e:	f001 faa7 	bl	8009b70 <xTaskGetSchedulerState>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <xQueueGenericSend+0x9e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <xQueueGenericSend+0xa2>
 800862e:	2301      	movs	r3, #1
 8008630:	e000      	b.n	8008634 <xQueueGenericSend+0xa4>
 8008632:	2300      	movs	r3, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xQueueGenericSend+0xbe>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	61fb      	str	r3, [r7, #28]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800864e:	f001 fce5 	bl	800a01c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <xQueueGenericSend+0xd4>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d129      	bne.n	80086b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800866a:	f000 fa8b 	bl	8008b84 <prvCopyDataToQueue>
 800866e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d010      	beq.n	800869a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f001 f8b7 	bl	80097f0 <xTaskRemoveFromEventList>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d013      	beq.n	80086b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008688:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <xQueueGenericSend+0x1f8>)
 800868a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	e00a      	b.n	80086b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086a0:	4b39      	ldr	r3, [pc, #228]	; (8008788 <xQueueGenericSend+0x1f8>)
 80086a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086b0:	f001 fce4 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e063      	b.n	8008780 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086be:	f001 fcdd 	bl	800a07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e05c      	b.n	8008780 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d106      	bne.n	80086da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086cc:	f107 0314 	add.w	r3, r7, #20
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f8ef 	bl	80098b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086d6:	2301      	movs	r3, #1
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086da:	f001 fccf 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086de:	f000 fe7d 	bl	80093dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086e2:	f001 fc9b 	bl	800a01c <vPortEnterCritical>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ec:	b25b      	sxtb	r3, r3
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f2:	d103      	bne.n	80086fc <xQueueGenericSend+0x16c>
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008702:	b25b      	sxtb	r3, r3
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008708:	d103      	bne.n	8008712 <xQueueGenericSend+0x182>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008712:	f001 fcb3 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008716:	1d3a      	adds	r2, r7, #4
 8008718:	f107 0314 	add.w	r3, r7, #20
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f001 f8de 	bl	80098e0 <xTaskCheckForTimeOut>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d124      	bne.n	8008774 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800872a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800872c:	f000 fb22 	bl	8008d74 <prvIsQueueFull>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d018      	beq.n	8008768 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	3310      	adds	r3, #16
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f001 f832 	bl	80097a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008746:	f000 faad 	bl	8008ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800874a:	f000 fe55 	bl	80093f8 <xTaskResumeAll>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f af7c 	bne.w	800864e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <xQueueGenericSend+0x1f8>)
 8008758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	e772      	b.n	800864e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800876a:	f000 fa9b 	bl	8008ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800876e:	f000 fe43 	bl	80093f8 <xTaskResumeAll>
 8008772:	e76c      	b.n	800864e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008776:	f000 fa95 	bl	8008ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800877a:	f000 fe3d 	bl	80093f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800877e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008780:	4618      	mov	r0, r3
 8008782:	3738      	adds	r7, #56	; 0x38
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	e000ed04 	.word	0xe000ed04

0800878c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b090      	sub	sp, #64	; 0x40
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d103      	bne.n	80087c8 <xQueueGenericSendFromISR+0x3c>
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <xQueueGenericSendFromISR+0x40>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <xQueueGenericSendFromISR+0x42>
 80087cc:	2300      	movs	r3, #0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d103      	bne.n	80087f6 <xQueueGenericSendFromISR+0x6a>
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <xQueueGenericSendFromISR+0x6e>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <xQueueGenericSendFromISR+0x70>
 80087fa:	2300      	movs	r3, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	623b      	str	r3, [r7, #32]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008816:	f001 fcdf 	bl	800a1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800881a:	f3ef 8211 	mrs	r2, BASEPRI
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	61fa      	str	r2, [r7, #28]
 8008830:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008832:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <xQueueGenericSendFromISR+0xbc>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d12f      	bne.n	80088a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800884e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800885e:	f000 f991 	bl	8008b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008862:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886a:	d112      	bne.n	8008892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d016      	beq.n	80088a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	3324      	adds	r3, #36	; 0x24
 8008878:	4618      	mov	r0, r3
 800887a:	f000 ffb9 	bl	80097f0 <xTaskRemoveFromEventList>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e007      	b.n	80088a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008896:	3301      	adds	r3, #1
 8008898:	b2db      	uxtb	r3, r3
 800889a:	b25a      	sxtb	r2, r3
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088a2:	2301      	movs	r3, #1
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80088a6:	e001      	b.n	80088ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3740      	adds	r7, #64	; 0x40
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <xQueueReceive+0x30>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	623b      	str	r3, [r7, #32]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <xQueueReceive+0x3e>
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <xQueueReceive+0x42>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <xQueueReceive+0x44>
 8008906:	2300      	movs	r3, #0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xQueueReceive+0x5e>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	61fb      	str	r3, [r7, #28]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008922:	f001 f925 	bl	8009b70 <xTaskGetSchedulerState>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <xQueueReceive+0x6e>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <xQueueReceive+0x72>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <xQueueReceive+0x74>
 8008936:	2300      	movs	r3, #0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xQueueReceive+0x8e>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	61bb      	str	r3, [r7, #24]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008952:	f001 fb63 	bl	800a01c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01f      	beq.n	80089a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008966:	f000 f977 	bl	8008c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	1e5a      	subs	r2, r3, #1
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00f      	beq.n	800899a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	3310      	adds	r3, #16
 800897e:	4618      	mov	r0, r3
 8008980:	f000 ff36 	bl	80097f0 <xTaskRemoveFromEventList>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800898a:	4b3d      	ldr	r3, [pc, #244]	; (8008a80 <xQueueReceive+0x1bc>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800899a:	f001 fb6f 	bl	800a07c <vPortExitCritical>
				return pdPASS;
 800899e:	2301      	movs	r3, #1
 80089a0:	e069      	b.n	8008a76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a8:	f001 fb68 	bl	800a07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e062      	b.n	8008a76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b6:	f107 0310 	add.w	r3, r7, #16
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 ff7a 	bl	80098b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089c0:	2301      	movs	r3, #1
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089c4:	f001 fb5a 	bl	800a07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c8:	f000 fd08 	bl	80093dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089cc:	f001 fb26 	bl	800a01c <vPortEnterCritical>
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089dc:	d103      	bne.n	80089e6 <xQueueReceive+0x122>
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ec:	b25b      	sxtb	r3, r3
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f2:	d103      	bne.n	80089fc <xQueueReceive+0x138>
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089fc:	f001 fb3e 	bl	800a07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a00:	1d3a      	adds	r2, r7, #4
 8008a02:	f107 0310 	add.w	r3, r7, #16
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 ff69 	bl	80098e0 <xTaskCheckForTimeOut>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d123      	bne.n	8008a5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a16:	f000 f997 	bl	8008d48 <prvIsQueueEmpty>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d017      	beq.n	8008a50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	3324      	adds	r3, #36	; 0x24
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 febd 	bl	80097a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a30:	f000 f938 	bl	8008ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a34:	f000 fce0 	bl	80093f8 <xTaskResumeAll>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d189      	bne.n	8008952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a3e:	4b10      	ldr	r3, [pc, #64]	; (8008a80 <xQueueReceive+0x1bc>)
 8008a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	e780      	b.n	8008952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a52:	f000 f927 	bl	8008ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a56:	f000 fccf 	bl	80093f8 <xTaskResumeAll>
 8008a5a:	e77a      	b.n	8008952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5e:	f000 f921 	bl	8008ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a62:	f000 fcc9 	bl	80093f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a68:	f000 f96e 	bl	8008d48 <prvIsQueueEmpty>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f43f af6f 	beq.w	8008952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	; 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08e      	sub	sp, #56	; 0x38
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	623b      	str	r3, [r7, #32]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <xQueueReceiveFromISR+0x3a>
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <xQueueReceiveFromISR+0x3e>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueReceiveFromISR+0x40>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	61fb      	str	r3, [r7, #28]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ade:	f001 fb7b 	bl	800a1d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	61ba      	str	r2, [r7, #24]
 8008af8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008afa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d02f      	beq.n	8008b6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b18:	f000 f89e 	bl	8008c58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	1e5a      	subs	r2, r3, #1
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2c:	d112      	bne.n	8008b54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d016      	beq.n	8008b64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3310      	adds	r3, #16
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fe58 	bl	80097f0 <xTaskRemoveFromEventList>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00e      	beq.n	8008b64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e007      	b.n	8008b64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	b25a      	sxtb	r2, r3
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b64:	2301      	movs	r3, #1
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
 8008b68:	e001      	b.n	8008b6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f383 8811 	msr	BASEPRI, r3
}
 8008b78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3738      	adds	r7, #56	; 0x38
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10d      	bne.n	8008bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d14d      	bne.n	8008c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fffc 	bl	8009bac <xTaskPriorityDisinherit>
 8008bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	e043      	b.n	8008c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d119      	bne.n	8008bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6858      	ldr	r0, [r3, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	461a      	mov	r2, r3
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	f001 fd56 	bl	800a680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	441a      	add	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d32b      	bcc.n	8008c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	e026      	b.n	8008c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68d8      	ldr	r0, [r3, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	f001 fd3c 	bl	800a680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	425b      	negs	r3, r3
 8008c12:	441a      	add	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d207      	bcs.n	8008c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	441a      	add	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d105      	bne.n	8008c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c4e:	697b      	ldr	r3, [r7, #20]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	441a      	add	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d303      	bcc.n	8008c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68d9      	ldr	r1, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	461a      	mov	r2, r3
 8008c96:	6838      	ldr	r0, [r7, #0]
 8008c98:	f001 fcf2 	bl	800a680 <memcpy>
	}
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cac:	f001 f9b6 	bl	800a01c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cb8:	e011      	b.n	8008cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d012      	beq.n	8008ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3324      	adds	r3, #36	; 0x24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fd92 	bl	80097f0 <xTaskRemoveFromEventList>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cd2:	f000 fe67 	bl	80099a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dce9      	bgt.n	8008cba <prvUnlockQueue+0x16>
 8008ce6:	e000      	b.n	8008cea <prvUnlockQueue+0x46>
					break;
 8008ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	22ff      	movs	r2, #255	; 0xff
 8008cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cf2:	f001 f9c3 	bl	800a07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cf6:	f001 f991 	bl	800a01c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d02:	e011      	b.n	8008d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d012      	beq.n	8008d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fd6d 	bl	80097f0 <xTaskRemoveFromEventList>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d1c:	f000 fe42 	bl	80099a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dce9      	bgt.n	8008d04 <prvUnlockQueue+0x60>
 8008d30:	e000      	b.n	8008d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d3c:	f001 f99e 	bl	800a07c <vPortExitCritical>
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d50:	f001 f964 	bl	800a01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e001      	b.n	8008d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d66:	f001 f989 	bl	800a07c <vPortExitCritical>

	return xReturn;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d7c:	f001 f94e 	bl	800a01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d102      	bne.n	8008d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e001      	b.n	8008d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f001 f971 	bl	800a07c <vPortExitCritical>

	return xReturn;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08e      	sub	sp, #56	; 0x38
 8008da8:	af04      	add	r7, sp, #16
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	623b      	str	r3, [r7, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xTaskCreateStatic+0x46>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	61fb      	str	r3, [r7, #28]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dea:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8008dee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008df6:	d00a      	beq.n	8008e0e <xTaskCreateStatic+0x6a>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61bb      	str	r3, [r7, #24]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d01e      	beq.n	8008e54 <xTaskCreateStatic+0xb0>
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01b      	beq.n	8008e54 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	2202      	movs	r2, #2
 8008e2a:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	9302      	str	r3, [sp, #8]
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f851 	bl	8008eee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e4e:	f000 f915 	bl	800907c <prvAddNewTaskToReadyList>
 8008e52:	e001      	b.n	8008e58 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e58:	697b      	ldr	r3, [r7, #20]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3728      	adds	r7, #40	; 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b08c      	sub	sp, #48	; 0x30
 8008e66:	af04      	add	r7, sp, #16
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 f9ee 	bl	800a258 <pvPortMalloc>
 8008e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00f      	beq.n	8008ea4 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e84:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8008e88:	f001 f9e6 	bl	800a258 <pvPortMalloc>
 8008e8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	631a      	str	r2, [r3, #48]	; 0x30
 8008e9a:	e005      	b.n	8008ea8 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e9c:	6978      	ldr	r0, [r7, #20]
 8008e9e:	f001 faa7 	bl	800a3f0 <vPortFree>
 8008ea2:	e001      	b.n	8008ea8 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d017      	beq.n	8008ede <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eb6:	88fa      	ldrh	r2, [r7, #6]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9303      	str	r3, [sp, #12]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	9302      	str	r3, [sp, #8]
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f80e 	bl	8008eee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ed2:	69f8      	ldr	r0, [r7, #28]
 8008ed4:	f000 f8d2 	bl	800907c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	e002      	b.n	8008ee4 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ee2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
	}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3720      	adds	r7, #32
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b088      	sub	sp, #32
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f06:	3b01      	subs	r3, #1
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	617b      	str	r3, [r7, #20]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01f      	beq.n	8008f7c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e012      	b.n	8008f68 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	7819      	ldrb	r1, [r3, #0]
 8008f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	3334      	adds	r3, #52	; 0x34
 8008f52:	460a      	mov	r2, r1
 8008f54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d006      	beq.n	8008f70 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	3301      	adds	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	d9e9      	bls.n	8008f42 <prvInitialiseNewTask+0x54>
 8008f6e:	e000      	b.n	8008f72 <prvInitialiseNewTask+0x84>
			{
				break;
 8008f70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f7a:	e003      	b.n	8008f84 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	d901      	bls.n	8008f8e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f8a:	2306      	movs	r3, #6
 8008f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f98:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff f925 	bl	80081f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	3318      	adds	r3, #24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff f920 	bl	80081f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	f1c3 0207 	rsb	r2, r3, #7
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	3350      	adds	r3, #80	; 0x50
 8008fde:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f001 fb59 	bl	800a69c <memset>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	659a      	str	r2, [r3, #88]	; 0x58
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	65da      	str	r2, [r3, #92]	; 0x5c
 8009008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800900a:	f04f 0201 	mov.w	r2, #1
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	f243 320e 	movw	r2, #13070	; 0x330e
 800901c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8009026:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	f241 2234 	movw	r2, #4660	; 0x1234
 8009030:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f24e 626d 	movw	r2, #58989	; 0xe66d
 800903a:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 8009044:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2205      	movs	r2, #5
 800904c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	220b      	movs	r2, #11
 8009054:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	68f9      	ldr	r1, [r7, #12]
 800905c:	69b8      	ldr	r0, [r7, #24]
 800905e:	f000 fe91 	bl	8009d84 <pxPortInitialiseStack>
 8009062:	4602      	mov	r2, r0
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <prvInitialiseNewTask+0x186>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009074:	bf00      	nop
 8009076:	3720      	adds	r7, #32
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009084:	f000 ffca 	bl	800a01c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009088:	4b2a      	ldr	r3, [pc, #168]	; (8009134 <prvAddNewTaskToReadyList+0xb8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	4a29      	ldr	r2, [pc, #164]	; (8009134 <prvAddNewTaskToReadyList+0xb8>)
 8009090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009092:	4b29      	ldr	r3, [pc, #164]	; (8009138 <prvAddNewTaskToReadyList+0xbc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800909a:	4a27      	ldr	r2, [pc, #156]	; (8009138 <prvAddNewTaskToReadyList+0xbc>)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a0:	4b24      	ldr	r3, [pc, #144]	; (8009134 <prvAddNewTaskToReadyList+0xb8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d110      	bne.n	80090ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090a8:	f000 fca0 	bl	80099ec <prvInitialiseTaskLists>
 80090ac:	e00d      	b.n	80090ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090ae:	4b23      	ldr	r3, [pc, #140]	; (800913c <prvAddNewTaskToReadyList+0xc0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090b6:	4b20      	ldr	r3, [pc, #128]	; (8009138 <prvAddNewTaskToReadyList+0xbc>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d802      	bhi.n	80090ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090c4:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <prvAddNewTaskToReadyList+0xbc>)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ca:	4b1d      	ldr	r3, [pc, #116]	; (8009140 <prvAddNewTaskToReadyList+0xc4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	4a1b      	ldr	r2, [pc, #108]	; (8009140 <prvAddNewTaskToReadyList+0xc4>)
 80090d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	2201      	movs	r2, #1
 80090da:	409a      	lsls	r2, r3
 80090dc:	4b19      	ldr	r3, [pc, #100]	; (8009144 <prvAddNewTaskToReadyList+0xc8>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	4a18      	ldr	r2, [pc, #96]	; (8009144 <prvAddNewTaskToReadyList+0xc8>)
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <prvAddNewTaskToReadyList+0xcc>)
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4619      	mov	r1, r3
 80090fc:	4610      	mov	r0, r2
 80090fe:	f7ff f886 	bl	800820e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009102:	f000 ffbb 	bl	800a07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <prvAddNewTaskToReadyList+0xc0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00e      	beq.n	800912c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvAddNewTaskToReadyList+0xbc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	429a      	cmp	r2, r3
 800911a:	d207      	bcs.n	800912c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800911c:	4b0b      	ldr	r3, [pc, #44]	; (800914c <prvAddNewTaskToReadyList+0xd0>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20001014 	.word	0x20001014
 8009138:	20000f14 	.word	0x20000f14
 800913c:	20001020 	.word	0x20001020
 8009140:	20001030 	.word	0x20001030
 8009144:	2000101c 	.word	0x2000101c
 8009148:	20000f18 	.word	0x20000f18
 800914c:	e000ed04 	.word	0xe000ed04

08009150 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009158:	f000 ff60 	bl	800a01c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <vTaskDelete+0x18>
 8009162:	4b39      	ldr	r3, [pc, #228]	; (8009248 <vTaskDelete+0xf8>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	e000      	b.n	800916a <vTaskDelete+0x1a>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff f8a9 	bl	80082c8 <uxListRemove>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d115      	bne.n	80091a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	4932      	ldr	r1, [pc, #200]	; (800924c <vTaskDelete+0xfc>)
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <vTaskDelete+0x58>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	2201      	movs	r2, #1
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	43da      	mvns	r2, r3
 800919e:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <vTaskDelete+0x100>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4013      	ands	r3, r2
 80091a4:	4a2a      	ldr	r2, [pc, #168]	; (8009250 <vTaskDelete+0x100>)
 80091a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3318      	adds	r3, #24
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff f887 	bl	80082c8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80091ba:	4b26      	ldr	r3, [pc, #152]	; (8009254 <vTaskDelete+0x104>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3301      	adds	r3, #1
 80091c0:	4a24      	ldr	r2, [pc, #144]	; (8009254 <vTaskDelete+0x104>)
 80091c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80091c4:	4b20      	ldr	r3, [pc, #128]	; (8009248 <vTaskDelete+0xf8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d10b      	bne.n	80091e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4619      	mov	r1, r3
 80091d4:	4820      	ldr	r0, [pc, #128]	; (8009258 <vTaskDelete+0x108>)
 80091d6:	f7ff f81a 	bl	800820e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <vTaskDelete+0x10c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	4a1e      	ldr	r2, [pc, #120]	; (800925c <vTaskDelete+0x10c>)
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	e009      	b.n	80091fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80091e6:	4b1e      	ldr	r3, [pc, #120]	; (8009260 <vTaskDelete+0x110>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	4a1c      	ldr	r2, [pc, #112]	; (8009260 <vTaskDelete+0x110>)
 80091ee:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fc69 	bl	8009ac8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80091f6:	f000 fc9b 	bl	8009b30 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80091fa:	f000 ff3f 	bl	800a07c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80091fe:	4b19      	ldr	r3, [pc, #100]	; (8009264 <vTaskDelete+0x114>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01b      	beq.n	800923e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <vTaskDelete+0xf8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	429a      	cmp	r2, r3
 800920e:	d116      	bne.n	800923e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009210:	4b15      	ldr	r3, [pc, #84]	; (8009268 <vTaskDelete+0x118>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <vTaskDelete+0xde>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	60bb      	str	r3, [r7, #8]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <vTaskDelete+0x11c>)
 8009230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000f14 	.word	0x20000f14
 800924c:	20000f18 	.word	0x20000f18
 8009250:	2000101c 	.word	0x2000101c
 8009254:	20001030 	.word	0x20001030
 8009258:	20000fe8 	.word	0x20000fe8
 800925c:	20000ffc 	.word	0x20000ffc
 8009260:	20001014 	.word	0x20001014
 8009264:	20001020 	.word	0x20001020
 8009268:	2000103c 	.word	0x2000103c
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d017      	beq.n	80092b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009282:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <vTaskDelay+0x60>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <vTaskDelay+0x30>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60bb      	str	r3, [r7, #8]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092a0:	f000 f89c 	bl	80093dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fd06 	bl	8009cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ac:	f000 f8a4 	bl	80093f8 <xTaskResumeAll>
 80092b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d107      	bne.n	80092c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <vTaskDelay+0x64>)
 80092ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	2000103c 	.word	0x2000103c
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092e6:	463a      	mov	r2, r7
 80092e8:	1d39      	adds	r1, r7, #4
 80092ea:	f107 0308 	add.w	r3, r7, #8
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f7 f962 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	9202      	str	r2, [sp, #8]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2300      	movs	r3, #0
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	460a      	mov	r2, r1
 8009306:	4921      	ldr	r1, [pc, #132]	; (800938c <vTaskStartScheduler+0xb4>)
 8009308:	4821      	ldr	r0, [pc, #132]	; (8009390 <vTaskStartScheduler+0xb8>)
 800930a:	f7ff fd4b 	bl	8008da4 <xTaskCreateStatic>
 800930e:	4603      	mov	r3, r0
 8009310:	4a20      	ldr	r2, [pc, #128]	; (8009394 <vTaskStartScheduler+0xbc>)
 8009312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009314:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <vTaskStartScheduler+0xbc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e001      	b.n	8009326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d11b      	bne.n	8009364 <vTaskStartScheduler+0x8c>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	613b      	str	r3, [r7, #16]
}
 800933e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009340:	4b15      	ldr	r3, [pc, #84]	; (8009398 <vTaskStartScheduler+0xc0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3350      	adds	r3, #80	; 0x50
 8009346:	4a15      	ldr	r2, [pc, #84]	; (800939c <vTaskStartScheduler+0xc4>)
 8009348:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800934a:	4b15      	ldr	r3, [pc, #84]	; (80093a0 <vTaskStartScheduler+0xc8>)
 800934c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009350:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009352:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <vTaskStartScheduler+0xcc>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009358:	4b13      	ldr	r3, [pc, #76]	; (80093a8 <vTaskStartScheduler+0xd0>)
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800935e:	f000 fd9f 	bl	8009ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009362:	e00e      	b.n	8009382 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936a:	d10a      	bne.n	8009382 <vTaskStartScheduler+0xaa>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <vTaskStartScheduler+0xa8>
}
 8009382:	bf00      	nop
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	0800ade0 	.word	0x0800ade0
 8009390:	080099bd 	.word	0x080099bd
 8009394:	20001038 	.word	0x20001038
 8009398:	20000f14 	.word	0x20000f14
 800939c:	20000010 	.word	0x20000010
 80093a0:	20001034 	.word	0x20001034
 80093a4:	20001020 	.word	0x20001020
 80093a8:	20001018 	.word	0x20001018

080093ac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	607b      	str	r3, [r7, #4]
}
 80093c4:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 80093c6:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <vTaskEndScheduler+0x2c>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 80093cc:	f000 fe0a 	bl	8009fe4 <vPortEndScheduler>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20001020 	.word	0x20001020

080093dc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <vTaskSuspendAll+0x18>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a03      	ldr	r2, [pc, #12]	; (80093f4 <vTaskSuspendAll+0x18>)
 80093e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093ea:	bf00      	nop
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	2000103c 	.word	0x2000103c

080093f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009406:	4b41      	ldr	r3, [pc, #260]	; (800950c <xTaskResumeAll+0x114>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <xTaskResumeAll+0x2c>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	603b      	str	r3, [r7, #0]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009424:	f000 fdfa 	bl	800a01c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009428:	4b38      	ldr	r3, [pc, #224]	; (800950c <xTaskResumeAll+0x114>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3b01      	subs	r3, #1
 800942e:	4a37      	ldr	r2, [pc, #220]	; (800950c <xTaskResumeAll+0x114>)
 8009430:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009432:	4b36      	ldr	r3, [pc, #216]	; (800950c <xTaskResumeAll+0x114>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d161      	bne.n	80094fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800943a:	4b35      	ldr	r3, [pc, #212]	; (8009510 <xTaskResumeAll+0x118>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d05d      	beq.n	80094fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009442:	e02e      	b.n	80094a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009444:	4b33      	ldr	r3, [pc, #204]	; (8009514 <xTaskResumeAll+0x11c>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3318      	adds	r3, #24
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe ff39 	bl	80082c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe ff34 	bl	80082c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	2201      	movs	r2, #1
 8009466:	409a      	lsls	r2, r3
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <xTaskResumeAll+0x120>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4313      	orrs	r3, r2
 800946e:	4a2a      	ldr	r2, [pc, #168]	; (8009518 <xTaskResumeAll+0x120>)
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a27      	ldr	r2, [pc, #156]	; (800951c <xTaskResumeAll+0x124>)
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe fec0 	bl	800820e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	4b23      	ldr	r3, [pc, #140]	; (8009520 <xTaskResumeAll+0x128>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800949c:	4b21      	ldr	r3, [pc, #132]	; (8009524 <xTaskResumeAll+0x12c>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <xTaskResumeAll+0x11c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1cc      	bne.n	8009444 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094b0:	f000 fb3e 	bl	8009b30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <xTaskResumeAll+0x130>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d010      	beq.n	80094e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094c0:	f000 f858 	bl	8009574 <xTaskIncrementTick>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80094ca:	4b16      	ldr	r3, [pc, #88]	; (8009524 <xTaskResumeAll+0x12c>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f1      	bne.n	80094c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <xTaskResumeAll+0x130>)
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094e2:	4b10      	ldr	r3, [pc, #64]	; (8009524 <xTaskResumeAll+0x12c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <xTaskResumeAll+0x134>)
 80094f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094fe:	f000 fdbd 	bl	800a07c <vPortExitCritical>

	return xAlreadyYielded;
 8009502:	68bb      	ldr	r3, [r7, #8]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	2000103c 	.word	0x2000103c
 8009510:	20001014 	.word	0x20001014
 8009514:	20000fd4 	.word	0x20000fd4
 8009518:	2000101c 	.word	0x2000101c
 800951c:	20000f18 	.word	0x20000f18
 8009520:	20000f14 	.word	0x20000f14
 8009524:	20001028 	.word	0x20001028
 8009528:	20001024 	.word	0x20001024
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <xTaskGetTickCount+0x1c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800953c:	687b      	ldr	r3, [r7, #4]
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20001018 	.word	0x20001018

08009550 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009556:	f000 fe3f 	bl	800a1d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800955a:	2300      	movs	r3, #0
 800955c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <xTaskGetTickCountFromISR+0x20>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009564:	683b      	ldr	r3, [r7, #0]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20001018 	.word	0x20001018

08009574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957e:	4b4e      	ldr	r3, [pc, #312]	; (80096b8 <xTaskIncrementTick+0x144>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 808e 	bne.w	80096a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009588:	4b4c      	ldr	r3, [pc, #304]	; (80096bc <xTaskIncrementTick+0x148>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009590:	4a4a      	ldr	r2, [pc, #296]	; (80096bc <xTaskIncrementTick+0x148>)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d120      	bne.n	80095de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800959c:	4b48      	ldr	r3, [pc, #288]	; (80096c0 <xTaskIncrementTick+0x14c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <xTaskIncrementTick+0x48>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	603b      	str	r3, [r7, #0]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <xTaskIncrementTick+0x46>
 80095bc:	4b40      	ldr	r3, [pc, #256]	; (80096c0 <xTaskIncrementTick+0x14c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	4b40      	ldr	r3, [pc, #256]	; (80096c4 <xTaskIncrementTick+0x150>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a3e      	ldr	r2, [pc, #248]	; (80096c0 <xTaskIncrementTick+0x14c>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4a3e      	ldr	r2, [pc, #248]	; (80096c4 <xTaskIncrementTick+0x150>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b3d      	ldr	r3, [pc, #244]	; (80096c8 <xTaskIncrementTick+0x154>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	4a3c      	ldr	r2, [pc, #240]	; (80096c8 <xTaskIncrementTick+0x154>)
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	f000 faa9 	bl	8009b30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095de:	4b3b      	ldr	r3, [pc, #236]	; (80096cc <xTaskIncrementTick+0x158>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d348      	bcc.n	800967a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e8:	4b35      	ldr	r3, [pc, #212]	; (80096c0 <xTaskIncrementTick+0x14c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f2:	4b36      	ldr	r3, [pc, #216]	; (80096cc <xTaskIncrementTick+0x158>)
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095f8:	601a      	str	r2, [r3, #0]
					break;
 80095fa:	e03e      	b.n	800967a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fc:	4b30      	ldr	r3, [pc, #192]	; (80096c0 <xTaskIncrementTick+0x14c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d203      	bcs.n	800961c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009614:	4a2d      	ldr	r2, [pc, #180]	; (80096cc <xTaskIncrementTick+0x158>)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800961a:	e02e      	b.n	800967a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fe51 	bl	80082c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3318      	adds	r3, #24
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe fe48 	bl	80082c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	2201      	movs	r2, #1
 800963e:	409a      	lsls	r2, r3
 8009640:	4b23      	ldr	r3, [pc, #140]	; (80096d0 <xTaskIncrementTick+0x15c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4313      	orrs	r3, r2
 8009646:	4a22      	ldr	r2, [pc, #136]	; (80096d0 <xTaskIncrementTick+0x15c>)
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4a1f      	ldr	r2, [pc, #124]	; (80096d4 <xTaskIncrementTick+0x160>)
 8009658:	441a      	add	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	3304      	adds	r3, #4
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fe fdd4 	bl	800820e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <xTaskIncrementTick+0x164>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	429a      	cmp	r2, r3
 8009672:	d3b9      	bcc.n	80095e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009678:	e7b6      	b.n	80095e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800967a:	4b17      	ldr	r3, [pc, #92]	; (80096d8 <xTaskIncrementTick+0x164>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4914      	ldr	r1, [pc, #80]	; (80096d4 <xTaskIncrementTick+0x160>)
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d901      	bls.n	8009696 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009692:	2301      	movs	r3, #1
 8009694:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <xTaskIncrementTick+0x168>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800969e:	2301      	movs	r3, #1
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e004      	b.n	80096ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a4:	4b0e      	ldr	r3, [pc, #56]	; (80096e0 <xTaskIncrementTick+0x16c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	4a0d      	ldr	r2, [pc, #52]	; (80096e0 <xTaskIncrementTick+0x16c>)
 80096ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096ae:	697b      	ldr	r3, [r7, #20]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	2000103c 	.word	0x2000103c
 80096bc:	20001018 	.word	0x20001018
 80096c0:	20000fcc 	.word	0x20000fcc
 80096c4:	20000fd0 	.word	0x20000fd0
 80096c8:	2000102c 	.word	0x2000102c
 80096cc:	20001034 	.word	0x20001034
 80096d0:	2000101c 	.word	0x2000101c
 80096d4:	20000f18 	.word	0x20000f18
 80096d8:	20000f14 	.word	0x20000f14
 80096dc:	20001028 	.word	0x20001028
 80096e0:	20001024 	.word	0x20001024

080096e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ea:	4b29      	ldr	r3, [pc, #164]	; (8009790 <vTaskSwitchContext+0xac>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f2:	4b28      	ldr	r3, [pc, #160]	; (8009794 <vTaskSwitchContext+0xb0>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096f8:	e044      	b.n	8009784 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80096fa:	4b26      	ldr	r3, [pc, #152]	; (8009794 <vTaskSwitchContext+0xb0>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009700:	4b25      	ldr	r3, [pc, #148]	; (8009798 <vTaskSwitchContext+0xb4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	fab3 f383 	clz	r3, r3
 800970c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	f1c3 031f 	rsb	r3, r3, #31
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	4921      	ldr	r1, [pc, #132]	; (800979c <vTaskSwitchContext+0xb8>)
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <vTaskSwitchContext+0x5c>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	607b      	str	r3, [r7, #4]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vTaskSwitchContext+0x5a>
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4a14      	ldr	r2, [pc, #80]	; (800979c <vTaskSwitchContext+0xb8>)
 800974c:	4413      	add	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3308      	adds	r3, #8
 8009762:	429a      	cmp	r2, r3
 8009764:	d104      	bne.n	8009770 <vTaskSwitchContext+0x8c>
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	605a      	str	r2, [r3, #4]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	4a0a      	ldr	r2, [pc, #40]	; (80097a0 <vTaskSwitchContext+0xbc>)
 8009778:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <vTaskSwitchContext+0xbc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3350      	adds	r3, #80	; 0x50
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <vTaskSwitchContext+0xc0>)
 8009782:	6013      	str	r3, [r2, #0]
}
 8009784:	bf00      	nop
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	2000103c 	.word	0x2000103c
 8009794:	20001028 	.word	0x20001028
 8009798:	2000101c 	.word	0x2000101c
 800979c:	20000f18 	.word	0x20000f18
 80097a0:	20000f14 	.word	0x20000f14
 80097a4:	20000010 	.word	0x20000010

080097a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	60fb      	str	r3, [r7, #12]
}
 80097ca:	bf00      	nop
 80097cc:	e7fe      	b.n	80097cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <vTaskPlaceOnEventList+0x44>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3318      	adds	r3, #24
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fe fd3d 	bl	8008256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097dc:	2101      	movs	r1, #1
 80097de:	6838      	ldr	r0, [r7, #0]
 80097e0:	f000 fa6a 	bl	8009cb8 <prvAddCurrentTaskToDelayedList>
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000f14 	.word	0x20000f14

080097f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60fb      	str	r3, [r7, #12]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	3318      	adds	r3, #24
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fd51 	bl	80082c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009826:	4b1d      	ldr	r3, [pc, #116]	; (800989c <xTaskRemoveFromEventList+0xac>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11c      	bne.n	8009868 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3304      	adds	r3, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe fd48 	bl	80082c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	2201      	movs	r2, #1
 800983e:	409a      	lsls	r2, r3
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <xTaskRemoveFromEventList+0xb0>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4313      	orrs	r3, r2
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <xTaskRemoveFromEventList+0xb0>)
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <xTaskRemoveFromEventList+0xb4>)
 8009858:	441a      	add	r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3304      	adds	r3, #4
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f7fe fcd4 	bl	800820e <vListInsertEnd>
 8009866:	e005      	b.n	8009874 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3318      	adds	r3, #24
 800986c:	4619      	mov	r1, r3
 800986e:	480e      	ldr	r0, [pc, #56]	; (80098a8 <xTaskRemoveFromEventList+0xb8>)
 8009870:	f7fe fccd 	bl	800820e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <xTaskRemoveFromEventList+0xbc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	429a      	cmp	r2, r3
 8009880:	d905      	bls.n	800988e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <xTaskRemoveFromEventList+0xc0>)
 8009888:	2201      	movs	r2, #1
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e001      	b.n	8009892 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800988e:	2300      	movs	r3, #0
 8009890:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009892:	697b      	ldr	r3, [r7, #20]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	2000103c 	.word	0x2000103c
 80098a0:	2000101c 	.word	0x2000101c
 80098a4:	20000f18 	.word	0x20000f18
 80098a8:	20000fd4 	.word	0x20000fd4
 80098ac:	20000f14 	.word	0x20000f14
 80098b0:	20001028 	.word	0x20001028

080098b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <vTaskInternalSetTimeOutState+0x24>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <vTaskInternalSetTimeOutState+0x28>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	605a      	str	r2, [r3, #4]
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	2000102c 	.word	0x2000102c
 80098dc:	20001018 	.word	0x20001018

080098e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60fb      	str	r3, [r7, #12]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009922:	f000 fb7b 	bl	800a01c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009926:	4b1d      	ldr	r3, [pc, #116]	; (800999c <xTaskCheckForTimeOut+0xbc>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800993e:	d102      	bne.n	8009946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009940:	2300      	movs	r3, #0
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e023      	b.n	800998e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <xTaskCheckForTimeOut+0xc0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d007      	beq.n	8009962 <xTaskCheckForTimeOut+0x82>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e015      	b.n	800998e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	429a      	cmp	r2, r3
 800996a:	d20b      	bcs.n	8009984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff ff9b 	bl	80098b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
 8009982:	e004      	b.n	800998e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800998a:	2301      	movs	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800998e:	f000 fb75 	bl	800a07c <vPortExitCritical>

	return xReturn;
 8009992:	69fb      	ldr	r3, [r7, #28]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20001018 	.word	0x20001018
 80099a0:	2000102c 	.word	0x2000102c

080099a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099a8:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <vTaskMissedYield+0x14>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	601a      	str	r2, [r3, #0]
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20001028 	.word	0x20001028

080099bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099c4:	f000 f852 	bl	8009a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <prvIdleTask+0x28>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d9f9      	bls.n	80099c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <prvIdleTask+0x2c>)
 80099d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099e0:	e7f0      	b.n	80099c4 <prvIdleTask+0x8>
 80099e2:	bf00      	nop
 80099e4:	20000f18 	.word	0x20000f18
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099f2:	2300      	movs	r3, #0
 80099f4:	607b      	str	r3, [r7, #4]
 80099f6:	e00c      	b.n	8009a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a12      	ldr	r2, [pc, #72]	; (8009a4c <prvInitialiseTaskLists+0x60>)
 8009a04:	4413      	add	r3, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fbd4 	bl	80081b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b06      	cmp	r3, #6
 8009a16:	d9ef      	bls.n	80099f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a18:	480d      	ldr	r0, [pc, #52]	; (8009a50 <prvInitialiseTaskLists+0x64>)
 8009a1a:	f7fe fbcb 	bl	80081b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a1e:	480d      	ldr	r0, [pc, #52]	; (8009a54 <prvInitialiseTaskLists+0x68>)
 8009a20:	f7fe fbc8 	bl	80081b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a24:	480c      	ldr	r0, [pc, #48]	; (8009a58 <prvInitialiseTaskLists+0x6c>)
 8009a26:	f7fe fbc5 	bl	80081b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a2a:	480c      	ldr	r0, [pc, #48]	; (8009a5c <prvInitialiseTaskLists+0x70>)
 8009a2c:	f7fe fbc2 	bl	80081b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a30:	480b      	ldr	r0, [pc, #44]	; (8009a60 <prvInitialiseTaskLists+0x74>)
 8009a32:	f7fe fbbf 	bl	80081b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a36:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <prvInitialiseTaskLists+0x78>)
 8009a38:	4a05      	ldr	r2, [pc, #20]	; (8009a50 <prvInitialiseTaskLists+0x64>)
 8009a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <prvInitialiseTaskLists+0x7c>)
 8009a3e:	4a05      	ldr	r2, [pc, #20]	; (8009a54 <prvInitialiseTaskLists+0x68>)
 8009a40:	601a      	str	r2, [r3, #0]
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000f18 	.word	0x20000f18
 8009a50:	20000fa4 	.word	0x20000fa4
 8009a54:	20000fb8 	.word	0x20000fb8
 8009a58:	20000fd4 	.word	0x20000fd4
 8009a5c:	20000fe8 	.word	0x20000fe8
 8009a60:	20001000 	.word	0x20001000
 8009a64:	20000fcc 	.word	0x20000fcc
 8009a68:	20000fd0 	.word	0x20000fd0

08009a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a72:	e019      	b.n	8009aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a74:	f000 fad2 	bl	800a01c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	4b10      	ldr	r3, [pc, #64]	; (8009abc <prvCheckTasksWaitingTermination+0x50>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fc1f 	bl	80082c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <prvCheckTasksWaitingTermination+0x54>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <prvCheckTasksWaitingTermination+0x54>)
 8009a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a9e:	f000 faed 	bl	800a07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f810 	bl	8009ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aa8:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e1      	bne.n	8009a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000fe8 	.word	0x20000fe8
 8009ac0:	20001014 	.word	0x20001014
 8009ac4:	20000ffc 	.word	0x20000ffc

08009ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3350      	adds	r3, #80	; 0x50
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fe03 	bl	800a6e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d108      	bne.n	8009af6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fc81 	bl	800a3f0 <vPortFree>
				vPortFree( pxTCB );
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fc7e 	bl	800a3f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009af4:	e018      	b.n	8009b28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d103      	bne.n	8009b08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc75 	bl	800a3f0 <vPortFree>
	}
 8009b06:	e00f      	b.n	8009b28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d00a      	beq.n	8009b28 <prvDeleteTCB+0x60>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60fb      	str	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <prvDeleteTCB+0x5e>
	}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvResetNextTaskUnblockTime+0x38>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d104      	bne.n	8009b4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b40:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <prvResetNextTaskUnblockTime+0x3c>)
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b48:	e008      	b.n	8009b5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <prvResetNextTaskUnblockTime+0x38>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <prvResetNextTaskUnblockTime+0x3c>)
 8009b5a:	6013      	str	r3, [r2, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	20000fcc 	.word	0x20000fcc
 8009b6c:	20001034 	.word	0x20001034

08009b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <xTaskGetSchedulerState+0x34>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	607b      	str	r3, [r7, #4]
 8009b82:	e008      	b.n	8009b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b84:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <xTaskGetSchedulerState+0x38>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	607b      	str	r3, [r7, #4]
 8009b90:	e001      	b.n	8009b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b92:	2300      	movs	r3, #0
 8009b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b96:	687b      	ldr	r3, [r7, #4]
	}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	20001020 	.word	0x20001020
 8009ba8:	2000103c 	.word	0x2000103c

08009bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d06e      	beq.n	8009ca0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bc2:	4b3a      	ldr	r3, [pc, #232]	; (8009cac <xTaskPriorityDisinherit+0x100>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d00a      	beq.n	8009be2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	60fb      	str	r3, [r7, #12]
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	60bb      	str	r3, [r7, #8]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c04:	1e5a      	subs	r2, r3, #1
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d044      	beq.n	8009ca0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d140      	bne.n	8009ca0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	3304      	adds	r3, #4
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fb50 	bl	80082c8 <uxListRemove>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d115      	bne.n	8009c5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	491f      	ldr	r1, [pc, #124]	; (8009cb0 <xTaskPriorityDisinherit+0x104>)
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xTaskPriorityDisinherit+0xae>
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	2201      	movs	r2, #1
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	43da      	mvns	r2, r3
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <xTaskPriorityDisinherit+0x108>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4013      	ands	r3, r2
 8009c56:	4a17      	ldr	r2, [pc, #92]	; (8009cb4 <xTaskPriorityDisinherit+0x108>)
 8009c58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	f1c3 0207 	rsb	r2, r3, #7
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c72:	2201      	movs	r2, #1
 8009c74:	409a      	lsls	r2, r3
 8009c76:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <xTaskPriorityDisinherit+0x108>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	4a0d      	ldr	r2, [pc, #52]	; (8009cb4 <xTaskPriorityDisinherit+0x108>)
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4a08      	ldr	r2, [pc, #32]	; (8009cb0 <xTaskPriorityDisinherit+0x104>)
 8009c8e:	441a      	add	r2, r3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f7fe fab9 	bl	800820e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ca0:	697b      	ldr	r3, [r7, #20]
	}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20000f14 	.word	0x20000f14
 8009cb0:	20000f18 	.word	0x20000f18
 8009cb4:	2000101c 	.word	0x2000101c

08009cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cc2:	4b29      	ldr	r3, [pc, #164]	; (8009d68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cc8:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fafa 	bl	80082c8 <uxListRemove>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009cda:	4b24      	ldr	r3, [pc, #144]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	43da      	mvns	r2, r3
 8009ce8:	4b21      	ldr	r3, [pc, #132]	; (8009d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4013      	ands	r3, r2
 8009cee:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cf0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf8:	d10a      	bne.n	8009d10 <prvAddCurrentTaskToDelayedList+0x58>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d007      	beq.n	8009d10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d00:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4619      	mov	r1, r3
 8009d08:	481a      	ldr	r0, [pc, #104]	; (8009d74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d0a:	f7fe fa80 	bl	800820e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d0e:	e026      	b.n	8009d5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4413      	add	r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d18:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d209      	bcs.n	8009d3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d28:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe fa8e 	bl	8008256 <vListInsert>
}
 8009d3a:	e010      	b.n	8009d5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d3c:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3304      	adds	r3, #4
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f7fe fa84 	bl	8008256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d202      	bcs.n	8009d5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6013      	str	r3, [r2, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20001018 	.word	0x20001018
 8009d6c:	20000f14 	.word	0x20000f14
 8009d70:	2000101c 	.word	0x2000101c
 8009d74:	20001000 	.word	0x20001000
 8009d78:	20000fd0 	.word	0x20000fd0
 8009d7c:	20000fcc 	.word	0x20000fcc
 8009d80:	20001034 	.word	0x20001034

08009d84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3b04      	subs	r3, #4
 8009d94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f023 0201 	bic.w	r2, r3, #1
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3b04      	subs	r3, #4
 8009db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009db4:	4a0c      	ldr	r2, [pc, #48]	; (8009de8 <pxPortInitialiseStack+0x64>)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3b14      	subs	r3, #20
 8009dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f06f 0202 	mvn.w	r2, #2
 8009dd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3b20      	subs	r3, #32
 8009dd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	08009ded 	.word	0x08009ded

08009dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009df6:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <prvTaskExitError+0x54>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfe:	d00a      	beq.n	8009e16 <prvTaskExitError+0x2a>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60fb      	str	r3, [r7, #12]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <prvTaskExitError+0x28>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	60bb      	str	r3, [r7, #8]
}
 8009e28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e2a:	bf00      	nop
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0fc      	beq.n	8009e2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	2000000c 	.word	0x2000000c
	...

08009e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <pxCurrentTCBConst2>)
 8009e52:	6819      	ldr	r1, [r3, #0]
 8009e54:	6808      	ldr	r0, [r1, #0]
 8009e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f380 8809 	msr	PSP, r0
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8811 	msr	BASEPRI, r0
 8009e6a:	4770      	bx	lr
 8009e6c:	f3af 8000 	nop.w

08009e70 <pxCurrentTCBConst2>:
 8009e70:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop

08009e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e78:	4808      	ldr	r0, [pc, #32]	; (8009e9c <prvPortStartFirstTask+0x24>)
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	6800      	ldr	r0, [r0, #0]
 8009e7e:	f380 8808 	msr	MSP, r0
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8814 	msr	CONTROL, r0
 8009e8a:	b662      	cpsie	i
 8009e8c:	b661      	cpsie	f
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	df00      	svc	0
 8009e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e9a:	bf00      	nop
 8009e9c:	e000ed08 	.word	0xe000ed08

08009ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ea6:	4b46      	ldr	r3, [pc, #280]	; (8009fc0 <xPortStartScheduler+0x120>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a46      	ldr	r2, [pc, #280]	; (8009fc4 <xPortStartScheduler+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d10a      	bne.n	8009ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	613b      	str	r3, [r7, #16]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ec6:	4b3e      	ldr	r3, [pc, #248]	; (8009fc0 <xPortStartScheduler+0x120>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a3f      	ldr	r2, [pc, #252]	; (8009fc8 <xPortStartScheduler+0x128>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d10a      	bne.n	8009ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <xPortStartScheduler+0x12c>)
 8009ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	22ff      	movs	r2, #255	; 0xff
 8009ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <xPortStartScheduler+0x130>)
 8009f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f0e:	4b31      	ldr	r3, [pc, #196]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f10:	2207      	movs	r2, #7
 8009f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f14:	e009      	b.n	8009f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009f16:	4b2f      	ldr	r3, [pc, #188]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	4a2d      	ldr	r2, [pc, #180]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f32:	2b80      	cmp	r3, #128	; 0x80
 8009f34:	d0ef      	beq.n	8009f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f36:	4b27      	ldr	r3, [pc, #156]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f1c3 0307 	rsb	r3, r3, #7
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d00a      	beq.n	8009f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60bb      	str	r3, [r7, #8]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f58:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	4a1d      	ldr	r2, [pc, #116]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f6a:	4a1a      	ldr	r2, [pc, #104]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f76:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a17      	ldr	r2, [pc, #92]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f8e:	f000 f8f5 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <xPortStartScheduler+0x13c>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f98:	f000 f914 	bl	800a1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f9c:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <xPortStartScheduler+0x140>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0f      	ldr	r2, [pc, #60]	; (8009fe0 <xPortStartScheduler+0x140>)
 8009fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fa8:	f7ff ff66 	bl	8009e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fac:	f7ff fb9a 	bl	80096e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009fb0:	f7ff ff1c 	bl	8009dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	e000ed00 	.word	0xe000ed00
 8009fc4:	410fc271 	.word	0x410fc271
 8009fc8:	410fc270 	.word	0x410fc270
 8009fcc:	e000e400 	.word	0xe000e400
 8009fd0:	20001040 	.word	0x20001040
 8009fd4:	20001044 	.word	0x20001044
 8009fd8:	e000ed20 	.word	0xe000ed20
 8009fdc:	2000000c 	.word	0x2000000c
 8009fe0:	e000ef34 	.word	0xe000ef34

08009fe4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8009fea:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <vPortEndScheduler+0x34>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ff2:	d00a      	beq.n	800a00a <vPortEndScheduler+0x26>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	607b      	str	r3, [r7, #4]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <vPortEndScheduler+0x24>
}
 800a00a:	bf00      	nop
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	2000000c 	.word	0x2000000c

0800a01c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	607b      	str	r3, [r7, #4]
}
 800a034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a036:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <vPortEnterCritical+0x58>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	4a0d      	ldr	r2, [pc, #52]	; (800a074 <vPortEnterCritical+0x58>)
 800a03e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a040:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <vPortEnterCritical+0x58>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d10f      	bne.n	800a068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <vPortEnterCritical+0x5c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <vPortEnterCritical+0x4c>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	603b      	str	r3, [r7, #0]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <vPortEnterCritical+0x4a>
	}
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	2000000c 	.word	0x2000000c
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a082:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <vPortExitCritical+0x50>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <vPortExitCritical+0x24>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	607b      	str	r3, [r7, #4]
}
 800a09c:	bf00      	nop
 800a09e:	e7fe      	b.n	800a09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <vPortExitCritical+0x50>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	4a09      	ldr	r2, [pc, #36]	; (800a0cc <vPortExitCritical+0x50>)
 800a0a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0aa:	4b08      	ldr	r3, [pc, #32]	; (800a0cc <vPortExitCritical+0x50>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d105      	bne.n	800a0be <vPortExitCritical+0x42>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	f383 8811 	msr	BASEPRI, r3
}
 800a0bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	2000000c 	.word	0x2000000c

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7ff faf0 	bl	80096e4 <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7ff fa0f 	bl	8009574 <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <SysTick_Handler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0a      	ldr	r2, [pc, #40]	; (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <vPortSetupTimerInterrupt+0x44>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010
 800a1b4:	e000e018 	.word	0xe000e018
 800a1b8:	20000000 	.word	0x20000000
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	e000e014 	.word	0xe000e014

0800a1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a1d4 <vPortEnableVFP+0x10>
 800a1c8:	6801      	ldr	r1, [r0, #0]
 800a1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a1ce:	6001      	str	r1, [r0, #0]
 800a1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed88 	.word	0xe000ed88

0800a1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1de:	f3ef 8305 	mrs	r3, IPSR
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d914      	bls.n	800a214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ea:	4a17      	ldr	r2, [pc, #92]	; (800a248 <vPortValidateInterruptPriority+0x70>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1f4:	4b15      	ldr	r3, [pc, #84]	; (800a24c <vPortValidateInterruptPriority+0x74>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	7afa      	ldrb	r2, [r7, #11]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d20a      	bcs.n	800a214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <vPortValidateInterruptPriority+0x78>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a21c:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <vPortValidateInterruptPriority+0x7c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d90a      	bls.n	800a23a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	603b      	str	r3, [r7, #0]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <vPortValidateInterruptPriority+0x60>
	}
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	e000e3f0 	.word	0xe000e3f0
 800a24c:	20001040 	.word	0x20001040
 800a250:	e000ed0c 	.word	0xe000ed0c
 800a254:	20001044 	.word	0x20001044

0800a258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	; 0x28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a264:	f7ff f8ba 	bl	80093dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a268:	4b5b      	ldr	r3, [pc, #364]	; (800a3d8 <pvPortMalloc+0x180>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a270:	f000 f920 	bl	800a4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a274:	4b59      	ldr	r3, [pc, #356]	; (800a3dc <pvPortMalloc+0x184>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4013      	ands	r3, r2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f040 8093 	bne.w	800a3a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01d      	beq.n	800a2c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a288:	2208      	movs	r2, #8
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b00      	cmp	r3, #0
 800a298:	d014      	beq.n	800a2c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f023 0307 	bic.w	r3, r3, #7
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00a      	beq.n	800a2c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	617b      	str	r3, [r7, #20]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d06e      	beq.n	800a3a8 <pvPortMalloc+0x150>
 800a2ca:	4b45      	ldr	r3, [pc, #276]	; (800a3e0 <pvPortMalloc+0x188>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d869      	bhi.n	800a3a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2d4:	4b43      	ldr	r3, [pc, #268]	; (800a3e4 <pvPortMalloc+0x18c>)
 800a2d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2d8:	4b42      	ldr	r3, [pc, #264]	; (800a3e4 <pvPortMalloc+0x18c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2de:	e004      	b.n	800a2ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d903      	bls.n	800a2fc <pvPortMalloc+0xa4>
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f1      	bne.n	800a2e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2fc:	4b36      	ldr	r3, [pc, #216]	; (800a3d8 <pvPortMalloc+0x180>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a302:	429a      	cmp	r2, r3
 800a304:	d050      	beq.n	800a3a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2208      	movs	r2, #8
 800a30c:	4413      	add	r3, r2
 800a30e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	2308      	movs	r3, #8
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	429a      	cmp	r2, r3
 800a326:	d91f      	bls.n	800a368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4413      	add	r3, r2
 800a32e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <pvPortMalloc+0xf8>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	613b      	str	r3, [r7, #16]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a362:	69b8      	ldr	r0, [r7, #24]
 800a364:	f000 f908 	bl	800a578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a368:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <pvPortMalloc+0x188>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	4a1b      	ldr	r2, [pc, #108]	; (800a3e0 <pvPortMalloc+0x188>)
 800a374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a376:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <pvPortMalloc+0x188>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <pvPortMalloc+0x190>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d203      	bcs.n	800a38a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a382:	4b17      	ldr	r3, [pc, #92]	; (800a3e0 <pvPortMalloc+0x188>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a18      	ldr	r2, [pc, #96]	; (800a3e8 <pvPortMalloc+0x190>)
 800a388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <pvPortMalloc+0x184>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	431a      	orrs	r2, r3
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <pvPortMalloc+0x194>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	4a11      	ldr	r2, [pc, #68]	; (800a3ec <pvPortMalloc+0x194>)
 800a3a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3a8:	f7ff f826 	bl	80093f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <pvPortMalloc+0x174>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60fb      	str	r3, [r7, #12]
}
 800a3c8:	bf00      	nop
 800a3ca:	e7fe      	b.n	800a3ca <pvPortMalloc+0x172>
	return pvReturn;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20009050 	.word	0x20009050
 800a3dc:	20009064 	.word	0x20009064
 800a3e0:	20009054 	.word	0x20009054
 800a3e4:	20009048 	.word	0x20009048
 800a3e8:	20009058 	.word	0x20009058
 800a3ec:	2000905c 	.word	0x2000905c

0800a3f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d04d      	beq.n	800a49e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a402:	2308      	movs	r3, #8
 800a404:	425b      	negs	r3, r3
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	4413      	add	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	4b24      	ldr	r3, [pc, #144]	; (800a4a8 <vPortFree+0xb8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4013      	ands	r3, r2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <vPortFree+0x44>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <vPortFree+0x62>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	60bb      	str	r3, [r7, #8]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	4b14      	ldr	r3, [pc, #80]	; (800a4a8 <vPortFree+0xb8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4013      	ands	r3, r2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01e      	beq.n	800a49e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d11a      	bne.n	800a49e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <vPortFree+0xb8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	43db      	mvns	r3, r3
 800a472:	401a      	ands	r2, r3
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a478:	f7fe ffb0 	bl	80093dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <vPortFree+0xbc>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4413      	add	r3, r2
 800a486:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <vPortFree+0xbc>)
 800a488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a48a:	6938      	ldr	r0, [r7, #16]
 800a48c:	f000 f874 	bl	800a578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a490:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <vPortFree+0xc0>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	4a06      	ldr	r2, [pc, #24]	; (800a4b0 <vPortFree+0xc0>)
 800a498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a49a:	f7fe ffad 	bl	80093f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a49e:	bf00      	nop
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20009064 	.word	0x20009064
 800a4ac:	20009054 	.word	0x20009054
 800a4b0:	20009060 	.word	0x20009060

0800a4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4c0:	4b27      	ldr	r3, [pc, #156]	; (800a560 <prvHeapInit+0xac>)
 800a4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00c      	beq.n	800a4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3307      	adds	r3, #7
 800a4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	4a1f      	ldr	r2, [pc, #124]	; (800a560 <prvHeapInit+0xac>)
 800a4e4:	4413      	add	r3, r2
 800a4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	; (800a564 <prvHeapInit+0xb0>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <prvHeapInit+0xb0>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a500:	2208      	movs	r2, #8
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f023 0307 	bic.w	r3, r3, #7
 800a50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4a15      	ldr	r2, [pc, #84]	; (800a568 <prvHeapInit+0xb4>)
 800a514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a516:	4b14      	ldr	r3, [pc, #80]	; (800a568 <prvHeapInit+0xb4>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a51e:	4b12      	ldr	r3, [pc, #72]	; (800a568 <prvHeapInit+0xb4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a534:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <prvHeapInit+0xb4>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <prvHeapInit+0xb8>)
 800a542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	4a09      	ldr	r2, [pc, #36]	; (800a570 <prvHeapInit+0xbc>)
 800a54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a54c:	4b09      	ldr	r3, [pc, #36]	; (800a574 <prvHeapInit+0xc0>)
 800a54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a552:	601a      	str	r2, [r3, #0]
}
 800a554:	bf00      	nop
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20001048 	.word	0x20001048
 800a564:	20009048 	.word	0x20009048
 800a568:	20009050 	.word	0x20009050
 800a56c:	20009058 	.word	0x20009058
 800a570:	20009054 	.word	0x20009054
 800a574:	20009064 	.word	0x20009064

0800a578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a580:	4b28      	ldr	r3, [pc, #160]	; (800a624 <prvInsertBlockIntoFreeList+0xac>)
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e002      	b.n	800a58c <prvInsertBlockIntoFreeList+0x14>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d8f7      	bhi.n	800a586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d108      	bne.n	800a5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	441a      	add	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d118      	bne.n	800a600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b15      	ldr	r3, [pc, #84]	; (800a628 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d00d      	beq.n	800a5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	441a      	add	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	e008      	b.n	800a608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <prvInsertBlockIntoFreeList+0xb0>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e003      	b.n	800a608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d002      	beq.n	800a616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20009048 	.word	0x20009048
 800a628:	20009050 	.word	0x20009050

0800a62c <__errno>:
 800a62c:	4b01      	ldr	r3, [pc, #4]	; (800a634 <__errno+0x8>)
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000010 	.word	0x20000010

0800a638 <__libc_init_array>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	4d0d      	ldr	r5, [pc, #52]	; (800a670 <__libc_init_array+0x38>)
 800a63c:	4c0d      	ldr	r4, [pc, #52]	; (800a674 <__libc_init_array+0x3c>)
 800a63e:	1b64      	subs	r4, r4, r5
 800a640:	10a4      	asrs	r4, r4, #2
 800a642:	2600      	movs	r6, #0
 800a644:	42a6      	cmp	r6, r4
 800a646:	d109      	bne.n	800a65c <__libc_init_array+0x24>
 800a648:	4d0b      	ldr	r5, [pc, #44]	; (800a678 <__libc_init_array+0x40>)
 800a64a:	4c0c      	ldr	r4, [pc, #48]	; (800a67c <__libc_init_array+0x44>)
 800a64c:	f000 fa22 	bl	800aa94 <_init>
 800a650:	1b64      	subs	r4, r4, r5
 800a652:	10a4      	asrs	r4, r4, #2
 800a654:	2600      	movs	r6, #0
 800a656:	42a6      	cmp	r6, r4
 800a658:	d105      	bne.n	800a666 <__libc_init_array+0x2e>
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a660:	4798      	blx	r3
 800a662:	3601      	adds	r6, #1
 800a664:	e7ee      	b.n	800a644 <__libc_init_array+0xc>
 800a666:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66a:	4798      	blx	r3
 800a66c:	3601      	adds	r6, #1
 800a66e:	e7f2      	b.n	800a656 <__libc_init_array+0x1e>
 800a670:	0800ae28 	.word	0x0800ae28
 800a674:	0800ae28 	.word	0x0800ae28
 800a678:	0800ae28 	.word	0x0800ae28
 800a67c:	0800ae30 	.word	0x0800ae30

0800a680 <memcpy>:
 800a680:	440a      	add	r2, r1
 800a682:	4291      	cmp	r1, r2
 800a684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a688:	d100      	bne.n	800a68c <memcpy+0xc>
 800a68a:	4770      	bx	lr
 800a68c:	b510      	push	{r4, lr}
 800a68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a696:	4291      	cmp	r1, r2
 800a698:	d1f9      	bne.n	800a68e <memcpy+0xe>
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <memset>:
 800a69c:	4402      	add	r2, r0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d100      	bne.n	800a6a6 <memset+0xa>
 800a6a4:	4770      	bx	lr
 800a6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6aa:	e7f9      	b.n	800a6a0 <memset+0x4>

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f7f7 b83c 	b.w	800172a <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	20000f00 	.word	0x20000f00

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f7f7 b84a 	b.w	8001752 <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000f00 	.word	0x20000f00

0800a6c4 <cleanup_glue>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	6809      	ldr	r1, [r1, #0]
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	b109      	cbz	r1, 800a6d2 <cleanup_glue+0xe>
 800a6ce:	f7ff fff9 	bl	800a6c4 <cleanup_glue>
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6da:	f000 b8db 	b.w	800a894 <_free_r>
	...

0800a6e0 <_reclaim_reent>:
 800a6e0:	4b20      	ldr	r3, [pc, #128]	; (800a764 <_reclaim_reent+0x84>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4283      	cmp	r3, r0
 800a6e6:	b570      	push	{r4, r5, r6, lr}
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	d039      	beq.n	800a760 <_reclaim_reent+0x80>
 800a6ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a6ee:	bb33      	cbnz	r3, 800a73e <_reclaim_reent+0x5e>
 800a6f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a6f2:	b111      	cbz	r1, 800a6fa <_reclaim_reent+0x1a>
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f000 f8cd 	bl	800a894 <_free_r>
 800a6fa:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
 800a6fe:	bb05      	cbnz	r5, 800a742 <_reclaim_reent+0x62>
 800a700:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a702:	bb49      	cbnz	r1, 800a758 <_reclaim_reent+0x78>
 800a704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a706:	b35b      	cbz	r3, 800a760 <_reclaim_reent+0x80>
 800a708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a70a:	4620      	mov	r0, r4
 800a70c:	4798      	blx	r3
 800a70e:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 800a712:	b329      	cbz	r1, 800a760 <_reclaim_reent+0x80>
 800a714:	4620      	mov	r0, r4
 800a716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a71a:	f7ff bfd3 	b.w	800a6c4 <cleanup_glue>
 800a71e:	5949      	ldr	r1, [r1, r5]
 800a720:	b939      	cbnz	r1, 800a732 <_reclaim_reent+0x52>
 800a722:	3504      	adds	r5, #4
 800a724:	2d80      	cmp	r5, #128	; 0x80
 800a726:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a728:	d1f9      	bne.n	800a71e <_reclaim_reent+0x3e>
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f8b2 	bl	800a894 <_free_r>
 800a730:	e7de      	b.n	800a6f0 <_reclaim_reent+0x10>
 800a732:	680e      	ldr	r6, [r1, #0]
 800a734:	4620      	mov	r0, r4
 800a736:	f000 f8ad 	bl	800a894 <_free_r>
 800a73a:	4631      	mov	r1, r6
 800a73c:	e7f0      	b.n	800a720 <_reclaim_reent+0x40>
 800a73e:	2500      	movs	r5, #0
 800a740:	e7f0      	b.n	800a724 <_reclaim_reent+0x44>
 800a742:	f504 76a6 	add.w	r6, r4, #332	; 0x14c
 800a746:	42b5      	cmp	r5, r6
 800a748:	d0da      	beq.n	800a700 <_reclaim_reent+0x20>
 800a74a:	4629      	mov	r1, r5
 800a74c:	682d      	ldr	r5, [r5, #0]
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 f8a0 	bl	800a894 <_free_r>
 800a754:	42ae      	cmp	r6, r5
 800a756:	e7f7      	b.n	800a748 <_reclaim_reent+0x68>
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 f89b 	bl	800a894 <_free_r>
 800a75e:	e7d1      	b.n	800a704 <_reclaim_reent+0x24>
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	bf00      	nop
 800a764:	20000010 	.word	0x20000010

0800a768 <_sbrk_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d06      	ldr	r5, [pc, #24]	; (800a784 <_sbrk_r+0x1c>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	f7f6 ff2e 	bl	80015d4 <_sbrk>
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	d102      	bne.n	800a782 <_sbrk_r+0x1a>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	b103      	cbz	r3, 800a782 <_sbrk_r+0x1a>
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bd38      	pop	{r3, r4, r5, pc}
 800a784:	20009850 	.word	0x20009850

0800a788 <sysconf>:
 800a788:	2808      	cmp	r0, #8
 800a78a:	b508      	push	{r3, lr}
 800a78c:	d006      	beq.n	800a79c <sysconf+0x14>
 800a78e:	f7ff ff4d 	bl	800a62c <__errno>
 800a792:	2316      	movs	r3, #22
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a79a:	bd08      	pop	{r3, pc}
 800a79c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a7a0:	e7fb      	b.n	800a79a <sysconf+0x12>
	...

0800a7a4 <register_fini>:
 800a7a4:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <register_fini+0xc>)
 800a7a6:	b113      	cbz	r3, 800a7ae <register_fini+0xa>
 800a7a8:	4802      	ldr	r0, [pc, #8]	; (800a7b4 <register_fini+0x10>)
 800a7aa:	f000 b805 	b.w	800a7b8 <atexit>
 800a7ae:	4770      	bx	lr
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	0800a7c5 	.word	0x0800a7c5

0800a7b8 <atexit>:
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 b928 	b.w	800aa14 <__register_exitproc>

0800a7c4 <__libc_fini_array>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d07      	ldr	r5, [pc, #28]	; (800a7e4 <__libc_fini_array+0x20>)
 800a7c8:	4c07      	ldr	r4, [pc, #28]	; (800a7e8 <__libc_fini_array+0x24>)
 800a7ca:	1b64      	subs	r4, r4, r5
 800a7cc:	10a4      	asrs	r4, r4, #2
 800a7ce:	b91c      	cbnz	r4, 800a7d8 <__libc_fini_array+0x14>
 800a7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7d4:	f000 b964 	b.w	800aaa0 <_fini>
 800a7d8:	3c01      	subs	r4, #1
 800a7da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a7de:	4798      	blx	r3
 800a7e0:	e7f5      	b.n	800a7ce <__libc_fini_array+0xa>
 800a7e2:	bf00      	nop
 800a7e4:	0800ae30 	.word	0x0800ae30
 800a7e8:	0800ae34 	.word	0x0800ae34

0800a7ec <_malloc_trim_r>:
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	2008      	movs	r0, #8
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	f7ff ffc7 	bl	800a788 <sysconf>
 800a7fa:	4f23      	ldr	r7, [pc, #140]	; (800a888 <_malloc_trim_r+0x9c>)
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ff54 	bl	800a6ac <__malloc_lock>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	685d      	ldr	r5, [r3, #4]
 800a808:	f025 0503 	bic.w	r5, r5, #3
 800a80c:	1b2c      	subs	r4, r5, r4
 800a80e:	3c11      	subs	r4, #17
 800a810:	4444      	add	r4, r8
 800a812:	fbb4 f4f8 	udiv	r4, r4, r8
 800a816:	3c01      	subs	r4, #1
 800a818:	fb08 f404 	mul.w	r4, r8, r4
 800a81c:	45a0      	cmp	r8, r4
 800a81e:	dd05      	ble.n	800a82c <_malloc_trim_r+0x40>
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ff49 	bl	800a6b8 <__malloc_unlock>
 800a826:	2000      	movs	r0, #0
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	2100      	movs	r1, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff9a 	bl	800a768 <_sbrk_r>
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	442b      	add	r3, r5
 800a838:	4298      	cmp	r0, r3
 800a83a:	d1f1      	bne.n	800a820 <_malloc_trim_r+0x34>
 800a83c:	4261      	negs	r1, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ff92 	bl	800a768 <_sbrk_r>
 800a844:	3001      	adds	r0, #1
 800a846:	d110      	bne.n	800a86a <_malloc_trim_r+0x7e>
 800a848:	2100      	movs	r1, #0
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7ff ff8c 	bl	800a768 <_sbrk_r>
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	1a83      	subs	r3, r0, r2
 800a854:	2b0f      	cmp	r3, #15
 800a856:	dde3      	ble.n	800a820 <_malloc_trim_r+0x34>
 800a858:	490c      	ldr	r1, [pc, #48]	; (800a88c <_malloc_trim_r+0xa0>)
 800a85a:	6809      	ldr	r1, [r1, #0]
 800a85c:	1a40      	subs	r0, r0, r1
 800a85e:	490c      	ldr	r1, [pc, #48]	; (800a890 <_malloc_trim_r+0xa4>)
 800a860:	f043 0301 	orr.w	r3, r3, #1
 800a864:	6008      	str	r0, [r1, #0]
 800a866:	6053      	str	r3, [r2, #4]
 800a868:	e7da      	b.n	800a820 <_malloc_trim_r+0x34>
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4a08      	ldr	r2, [pc, #32]	; (800a890 <_malloc_trim_r+0xa4>)
 800a86e:	1b2d      	subs	r5, r5, r4
 800a870:	f045 0501 	orr.w	r5, r5, #1
 800a874:	605d      	str	r5, [r3, #4]
 800a876:	6813      	ldr	r3, [r2, #0]
 800a878:	4630      	mov	r0, r6
 800a87a:	1b1c      	subs	r4, r3, r4
 800a87c:	6014      	str	r4, [r2, #0]
 800a87e:	f7ff ff1b 	bl	800a6b8 <__malloc_unlock>
 800a882:	2001      	movs	r0, #1
 800a884:	e7d0      	b.n	800a828 <_malloc_trim_r+0x3c>
 800a886:	bf00      	nop
 800a888:	20000440 	.word	0x20000440
 800a88c:	20000848 	.word	0x20000848
 800a890:	20009068 	.word	0x20009068

0800a894 <_free_r>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	4605      	mov	r5, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	2900      	cmp	r1, #0
 800a89c:	f000 80b1 	beq.w	800aa02 <_free_r+0x16e>
 800a8a0:	f7ff ff04 	bl	800a6ac <__malloc_lock>
 800a8a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a8a8:	4856      	ldr	r0, [pc, #344]	; (800aa04 <_free_r+0x170>)
 800a8aa:	f022 0401 	bic.w	r4, r2, #1
 800a8ae:	f1a7 0308 	sub.w	r3, r7, #8
 800a8b2:	eb03 0c04 	add.w	ip, r3, r4
 800a8b6:	6881      	ldr	r1, [r0, #8]
 800a8b8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a8bc:	4561      	cmp	r1, ip
 800a8be:	f026 0603 	bic.w	r6, r6, #3
 800a8c2:	f002 0201 	and.w	r2, r2, #1
 800a8c6:	d11b      	bne.n	800a900 <_free_r+0x6c>
 800a8c8:	4434      	add	r4, r6
 800a8ca:	b93a      	cbnz	r2, 800a8dc <_free_r+0x48>
 800a8cc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a8d0:	1a9b      	subs	r3, r3, r2
 800a8d2:	4414      	add	r4, r2
 800a8d4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a8d8:	60ca      	str	r2, [r1, #12]
 800a8da:	6091      	str	r1, [r2, #8]
 800a8dc:	f044 0201 	orr.w	r2, r4, #1
 800a8e0:	605a      	str	r2, [r3, #4]
 800a8e2:	6083      	str	r3, [r0, #8]
 800a8e4:	4b48      	ldr	r3, [pc, #288]	; (800aa08 <_free_r+0x174>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	d804      	bhi.n	800a8f6 <_free_r+0x62>
 800a8ec:	4b47      	ldr	r3, [pc, #284]	; (800aa0c <_free_r+0x178>)
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	6819      	ldr	r1, [r3, #0]
 800a8f2:	f7ff ff7b 	bl	800a7ec <_malloc_trim_r>
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8fc:	f7ff bedc 	b.w	800a6b8 <__malloc_unlock>
 800a900:	f8cc 6004 	str.w	r6, [ip, #4]
 800a904:	2a00      	cmp	r2, #0
 800a906:	d138      	bne.n	800a97a <_free_r+0xe6>
 800a908:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a90c:	1a5b      	subs	r3, r3, r1
 800a90e:	440c      	add	r4, r1
 800a910:	6899      	ldr	r1, [r3, #8]
 800a912:	f100 0708 	add.w	r7, r0, #8
 800a916:	42b9      	cmp	r1, r7
 800a918:	d031      	beq.n	800a97e <_free_r+0xea>
 800a91a:	68df      	ldr	r7, [r3, #12]
 800a91c:	60cf      	str	r7, [r1, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	eb0c 0106 	add.w	r1, ip, r6
 800a924:	6849      	ldr	r1, [r1, #4]
 800a926:	07c9      	lsls	r1, r1, #31
 800a928:	d40b      	bmi.n	800a942 <_free_r+0xae>
 800a92a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a92e:	4434      	add	r4, r6
 800a930:	bb3a      	cbnz	r2, 800a982 <_free_r+0xee>
 800a932:	4e37      	ldr	r6, [pc, #220]	; (800aa10 <_free_r+0x17c>)
 800a934:	42b1      	cmp	r1, r6
 800a936:	d124      	bne.n	800a982 <_free_r+0xee>
 800a938:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a93c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a940:	2201      	movs	r2, #1
 800a942:	f044 0101 	orr.w	r1, r4, #1
 800a946:	6059      	str	r1, [r3, #4]
 800a948:	511c      	str	r4, [r3, r4]
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d1d3      	bne.n	800a8f6 <_free_r+0x62>
 800a94e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a952:	d21b      	bcs.n	800a98c <_free_r+0xf8>
 800a954:	0961      	lsrs	r1, r4, #5
 800a956:	08e2      	lsrs	r2, r4, #3
 800a958:	2401      	movs	r4, #1
 800a95a:	408c      	lsls	r4, r1
 800a95c:	6841      	ldr	r1, [r0, #4]
 800a95e:	3201      	adds	r2, #1
 800a960:	430c      	orrs	r4, r1
 800a962:	6044      	str	r4, [r0, #4]
 800a964:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a968:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a96c:	3908      	subs	r1, #8
 800a96e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a972:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a976:	60e3      	str	r3, [r4, #12]
 800a978:	e7bd      	b.n	800a8f6 <_free_r+0x62>
 800a97a:	2200      	movs	r2, #0
 800a97c:	e7d0      	b.n	800a920 <_free_r+0x8c>
 800a97e:	2201      	movs	r2, #1
 800a980:	e7ce      	b.n	800a920 <_free_r+0x8c>
 800a982:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a986:	60ce      	str	r6, [r1, #12]
 800a988:	60b1      	str	r1, [r6, #8]
 800a98a:	e7da      	b.n	800a942 <_free_r+0xae>
 800a98c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a990:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a994:	d214      	bcs.n	800a9c0 <_free_r+0x12c>
 800a996:	09a2      	lsrs	r2, r4, #6
 800a998:	3238      	adds	r2, #56	; 0x38
 800a99a:	1c51      	adds	r1, r2, #1
 800a99c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a9a0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a9a4:	428e      	cmp	r6, r1
 800a9a6:	d125      	bne.n	800a9f4 <_free_r+0x160>
 800a9a8:	2401      	movs	r4, #1
 800a9aa:	1092      	asrs	r2, r2, #2
 800a9ac:	fa04 f202 	lsl.w	r2, r4, r2
 800a9b0:	6844      	ldr	r4, [r0, #4]
 800a9b2:	4322      	orrs	r2, r4
 800a9b4:	6042      	str	r2, [r0, #4]
 800a9b6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a9ba:	60b3      	str	r3, [r6, #8]
 800a9bc:	60cb      	str	r3, [r1, #12]
 800a9be:	e79a      	b.n	800a8f6 <_free_r+0x62>
 800a9c0:	2a14      	cmp	r2, #20
 800a9c2:	d801      	bhi.n	800a9c8 <_free_r+0x134>
 800a9c4:	325b      	adds	r2, #91	; 0x5b
 800a9c6:	e7e8      	b.n	800a99a <_free_r+0x106>
 800a9c8:	2a54      	cmp	r2, #84	; 0x54
 800a9ca:	d802      	bhi.n	800a9d2 <_free_r+0x13e>
 800a9cc:	0b22      	lsrs	r2, r4, #12
 800a9ce:	326e      	adds	r2, #110	; 0x6e
 800a9d0:	e7e3      	b.n	800a99a <_free_r+0x106>
 800a9d2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a9d6:	d802      	bhi.n	800a9de <_free_r+0x14a>
 800a9d8:	0be2      	lsrs	r2, r4, #15
 800a9da:	3277      	adds	r2, #119	; 0x77
 800a9dc:	e7dd      	b.n	800a99a <_free_r+0x106>
 800a9de:	f240 5154 	movw	r1, #1364	; 0x554
 800a9e2:	428a      	cmp	r2, r1
 800a9e4:	bf9a      	itte	ls
 800a9e6:	0ca2      	lsrls	r2, r4, #18
 800a9e8:	327c      	addls	r2, #124	; 0x7c
 800a9ea:	227e      	movhi	r2, #126	; 0x7e
 800a9ec:	e7d5      	b.n	800a99a <_free_r+0x106>
 800a9ee:	6889      	ldr	r1, [r1, #8]
 800a9f0:	428e      	cmp	r6, r1
 800a9f2:	d004      	beq.n	800a9fe <_free_r+0x16a>
 800a9f4:	684a      	ldr	r2, [r1, #4]
 800a9f6:	f022 0203 	bic.w	r2, r2, #3
 800a9fa:	42a2      	cmp	r2, r4
 800a9fc:	d8f7      	bhi.n	800a9ee <_free_r+0x15a>
 800a9fe:	68ce      	ldr	r6, [r1, #12]
 800aa00:	e7d9      	b.n	800a9b6 <_free_r+0x122>
 800aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa04:	20000440 	.word	0x20000440
 800aa08:	2000084c 	.word	0x2000084c
 800aa0c:	20009090 	.word	0x20009090
 800aa10:	20000448 	.word	0x20000448

0800aa14 <__register_exitproc>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4d1c      	ldr	r5, [pc, #112]	; (800aa8c <__register_exitproc+0x78>)
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	6828      	ldr	r0, [r5, #0]
 800aa1e:	4698      	mov	r8, r3
 800aa20:	460f      	mov	r7, r1
 800aa22:	4691      	mov	r9, r2
 800aa24:	f7f6 fe81 	bl	800172a <__retarget_lock_acquire_recursive>
 800aa28:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <__register_exitproc+0x7c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800aa30:	4628      	mov	r0, r5
 800aa32:	b91c      	cbnz	r4, 800aa3c <__register_exitproc+0x28>
 800aa34:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800aa38:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800aa3c:	6865      	ldr	r5, [r4, #4]
 800aa3e:	6800      	ldr	r0, [r0, #0]
 800aa40:	2d1f      	cmp	r5, #31
 800aa42:	dd05      	ble.n	800aa50 <__register_exitproc+0x3c>
 800aa44:	f7f6 fe85 	bl	8001752 <__retarget_lock_release_recursive>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa50:	b19e      	cbz	r6, 800aa7a <__register_exitproc+0x66>
 800aa52:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800aa56:	2201      	movs	r2, #1
 800aa58:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800aa5c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800aa60:	40aa      	lsls	r2, r5
 800aa62:	4313      	orrs	r3, r2
 800aa64:	2e02      	cmp	r6, #2
 800aa66:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800aa6a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800aa6e:	bf02      	ittt	eq
 800aa70:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800aa74:	431a      	orreq	r2, r3
 800aa76:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800aa7a:	1c6b      	adds	r3, r5, #1
 800aa7c:	3502      	adds	r5, #2
 800aa7e:	6063      	str	r3, [r4, #4]
 800aa80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800aa84:	f7f6 fe65 	bl	8001752 <__retarget_lock_release_recursive>
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e7df      	b.n	800aa4c <__register_exitproc+0x38>
 800aa8c:	20000850 	.word	0x20000850
 800aa90:	0800ae1c 	.word	0x0800ae1c

0800aa94 <_init>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	bf00      	nop
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr

0800aaa0 <_fini>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	bf00      	nop
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr
