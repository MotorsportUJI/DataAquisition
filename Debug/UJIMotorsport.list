
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb8  08006eb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec0  08006ec0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000788  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016250  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349e  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000397b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023002  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e7a  00000000  00000000  0005e10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88de  00000000  00000000  0006ef84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137862  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c0  00000000  00000000  001378b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e8c 	.word	0x08006e8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006e8c 	.word	0x08006e8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <initializeLEDS+0x30>)
 80004ce:	f000 ffb3 	bl	8001438 <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 80004d2:	2100      	movs	r1, #0
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 fd4c 	bl	8000f72 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 80004da:	2300      	movs	r3, #0
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 fd98 	bl	8001016 <HAL_DAC_SetValue>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020c00 	.word	0x40020c00

080004f4 <setLEDS>:
  *         the configuration information for the specified DAC.
  * @param  n_led The number of leds to turn on (0-10).
  * @retval None
  */

void setLEDS(DAC_HandleTypeDef *hdac, uint32_t n_led){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	if (n_led > 10){
		assert_param(n_led);
	}

	uint32_t output = n_led * (4000/10);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(hdac, LED_DAC, DAC_ALIGN_12B_R, output);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 fd80 	bl	8001016 <HAL_DAC_SetValue>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fb5b 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f831 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8f9 	bl	8000724 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000532:	f000 f8c1 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000536:	f006 f897 	bl	8006668 <MX_USB_HOST_Init>
  MX_DAC_Init();
 800053a:	f000 f893 	bl	8000664 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  initializeLEDS(&hdac);
 800053e:	4811      	ldr	r0, [pc, #68]	; (8000584 <main+0x64>)
 8000540:	f7ff ffbe 	bl	80004c0 <initializeLEDS>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t i = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
  while (1)
  {

	  setLEDS(&hdac,i);
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <main+0x64>)
 800054c:	f7ff ffd2 	bl	80004f4 <setLEDS>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0x68>)
 8000556:	f000 ff88 	bl	800146a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055e:	f000 fbb1 	bl	8000cc4 <HAL_Delay>
	  i=(i+1)%11;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	1c59      	adds	r1, r3, #1
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <main+0x6c>)
 8000568:	fba3 2301 	umull	r2, r3, r3, r1
 800056c:	08da      	lsrs	r2, r3, #3
 800056e:	4613      	mov	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	4413      	add	r3, r2
 8000578:	1acb      	subs	r3, r1, r3
 800057a:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057c:	f006 f89a 	bl	80066b4 <MX_USB_HOST_Process>
	  setLEDS(&hdac,i);
 8000580:	e7e2      	b.n	8000548 <main+0x28>
 8000582:	bf00      	nop
 8000584:	200000bc 	.word	0x200000bc
 8000588:	40020c00 	.word	0x40020c00
 800058c:	ba2e8ba3 	.word	0xba2e8ba3

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fba4 	bl	8006cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fcb2 	bl	8002f80 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f97d 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f002 ff13 	bl	8003470 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f966 	bl	8000920 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_DAC_Init+0x4c>)
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DAC_Init+0x50>)
 8000676:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_DAC_Init+0x4c>)
 800067a:	f000 fc58 	bl	8000f2e <HAL_DAC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000684:	f000 f94c 	bl	8000920 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_DAC_Init+0x4c>)
 8000698:	f000 fce2 	bl	8001060 <HAL_DAC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006a2:	f000 f93d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000bc 	.word	0x200000bc
 80006b4:	40007400 	.word	0x40007400

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f003 f879 	bl	8003800 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f904 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000d0 	.word	0x200000d0
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4b72      	ldr	r3, [pc, #456]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a71      	ldr	r2, [pc, #452]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a6a      	ldr	r2, [pc, #424]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b68      	ldr	r3, [pc, #416]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a63      	ldr	r2, [pc, #396]	; (8000908 <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b5d      	ldr	r3, [pc, #372]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a5c      	ldr	r2, [pc, #368]	; (8000908 <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b5a      	ldr	r3, [pc, #360]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4849      	ldr	r0, [pc, #292]	; (800090c <MX_GPIO_Init+0x1e8>)
 80007e8:	f000 fe26 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4847      	ldr	r0, [pc, #284]	; (8000910 <MX_GPIO_Init+0x1ec>)
 80007f2:	f000 fe21 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4845      	ldr	r0, [pc, #276]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80007fe:	f000 fe1b 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1e8>)
 800081a:	f000 fc71 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4836      	ldr	r0, [pc, #216]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000836:	f000 fc63 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482e      	ldr	r0, [pc, #184]	; (8000910 <MX_GPIO_Init+0x1ec>)
 8000856:	f000 fc53 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	482a      	ldr	r0, [pc, #168]	; (8000918 <MX_GPIO_Init+0x1f4>)
 8000870:	f000 fc46 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4825      	ldr	r0, [pc, #148]	; (800091c <MX_GPIO_Init+0x1f8>)
 8000888:	f000 fc3a 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x1f8>)
 80008aa:	f000 fc29 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008c8:	f000 fc1a 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0x1f0>)
 80008e0:	f000 fc0e 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x1e8>)
 80008fa:	f000 fc01 	bl	8001100 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40021000 	.word	0x40021000
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fa9e 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_DAC_MspInit+0x7c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d127      	bne.n	80009ee <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_DAC_MspInit+0x80>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d6:	2310      	movs	r3, #16
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009da:	2303      	movs	r3, #3
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_DAC_MspInit+0x84>)
 80009ea:	f000 fb89 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40007400 	.word	0x40007400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_SPI_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12b      	bne.n	8000a7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_SPI_MspInit+0x8c>)
 8000a7a:	f000 fb41 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8d0 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <OTG_FS_IRQHandler+0x10>)
 8000aee:	f000 ff41 	bl	8001974 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000504 	.word	0x20000504

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f006 f8a4 	bl	8006c78 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20020000 	.word	0x20020000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	200000ac 	.word	0x200000ac
 8000b64:	20000818 	.word	0x20000818

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f006 f863 	bl	8006c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fcaf 	bl	8000520 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bd0:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8000bd4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bd8:	20000818 	.word	0x20000818

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f94f 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe8a 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f967 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 f92f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000128 	.word	0x20000128

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000128 	.word	0x20000128

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff3e 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff31 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e014      	b.n	8000f6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fd13 	bl	800097c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DAC_Start+0x16>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e040      	b.n	800100a <HAL_DAC_Start+0x98>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2202      	movs	r2, #2
 8000f92:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10f      	bne.n	8000fd2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000fbc:	2b3c      	cmp	r3, #60	; 0x3c
 8000fbe:	d11d      	bne.n	8000ffc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	e014      	b.n	8000ffc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	213c      	movs	r1, #60	; 0x3c
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d107      	bne.n	8000ffc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0202 	orr.w	r2, r2, #2
 8000ffa:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001016:	b480      	push	{r7}
 8001018:	b087      	sub	sp, #28
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	3308      	adds	r3, #8
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e004      	b.n	800104a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	3314      	adds	r3, #20
 8001048:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	795b      	ldrb	r3, [r3, #5]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_DAC_ConfigChannel+0x18>
 8001074:	2302      	movs	r3, #2
 8001076:	e03c      	b.n	80010f2 <HAL_DAC_ConfigChannel+0x92>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2202      	movs	r2, #2
 8001082:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4013      	ands	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	22c0      	movs	r2, #192	; 0xc0
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e16b      	b.n	80013f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 815a 	bne.w	80013ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	2b02      	cmp	r3, #2
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d017      	beq.n	80011f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80b4 	beq.w	80013ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b60      	ldr	r3, [pc, #384]	; (800140c <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a5f      	ldr	r2, [pc, #380]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b5d      	ldr	r3, [pc, #372]	; (800140c <HAL_GPIO_Init+0x30c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a5b      	ldr	r2, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x310>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x314>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x226>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x318>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x222>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x31c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x21e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x320>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x324>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20a>
 8001306:	2307      	movs	r3, #7
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130a:	2308      	movs	r3, #8
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800130e:	2306      	movs	r3, #6
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x228>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x228>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x310>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001394:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x334>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae90 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43d9      	mvns	r1, r3
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	400b      	ands	r3, r1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800149e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a0:	b08f      	sub	sp, #60	; 0x3c
 80014a2:	af0a      	add	r7, sp, #40	; 0x28
 80014a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e054      	b.n	800155a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f005 f92a 	bl	8006724 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fa81 	bl	80039f6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	687e      	ldr	r6, [r7, #4]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001512:	1d33      	adds	r3, r6, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f002 f9fb 	bl	8003912 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fa78 	bl	8003a18 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	687e      	ldr	r6, [r7, #4]
 8001530:	466d      	mov	r5, sp
 8001532:	f106 0410 	add.w	r4, r6, #16
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001542:	e885 0003 	stmia.w	r5, {r0, r1}
 8001546:	1d33      	adds	r3, r6, #4
 8001548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f002 fbde 	bl	8003d0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001562 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001562:	b590      	push	{r4, r7, lr}
 8001564:	b089      	sub	sp, #36	; 0x24
 8001566:	af04      	add	r7, sp, #16
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4603      	mov	r3, r0
 8001572:	70fb      	strb	r3, [r7, #3]
 8001574:	460b      	mov	r3, r1
 8001576:	70bb      	strb	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_HCD_HC_Init+0x28>
 8001586:	2302      	movs	r3, #2
 8001588:	e076      	b.n	8001678 <HAL_HCD_HC_Init+0x116>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	212c      	movs	r1, #44	; 0x2c
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	4413      	add	r3, r2
 800159e:	333d      	adds	r3, #61	; 0x3d
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	212c      	movs	r1, #44	; 0x2c
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	3338      	adds	r3, #56	; 0x38
 80015b2:	787a      	ldrb	r2, [r7, #1]
 80015b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	3340      	adds	r3, #64	; 0x40
 80015c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	212c      	movs	r1, #44	; 0x2c
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	3339      	adds	r3, #57	; 0x39
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	333f      	adds	r3, #63	; 0x3f
 80015e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	78ba      	ldrb	r2, [r7, #2]
 80015f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f6:	b2d0      	uxtb	r0, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	333a      	adds	r3, #58	; 0x3a
 8001604:	4602      	mov	r2, r0
 8001606:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	da09      	bge.n	8001624 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	333b      	adds	r3, #59	; 0x3b
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e008      	b.n	8001636 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	333b      	adds	r3, #59	; 0x3b
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	333c      	adds	r3, #60	; 0x3c
 8001644:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001648:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	787c      	ldrb	r4, [r7, #1]
 8001650:	78ba      	ldrb	r2, [r7, #2]
 8001652:	78f9      	ldrb	r1, [r7, #3]
 8001654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	4623      	mov	r3, r4
 8001666:	f002 fccb 	bl	8004000 <USB_HC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_HCD_HC_Halt+0x1e>
 800169a:	2302      	movs	r3, #2
 800169c:	e00f      	b.n	80016be <HAL_HCD_HC_Halt+0x3e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 ff07 	bl	80044c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	70fb      	strb	r3, [r7, #3]
 80016da:	460b      	mov	r3, r1
 80016dc:	70bb      	strb	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	333b      	adds	r3, #59	; 0x3b
 80016f0:	78ba      	ldrb	r2, [r7, #2]
 80016f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	333f      	adds	r3, #63	; 0x3f
 8001702:	787a      	ldrb	r2, [r7, #1]
 8001704:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001706:	7c3b      	ldrb	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d112      	bne.n	8001732 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3342      	adds	r3, #66	; 0x42
 800171a:	2203      	movs	r2, #3
 800171c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	333d      	adds	r3, #61	; 0x3d
 800172c:	7f3a      	ldrb	r2, [r7, #28]
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e008      	b.n	8001744 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	3342      	adds	r3, #66	; 0x42
 8001740:	2202      	movs	r2, #2
 8001742:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b03      	cmp	r3, #3
 8001748:	f200 80c6 	bhi.w	80018d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800174c:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	080018c5 	.word	0x080018c5
 800175c:	080017c9 	.word	0x080017c9
 8001760:	08001847 	.word	0x08001847
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001764:	7c3b      	ldrb	r3, [r7, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	f040 80b8 	bne.w	80018dc <HAL_HCD_HC_SubmitRequest+0x214>
 800176c:	78bb      	ldrb	r3, [r7, #2]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 80b4 	bne.w	80018dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001774:	8b3b      	ldrh	r3, [r7, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	212c      	movs	r1, #44	; 0x2c
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	3355      	adds	r3, #85	; 0x55
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3355      	adds	r3, #85	; 0x55
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017b2:	e093      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	fb01 f303 	mul.w	r3, r1, r3
 80017be:	4413      	add	r3, r2
 80017c0:	3342      	adds	r3, #66	; 0x42
 80017c2:	2202      	movs	r2, #2
 80017c4:	701a      	strb	r2, [r3, #0]
      break;
 80017c6:	e089      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11d      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	3355      	adds	r3, #85	; 0x55
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017f4:	e073      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
      break;
 8001808:	e069      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3354      	adds	r3, #84	; 0x54
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3342      	adds	r3, #66	; 0x42
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
      break;
 8001830:	e055      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	3342      	adds	r3, #66	; 0x42
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
      break;
 8001844:	e04b      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001846:	78bb      	ldrb	r3, [r7, #2]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11d      	bne.n	8001888 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3355      	adds	r3, #85	; 0x55
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001872:	e034      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3342      	adds	r3, #66	; 0x42
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	e02a      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3354      	adds	r3, #84	; 0x54
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3342      	adds	r3, #66	; 0x42
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e016      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3342      	adds	r3, #66	; 0x42
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e00c      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e002      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3344      	adds	r3, #68	; 0x44
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	8b3a      	ldrh	r2, [r7, #24]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	202c      	movs	r0, #44	; 0x2c
 80018f8:	fb00 f303 	mul.w	r3, r0, r3
 80018fc:	440b      	add	r3, r1
 80018fe:	334c      	adds	r3, #76	; 0x4c
 8001900:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3360      	adds	r3, #96	; 0x60
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3350      	adds	r3, #80	; 0x50
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3339      	adds	r3, #57	; 0x39
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3361      	adds	r3, #97	; 0x61
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	222c      	movs	r2, #44	; 0x2c
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	3338      	adds	r3, #56	; 0x38
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	18d1      	adds	r1, r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	f002 fc5a 	bl	800421c <USB_HC_StartXfer>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop

08001974 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f97d 	bl	8003c8a <USB_GetMode>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 80f6 	bne.w	8001b84 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 f961 	bl	8003c64 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ec 	beq.w	8001b82 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f958 	bl	8003c64 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019be:	d104      	bne.n	80019ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 f948 	bl	8003c64 <USB_ReadInterrupts>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019de:	d104      	bne.n	80019ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f938 	bl	8003c64 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019fe:	d104      	bne.n	8001a0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 f928 	bl	8003c64 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d103      	bne.n	8001a26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 f91a 	bl	8003c64 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a3a:	d11c      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a56:	2110      	movs	r1, #16
 8001a58:	6938      	ldr	r0, [r7, #16]
 8001a5a:	f002 f829 	bl	8003ab0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a5e:	6938      	ldr	r0, [r7, #16]
 8001a60:	f002 f84a 	bl	8003af8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fa02 	bl	8003e74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f004 fed5 	bl	8006820 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f8f2 	bl	8003c64 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8a:	d102      	bne.n	8001a92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f001 fa03 	bl	8002e98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f8e4 	bl	8003c64 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d106      	bne.n	8001ab4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f004 fe9e 	bl	80067e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 f8d3 	bl	8003c64 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b10      	cmp	r3, #16
 8001ac6:	d101      	bne.n	8001acc <HAL_HCD_IRQHandler+0x158>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_HCD_IRQHandler+0x15a>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d012      	beq.n	8001af8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0210 	bic.w	r2, r2, #16
 8001ae0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f906 	bl	8002cf4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 f8b1 	bl	8003c64 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b0c:	d13a      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fcc4 	bl	80044a0 <USB_HC_ReadInterrupt>
 8001b18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e025      	b.n	8001b6c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	015a      	lsls	r2, r3, #5
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4a:	d106      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8ab 	bl	8001cae <HCD_HC_IN_IRQHandler>
 8001b58:	e005      	b.n	8001b66 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fcc6 	bl	80024f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3d4      	bcc.n	8001b20 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	e000      	b.n	8001b84 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b82:	bf00      	nop
    }
  }
}
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_HCD_Start+0x16>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e013      	b.n	8001bc8 <HAL_HCD_Start+0x3e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 f9c4 	bl	8003f3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 ff0b 	bl	80039d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_HCD_Stop+0x16>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e00d      	b.n	8001c02 <HAL_HCD_Stop+0x32>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fdbe 	bl	8004774 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 f966 	bl	8003ee8 <USB_ResetPort>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3360      	adds	r3, #96	; 0x60
 8001c40:	781b      	ldrb	r3, [r3, #0]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3350      	adds	r3, #80	; 0x50
 8001c68:	681b      	ldr	r3, [r3, #0]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 f9aa 	bl	8003fdc <USB_GetCurrentFrame>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 f985 	bl	8003fae <USB_GetHostSpeed>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d119      	bne.n	8001d12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	461a      	mov	r2, r3
 8001cec:	2304      	movs	r3, #4
 8001cee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	0151      	lsls	r1, r2, #5
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	440a      	add	r2, r1
 8001d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	60d3      	str	r3, [r2, #12]
 8001d10:	e101      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d12b      	bne.n	8001d82 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	461a      	mov	r2, r3
 8001d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3361      	adds	r3, #97	; 0x61
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	0151      	lsls	r1, r2, #5
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	440a      	add	r2, r1
 8001d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fba1 	bl	80044c2 <USB_HC_Halt>
 8001d80:	e0c9      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d109      	bne.n	8001dac <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	2320      	movs	r3, #32
 8001da8:	6093      	str	r3, [r2, #8]
 8001daa:	e0b4      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d133      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	0151      	lsls	r1, r2, #5
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3361      	adds	r3, #97	; 0x61
 8001df0:	2205      	movs	r2, #5
 8001df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	2310      	movs	r3, #16
 8001e04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	461a      	mov	r2, r3
 8001e14:	2308      	movs	r3, #8
 8001e16:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fb4d 	bl	80044c2 <USB_HC_Halt>
 8001e28:	e075      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e40:	d134      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	0151      	lsls	r1, r2, #5
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	440a      	add	r2, r1
 8001e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3361      	adds	r3, #97	; 0x61
 8001e70:	2208      	movs	r2, #8
 8001e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	2310      	movs	r3, #16
 8001e84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	461a      	mov	r2, r3
 8001e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fb0c 	bl	80044c2 <USB_HC_Halt>
 8001eaa:	e034      	b.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d129      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	0151      	lsls	r1, r2, #5
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	440a      	add	r2, r1
 8001ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3361      	adds	r3, #97	; 0x61
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fadf 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d122      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fab2 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f72:	e2ba      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 811b 	bne.w	80021c2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d019      	beq.n	8001fc8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3348      	adds	r3, #72	; 0x48
 8001fa2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0159      	lsls	r1, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	440b      	add	r3, r1
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	202c      	movs	r0, #44	; 0x2c
 8001fbe:	fb00 f303 	mul.w	r3, r0, r3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3350      	adds	r3, #80	; 0x50
 8001fc6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	335c      	adds	r3, #92	; 0x5c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	333f      	adds	r3, #63	; 0x3f
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	333f      	adds	r3, #63	; 0x3f
 8002020:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002022:	2b02      	cmp	r3, #2
 8002024:	d121      	bne.n	800206a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	0151      	lsls	r1, r2, #5
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	440a      	add	r2, r1
 800203c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f002 fa36 	bl	80044c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2310      	movs	r3, #16
 8002066:	6093      	str	r3, [r2, #8]
 8002068:	e066      	b.n	8002138 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	333f      	adds	r3, #63	; 0x3f
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d127      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	0151      	lsls	r1, r2, #5
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	440a      	add	r2, r1
 8002094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800209c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3360      	adds	r3, #96	; 0x60
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	b2d9      	uxtb	r1, r3
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	202c      	movs	r0, #44	; 0x2c
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f004 fbb8 	bl	800683c <HAL_HCD_HC_NotifyURBChange_Callback>
 80020cc:	e034      	b.n	8002138 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	333f      	adds	r3, #63	; 0x3f
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d12a      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3354      	adds	r3, #84	; 0x54
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2d8      	uxtb	r0, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3354      	adds	r3, #84	; 0x54
 8002118:	4602      	mov	r2, r0
 800211a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	202c      	movs	r0, #44	; 0x2c
 8002126:	fb00 f303 	mul.w	r3, r0, r3
 800212a:	4413      	add	r3, r2
 800212c:	3360      	adds	r3, #96	; 0x60
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 fb82 	bl	800683c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12b      	bne.n	8002198 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3348      	adds	r3, #72	; 0x48
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	202c      	movs	r0, #44	; 0x2c
 8002156:	fb00 f202 	mul.w	r2, r0, r2
 800215a:	440a      	add	r2, r1
 800215c:	3240      	adds	r2, #64	; 0x40
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	fbb3 f3f2 	udiv	r3, r3, r2
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 81be 	beq.w	80024ea <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3354      	adds	r3, #84	; 0x54
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f083 0301 	eor.w	r3, r3, #1
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3354      	adds	r3, #84	; 0x54
 8002192:	4602      	mov	r2, r0
 8002194:	701a      	strb	r2, [r3, #0]
}
 8002196:	e1a8      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3354      	adds	r3, #84	; 0x54
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3354      	adds	r3, #84	; 0x54
 80021bc:	4602      	mov	r2, r0
 80021be:	701a      	strb	r2, [r3, #0]
}
 80021c0:	e193      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	f040 8106 	bne.w	80023e6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f023 0302 	bic.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3361      	adds	r3, #97	; 0x61
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d109      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e0c9      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3361      	adds	r3, #97	; 0x61
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d109      	bne.n	800224a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	2205      	movs	r2, #5
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e0b5      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	3361      	adds	r3, #97	; 0x61
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d009      	beq.n	8002272 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3361      	adds	r3, #97	; 0x61
 800226c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800226e:	2b08      	cmp	r3, #8
 8002270:	d150      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	202c      	movs	r0, #44	; 0x2c
 800228a:	fb00 f303 	mul.w	r3, r0, r3
 800228e:	440b      	add	r3, r1
 8002290:	335c      	adds	r3, #92	; 0x5c
 8002292:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d912      	bls.n	80022ce <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	335c      	adds	r3, #92	; 0x5c
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3360      	adds	r3, #96	; 0x60
 80022c8:	2204      	movs	r2, #4
 80022ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022cc:	e073      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3360      	adds	r3, #96	; 0x60
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022fe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002312:	e050      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3361      	adds	r3, #97	; 0x61
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d122      	bne.n	800236e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3360      	adds	r3, #96	; 0x60
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002350:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002358:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e023      	b.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3361      	adds	r3, #97	; 0x61
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b07      	cmp	r3, #7
 8002380:	d119      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	335c      	adds	r3, #92	; 0x5c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	202c      	movs	r0, #44	; 0x2c
 800239a:	fb00 f303 	mul.w	r3, r0, r3
 800239e:	440b      	add	r3, r1
 80023a0:	335c      	adds	r3, #92	; 0x5c
 80023a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2204      	movs	r2, #4
 80023b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	2302      	movs	r3, #2
 80023c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	202c      	movs	r0, #44	; 0x2c
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	; 0x60
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f004 fa2c 	bl	800683c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023e4:	e081      	b.n	80024ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d176      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	333f      	adds	r3, #63	; 0x3f
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d121      	bne.n	8002454 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f002 f838 	bl	80044c2 <USB_HC_Halt>
 8002452:	e041      	b.n	80024d8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333f      	adds	r3, #63	; 0x3f
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	333f      	adds	r3, #63	; 0x3f
 8002476:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002478:	2b02      	cmp	r3, #2
 800247a:	d12d      	bne.n	80024d8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	335c      	adds	r3, #92	; 0x5c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d120      	bne.n	80024d8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	2203      	movs	r2, #3
 80024a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	0151      	lsls	r1, r2, #5
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	440a      	add	r2, r1
 80024be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 fff5 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2310      	movs	r3, #16
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b088      	sub	sp, #32
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b04      	cmp	r3, #4
 8002520:	d119      	bne.n	8002556 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	2304      	movs	r3, #4
 8002532:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002554:	e3ca      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b20      	cmp	r3, #32
 800256a:	d13e      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2320      	movs	r3, #32
 800257c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333d      	adds	r3, #61	; 0x3d
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 83ac 	bne.w	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	333d      	adds	r3, #61	; 0x3d
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	0151      	lsls	r1, r2, #5
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	440a      	add	r2, r1
 80025ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 ff6d 	bl	80044c2 <USB_HC_Halt>
}
 80025e8:	e380      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d122      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	0151      	lsls	r1, r2, #5
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	440a      	add	r2, r1
 8002618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f001 ff48 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	461a      	mov	r2, r3
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	6093      	str	r3, [r2, #8]
}
 8002646:	e351      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d150      	bne.n	8002700 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	335c      	adds	r3, #92	; 0x5c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d111      	bne.n	80026aa <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	333d      	adds	r3, #61	; 0x3d
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	461a      	mov	r2, r3
 80026a6:	2340      	movs	r3, #64	; 0x40
 80026a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	0151      	lsls	r1, r2, #5
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	440a      	add	r2, r1
 80026c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fef4 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2301      	movs	r3, #1
 80026ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3361      	adds	r3, #97	; 0x61
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
}
 80026fe:	e2f5      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d13c      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3361      	adds	r3, #97	; 0x61
 8002724:	2204      	movs	r2, #4
 8002726:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	333d      	adds	r3, #61	; 0x3d
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	0151      	lsls	r1, r2, #5
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	440a      	add	r2, r1
 8002762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fea3 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	2340      	movs	r3, #64	; 0x40
 800278c:	6093      	str	r3, [r2, #8]
}
 800278e:	e2ad      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d12a      	bne.n	80027fc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	461a      	mov	r2, r3
 80027b4:	2308      	movs	r3, #8
 80027b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fe6d 	bl	80044c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2205      	movs	r2, #5
 80027f8:	701a      	strb	r2, [r3, #0]
}
 80027fa:	e277      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d150      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3361      	adds	r3, #97	; 0x61
 8002832:	2203      	movs	r2, #3
 8002834:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	333d      	adds	r3, #61	; 0x3d
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d112      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	333c      	adds	r3, #60	; 0x3c
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	333d      	adds	r3, #61	; 0x3d
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	0151      	lsls	r1, r2, #5
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	440a      	add	r2, r1
 8002886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fe11 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	6093      	str	r3, [r2, #8]
}
 80028b2:	e21b      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b80      	cmp	r3, #128	; 0x80
 80028c8:	d174      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d121      	bne.n	8002916 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3361      	adds	r3, #97	; 0x61
 80028e0:	2206      	movs	r2, #6
 80028e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	0151      	lsls	r1, r2, #5
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	440a      	add	r2, r1
 80028fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fdd7 	bl	80044c2 <USB_HC_Halt>
 8002914:	e044      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	440b      	add	r3, r1
 8002934:	335c      	adds	r3, #92	; 0x5c
 8002936:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d920      	bls.n	800298e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	335c      	adds	r3, #92	; 0x5c
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2204      	movs	r2, #4
 800296e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	b2d9      	uxtb	r1, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	202c      	movs	r0, #44	; 0x2c
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	4413      	add	r3, r2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f003 ff58 	bl	800683c <HAL_HCD_HC_NotifyURBChange_Callback>
 800298c:	e008      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3360      	adds	r3, #96	; 0x60
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	6093      	str	r3, [r2, #8]
}
 80029b2:	e19b      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d134      	bne.n	8002a36 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 fd63 	bl	80044c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3361      	adds	r3, #97	; 0x61
 8002a30:	2208      	movs	r2, #8
 8002a32:	701a      	strb	r2, [r3, #0]
}
 8002a34:	e15a      	b.n	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	f040 814f 	bne.w	8002cec <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a68:	f023 0302 	bic.w	r3, r3, #2
 8002a6c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3361      	adds	r3, #97	; 0x61
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d17d      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3360      	adds	r3, #96	; 0x60
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	333f      	adds	r3, #63	; 0x3f
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d00a      	beq.n	8002abe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	333f      	adds	r3, #63	; 0x3f
 8002ab6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	f040 8100 	bne.w	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3355      	adds	r3, #85	; 0x55
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2d8      	uxtb	r0, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3355      	adds	r3, #85	; 0x55
 8002aea:	4602      	mov	r2, r0
 8002aec:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f040 80e3 	bne.w	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	334c      	adds	r3, #76	; 0x4c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80d8 	beq.w	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	334c      	adds	r3, #76	; 0x4c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	202c      	movs	r0, #44	; 0x2c
 8002b24:	fb00 f202 	mul.w	r2, r0, r2
 8002b28:	440a      	add	r2, r1
 8002b2a:	3240      	adds	r2, #64	; 0x40
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b01      	subs	r3, #1
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	202c      	movs	r0, #44	; 0x2c
 8002b38:	fb00 f202 	mul.w	r2, r0, r2
 8002b3c:	440a      	add	r2, r1
 8002b3e:	3240      	adds	r2, #64	; 0x40
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b5 	beq.w	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3355      	adds	r3, #85	; 0x55
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2d8      	uxtb	r0, r3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3355      	adds	r3, #85	; 0x55
 8002b78:	4602      	mov	r2, r0
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e09f      	b.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3361      	adds	r3, #97	; 0x61
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d109      	bne.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3360      	adds	r3, #96	; 0x60
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e08b      	b.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3361      	adds	r3, #97	; 0x61
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d109      	bne.n	8002bce <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e077      	b.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d109      	bne.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e063      	b.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3361      	adds	r3, #97	; 0x61
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d009      	beq.n	8002c1e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3361      	adds	r3, #97	; 0x61
 8002c18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d14f      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	202c      	movs	r0, #44	; 0x2c
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	335c      	adds	r3, #92	; 0x5c
 8002c3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	335c      	adds	r3, #92	; 0x5c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d912      	bls.n	8002c7a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	335c      	adds	r3, #92	; 0x5c
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3360      	adds	r3, #96	; 0x60
 8002c74:	2204      	movs	r2, #4
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	e021      	b.n	8002cbe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3360      	adds	r3, #96	; 0x60
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ca2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2302      	movs	r3, #2
 8002cce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2d9      	uxtb	r1, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	202c      	movs	r0, #44	; 0x2c
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f003 fda8 	bl	800683c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cec:	bf00      	nop
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	0c5b      	lsrs	r3, r3, #17
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d004      	beq.n	8002d3a <HCD_RXQLVL_IRQHandler+0x46>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	f000 80a9 	beq.w	8002e8a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d38:	e0aa      	b.n	8002e90 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a6 	beq.w	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3344      	adds	r3, #68	; 0x44
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 809b 	beq.w	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3350      	adds	r3, #80	; 0x50
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	202c      	movs	r0, #44	; 0x2c
 8002d72:	fb00 f303 	mul.w	r3, r0, r3
 8002d76:	440b      	add	r3, r1
 8002d78:	334c      	adds	r3, #76	; 0x4c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d87a      	bhi.n	8002e76 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3344      	adds	r3, #68	; 0x44
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f000 ff0b 	bl	8003bb4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3344      	adds	r3, #68	; 0x44
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	441a      	add	r2, r3
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	202c      	movs	r0, #44	; 0x2c
 8002db8:	fb00 f303 	mul.w	r3, r0, r3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3344      	adds	r3, #68	; 0x44
 8002dc0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3350      	adds	r3, #80	; 0x50
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	202c      	movs	r0, #44	; 0x2c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	440b      	add	r3, r1
 8002de2:	3350      	adds	r3, #80	; 0x50
 8002de4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	0cdb      	lsrs	r3, r3, #19
 8002df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3340      	adds	r3, #64	; 0x40
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d13c      	bne.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d039      	beq.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e30:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e38:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3354      	adds	r3, #84	; 0x54
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2d8      	uxtb	r0, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3354      	adds	r3, #84	; 0x54
 8002e70:	4602      	mov	r2, r0
 8002e72:	701a      	strb	r2, [r3, #0]
      break;
 8002e74:	e00b      	b.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3360      	adds	r3, #96	; 0x60
 8002e84:	2204      	movs	r2, #4
 8002e86:	701a      	strb	r2, [r3, #0]
      break;
 8002e88:	e001      	b.n	8002e8e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e8e:	bf00      	nop
  }
}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ec4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d10b      	bne.n	8002ee8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f003 fc92 	bl	8006804 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d132      	bne.n	8002f58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d126      	bne.n	8002f52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d113      	bne.n	8002f34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f16:	d106      	bne.n	8002f26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ffa8 	bl	8003e74 <USB_InitFSLSPClkSel>
 8002f24:	e011      	b.n	8002f4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 ffa1 	bl	8003e74 <USB_InitFSLSPClkSel>
 8002f32:	e00a      	b.n	8002f4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f42:	461a      	mov	r2, r3
 8002f44:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f003 fc84 	bl	8006858 <HAL_HCD_PortEnabled_Callback>
 8002f50:	e002      	b.n	8002f58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f003 fc8e 	bl	8006874 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d103      	bne.n	8002f6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 0320 	orr.w	r3, r3, #32
 8002f68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6013      	str	r3, [r2, #0]
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e264      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d075      	beq.n	800308a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9e:	4ba3      	ldr	r3, [pc, #652]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4ba0      	ldr	r3, [pc, #640]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d112      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b9d      	ldr	r3, [pc, #628]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	4b99      	ldr	r3, [pc, #612]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d05b      	beq.n	8003088 <HAL_RCC_OscConfig+0x108>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d157      	bne.n	8003088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e23f      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x74>
 8002fe6:	4b91      	ldr	r3, [pc, #580]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x98>
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a8a      	ldr	r2, [pc, #552]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8003018:	4b84      	ldr	r3, [pc, #528]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a83      	ldr	r2, [pc, #524]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd fe38 	bl	8000cac <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fd fe34 	bl	8000cac <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e204      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xc0>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fe24 	bl	8000cac <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fd fe20 	bl	8000cac <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1f0      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b6c      	ldr	r3, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0xe8>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d063      	beq.n	800315e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1c4      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4952      	ldr	r1, [pc, #328]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e03a      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fd fdd9 	bl	8000cac <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fd fdd5 	bl	8000cac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1a5      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4940      	ldr	r1, [pc, #256]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fd fdb8 	bl	8000cac <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fd fdb4 	bl	8000cac <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e184      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d030      	beq.n	80031cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fd fd98 	bl	8000cac <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fd fd94 	bl	8000cac <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e164      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x200>
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fd fd81 	bl	8000cac <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fd fd7d 	bl	8000cac <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e14d      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a0 	beq.w	800331a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fd fd43 	bl	8000cac <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x2ce>
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
 8003238:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fd fd36 	bl	8000cac <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e106      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x4e4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x2f0>
 8003262:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	e01c      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_OscConfig+0x312>
 8003278:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	4b78      	ldr	r3, [pc, #480]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	e00b      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003292:	4b75      	ldr	r3, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a74      	ldr	r2, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a71      	ldr	r2, [pc, #452]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d015      	beq.n	80032de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd fcfb 	bl	8000cac <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fcf7 	bl	8000cac <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0c5      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ee      	beq.n	80032ba <HAL_RCC_OscConfig+0x33a>
 80032dc:	e014      	b.n	8003308 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fd fce5 	bl	8000cac <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd fce1 	bl	8000cac <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0af      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ee      	bne.n	80032e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a55      	ldr	r2, [pc, #340]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 809b 	beq.w	800345a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d05c      	beq.n	80033ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d141      	bne.n	80033bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fd fcb5 	bl	8000cac <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fd fcb1 	bl	8000cac <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e081      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	019b      	lsls	r3, r3, #6
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fd fc8a 	bl	8000cac <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fd fc86 	bl	8000cac <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e056      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x41c>
 80033ba:	e04e      	b.n	800345a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fc73 	bl	8000cac <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fd fc6f 	bl	8000cac <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e03f      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x44a>
 80033e8:	e037      	b.n	800345a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e032      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d028      	beq.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d121      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d11a      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003426:	4013      	ands	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800342c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	3b01      	subs	r3, #1
 8003440:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40007000 	.word	0x40007000
 8003468:	40023800 	.word	0x40023800
 800346c:	42470060 	.word	0x42470060

08003470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0cc      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003484:	4b68      	ldr	r3, [pc, #416]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d90c      	bls.n	80034ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b65      	ldr	r3, [pc, #404]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0b8      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c4:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a58      	ldr	r2, [pc, #352]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a52      	ldr	r2, [pc, #328]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d044      	beq.n	8003590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d119      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e07f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d003      	beq.n	800352e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	2b03      	cmp	r3, #3
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e067      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 0203 	bic.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4934      	ldr	r1, [pc, #208]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003560:	f7fd fba4 	bl	8000cac <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7fd fba0 	bl	8000cac <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e04f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 020c 	and.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d1eb      	bne.n	8003568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d20c      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e032      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4916      	ldr	r1, [pc, #88]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	490e      	ldr	r1, [pc, #56]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f6:	f000 f821 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	490a      	ldr	r1, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fb04 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023c00 	.word	0x40023c00
 800362c:	40023800 	.word	0x40023800
 8003630:	08006ea8 	.word	0x08006ea8
 8003634:	20000000 	.word	0x20000000
 8003638:	20000004 	.word	0x20000004

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	2300      	movs	r3, #0
 800364e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003654:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d00d      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x40>
 8003660:	2b08      	cmp	r3, #8
 8003662:	f200 80bd 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x34>
 800366a:	2b04      	cmp	r3, #4
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x3a>
 800366e:	e0b7      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003672:	60bb      	str	r3, [r7, #8]
       break;
 8003674:	e0b7      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003678:	60bb      	str	r3, [r7, #8]
      break;
 800367a:	e0b4      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800367c:	4b5d      	ldr	r3, [pc, #372]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003684:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04d      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	461a      	mov	r2, r3
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	ea02 0800 	and.w	r8, r2, r0
 80036aa:	ea03 0901 	and.w	r9, r3, r1
 80036ae:	4640      	mov	r0, r8
 80036b0:	4649      	mov	r1, r9
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036c0:	0142      	lsls	r2, r0, #5
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	ebb0 0008 	subs.w	r0, r0, r8
 80036ca:	eb61 0109 	sbc.w	r1, r1, r9
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	018b      	lsls	r3, r1, #6
 80036d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036dc:	0182      	lsls	r2, r0, #6
 80036de:	1a12      	subs	r2, r2, r0
 80036e0:	eb63 0301 	sbc.w	r3, r3, r1
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	00d9      	lsls	r1, r3, #3
 80036ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f2:	00d0      	lsls	r0, r2, #3
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	eb12 0208 	adds.w	r2, r2, r8
 80036fc:	eb43 0309 	adc.w	r3, r3, r9
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	0259      	lsls	r1, r3, #9
 800370a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800370e:	0250      	lsls	r0, r2, #9
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	f7fc fd52 	bl	80001c8 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4613      	mov	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e04a      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	461a      	mov	r2, r3
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	ea02 0400 	and.w	r4, r2, r0
 8003746:	ea03 0501 	and.w	r5, r3, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	014b      	lsls	r3, r1, #5
 8003758:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800375c:	0142      	lsls	r2, r0, #5
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	1b00      	subs	r0, r0, r4
 8003764:	eb61 0105 	sbc.w	r1, r1, r5
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	018b      	lsls	r3, r1, #6
 8003772:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003776:	0182      	lsls	r2, r0, #6
 8003778:	1a12      	subs	r2, r2, r0
 800377a:	eb63 0301 	sbc.w	r3, r3, r1
 800377e:	f04f 0000 	mov.w	r0, #0
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	00d9      	lsls	r1, r3, #3
 8003788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800378c:	00d0      	lsls	r0, r2, #3
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	1912      	adds	r2, r2, r4
 8003794:	eb45 0303 	adc.w	r3, r5, r3
 8003798:	f04f 0000 	mov.w	r0, #0
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	0299      	lsls	r1, r3, #10
 80037a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037a6:	0290      	lsls	r0, r2, #10
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f7fc fd06 	bl	80001c8 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	60bb      	str	r3, [r7, #8]
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037e2:	60bb      	str	r3, [r7, #8]
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	68bb      	ldr	r3, [r7, #8]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07b      	b.n	800390a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d009      	beq.n	8003838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	61da      	str	r2, [r3, #28]
 800382a:	e005      	b.n	8003838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd f8d6 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	ea42 0103 	orr.w	r1, r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0104 	and.w	r1, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0210 	and.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003912:	b084      	sub	sp, #16
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	f107 001c 	add.w	r0, r7, #28
 8003920:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	2b01      	cmp	r3, #1
 8003928:	d122      	bne.n	8003970 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f99f 	bl	8003ca8 <USB_CoreReset>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e01a      	b.n	80039a6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f993 	bl	8003ca8 <USB_CoreReset>
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
 8003998:	e005      	b.n	80039a6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10b      	bne.n	80039c4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f043 0206 	orr.w	r2, r3, #6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039d0:	b004      	add	sp, #16
 80039d2:	4770      	bx	lr

080039d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0201 	bic.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d115      	bne.n	8003a66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7fd f93c 	bl	8000cc4 <HAL_Delay>
      ms++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f919 	bl	8003c8a <USB_GetMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d01e      	beq.n	8003a9c <USB_SetCurrentMode+0x84>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b31      	cmp	r3, #49	; 0x31
 8003a62:	d9f0      	bls.n	8003a46 <USB_SetCurrentMode+0x2e>
 8003a64:	e01a      	b.n	8003a9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d115      	bne.n	8003a98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fd f923 	bl	8000cc4 <HAL_Delay>
      ms++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f900 	bl	8003c8a <USB_GetMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <USB_SetCurrentMode+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b31      	cmp	r3, #49	; 0x31
 8003a94:	d9f0      	bls.n	8003a78 <USB_SetCurrentMode+0x60>
 8003a96:	e001      	b.n	8003a9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e005      	b.n	8003aa8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b32      	cmp	r3, #50	; 0x32
 8003aa0:	d101      	bne.n	8003aa6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <USB_FlushTxFifo+0x44>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e006      	b.n	8003ae8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d0f1      	beq.n	8003aca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	00030d40 	.word	0x00030d40

08003af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2210      	movs	r2, #16
 8003b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <USB_FlushRxFifo+0x3c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e006      	b.n	8003b28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d0f1      	beq.n	8003b0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	00030d40 	.word	0x00030d40

08003b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4611      	mov	r1, r2
 8003b44:	461a      	mov	r2, r3
 8003b46:	460b      	mov	r3, r1
 8003b48:	71fb      	strb	r3, [r7, #7]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d123      	bne.n	8003ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b5e:	88bb      	ldrh	r3, [r7, #4]
 8003b60:	3303      	adds	r3, #3
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e018      	b.n	8003b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	031a      	lsls	r2, r3, #12
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b78:	461a      	mov	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	3301      	adds	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3e2      	bcc.n	8003b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3724      	adds	r7, #36	; 0x24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b08b      	sub	sp, #44	; 0x2c
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	e014      	b.n	8003c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	3301      	adds	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	3301      	adds	r3, #1
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3e6      	bcc.n	8003be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c12:	8bfb      	ldrh	r3, [r7, #30]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01e      	beq.n	8003c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	461a      	mov	r2, r3
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	3301      	adds	r3, #1
 8003c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	3301      	adds	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003c4a:	8bfb      	ldrh	r3, [r7, #30]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c50:	8bfb      	ldrh	r3, [r7, #30]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ea      	bne.n	8003c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	372c      	adds	r7, #44	; 0x2c
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0301 	and.w	r3, r3, #1
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <USB_CoreReset+0x60>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e01a      	b.n	8003cfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	daf3      	bge.n	8003cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <USB_CoreReset+0x60>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e006      	b.n	8003cfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d0f1      	beq.n	8003cdc <USB_CoreReset+0x34>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	00030d40 	.word	0x00030d40

08003d0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	f107 001c 	add.w	r0, r7, #28
 8003d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10a      	bne.n	8003d7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e014      	b.n	8003da4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e009      	b.n	8003da4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003da4:	2110      	movs	r1, #16
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe82 	bl	8003ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fea3 	bl	8003af8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e015      	b.n	8003de4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3e5      	bcc.n	8003db8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <USB_HostInit+0x154>)
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <USB_HostInit+0x158>)
 8003e18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e1c:	e009      	b.n	8003e32 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2280      	movs	r2, #128	; 0x80
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <USB_HostInit+0x15c>)
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <USB_HostInit+0x160>)
 8003e2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f043 0210 	orr.w	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <USB_HostInit+0x164>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e5c:	b004      	add	sp, #16
 8003e5e:	4770      	bx	lr
 8003e60:	01000200 	.word	0x01000200
 8003e64:	00e00300 	.word	0x00e00300
 8003e68:	00600080 	.word	0x00600080
 8003e6c:	004000e0 	.word	0x004000e0
 8003e70:	a3200008 	.word	0xa3200008

08003e74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003ec2:	6053      	str	r3, [r2, #4]
 8003ec4:	e009      	b.n	8003eda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d106      	bne.n	8003eda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f241 7370 	movw	r3, #6000	; 0x1770
 8003ed8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003f18:	2064      	movs	r0, #100	; 0x64
 8003f1a:	f7fc fed3 	bl	8000cc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003f2c:	200a      	movs	r0, #10
 8003f2e:	f7fc fec9 	bl	8000cc4 <HAL_Delay>

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <USB_DriveVbus+0x44>
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d106      	bne.n	8003f80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d109      	bne.n	8003fa0 <USB_DriveVbus+0x64>
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0c5b      	lsrs	r3, r3, #17
 8003fcc:	f003 0303 	and.w	r3, r3, #3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	b29b      	uxth	r3, r3
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	70fb      	strb	r3, [r7, #3]
 8004012:	460b      	mov	r3, r1
 8004014:	70bb      	strb	r3, [r7, #2]
 8004016:	4613      	mov	r3, r2
 8004018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	461a      	mov	r2, r3
 8004030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004034:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800403a:	2b03      	cmp	r3, #3
 800403c:	d87e      	bhi.n	800413c <USB_HC_Init+0x13c>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <USB_HC_Init+0x44>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004055 	.word	0x08004055
 8004048:	080040ff 	.word	0x080040ff
 800404c:	08004055 	.word	0x08004055
 8004050:	080040c1 	.word	0x080040c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	f240 439d 	movw	r3, #1181	; 0x49d
 8004066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800406c:	2b00      	cmp	r3, #0
 800406e:	da10      	bge.n	8004092 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004090:	e057      	b.n	8004142 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d051      	beq.n	8004142 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040bc:	60d3      	str	r3, [r2, #12]
      break;
 80040be:	e040      	b.n	8004142 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80040d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80040d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da34      	bge.n	8004146 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80040fc:	e023      	b.n	8004146 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	461a      	mov	r2, r3
 800410c:	f240 2325 	movw	r3, #549	; 0x225
 8004110:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004112:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da17      	bge.n	800414a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	440a      	add	r2, r1
 8004130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004134:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004138:	60d3      	str	r3, [r2, #12]
      }
      break;
 800413a:	e006      	b.n	800414a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	77fb      	strb	r3, [r7, #31]
      break;
 8004140:	e004      	b.n	800414c <USB_HC_Init+0x14c>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <USB_HC_Init+0x14c>
      break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <USB_HC_Init+0x14c>
      break;
 800414a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	6939      	ldr	r1, [r7, #16]
 8004162:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004166:	4313      	orrs	r3, r2
 8004168:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004176:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800417a:	2b00      	cmp	r3, #0
 800417c:	da03      	bge.n	8004186 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e001      	b.n	800418a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff0f 	bl	8003fae <USB_GetHostSpeed>
 8004190:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004196:	2b02      	cmp	r3, #2
 8004198:	d106      	bne.n	80041a8 <USB_HC_Init+0x1a8>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d003      	beq.n	80041a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80041a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e001      	b.n	80041ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	059b      	lsls	r3, r3, #22
 80041b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041b4:	78bb      	ldrb	r3, [r7, #2]
 80041b6:	02db      	lsls	r3, r3, #11
 80041b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041c2:	049b      	lsls	r3, r3, #18
 80041c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	0159      	lsls	r1, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	440b      	add	r3, r1
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80041ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d10f      	bne.n	8004212 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	440a      	add	r2, r1
 8004208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004210:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004212:	7ffb      	ldrb	r3, [r7, #31]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004238:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02d      	beq.n	80042a2 <USB_HC_StartXfer+0x86>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d129      	bne.n	80042a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d117      	bne.n	8004284 <USB_HC_StartXfer+0x68>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	79db      	ldrb	r3, [r3, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <USB_HC_StartXfer+0x48>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	79db      	ldrb	r3, [r3, #7]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d10f      	bne.n	8004284 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	440a      	add	r2, r1
 800427a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <USB_HC_StartXfer+0x86>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	795b      	ldrb	r3, [r3, #5]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fa2f 	bl	80046fc <USB_DoPing>
      return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e0f8      	b.n	8004494 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	8912      	ldrh	r2, [r2, #8]
 80042b2:	4413      	add	r3, r2
 80042b4:	3b01      	subs	r3, #1
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	8912      	ldrh	r2, [r2, #8]
 80042ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80042be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80042c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042c2:	8b7b      	ldrh	r3, [r7, #26]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d90b      	bls.n	80042e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80042c8:	8b7b      	ldrh	r3, [r7, #26]
 80042ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80042cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	8912      	ldrh	r2, [r2, #8]
 80042d2:	fb02 f203 	mul.w	r2, r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e001      	b.n	80042e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80042e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	8912      	ldrh	r2, [r2, #8]
 80042ee:	fb02 f203 	mul.w	r2, r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	e003      	b.n	8004300 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800430a:	04d9      	lsls	r1, r3, #19
 800430c:	4b63      	ldr	r3, [pc, #396]	; (800449c <USB_HC_StartXfer+0x280>)
 800430e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004310:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	7a9b      	ldrb	r3, [r3, #10]
 8004316:	075b      	lsls	r3, r3, #29
 8004318:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	0148      	lsls	r0, r1, #5
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	4401      	add	r1, r0
 8004324:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004328:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800432a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	460a      	mov	r2, r1
 8004344:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	440a      	add	r2, r1
 8004374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004378:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800437c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	7e7b      	ldrb	r3, [r7, #25]
 800438e:	075b      	lsls	r3, r3, #29
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	0148      	lsls	r0, r1, #5
 8004394:	6a39      	ldr	r1, [r7, #32]
 8004396:	4401      	add	r1, r0
 8004398:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e003      	b.n	80043d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	461a      	mov	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e04e      	b.n	8004494 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d149      	bne.n	8004492 <USB_HC_StartXfer+0x276>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d045      	beq.n	8004492 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	79db      	ldrb	r3, [r3, #7]
 800440a:	2b03      	cmp	r3, #3
 800440c:	d830      	bhi.n	8004470 <USB_HC_StartXfer+0x254>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <USB_HC_StartXfer+0x1f8>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004425 	.word	0x08004425
 8004418:	08004449 	.word	0x08004449
 800441c:	08004425 	.word	0x08004425
 8004420:	08004449 	.word	0x08004449
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	3303      	adds	r3, #3
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800442e:	8afa      	ldrh	r2, [r7, #22]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	b29b      	uxth	r3, r3
 8004436:	429a      	cmp	r2, r3
 8004438:	d91c      	bls.n	8004474 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	619a      	str	r2, [r3, #24]
        }
        break;
 8004446:	e015      	b.n	8004474 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	3303      	adds	r3, #3
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004452:	8afa      	ldrh	r2, [r7, #22]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	b29b      	uxth	r3, r3
 800445e:	429a      	cmp	r2, r3
 8004460:	d90a      	bls.n	8004478 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]
        }
        break;
 800446e:	e003      	b.n	8004478 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004470:	bf00      	nop
 8004472:	e002      	b.n	800447a <USB_HC_StartXfer+0x25e>
        break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <USB_HC_StartXfer+0x25e>
        break;
 8004478:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	68d9      	ldr	r1, [r3, #12]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	785a      	ldrb	r2, [r3, #1]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	b29b      	uxth	r3, r3
 8004488:	2000      	movs	r0, #0
 800448a:	9000      	str	r0, [sp, #0]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fb53 	bl	8003b38 <USB_WritePacket>
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	1ff80000 	.word	0x1ff80000

080044a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	b29b      	uxth	r3, r3
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b089      	sub	sp, #36	; 0x24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	0c9b      	lsrs	r3, r3, #18
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0fdb      	lsrs	r3, r3, #31
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d104      	bne.n	800451c <USB_HC_Halt+0x5a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e0e8      	b.n	80046ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <USB_HC_Halt+0x66>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d173      	bne.n	8004610 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	440a      	add	r2, r1
 800453e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004546:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 80cb 	bne.w	80046ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d143      	bne.n	80045ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	440a      	add	r2, r1
 8004578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800457c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004580:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	440a      	add	r2, r1
 8004598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ce:	d81d      	bhi.n	800460c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e6:	d0ec      	beq.n	80045c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045e8:	e080      	b.n	80046ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004608:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460a:	e06f      	b.n	80046ec <USB_HC_Halt+0x22a>
            break;
 800460c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460e:	e06d      	b.n	80046ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	440a      	add	r2, r1
 8004626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800462e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d143      	bne.n	80046c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800465e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	440a      	add	r2, r1
 8004676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800467a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800467e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	440a      	add	r2, r1
 8004696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ac:	d81d      	bhi.n	80046ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c4:	d0ec      	beq.n	80046a0 <USB_HC_Halt+0x1de>
 80046c6:	e011      	b.n	80046ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e000      	b.n	80046ec <USB_HC_Halt+0x22a>
          break;
 80046ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004710:	2301      	movs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	04da      	lsls	r2, r3, #19
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <USB_DoPing+0x74>)
 800471a:	4013      	ands	r3, r2
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	440a      	add	r2, r1
 8004724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800472c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004744:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800474c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	461a      	mov	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	1ff80000 	.word	0x1ff80000

08004774 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff f936 	bl	80039f6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800478a:	2110      	movs	r1, #16
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f98f 	bl	8003ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff f9b0 	bl	8003af8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e01f      	b.n	80047de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3301      	adds	r3, #1
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b0f      	cmp	r3, #15
 80047e2:	d9dc      	bls.n	800479e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e034      	b.n	8004854 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004800:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004808:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004810:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3301      	adds	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004830:	d80c      	bhi.n	800484c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004848:	d0ec      	beq.n	8004824 <USB_StopHost+0xb0>
 800484a:	e000      	b.n	800484e <USB_StopHost+0xda>
        break;
 800484c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d9c7      	bls.n	80047ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004860:	461a      	mov	r2, r3
 8004862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004866:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800486e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff f8af 	bl	80039d4 <USB_EnableGlobalInt>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af04      	add	r7, sp, #16
 8004886:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004888:	2301      	movs	r3, #1
 800488a:	2202      	movs	r2, #2
 800488c:	2102      	movs	r1, #2
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fc66 	bl	8005160 <USBH_FindInterface>
 8004894:	4603      	mov	r3, r0
 8004896:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2bff      	cmp	r3, #255	; 0xff
 800489c:	d002      	beq.n	80048a4 <USBH_CDC_InterfaceInit+0x24>
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d901      	bls.n	80048a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80048a4:	2302      	movs	r3, #2
 80048a6:	e13d      	b.n	8004b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fc3b 	bl	8005128 <USBH_SelectInterface>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80048bc:	2302      	movs	r3, #2
 80048be:	e131      	b.n	8004b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80048c6:	2050      	movs	r0, #80	; 0x50
 80048c8:	f002 fa00 	bl	8006ccc <malloc>
 80048cc:	4603      	mov	r3, r0
 80048ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80048e0:	2302      	movs	r3, #2
 80048e2:	e11f      	b.n	8004b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80048e4:	2250      	movs	r2, #80	; 0x50
 80048e6:	2100      	movs	r1, #0
 80048e8:	68b8      	ldr	r0, [r7, #8]
 80048ea:	f002 f9ff 	bl	8006cec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	211a      	movs	r1, #26
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b25b      	sxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	da15      	bge.n	8004932 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	211a      	movs	r1, #26
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	4413      	add	r3, r2
 8004912:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004916:	781a      	ldrb	r2, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	211a      	movs	r1, #26
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 fe32 	bl	80065a2 <USBH_AllocPipe>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	7819      	ldrb	r1, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	7858      	ldrb	r0, [r3, #1]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	8952      	ldrh	r2, [r2, #10]
 800495e:	9202      	str	r2, [sp, #8]
 8004960:	2203      	movs	r2, #3
 8004962:	9201      	str	r2, [sp, #4]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4623      	mov	r3, r4
 8004968:	4602      	mov	r2, r0
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 fdea 	bl	8006544 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f002 f8f9 	bl	8006b70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800497e:	2300      	movs	r3, #0
 8004980:	2200      	movs	r2, #0
 8004982:	210a      	movs	r1, #10
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fbeb 	bl	8005160 <USBH_FindInterface>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2bff      	cmp	r3, #255	; 0xff
 8004992:	d002      	beq.n	800499a <USBH_CDC_InterfaceInit+0x11a>
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d901      	bls.n	800499e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800499a:	2302      	movs	r3, #2
 800499c:	e0c2      	b.n	8004b24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	211a      	movs	r1, #26
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da16      	bge.n	80049e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	211a      	movs	r1, #26
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	211a      	movs	r1, #26
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	835a      	strh	r2, [r3, #26]
 80049e2:	e015      	b.n	8004a10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	211a      	movs	r1, #26
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	211a      	movs	r1, #26
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	211a      	movs	r1, #26
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da16      	bge.n	8004a56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	211a      	movs	r1, #26
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	211a      	movs	r1, #26
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	835a      	strh	r2, [r3, #26]
 8004a54:	e015      	b.n	8004a82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	211a      	movs	r1, #26
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	211a      	movs	r1, #26
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	7b9b      	ldrb	r3, [r3, #14]
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 fd8a 	bl	80065a2 <USBH_AllocPipe>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	7bdb      	ldrb	r3, [r3, #15]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 fd80 	bl	80065a2 <USBH_AllocPipe>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	7b59      	ldrb	r1, [r3, #13]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	7b98      	ldrb	r0, [r3, #14]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	8b12      	ldrh	r2, [r2, #24]
 8004ac2:	9202      	str	r2, [sp, #8]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	9201      	str	r2, [sp, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4623      	mov	r3, r4
 8004acc:	4602      	mov	r2, r0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 fd38 	bl	8006544 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	7b19      	ldrb	r1, [r3, #12]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	7bd8      	ldrb	r0, [r3, #15]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	8b52      	ldrh	r2, [r2, #26]
 8004aec:	9202      	str	r2, [sp, #8]
 8004aee:	2202      	movs	r2, #2
 8004af0:	9201      	str	r2, [sp, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4623      	mov	r3, r4
 8004af6:	4602      	mov	r2, r0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f001 fd23 	bl	8006544 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	7b5b      	ldrb	r3, [r3, #13]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f002 f82e 	bl	8006b70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f002 f827 	bl	8006b70 <USBH_LL_SetToggle>

  return USBH_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00e      	beq.n	8004b64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f001 fd18 	bl	8006582 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 fd43 	bl	80065e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	7b1b      	ldrb	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	7b1b      	ldrb	r3, [r3, #12]
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f001 fd05 	bl	8006582 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	7b1b      	ldrb	r3, [r3, #12]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f001 fd30 	bl	80065e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	7b5b      	ldrb	r3, [r3, #13]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	7b5b      	ldrb	r3, [r3, #13]
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f001 fcf2 	bl	8006582 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f001 fd1d 	bl	80065e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 f889 	bl	8006cdc <free>
    phost->pActiveClass->pData = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3340      	adds	r3, #64	; 0x40
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8b1 	bl	8004d5e <GetLineCoding>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004c00:	7afb      	ldrb	r3, [r7, #11]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004c12:	7afb      	ldrb	r3, [r7, #11]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d877      	bhi.n	8004d30 <USBH_CDC_Process+0x114>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <USBH_CDC_Process+0x2c>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c5d 	.word	0x08004c5d
 8004c4c:	08004c63 	.word	0x08004c63
 8004c50:	08004c93 	.word	0x08004c93
 8004c54:	08004d07 	.word	0x08004d07
 8004c58:	08004d15 	.word	0x08004d15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	e06d      	b.n	8004d3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f897 	bl	8004d9c <SetLineCoding>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004c72:	7bbb      	ldrb	r3, [r7, #14]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004c80:	e058      	b.n	8004d34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004c82:	7bbb      	ldrb	r3, [r7, #14]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d055      	beq.n	8004d34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004c90:	e050      	b.n	8004d34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3340      	adds	r3, #64	; 0x40
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f860 	bl	8004d5e <GetLineCoding>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004ca2:	7bbb      	ldrb	r3, [r7, #14]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d126      	bne.n	8004cf6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	791b      	ldrb	r3, [r3, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d13b      	bne.n	8004d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d133      	bne.n	8004d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d12b      	bne.n	8004d38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d124      	bne.n	8004d38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f958 	bl	8004fa4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004cf4:	e020      	b.n	8004d38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004cf6:	7bbb      	ldrb	r3, [r7, #14]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d01d      	beq.n	8004d38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004d04:	e018      	b.n	8004d38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f867 	bl	8004dda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8da 	bl	8004ec6 <CDC_ProcessReception>
      break;
 8004d12:	e014      	b.n	8004d3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004d14:	2100      	movs	r1, #0
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 ffe3 	bl	8005ce2 <USBH_ClrFeature>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004d2e:	e005      	b.n	8004d3c <USBH_CDC_Process+0x120>

    default:
      break;
 8004d30:	bf00      	nop
 8004d32:	e004      	b.n	8004d3e <USBH_CDC_Process+0x122>
      break;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <USBH_CDC_Process+0x122>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <USBH_CDC_Process+0x122>
      break;
 8004d3c:	bf00      	nop

  }

  return status;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22a1      	movs	r2, #161	; 0xa1
 8004d6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2221      	movs	r2, #33	; 0x21
 8004d72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2207      	movs	r2, #7
 8004d84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2207      	movs	r2, #7
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 f988 	bl	80060a2 <USBH_CtlReq>
 8004d92:	4603      	mov	r3, r0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 f969 	bl	80060a2 <USBH_CtlReq>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <CDC_ProcessTransmission+0x26>
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d023      	beq.n	8004e46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004dfe:	e05e      	b.n	8004ebe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	8b12      	ldrh	r2, [r2, #24]
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d90b      	bls.n	8004e24 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	69d9      	ldr	r1, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8b1a      	ldrh	r2, [r3, #24]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	7b5b      	ldrb	r3, [r3, #13]
 8004e18:	2001      	movs	r0, #1
 8004e1a:	9000      	str	r0, [sp, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fb4e 	bl	80064be <USBH_BulkSendData>
 8004e22:	e00b      	b.n	8004e3c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	7b5b      	ldrb	r3, [r3, #13]
 8004e32:	2001      	movs	r0, #1
 8004e34:	9000      	str	r0, [sp, #0]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fb41 	bl	80064be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e44:	e03b      	b.n	8004ebe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	7b5b      	ldrb	r3, [r3, #13]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 fe65 	bl	8006b1c <USBH_LL_GetURBState>
 8004e52:	4603      	mov	r3, r0
 8004e54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d128      	bne.n	8004eae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	8b12      	ldrh	r2, [r2, #24]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d90e      	bls.n	8004e86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	8b12      	ldrh	r2, [r2, #24]
 8004e70:	1a9a      	subs	r2, r3, r2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	8b12      	ldrh	r2, [r2, #24]
 8004e7e:	441a      	add	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	61da      	str	r2, [r3, #28]
 8004e84:	e002      	b.n	8004e8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e9c:	e00e      	b.n	8004ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f868 	bl	8004f7c <USBH_CDC_TransmitCallback>
      break;
 8004eac:	e006      	b.n	8004ebc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004eae:	7afb      	ldrb	r3, [r7, #11]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d103      	bne.n	8004ebc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004ebc:	bf00      	nop
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d002      	beq.n	8004eec <CDC_ProcessReception+0x26>
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d00e      	beq.n	8004f08 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004eea:	e043      	b.n	8004f74 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6a19      	ldr	r1, [r3, #32]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	8b5a      	ldrh	r2, [r3, #26]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	7b1b      	ldrb	r3, [r3, #12]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 fb05 	bl	8006508 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2204      	movs	r2, #4
 8004f02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f06:	e035      	b.n	8004f74 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	7b1b      	ldrb	r3, [r3, #12]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 fe04 	bl	8006b1c <USBH_LL_GetURBState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d129      	bne.n	8004f72 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	7b1b      	ldrb	r3, [r3, #12]
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fd67 	bl	80069f8 <USBH_LL_GetLastXferSize>
 8004f2a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d016      	beq.n	8004f64 <CDC_ProcessReception+0x9e>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	8b5b      	ldrh	r3, [r3, #26]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d910      	bls.n	8004f64 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	441a      	add	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f62:	e006      	b.n	8004f72 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f80f 	bl	8004f90 <USBH_CDC_ReceiveCallback>
      break;
 8004f72:	bf00      	nop
  }
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e029      	b.n	8005024 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	79fa      	ldrb	r2, [r7, #7]
 8004fd4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f81f 	bl	800502c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f001 fc37 	bl	8006890 <USBH_LL_Init>

  return USBH_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e009      	b.n	8005052 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	33e0      	adds	r3, #224	; 0xe0
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b0e      	cmp	r3, #14
 8005056:	d9f2      	bls.n	800503e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e009      	b.n	8005072 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d3f1      	bcc.n	800505e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2240      	movs	r2, #64	; 0x40
 800509e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10e      	bne.n	8005110 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	33de      	adds	r3, #222	; 0xde
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e004      	b.n	800511a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005110:	2302      	movs	r3, #2
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e001      	b.n	800511a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005116:	2302      	movs	r3, #2
 8005118:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	429a      	cmp	r2, r3
 8005142:	d204      	bcs.n	800514e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800514c:	e001      	b.n	8005152 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800514e:	2302      	movs	r3, #2
 8005150:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	70fb      	strb	r3, [r7, #3]
 8005172:	460b      	mov	r3, r1
 8005174:	70bb      	strb	r3, [r7, #2]
 8005176:	4613      	mov	r3, r2
 8005178:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005188:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800518a:	e025      	b.n	80051d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	221a      	movs	r2, #26
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	3308      	adds	r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	3302      	adds	r3, #2
 800519c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	795b      	ldrb	r3, [r3, #5]
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d002      	beq.n	80051ae <USBH_FindInterface+0x4e>
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	2bff      	cmp	r3, #255	; 0xff
 80051ac:	d111      	bne.n	80051d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051b2:	78ba      	ldrb	r2, [r7, #2]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d002      	beq.n	80051be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051b8:	78bb      	ldrb	r3, [r7, #2]
 80051ba:	2bff      	cmp	r3, #255	; 0xff
 80051bc:	d109      	bne.n	80051d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051c2:	787a      	ldrb	r2, [r7, #1]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d002      	beq.n	80051ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80051c8:	787b      	ldrb	r3, [r7, #1]
 80051ca:	2bff      	cmp	r3, #255	; 0xff
 80051cc:	d101      	bne.n	80051d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	e006      	b.n	80051e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	3301      	adds	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d9d6      	bls.n	800518c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80051de:	23ff      	movs	r3, #255	; 0xff
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fb87 	bl	8006908 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80051fa:	2101      	movs	r1, #1
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fca0 	bl	8006b42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af04      	add	r7, sp, #16
 8005212:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005214:	2302      	movs	r3, #2
 8005216:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2203      	movs	r2, #3
 800522c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b0b      	cmp	r3, #11
 8005236:	f200 81b3 	bhi.w	80055a0 <USBH_Process+0x394>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <USBH_Process+0x34>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005271 	.word	0x08005271
 8005244:	080052a3 	.word	0x080052a3
 8005248:	0800530b 	.word	0x0800530b
 800524c:	0800553b 	.word	0x0800553b
 8005250:	080055a1 	.word	0x080055a1
 8005254:	080053af 	.word	0x080053af
 8005258:	080054e1 	.word	0x080054e1
 800525c:	080053e5 	.word	0x080053e5
 8005260:	08005405 	.word	0x08005405
 8005264:	08005425 	.word	0x08005425
 8005268:	08005453 	.word	0x08005453
 800526c:	08005523 	.word	0x08005523
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8193 	beq.w	80055a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005284:	20c8      	movs	r0, #200	; 0xc8
 8005286:	f001 fca3 	bl	8006bd0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 fb99 	bl	80069c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80052a0:	e180      	b.n	80055a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80052ba:	e182      	b.n	80055c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80052c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c6:	d914      	bls.n	80052f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d903      	bls.n	80052ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	220d      	movs	r2, #13
 80052e6:	701a      	strb	r2, [r3, #0]
      break;
 80052e8:	e16b      	b.n	80055c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
      break;
 80052f0:	e167      	b.n	80055c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80052f8:	f103 020a 	add.w	r2, r3, #10
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005302:	200a      	movs	r0, #10
 8005304:	f001 fc64 	bl	8006bd0 <USBH_Delay>
      break;
 8005308:	e15b      	b.n	80055c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800531a:	2104      	movs	r1, #4
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005320:	2064      	movs	r0, #100	; 0x64
 8005322:	f001 fc55 	bl	8006bd0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f001 fb24 	bl	8006974 <USBH_LL_GetSpeed>
 800532c:	4603      	mov	r3, r0
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2205      	movs	r2, #5
 800533a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800533c:	2100      	movs	r1, #0
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f92f 	bl	80065a2 <USBH_AllocPipe>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 f927 	bl	80065a2 <USBH_AllocPipe>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7919      	ldrb	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005370:	b292      	uxth	r2, r2
 8005372:	9202      	str	r2, [sp, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	9201      	str	r2, [sp, #4]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4603      	mov	r3, r0
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f001 f8e0 	bl	8006544 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7959      	ldrb	r1, [r3, #5]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005398:	b292      	uxth	r2, r2
 800539a:	9202      	str	r2, [sp, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	9201      	str	r2, [sp, #4]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4603      	mov	r3, r0
 80053a4:	2200      	movs	r2, #0
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 f8cc 	bl	8006544 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80053ac:	e109      	b.n	80055c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f90c 	bl	80055cc <USBH_HandleEnum>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 80f3 	bne.w	80055a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d103      	bne.n	80053dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2208      	movs	r2, #8
 80053d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80053da:	e0e5      	b.n	80055a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2207      	movs	r2, #7
 80053e0:	701a      	strb	r2, [r3, #0]
      break;
 80053e2:	e0e1      	b.n	80055a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80de 	beq.w	80055ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80053f6:	2101      	movs	r1, #1
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2208      	movs	r2, #8
 8005400:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005402:	e0d3      	b.n	80055ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800540a:	b29b      	uxth	r3, r3
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fc20 	bl	8005c54 <USBH_SetCfg>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 80ca 	bne.w	80055b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2209      	movs	r2, #9
 8005420:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005422:	e0c5      	b.n	80055b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005432:	2101      	movs	r1, #1
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fc30 	bl	8005c9a <USBH_SetFeature>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80b9 	bne.w	80055b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	220a      	movs	r2, #10
 8005446:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005448:	e0b4      	b.n	80055b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	220a      	movs	r2, #10
 800544e:	701a      	strb	r2, [r3, #0]
      break;
 8005450:	e0b0      	b.n	80055b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80ad 	beq.w	80055b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e016      	b.n	800549a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	32de      	adds	r2, #222	; 0xde
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	791a      	ldrb	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800547e:	429a      	cmp	r2, r3
 8005480:	d108      	bne.n	8005494 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	32de      	adds	r2, #222	; 0xde
 8005488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005492:	e005      	b.n	80054a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	3301      	adds	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0e5      	beq.n	800546c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2206      	movs	r2, #6
 80054c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80054c8:	2103      	movs	r1, #3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80054ce:	e073      	b.n	80055b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	220d      	movs	r2, #13
 80054d4:	701a      	strb	r2, [r3, #0]
      break;
 80054d6:	e06f      	b.n	80055b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	220d      	movs	r2, #13
 80054dc:	701a      	strb	r2, [r3, #0]
      break;
 80054de:	e06b      	b.n	80055b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d017      	beq.n	800551a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	220b      	movs	r2, #11
 8005506:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005508:	e058      	b.n	80055bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d154      	bne.n	80055bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	220d      	movs	r2, #13
 8005516:	701a      	strb	r2, [r3, #0]
      break;
 8005518:	e050      	b.n	80055bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	220d      	movs	r2, #13
 800551e:	701a      	strb	r2, [r3, #0]
      break;
 8005520:	e04c      	b.n	80055bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d049      	beq.n	80055c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
      }
      break;
 8005538:	e042      	b.n	80055c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fd72 	bl	800502c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005576:	2105      	movs	r1, #5
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fe2b 	bl	80051ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005596:	e014      	b.n	80055c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 f9b5 	bl	8006908 <USBH_LL_Start>
      break;
 800559e:	e010      	b.n	80055c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80055a0:	bf00      	nop
 80055a2:	e00e      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055a4:	bf00      	nop
 80055a6:	e00c      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055a8:	bf00      	nop
 80055aa:	e00a      	b.n	80055c2 <USBH_Process+0x3b6>
    break;
 80055ac:	bf00      	nop
 80055ae:	e008      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055b0:	bf00      	nop
 80055b2:	e006      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <USBH_Process+0x3b6>
      break;
 80055c0:	bf00      	nop
  }
  return USBH_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af04      	add	r7, sp, #16
 80055d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80055d8:	2301      	movs	r3, #1
 80055da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b07      	cmp	r3, #7
 80055e2:	f200 81c1 	bhi.w	8005968 <USBH_HandleEnum+0x39c>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <USBH_HandleEnum+0x20>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	080056cb 	.word	0x080056cb
 80055f4:	08005735 	.word	0x08005735
 80055f8:	080057c3 	.word	0x080057c3
 80055fc:	0800582d 	.word	0x0800582d
 8005600:	0800589d 	.word	0x0800589d
 8005604:	080058e3 	.word	0x080058e3
 8005608:	08005929 	.word	0x08005929
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800560c:	2108      	movs	r1, #8
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa50 	bl	8005ab4 <USBH_Get_DevDesc>
 8005614:	4603      	mov	r3, r0
 8005616:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d130      	bne.n	8005680 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7919      	ldrb	r1, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005642:	b292      	uxth	r2, r2
 8005644:	9202      	str	r2, [sp, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 ff77 	bl	8006544 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	7959      	ldrb	r1, [r3, #5]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800566a:	b292      	uxth	r2, r2
 800566c:	9202      	str	r2, [sp, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	9201      	str	r2, [sp, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4603      	mov	r3, r0
 8005676:	2200      	movs	r2, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 ff63 	bl	8006544 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800567e:	e175      	b.n	800596c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b03      	cmp	r3, #3
 8005684:	f040 8172 	bne.w	800596c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800568e:	3301      	adds	r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d903      	bls.n	80056aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	220d      	movs	r2, #13
 80056a6:	701a      	strb	r2, [r3, #0]
      break;
 80056a8:	e160      	b.n	800596c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	795b      	ldrb	r3, [r3, #5]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 ff97 	bl	80065e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	791b      	ldrb	r3, [r3, #4]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 ff91 	bl	80065e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
      break;
 80056c8:	e150      	b.n	800596c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80056ca:	2112      	movs	r1, #18
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9f1 	bl	8005ab4 <USBH_Get_DevDesc>
 80056d2:	4603      	mov	r3, r0
 80056d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80056e2:	e145      	b.n	8005970 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f040 8142 	bne.w	8005970 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80056f2:	3301      	adds	r3, #1
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005702:	2b03      	cmp	r3, #3
 8005704:	d903      	bls.n	800570e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	220d      	movs	r2, #13
 800570a:	701a      	strb	r2, [r3, #0]
      break;
 800570c:	e130      	b.n	8005970 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	795b      	ldrb	r3, [r3, #5]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 ff65 	bl	80065e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	791b      	ldrb	r3, [r3, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 ff5f 	bl	80065e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
      break;
 8005732:	e11d      	b.n	8005970 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005734:	2101      	movs	r1, #1
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa68 	bl	8005c0c <USBH_SetAddress>
 800573c:	4603      	mov	r3, r0
 800573e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d132      	bne.n	80057ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005746:	2002      	movs	r0, #2
 8005748:	f001 fa42 	bl	8006bd0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2203      	movs	r2, #3
 8005758:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7919      	ldrb	r1, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800576e:	b292      	uxth	r2, r2
 8005770:	9202      	str	r2, [sp, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	9201      	str	r2, [sp, #4]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	4603      	mov	r3, r0
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fee1 	bl	8006544 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7959      	ldrb	r1, [r3, #5]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005796:	b292      	uxth	r2, r2
 8005798:	9202      	str	r2, [sp, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	9201      	str	r2, [sp, #4]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4603      	mov	r3, r0
 80057a2:	2200      	movs	r2, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fecd 	bl	8006544 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80057aa:	e0e3      	b.n	8005974 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	f040 80e0 	bne.w	8005974 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	220d      	movs	r2, #13
 80057b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	705a      	strb	r2, [r3, #1]
      break;
 80057c0:	e0d8      	b.n	8005974 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80057c2:	2109      	movs	r1, #9
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f99d 	bl	8005b04 <USBH_Get_CfgDesc>
 80057ca:	4603      	mov	r3, r0
 80057cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80057da:	e0cd      	b.n	8005978 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	f040 80ca 	bne.w	8005978 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80057ea:	3301      	adds	r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d903      	bls.n	8005806 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	220d      	movs	r2, #13
 8005802:	701a      	strb	r2, [r3, #0]
      break;
 8005804:	e0b8      	b.n	8005978 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	795b      	ldrb	r3, [r3, #5]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fee9 	bl	80065e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fee3 	bl	80065e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
      break;
 800582a:	e0a5      	b.n	8005978 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f965 	bl	8005b04 <USBH_Get_CfgDesc>
 800583a:	4603      	mov	r3, r0
 800583c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2205      	movs	r2, #5
 8005848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800584a:	e097      	b.n	800597c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b03      	cmp	r3, #3
 8005850:	f040 8094 	bne.w	800597c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800585a:	3301      	adds	r3, #1
 800585c:	b2da      	uxtb	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800586a:	2b03      	cmp	r3, #3
 800586c:	d903      	bls.n	8005876 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	220d      	movs	r2, #13
 8005872:	701a      	strb	r2, [r3, #0]
      break;
 8005874:	e082      	b.n	800597c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	795b      	ldrb	r3, [r3, #5]
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 feb1 	bl	80065e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	791b      	ldrb	r3, [r3, #4]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 feab 	bl	80065e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e06f      	b.n	800597c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d019      	beq.n	80058da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80058b2:	23ff      	movs	r3, #255	; 0xff
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f949 	bl	8005b4c <USBH_Get_StringDesc>
 80058ba:	4603      	mov	r3, r0
 80058bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2206      	movs	r2, #6
 80058c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80058ca:	e059      	b.n	8005980 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d156      	bne.n	8005980 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2206      	movs	r2, #6
 80058d6:	705a      	strb	r2, [r3, #1]
      break;
 80058d8:	e052      	b.n	8005980 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2206      	movs	r2, #6
 80058de:	705a      	strb	r2, [r3, #1]
      break;
 80058e0:	e04e      	b.n	8005980 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d019      	beq.n	8005920 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80058f8:	23ff      	movs	r3, #255	; 0xff
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f926 	bl	8005b4c <USBH_Get_StringDesc>
 8005900:	4603      	mov	r3, r0
 8005902:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2207      	movs	r2, #7
 800590e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005910:	e038      	b.n	8005984 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d135      	bne.n	8005984 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2207      	movs	r2, #7
 800591c:	705a      	strb	r2, [r3, #1]
      break;
 800591e:	e031      	b.n	8005984 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2207      	movs	r2, #7
 8005924:	705a      	strb	r2, [r3, #1]
      break;
 8005926:	e02d      	b.n	8005984 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800592e:	2b00      	cmp	r3, #0
 8005930:	d017      	beq.n	8005962 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800593e:	23ff      	movs	r3, #255	; 0xff
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f903 	bl	8005b4c <USBH_Get_StringDesc>
 8005946:	4603      	mov	r3, r0
 8005948:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005954:	e018      	b.n	8005988 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d115      	bne.n	8005988 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
      break;
 8005960:	e012      	b.n	8005988 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
      break;
 8005966:	e00f      	b.n	8005988 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005968:	bf00      	nop
 800596a:	e00e      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 800596c:	bf00      	nop
 800596e:	e00c      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005970:	bf00      	nop
 8005972:	e00a      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005974:	bf00      	nop
 8005976:	e008      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005978:	bf00      	nop
 800597a:	e006      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 800597c:	bf00      	nop
 800597e:	e004      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <USBH_HandleEnum+0x3be>
      break;
 8005988:	bf00      	nop
  }
  return Status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f804 	bl	80059d6 <USBH_HandleSof>
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b0b      	cmp	r3, #11
 80059e6:	d10a      	bne.n	80059fe <USBH_HandleSof+0x28>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
  }
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005a16:	bf00      	nop
}
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005a32:	bf00      	nop
}
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 ff56 	bl	800693e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	791b      	ldrb	r3, [r3, #4]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fda3 	bl	80065e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	795b      	ldrb	r3, [r3, #5]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fd9d 	bl	80065e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f864 	bl	8005ba2 <USBH_GetDescriptor>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	b292      	uxth	r2, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	f000 f918 	bl	8005d2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	331c      	adds	r3, #28
 8005b14:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005b16:	887b      	ldrh	r3, [r7, #2]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b20:	2100      	movs	r1, #0
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f83d 	bl	8005ba2 <USBH_GetDescriptor>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	72fb      	strb	r3, [r7, #11]
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005b38:	887a      	ldrh	r2, [r7, #2]
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f964 	bl	8005e0a <USBH_ParseCfgDesc>
  }

  return status;
 8005b42:	7afb      	ldrb	r3, [r7, #11]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	461a      	mov	r2, r3
 8005b58:	460b      	mov	r3, r1
 8005b5a:	72fb      	strb	r3, [r7, #11]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b68:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005b70:	893b      	ldrh	r3, [r7, #8]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	460b      	mov	r3, r1
 8005b76:	2100      	movs	r1, #0
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f812 	bl	8005ba2 <USBH_GetDescriptor>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d107      	bne.n	8005b98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b8e:	893a      	ldrh	r2, [r7, #8]
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fa37 	bl	8006006 <USBH_ParseStringDesc>
  }

  return status;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	72fb      	strb	r3, [r7, #11]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d11c      	bne.n	8005bf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2206      	movs	r2, #6
 8005bcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	893a      	ldrh	r2, [r7, #8]
 8005bd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005bd4:	893b      	ldrh	r3, [r7, #8]
 8005bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bde:	d104      	bne.n	8005bea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f240 4209 	movw	r2, #1033	; 0x409
 8005be6:	829a      	strh	r2, [r3, #20]
 8005be8:	e002      	b.n	8005bf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8b3a      	ldrh	r2, [r7, #24]
 8005bf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005bf6:	8b3b      	ldrh	r3, [r7, #24]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa50 	bl	80060a2 <USBH_CtlReq>
 8005c02:	4603      	mov	r3, r0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	789b      	ldrb	r3, [r3, #2]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10f      	bne.n	8005c40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2205      	movs	r2, #5
 8005c2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005c40:	2200      	movs	r2, #0
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa2c 	bl	80060a2 <USBH_CtlReq>
 8005c4a:	4603      	mov	r3, r0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10e      	bne.n	8005c86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2209      	movs	r2, #9
 8005c72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa09 	bl	80060a2 <USBH_CtlReq>
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	789b      	ldrb	r3, [r3, #2]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10f      	bne.n	8005cce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f9e5 	bl	80060a2 <USBH_CtlReq>
 8005cd8:	4603      	mov	r3, r0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	789b      	ldrb	r3, [r3, #2]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10f      	bne.n	8005d16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f9c1 	bl	80060a2 <USBH_CtlReq>
 8005d20:	4603      	mov	r3, r0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	785a      	ldrb	r2, [r3, #1]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3303      	adds	r3, #3
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	791a      	ldrb	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	795a      	ldrb	r2, [r3, #5]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	799a      	ldrb	r2, [r3, #6]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	79da      	ldrb	r2, [r3, #7]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d939      	bls.n	8005dfe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3309      	adds	r3, #9
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	330a      	adds	r3, #10
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	330b      	adds	r3, #11
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	330d      	adds	r3, #13
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	7b9a      	ldrb	r2, [r3, #14]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	7bda      	ldrb	r2, [r3, #15]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	7c1a      	ldrb	r2, [r3, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7c5a      	ldrb	r2, [r3, #17]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	745a      	strb	r2, [r3, #17]
  }
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b08a      	sub	sp, #40	; 0x28
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	781a      	ldrb	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785a      	ldrb	r2, [r3, #1]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	3302      	adds	r3, #2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	3303      	adds	r3, #3
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	791a      	ldrb	r2, [r3, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	795a      	ldrb	r2, [r3, #5]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	799a      	ldrb	r2, [r3, #6]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	79da      	ldrb	r2, [r3, #7]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	7a1a      	ldrb	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d95f      	bls.n	8005f46 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8005e86:	2309      	movs	r3, #9
 8005e88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005e8e:	e051      	b.n	8005f34 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005e90:	f107 0316 	add.w	r3, r7, #22
 8005e94:	4619      	mov	r1, r3
 8005e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e98:	f000 f8e8 	bl	800606c <USBH_GetNextDesc>
 8005e9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d146      	bne.n	8005f34 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eaa:	221a      	movs	r2, #26
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ebc:	69f8      	ldr	r0, [r7, #28]
 8005ebe:	f000 f846 	bl	8005f4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005ecc:	e022      	b.n	8005f14 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005ece:	f107 0316 	add.w	r3, r7, #22
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ed6:	f000 f8c9 	bl	800606c <USBH_GetNextDesc>
 8005eda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d117      	bne.n	8005f14 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005eec:	3201      	adds	r2, #1
 8005eee:	00d2      	lsls	r2, r2, #3
 8005ef0:	211a      	movs	r1, #26
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3308      	adds	r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	3304      	adds	r3, #4
 8005f00:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8005f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f04:	69b8      	ldr	r0, [r7, #24]
 8005f06:	f000 f851 	bl	8005fac <USBH_ParseEPDesc>
            ep_ix++;
 8005f0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d204      	bcs.n	8005f2a <USBH_ParseCfgDesc+0x120>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	885a      	ldrh	r2, [r3, #2]
 8005f24:	8afb      	ldrh	r3, [r7, #22]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d8d1      	bhi.n	8005ece <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8005f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f2e:	3301      	adds	r3, #1
 8005f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d804      	bhi.n	8005f46 <USBH_ParseCfgDesc+0x13c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	885a      	ldrh	r2, [r3, #2]
 8005f40:	8afb      	ldrh	r3, [r7, #22]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8a4      	bhi.n	8005e90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8005f46:	bf00      	nop
 8005f48:	3728      	adds	r7, #40	; 0x28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	785a      	ldrb	r2, [r3, #1]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	789a      	ldrb	r2, [r3, #2]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	78da      	ldrb	r2, [r3, #3]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	791a      	ldrb	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	795a      	ldrb	r2, [r3, #5]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	799a      	ldrb	r2, [r3, #6]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	79da      	ldrb	r2, [r3, #7]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	7a1a      	ldrb	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	721a      	strb	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	785a      	ldrb	r2, [r3, #1]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	789a      	ldrb	r2, [r3, #2]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	78da      	ldrb	r2, [r3, #3]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	3305      	adds	r3, #5
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	799a      	ldrb	r2, [r3, #6]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	719a      	strb	r2, [r3, #6]
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	4613      	mov	r3, r2
 8006012:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d120      	bne.n	8006060 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	1e9a      	subs	r2, r3, #2
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	4293      	cmp	r3, r2
 8006028:	bf28      	it	cs
 800602a:	4613      	movcs	r3, r2
 800602c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3302      	adds	r3, #2
 8006032:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006034:	2300      	movs	r3, #0
 8006036:	82fb      	strh	r3, [r7, #22]
 8006038:	e00b      	b.n	8006052 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800603a:	8afb      	ldrh	r3, [r7, #22]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3301      	adds	r3, #1
 800604a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	3302      	adds	r3, #2
 8006050:	82fb      	strh	r3, [r7, #22]
 8006052:	8afa      	ldrh	r2, [r7, #22]
 8006054:	8abb      	ldrh	r3, [r7, #20]
 8006056:	429a      	cmp	r2, r3
 8006058:	d3ef      	bcc.n	800603a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
  }
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	4413      	add	r3, r2
 8006082:	b29a      	uxth	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	4613      	mov	r3, r2
 80060ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	789b      	ldrb	r3, [r3, #2]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d002      	beq.n	80060c2 <USBH_CtlReq+0x20>
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d00f      	beq.n	80060e0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80060c0:	e027      	b.n	8006112 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2202      	movs	r2, #2
 80060d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
      break;
 80060de:	e018      	b.n	8006112 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f81b 	bl	800611c <USBH_HandleControl>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <USBH_CtlReq+0x54>
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d106      	bne.n	8006104 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	761a      	strb	r2, [r3, #24]
      break;
 8006102:	e005      	b.n	8006110 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d102      	bne.n	8006110 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	709a      	strb	r2, [r3, #2]
      break;
 8006110:	bf00      	nop
  }
  return status;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af02      	add	r7, sp, #8
 8006122:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006128:	2300      	movs	r3, #0
 800612a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7e1b      	ldrb	r3, [r3, #24]
 8006130:	3b01      	subs	r3, #1
 8006132:	2b0a      	cmp	r3, #10
 8006134:	f200 8156 	bhi.w	80063e4 <USBH_HandleControl+0x2c8>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <USBH_HandleControl+0x24>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	0800616d 	.word	0x0800616d
 8006144:	08006187 	.word	0x08006187
 8006148:	080061f1 	.word	0x080061f1
 800614c:	08006217 	.word	0x08006217
 8006150:	0800624f 	.word	0x0800624f
 8006154:	08006279 	.word	0x08006279
 8006158:	080062cb 	.word	0x080062cb
 800615c:	080062ed 	.word	0x080062ed
 8006160:	08006329 	.word	0x08006329
 8006164:	0800634f 	.word	0x0800634f
 8006168:	0800638d 	.word	0x0800638d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f103 0110 	add.w	r1, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	795b      	ldrb	r3, [r3, #5]
 8006176:	461a      	mov	r2, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f943 	bl	8006404 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	761a      	strb	r2, [r3, #24]
      break;
 8006184:	e139      	b.n	80063fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	795b      	ldrb	r3, [r3, #5]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fcc5 	bl	8006b1c <USBH_LL_GetURBState>
 8006192:	4603      	mov	r3, r0
 8006194:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d11e      	bne.n	80061da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7c1b      	ldrb	r3, [r3, #16]
 80061a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8adb      	ldrh	r3, [r3, #22]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80061ae:	7b7b      	ldrb	r3, [r7, #13]
 80061b0:	2b80      	cmp	r3, #128	; 0x80
 80061b2:	d103      	bne.n	80061bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2203      	movs	r2, #3
 80061b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80061ba:	e115      	b.n	80063e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2205      	movs	r2, #5
 80061c0:	761a      	strb	r2, [r3, #24]
      break;
 80061c2:	e111      	b.n	80063e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80061c4:	7b7b      	ldrb	r3, [r7, #13]
 80061c6:	2b80      	cmp	r3, #128	; 0x80
 80061c8:	d103      	bne.n	80061d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2209      	movs	r2, #9
 80061ce:	761a      	strb	r2, [r3, #24]
      break;
 80061d0:	e10a      	b.n	80063e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2207      	movs	r2, #7
 80061d6:	761a      	strb	r2, [r3, #24]
      break;
 80061d8:	e106      	b.n	80063e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d003      	beq.n	80061e8 <USBH_HandleControl+0xcc>
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	f040 8100 	bne.w	80063e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	220b      	movs	r2, #11
 80061ec:	761a      	strb	r2, [r3, #24]
      break;
 80061ee:	e0fb      	b.n	80063e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6899      	ldr	r1, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	899a      	ldrh	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	791b      	ldrb	r3, [r3, #4]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f93a 	bl	8006482 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2204      	movs	r2, #4
 8006212:	761a      	strb	r2, [r3, #24]
      break;
 8006214:	e0f1      	b.n	80063fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fc7d 	bl	8006b1c <USBH_LL_GetURBState>
 8006222:	4603      	mov	r3, r0
 8006224:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2209      	movs	r2, #9
 8006230:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b05      	cmp	r3, #5
 8006236:	d102      	bne.n	800623e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006238:	2303      	movs	r3, #3
 800623a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800623c:	e0d6      	b.n	80063ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b04      	cmp	r3, #4
 8006242:	f040 80d3 	bne.w	80063ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	220b      	movs	r2, #11
 800624a:	761a      	strb	r2, [r3, #24]
      break;
 800624c:	e0ce      	b.n	80063ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	899a      	ldrh	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	795b      	ldrb	r3, [r3, #5]
 800625a:	2001      	movs	r0, #1
 800625c:	9000      	str	r0, [sp, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8ea 	bl	8006438 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2206      	movs	r2, #6
 8006274:	761a      	strb	r2, [r3, #24]
      break;
 8006276:	e0c0      	b.n	80063fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	795b      	ldrb	r3, [r3, #5]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fc4c 	bl	8006b1c <USBH_LL_GetURBState>
 8006284:	4603      	mov	r3, r0
 8006286:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d103      	bne.n	8006296 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2207      	movs	r2, #7
 8006292:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006294:	e0ac      	b.n	80063f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b05      	cmp	r3, #5
 800629a:	d105      	bne.n	80062a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	220c      	movs	r2, #12
 80062a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80062a2:	2303      	movs	r3, #3
 80062a4:	73fb      	strb	r3, [r7, #15]
      break;
 80062a6:	e0a3      	b.n	80063f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d103      	bne.n	80062b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2205      	movs	r2, #5
 80062b2:	761a      	strb	r2, [r3, #24]
      break;
 80062b4:	e09c      	b.n	80063f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	f040 8099 	bne.w	80063f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	220b      	movs	r2, #11
 80062c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80062c4:	2302      	movs	r3, #2
 80062c6:	73fb      	strb	r3, [r7, #15]
      break;
 80062c8:	e092      	b.n	80063f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	791b      	ldrb	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	2100      	movs	r1, #0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f8d5 	bl	8006482 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2208      	movs	r2, #8
 80062e8:	761a      	strb	r2, [r3, #24]

      break;
 80062ea:	e086      	b.n	80063fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc12 	bl	8006b1c <USBH_LL_GetURBState>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d105      	bne.n	800630e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	220d      	movs	r2, #13
 8006306:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800630c:	e072      	b.n	80063f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d103      	bne.n	800631c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	220b      	movs	r2, #11
 8006318:	761a      	strb	r2, [r3, #24]
      break;
 800631a:	e06b      	b.n	80063f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	2b05      	cmp	r3, #5
 8006320:	d168      	bne.n	80063f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006322:	2303      	movs	r3, #3
 8006324:	73fb      	strb	r3, [r7, #15]
      break;
 8006326:	e065      	b.n	80063f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	795b      	ldrb	r3, [r3, #5]
 800632c:	2201      	movs	r2, #1
 800632e:	9200      	str	r2, [sp, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f87f 	bl	8006438 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006340:	b29a      	uxth	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	220a      	movs	r2, #10
 800634a:	761a      	strb	r2, [r3, #24]
      break;
 800634c:	e055      	b.n	80063fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	795b      	ldrb	r3, [r3, #5]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbe1 	bl	8006b1c <USBH_LL_GetURBState>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d105      	bne.n	8006370 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	220d      	movs	r2, #13
 800636c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800636e:	e043      	b.n	80063f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d103      	bne.n	800637e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2209      	movs	r2, #9
 800637a:	761a      	strb	r2, [r3, #24]
      break;
 800637c:	e03c      	b.n	80063f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d139      	bne.n	80063f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	220b      	movs	r2, #11
 8006388:	761a      	strb	r2, [r3, #24]
      break;
 800638a:	e035      	b.n	80063f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7e5b      	ldrb	r3, [r3, #25]
 8006390:	3301      	adds	r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	765a      	strb	r2, [r3, #25]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7e5b      	ldrb	r3, [r3, #25]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d806      	bhi.n	80063ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80063ac:	e025      	b.n	80063fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063b4:	2106      	movs	r1, #6
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	795b      	ldrb	r3, [r3, #5]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f90c 	bl	80065e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	791b      	ldrb	r3, [r3, #4]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f906 	bl	80065e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80063de:	2302      	movs	r3, #2
 80063e0:	73fb      	strb	r3, [r7, #15]
      break;
 80063e2:	e00a      	b.n	80063fa <USBH_HandleControl+0x2de>

    default:
      break;
 80063e4:	bf00      	nop
 80063e6:	e008      	b.n	80063fa <USBH_HandleControl+0x2de>
      break;
 80063e8:	bf00      	nop
 80063ea:	e006      	b.n	80063fa <USBH_HandleControl+0x2de>
      break;
 80063ec:	bf00      	nop
 80063ee:	e004      	b.n	80063fa <USBH_HandleControl+0x2de>
      break;
 80063f0:	bf00      	nop
 80063f2:	e002      	b.n	80063fa <USBH_HandleControl+0x2de>
      break;
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <USBH_HandleControl+0x2de>
      break;
 80063f8:	bf00      	nop
  }

  return status;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af04      	add	r7, sp, #16
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006412:	79f9      	ldrb	r1, [r7, #7]
 8006414:	2300      	movs	r3, #0
 8006416:	9303      	str	r3, [sp, #12]
 8006418:	2308      	movs	r3, #8
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	2200      	movs	r2, #0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fb46 	bl	8006aba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af04      	add	r7, sp, #16
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4611      	mov	r1, r2
 8006444:	461a      	mov	r2, r3
 8006446:	460b      	mov	r3, r1
 8006448:	80fb      	strh	r3, [r7, #6]
 800644a:	4613      	mov	r3, r2
 800644c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800645c:	7979      	ldrb	r1, [r7, #5]
 800645e:	7e3b      	ldrb	r3, [r7, #24]
 8006460:	9303      	str	r3, [sp, #12]
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	2301      	movs	r3, #1
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	2200      	movs	r2, #0
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fb21 	bl	8006aba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b088      	sub	sp, #32
 8006486:	af04      	add	r7, sp, #16
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4611      	mov	r1, r2
 800648e:	461a      	mov	r2, r3
 8006490:	460b      	mov	r3, r1
 8006492:	80fb      	strh	r3, [r7, #6]
 8006494:	4613      	mov	r3, r2
 8006496:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006498:	7979      	ldrb	r1, [r7, #5]
 800649a:	2300      	movs	r3, #0
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	9302      	str	r3, [sp, #8]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	2301      	movs	r3, #1
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	2201      	movs	r2, #1
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fb03 	bl	8006aba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80064b4:	2300      	movs	r3, #0

}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b088      	sub	sp, #32
 80064c2:	af04      	add	r7, sp, #16
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	4611      	mov	r1, r2
 80064ca:	461a      	mov	r2, r3
 80064cc:	460b      	mov	r3, r1
 80064ce:	80fb      	strh	r3, [r7, #6]
 80064d0:	4613      	mov	r3, r2
 80064d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80064e2:	7979      	ldrb	r1, [r7, #5]
 80064e4:	7e3b      	ldrb	r3, [r7, #24]
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	9302      	str	r3, [sp, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2301      	movs	r3, #1
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2302      	movs	r3, #2
 80064f6:	2200      	movs	r2, #0
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fade 	bl	8006aba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af04      	add	r7, sp, #16
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	460b      	mov	r3, r1
 8006518:	80fb      	strh	r3, [r7, #6]
 800651a:	4613      	mov	r3, r2
 800651c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800651e:	7979      	ldrb	r1, [r7, #5]
 8006520:	2300      	movs	r3, #0
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	2301      	movs	r3, #1
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2302      	movs	r3, #2
 8006532:	2201      	movs	r2, #1
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fac0 	bl	8006aba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af04      	add	r7, sp, #16
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4603      	mov	r3, r0
 8006554:	70fb      	strb	r3, [r7, #3]
 8006556:	460b      	mov	r3, r1
 8006558:	70bb      	strb	r3, [r7, #2]
 800655a:	4613      	mov	r3, r2
 800655c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800655e:	7878      	ldrb	r0, [r7, #1]
 8006560:	78ba      	ldrb	r2, [r7, #2]
 8006562:	78f9      	ldrb	r1, [r7, #3]
 8006564:	8b3b      	ldrh	r3, [r7, #24]
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	7d3b      	ldrb	r3, [r7, #20]
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	7c3b      	ldrb	r3, [r7, #16]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4603      	mov	r3, r0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa53 	bl	8006a1e <USBH_LL_OpenPipe>

  return USBH_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa72 	bl	8006a7c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f836 	bl	8006620 <USBH_GetFreePipe>
 80065b4:	4603      	mov	r3, r0
 80065b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80065b8:	89fb      	ldrh	r3, [r7, #14]
 80065ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00a      	beq.n	80065d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	89fb      	ldrh	r3, [r7, #14]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	33e0      	adds	r3, #224	; 0xe0
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	b2db      	uxtb	r3, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b0a      	cmp	r3, #10
 80065f4:	d80d      	bhi.n	8006612 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	33e0      	adds	r3, #224	; 0xe0
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	33e0      	adds	r3, #224	; 0xe0
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e00f      	b.n	8006652 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	33e0      	adds	r3, #224	; 0xe0
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	b29b      	uxth	r3, r3
 800664a:	e007      	b.n	800665c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	3301      	adds	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b0a      	cmp	r3, #10
 8006656:	d9ec      	bls.n	8006632 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006658:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800666c:	2201      	movs	r2, #1
 800666e:	490e      	ldr	r1, [pc, #56]	; (80066a8 <MX_USB_HOST_Init+0x40>)
 8006670:	480e      	ldr	r0, [pc, #56]	; (80066ac <MX_USB_HOST_Init+0x44>)
 8006672:	f7fe fca1 	bl	8004fb8 <USBH_Init>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800667c:	f7fa f950 	bl	8000920 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006680:	490b      	ldr	r1, [pc, #44]	; (80066b0 <MX_USB_HOST_Init+0x48>)
 8006682:	480a      	ldr	r0, [pc, #40]	; (80066ac <MX_USB_HOST_Init+0x44>)
 8006684:	f7fe fd26 	bl	80050d4 <USBH_RegisterClass>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800668e:	f7fa f947 	bl	8000920 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006692:	4806      	ldr	r0, [pc, #24]	; (80066ac <MX_USB_HOST_Init+0x44>)
 8006694:	f7fe fdaa 	bl	80051ec <USBH_Start>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800669e:	f7fa f93f 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	080066c9 	.word	0x080066c9
 80066ac:	2000012c 	.word	0x2000012c
 80066b0:	2000000c 	.word	0x2000000c

080066b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <MX_USB_HOST_Process+0x10>)
 80066ba:	f7fe fda7 	bl	800520c <USBH_Process>
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2000012c 	.word	0x2000012c

080066c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d819      	bhi.n	8006710 <USBH_UserProcess+0x48>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <USBH_UserProcess+0x1c>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006711 	.word	0x08006711
 80066e8:	08006701 	.word	0x08006701
 80066ec:	08006711 	.word	0x08006711
 80066f0:	08006709 	.word	0x08006709
 80066f4:	080066f9 	.word	0x080066f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <USBH_UserProcess+0x58>)
 80066fa:	2203      	movs	r2, #3
 80066fc:	701a      	strb	r2, [r3, #0]
  break;
 80066fe:	e008      	b.n	8006712 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <USBH_UserProcess+0x58>)
 8006702:	2202      	movs	r2, #2
 8006704:	701a      	strb	r2, [r3, #0]
  break;
 8006706:	e004      	b.n	8006712 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <USBH_UserProcess+0x58>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
  break;
 800670e:	e000      	b.n	8006712 <USBH_UserProcess+0x4a>

  default:
  break;
 8006710:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	200000b0 	.word	0x200000b0

08006724 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	60da      	str	r2, [r3, #12]
 800673a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006744:	d147      	bne.n	80067d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	4a24      	ldr	r2, [pc, #144]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	6313      	str	r3, [r2, #48]	; 0x30
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006770:	f107 0314 	add.w	r3, r7, #20
 8006774:	4619      	mov	r1, r3
 8006776:	481b      	ldr	r0, [pc, #108]	; (80067e4 <HAL_HCD_MspInit+0xc0>)
 8006778:	f7fa fcc2 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800677c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006782:	2302      	movs	r3, #2
 8006784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678a:	2300      	movs	r3, #0
 800678c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800678e:	230a      	movs	r3, #10
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006792:	f107 0314 	add.w	r3, r7, #20
 8006796:	4619      	mov	r1, r3
 8006798:	4812      	ldr	r0, [pc, #72]	; (80067e4 <HAL_HCD_MspInit+0xc0>)
 800679a:	f7fa fcb1 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	6353      	str	r3, [r2, #52]	; 0x34
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	4a0b      	ldr	r2, [pc, #44]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 80067b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_HCD_MspInit+0xbc>)
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067c6:	2200      	movs	r2, #0
 80067c8:	2100      	movs	r1, #0
 80067ca:	2043      	movs	r0, #67	; 0x43
 80067cc:	f7fa fb79 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067d0:	2043      	movs	r0, #67	; 0x43
 80067d2:	f7fa fb92 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067d6:	bf00      	nop
 80067d8:	3728      	adds	r7, #40	; 0x28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40020000 	.word	0x40020000

080067e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff f8db 	bl	80059b2 <USBH_LL_IncTimer>
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff f913 	bl	8005a3e <USBH_LL_Connect>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff f91c 	bl	8005a6c <USBH_LL_Disconnect>
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
 8006848:	4613      	mov	r3, r2
 800684a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff f8cd 	bl	8005a06 <USBH_LL_PortEnabled>
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f8cd 	bl	8005a22 <USBH_LL_PortDisabled>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d12a      	bne.n	80068f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80068a2:	4a18      	ldr	r2, [pc, #96]	; (8006904 <USBH_LL_Init+0x74>)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a15      	ldr	r2, [pc, #84]	; (8006904 <USBH_LL_Init+0x74>)
 80068ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <USBH_LL_Init+0x74>)
 80068b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80068b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <USBH_LL_Init+0x74>)
 80068bc:	2208      	movs	r2, #8
 80068be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80068c0:	4b10      	ldr	r3, [pc, #64]	; (8006904 <USBH_LL_Init+0x74>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068c6:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <USBH_LL_Init+0x74>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <USBH_LL_Init+0x74>)
 80068ce:	2202      	movs	r2, #2
 80068d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068d2:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <USBH_LL_Init+0x74>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80068d8:	480a      	ldr	r0, [pc, #40]	; (8006904 <USBH_LL_Init+0x74>)
 80068da:	f7fa fde0 	bl	800149e <HAL_HCD_Init>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80068e4:	f7fa f81c 	bl	8000920 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80068e8:	4806      	ldr	r0, [pc, #24]	; (8006904 <USBH_LL_Init+0x74>)
 80068ea:	f7fb f9c4 	bl	8001c76 <HAL_HCD_GetCurrentFrame>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff f84e 	bl	8005994 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000504 	.word	0x20000504

08006908 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800691e:	4618      	mov	r0, r3
 8006920:	f7fb f933 	bl	8001b8a <HAL_HCD_Start>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f95c 	bl	8006be8 <USBH_Get_USB_Status>
 8006930:	4603      	mov	r3, r0
 8006932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006934:	7bbb      	ldrb	r3, [r7, #14]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006954:	4618      	mov	r0, r3
 8006956:	f7fb f93b 	bl	8001bd0 <HAL_HCD_Stop>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f941 	bl	8006be8 <USBH_Get_USB_Status>
 8006966:	4603      	mov	r3, r0
 8006968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800696a:	7bbb      	ldrb	r3, [r7, #14]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006986:	4618      	mov	r0, r3
 8006988:	f7fb f983 	bl	8001c92 <HAL_HCD_GetCurrentSpeed>
 800698c:	4603      	mov	r3, r0
 800698e:	2b02      	cmp	r3, #2
 8006990:	d00c      	beq.n	80069ac <USBH_LL_GetSpeed+0x38>
 8006992:	2b02      	cmp	r3, #2
 8006994:	d80d      	bhi.n	80069b2 <USBH_LL_GetSpeed+0x3e>
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <USBH_LL_GetSpeed+0x2c>
 800699a:	2b01      	cmp	r3, #1
 800699c:	d003      	beq.n	80069a6 <USBH_LL_GetSpeed+0x32>
 800699e:	e008      	b.n	80069b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
    break;
 80069a4:	e008      	b.n	80069b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
    break;
 80069aa:	e005      	b.n	80069b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80069ac:	2302      	movs	r3, #2
 80069ae:	73fb      	strb	r3, [r7, #15]
    break;
 80069b0:	e002      	b.n	80069b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
    break;
 80069b6:	bf00      	nop
  }
  return  speed;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fb f916 	bl	8001c0a <HAL_HCD_ResetPort>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f8ff 	bl	8006be8 <USBH_Get_USB_Status>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fb f91d 	bl	8001c4e <HAL_HCD_HC_GetXferCount>
 8006a14:	4603      	mov	r3, r0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a1e:	b590      	push	{r4, r7, lr}
 8006a20:	b089      	sub	sp, #36	; 0x24
 8006a22:	af04      	add	r7, sp, #16
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	4608      	mov	r0, r1
 8006a28:	4611      	mov	r1, r2
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	70fb      	strb	r3, [r7, #3]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70bb      	strb	r3, [r7, #2]
 8006a34:	4613      	mov	r3, r2
 8006a36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006a46:	787c      	ldrb	r4, [r7, #1]
 8006a48:	78ba      	ldrb	r2, [r7, #2]
 8006a4a:	78f9      	ldrb	r1, [r7, #3]
 8006a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a4e:	9302      	str	r3, [sp, #8]
 8006a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	f7fa fd80 	bl	8001562 <HAL_HCD_HC_Init>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f8bd 	bl	8006be8 <USBH_Get_USB_Status>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd90      	pop	{r4, r7, pc}

08006a7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fa fdf0 	bl	8001680 <HAL_HCD_HC_Halt>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f89e 	bl	8006be8 <USBH_Get_USB_Status>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006aba:	b590      	push	{r4, r7, lr}
 8006abc:	b089      	sub	sp, #36	; 0x24
 8006abe:	af04      	add	r7, sp, #16
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	70fb      	strb	r3, [r7, #3]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70bb      	strb	r3, [r7, #2]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006ae2:	787c      	ldrb	r4, [r7, #1]
 8006ae4:	78ba      	ldrb	r2, [r7, #2]
 8006ae6:	78f9      	ldrb	r1, [r7, #3]
 8006ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aec:	9303      	str	r3, [sp, #12]
 8006aee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006af0:	9302      	str	r3, [sp, #8]
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	4623      	mov	r3, r4
 8006afe:	f7fa fde3 	bl	80016c8 <HAL_HCD_HC_SubmitRequest>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f86d 	bl	8006be8 <USBH_Get_USB_Status>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd90      	pop	{r4, r7, pc}

08006b1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	4611      	mov	r1, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fb f877 	bl	8001c26 <HAL_HCD_HC_GetURBState>
 8006b38:	4603      	mov	r3, r0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d103      	bne.n	8006b60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f870 	bl	8006c40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006b60:	20c8      	movs	r0, #200	; 0xc8
 8006b62:	f7fa f8af 	bl	8000cc4 <HAL_Delay>
  return USBH_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	212c      	movs	r1, #44	; 0x2c
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	333b      	adds	r3, #59	; 0x3b
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	212c      	movs	r1, #44	; 0x2c
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3354      	adds	r3, #84	; 0x54
 8006baa:	78ba      	ldrb	r2, [r7, #2]
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e008      	b.n	8006bc2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	3355      	adds	r3, #85	; 0x55
 8006bbe:	78ba      	ldrb	r2, [r7, #2]
 8006bc0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fa f873 	bl	8000cc4 <HAL_Delay>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d817      	bhi.n	8006c2c <USBH_Get_USB_Status+0x44>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <USBH_Get_USB_Status+0x1c>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c1b 	.word	0x08006c1b
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c27 	.word	0x08006c27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
    break;
 8006c18:	e00b      	b.n	8006c32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c1e:	e008      	b.n	8006c32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
    break;
 8006c24:	e005      	b.n	8006c32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	73fb      	strb	r3, [r7, #15]
    break;
 8006c2a:	e002      	b.n	8006c32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c30:	bf00      	nop
  }
  return usb_status;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e001      	b.n	8006c5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	461a      	mov	r2, r3
 8006c62:	2101      	movs	r1, #1
 8006c64:	4803      	ldr	r0, [pc, #12]	; (8006c74 <MX_DriverVbusFS+0x34>)
 8006c66:	f7fa fbe7 	bl	8001438 <HAL_GPIO_WritePin>
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40020800 	.word	0x40020800

08006c78 <__errno>:
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <__errno+0x8>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000002c 	.word	0x2000002c

08006c84 <__libc_init_array>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4d0d      	ldr	r5, [pc, #52]	; (8006cbc <__libc_init_array+0x38>)
 8006c88:	4c0d      	ldr	r4, [pc, #52]	; (8006cc0 <__libc_init_array+0x3c>)
 8006c8a:	1b64      	subs	r4, r4, r5
 8006c8c:	10a4      	asrs	r4, r4, #2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	42a6      	cmp	r6, r4
 8006c92:	d109      	bne.n	8006ca8 <__libc_init_array+0x24>
 8006c94:	4d0b      	ldr	r5, [pc, #44]	; (8006cc4 <__libc_init_array+0x40>)
 8006c96:	4c0c      	ldr	r4, [pc, #48]	; (8006cc8 <__libc_init_array+0x44>)
 8006c98:	f000 f8f8 	bl	8006e8c <_init>
 8006c9c:	1b64      	subs	r4, r4, r5
 8006c9e:	10a4      	asrs	r4, r4, #2
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	42a6      	cmp	r6, r4
 8006ca4:	d105      	bne.n	8006cb2 <__libc_init_array+0x2e>
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cac:	4798      	blx	r3
 8006cae:	3601      	adds	r6, #1
 8006cb0:	e7ee      	b.n	8006c90 <__libc_init_array+0xc>
 8006cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb6:	4798      	blx	r3
 8006cb8:	3601      	adds	r6, #1
 8006cba:	e7f2      	b.n	8006ca2 <__libc_init_array+0x1e>
 8006cbc:	08006ec0 	.word	0x08006ec0
 8006cc0:	08006ec0 	.word	0x08006ec0
 8006cc4:	08006ec0 	.word	0x08006ec0
 8006cc8:	08006ec4 	.word	0x08006ec4

08006ccc <malloc>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <malloc+0xc>)
 8006cce:	4601      	mov	r1, r0
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f000 b863 	b.w	8006d9c <_malloc_r>
 8006cd6:	bf00      	nop
 8006cd8:	2000002c 	.word	0x2000002c

08006cdc <free>:
 8006cdc:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <free+0xc>)
 8006cde:	4601      	mov	r1, r0
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	f000 b80b 	b.w	8006cfc <_free_r>
 8006ce6:	bf00      	nop
 8006ce8:	2000002c 	.word	0x2000002c

08006cec <memset>:
 8006cec:	4402      	add	r2, r0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <memset+0xa>
 8006cf4:	4770      	bx	lr
 8006cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfa:	e7f9      	b.n	8006cf0 <memset+0x4>

08006cfc <_free_r>:
 8006cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	d048      	beq.n	8006d94 <_free_r+0x98>
 8006d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d06:	9001      	str	r0, [sp, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d0e:	bfb8      	it	lt
 8006d10:	18e4      	addlt	r4, r4, r3
 8006d12:	f000 f8ad 	bl	8006e70 <__malloc_lock>
 8006d16:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <_free_r+0x9c>)
 8006d18:	9801      	ldr	r0, [sp, #4]
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	b933      	cbnz	r3, 8006d2e <_free_r+0x32>
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	6014      	str	r4, [r2, #0]
 8006d24:	b003      	add	sp, #12
 8006d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d2a:	f000 b8a7 	b.w	8006e7c <__malloc_unlock>
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	d90b      	bls.n	8006d4a <_free_r+0x4e>
 8006d32:	6821      	ldr	r1, [r4, #0]
 8006d34:	1862      	adds	r2, r4, r1
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bf04      	itt	eq
 8006d3a:	681a      	ldreq	r2, [r3, #0]
 8006d3c:	685b      	ldreq	r3, [r3, #4]
 8006d3e:	6063      	str	r3, [r4, #4]
 8006d40:	bf04      	itt	eq
 8006d42:	1852      	addeq	r2, r2, r1
 8006d44:	6022      	streq	r2, [r4, #0]
 8006d46:	602c      	str	r4, [r5, #0]
 8006d48:	e7ec      	b.n	8006d24 <_free_r+0x28>
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	b10b      	cbz	r3, 8006d54 <_free_r+0x58>
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d9fa      	bls.n	8006d4a <_free_r+0x4e>
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	1855      	adds	r5, r2, r1
 8006d58:	42a5      	cmp	r5, r4
 8006d5a:	d10b      	bne.n	8006d74 <_free_r+0x78>
 8006d5c:	6824      	ldr	r4, [r4, #0]
 8006d5e:	4421      	add	r1, r4
 8006d60:	1854      	adds	r4, r2, r1
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	d1dd      	bne.n	8006d24 <_free_r+0x28>
 8006d68:	681c      	ldr	r4, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	6053      	str	r3, [r2, #4]
 8006d6e:	4421      	add	r1, r4
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	e7d7      	b.n	8006d24 <_free_r+0x28>
 8006d74:	d902      	bls.n	8006d7c <_free_r+0x80>
 8006d76:	230c      	movs	r3, #12
 8006d78:	6003      	str	r3, [r0, #0]
 8006d7a:	e7d3      	b.n	8006d24 <_free_r+0x28>
 8006d7c:	6825      	ldr	r5, [r4, #0]
 8006d7e:	1961      	adds	r1, r4, r5
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf04      	itt	eq
 8006d84:	6819      	ldreq	r1, [r3, #0]
 8006d86:	685b      	ldreq	r3, [r3, #4]
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	bf04      	itt	eq
 8006d8c:	1949      	addeq	r1, r1, r5
 8006d8e:	6021      	streq	r1, [r4, #0]
 8006d90:	6054      	str	r4, [r2, #4]
 8006d92:	e7c7      	b.n	8006d24 <_free_r+0x28>
 8006d94:	b003      	add	sp, #12
 8006d96:	bd30      	pop	{r4, r5, pc}
 8006d98:	200000b4 	.word	0x200000b4

08006d9c <_malloc_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	1ccd      	adds	r5, r1, #3
 8006da0:	f025 0503 	bic.w	r5, r5, #3
 8006da4:	3508      	adds	r5, #8
 8006da6:	2d0c      	cmp	r5, #12
 8006da8:	bf38      	it	cc
 8006daa:	250c      	movcc	r5, #12
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	4606      	mov	r6, r0
 8006db0:	db01      	blt.n	8006db6 <_malloc_r+0x1a>
 8006db2:	42a9      	cmp	r1, r5
 8006db4:	d903      	bls.n	8006dbe <_malloc_r+0x22>
 8006db6:	230c      	movs	r3, #12
 8006db8:	6033      	str	r3, [r6, #0]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dbe:	f000 f857 	bl	8006e70 <__malloc_lock>
 8006dc2:	4921      	ldr	r1, [pc, #132]	; (8006e48 <_malloc_r+0xac>)
 8006dc4:	680a      	ldr	r2, [r1, #0]
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	b99c      	cbnz	r4, 8006df2 <_malloc_r+0x56>
 8006dca:	4f20      	ldr	r7, [pc, #128]	; (8006e4c <_malloc_r+0xb0>)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	b923      	cbnz	r3, 8006dda <_malloc_r+0x3e>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f83c 	bl	8006e50 <_sbrk_r>
 8006dd8:	6038      	str	r0, [r7, #0]
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 f837 	bl	8006e50 <_sbrk_r>
 8006de2:	1c43      	adds	r3, r0, #1
 8006de4:	d123      	bne.n	8006e2e <_malloc_r+0x92>
 8006de6:	230c      	movs	r3, #12
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	4630      	mov	r0, r6
 8006dec:	f000 f846 	bl	8006e7c <__malloc_unlock>
 8006df0:	e7e3      	b.n	8006dba <_malloc_r+0x1e>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	1b5b      	subs	r3, r3, r5
 8006df6:	d417      	bmi.n	8006e28 <_malloc_r+0x8c>
 8006df8:	2b0b      	cmp	r3, #11
 8006dfa:	d903      	bls.n	8006e04 <_malloc_r+0x68>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	441c      	add	r4, r3
 8006e00:	6025      	str	r5, [r4, #0]
 8006e02:	e004      	b.n	8006e0e <_malloc_r+0x72>
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	42a2      	cmp	r2, r4
 8006e08:	bf0c      	ite	eq
 8006e0a:	600b      	streq	r3, [r1, #0]
 8006e0c:	6053      	strne	r3, [r2, #4]
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f000 f834 	bl	8006e7c <__malloc_unlock>
 8006e14:	f104 000b 	add.w	r0, r4, #11
 8006e18:	1d23      	adds	r3, r4, #4
 8006e1a:	f020 0007 	bic.w	r0, r0, #7
 8006e1e:	1ac2      	subs	r2, r0, r3
 8006e20:	d0cc      	beq.n	8006dbc <_malloc_r+0x20>
 8006e22:	1a1b      	subs	r3, r3, r0
 8006e24:	50a3      	str	r3, [r4, r2]
 8006e26:	e7c9      	b.n	8006dbc <_malloc_r+0x20>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	6864      	ldr	r4, [r4, #4]
 8006e2c:	e7cc      	b.n	8006dc8 <_malloc_r+0x2c>
 8006e2e:	1cc4      	adds	r4, r0, #3
 8006e30:	f024 0403 	bic.w	r4, r4, #3
 8006e34:	42a0      	cmp	r0, r4
 8006e36:	d0e3      	beq.n	8006e00 <_malloc_r+0x64>
 8006e38:	1a21      	subs	r1, r4, r0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f000 f808 	bl	8006e50 <_sbrk_r>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d1dd      	bne.n	8006e00 <_malloc_r+0x64>
 8006e44:	e7cf      	b.n	8006de6 <_malloc_r+0x4a>
 8006e46:	bf00      	nop
 8006e48:	200000b4 	.word	0x200000b4
 8006e4c:	200000b8 	.word	0x200000b8

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	; (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7f9 fe4e 	bl	8000afc <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000808 	.word	0x20000808

08006e70 <__malloc_lock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_lock+0x8>)
 8006e72:	f000 b809 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	20000810 	.word	0x20000810

08006e7c <__malloc_unlock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__malloc_unlock+0x8>)
 8006e7e:	f000 b804 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	20000810 	.word	0x20000810

08006e88 <__retarget_lock_acquire_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_release_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <_init>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	bf00      	nop
 8006e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e92:	bc08      	pop	{r3}
 8006e94:	469e      	mov	lr, r3
 8006e96:	4770      	bx	lr

08006e98 <_fini>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	bf00      	nop
 8006e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9e:	bc08      	pop	{r3}
 8006ea0:	469e      	mov	lr, r3
 8006ea2:	4770      	bx	lr
