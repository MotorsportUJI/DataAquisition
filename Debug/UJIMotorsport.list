
UJIMotorsport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a5f8  0800a5f8  0001a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab2c  0800ab2c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab34  0800ab34  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab34  0800ab34  0001ab34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab38  0800ab38  0001ab38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ab3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000042f8  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200044e4  200044e4  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e16c  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db2  00000000  00000000  0003e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  00042140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  000437b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026110  00000000  00000000  00044ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019439  00000000  00000000  0006adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ab4  00000000  00000000  000841f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016aca5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007730  00000000  00000000  0016acf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5dc 	.word	0x0800a5dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a5dc 	.word	0x0800a5dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BlinkTask>:




// Blink task
void BlinkTask(void * pvParams) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	int32_t i = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]

  for (;;) {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <BlinkTask+0x4c>)
 8000ffe:	f001 feac 	bl	8002d5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <BlinkTask+0x4c>)
 8001008:	f001 fea7 	bl	8002d5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <BlinkTask+0x4c>)
 8001012:	f001 fea2 	bl	8002d5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <BlinkTask+0x4c>)
 800101c:	f001 fe9d 	bl	8002d5a <HAL_GPIO_TogglePin>

	printf("Toggling %d\n",i);
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <BlinkTask+0x50>)
 8001024:	f005 fb84 	bl	8006730 <iprintf>
	i++;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]

    vTaskDelay(500);
 800102e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001032:	f003 fb7d 	bl	8004730 <vTaskDelay>
  for (;;) {
 8001036:	e7df      	b.n	8000ff8 <BlinkTask+0xc>
 8001038:	40020c00 	.word	0x40020c00
 800103c:	0800a5f8 	.word	0x0800a5f8

08001040 <SecondMain>:
  }
}


int SecondMain(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af02      	add	r7, sp, #8

	// initialize peripherals
	initializeLEDS(&hdac);
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <SecondMain+0x2c>)
 8001048:	f000 f816 	bl	8001078 <initializeLEDS>

	// initialize debugging, if debug release is selected
#ifdef DEBUG
	initialise_monitor_handles();
 800104c:	f009 fa22 	bl	800a494 <initialise_monitor_handles>
#endif

	// start blink task
	xTaskCreate(BlinkTask, "Blinking", 128, NULL, 1, NULL);
 8001050:	2300      	movs	r3, #0
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	2301      	movs	r3, #1
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	4904      	ldr	r1, [pc, #16]	; (8001070 <SecondMain+0x30>)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <SecondMain+0x34>)
 8001060:	f003 fa18 	bl	8004494 <xTaskCreate>

	// start console task
	//xTaskCreate(ConsoleTask, "Console", 1024, NULL, 1, NULL);

	// start scheduler, this won't return unless there is an error
	vTaskStartScheduler();
 8001064:	f003 fb98 	bl	8004798 <vTaskStartScheduler>
	// endless loop so we never return to that hell of main
	for(;;);
 8001068:	e7fe      	b.n	8001068 <SecondMain+0x28>
 800106a:	bf00      	nop
 800106c:	200043bc 	.word	0x200043bc
 8001070:	0800a608 	.word	0x0800a608
 8001074:	08000fed 	.word	0x08000fed

08001078 <initializeLEDS>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */

void initializeLEDS(DAC_HandleTypeDef *hdac){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	// disable audio dac
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <initializeLEDS+0x30>)
 8001086:	f001 fe4f 	bl	8002d28 <HAL_GPIO_WritePin>


	// initialize steering wheel leds output
	HAL_DAC_Start(hdac, LED_DAC);
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fbe9 	bl	8002864 <HAL_DAC_Start>
	HAL_DAC_SetValue(hdac, LED_DAC,DAC_ALIGN_12B_R,0);
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 fc35 	bl	8002908 <HAL_DAC_SetValue>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020c00 	.word	0x40020c00

080010ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80010bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <vApplicationGetIdleTaskMemory+0x30>)
 80010c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000208 	.word	0x20000208
 80010dc:	200002bc 	.word	0x200002bc

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 ff19 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f82b 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 fa03 	bl	80014f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010f2:	f000 f941 	bl	8001378 <MX_SPI1_Init>
  MX_DAC_Init();
 80010f6:	f000 f915 	bl	8001324 <MX_DAC_Init>
  MX_ADC1_Init();
 80010fa:	f000 f88d 	bl	8001218 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010fe:	f000 f8dd 	bl	80012bc <MX_CAN1_Init>
  MX_SPI2_Init();
 8001102:	f000 f96f 	bl	80013e4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001106:	f000 f9a3 	bl	8001450 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800110a:	f000 f9cb 	bl	80014a4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SecondMain();
 800110e:	f7ff ff97 	bl	8001040 <SecondMain>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <main+0x5c>)
 8001114:	1d3c      	adds	r4, r7, #4
 8001116:	461d      	mov	r5, r3
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f003 f842 	bl	80041b2 <osThreadCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <main+0x60>)
 8001132:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001134:	f003 f836 	bl	80041a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001138:	e7fe      	b.n	8001138 <main+0x58>
 800113a:	bf00      	nop
 800113c:	0800a620 	.word	0x0800a620
 8001140:	200042d4 	.word	0x200042d4

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fbc0 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b4:	2308      	movs	r3, #8
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c2:	2307      	movs	r3, #7
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fde0 	bl	8002d90 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011d6:	f000 fac5 	bl	8001764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2105      	movs	r1, #5
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f841 	bl	8003280 <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001204:	f000 faae 	bl	8001764 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3750      	adds	r7, #80	; 0x50
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_ADC1_Init+0x98>)
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <MX_ADC1_Init+0x9c>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_ADC1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_ADC1_Init+0x98>)
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <MX_ADC1_Init+0xa0>)
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001266:	2201      	movs	r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_ADC1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_ADC1_Init+0x98>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_ADC1_Init+0x98>)
 800127a:	f000 fe91 	bl	8001fa0 <HAL_ADC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 fa6e 	bl	8001764 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001288:	2301      	movs	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_ADC1_Init+0x98>)
 800129a:	f000 fec5 	bl	8002028 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 fa5e 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20004374 	.word	0x20004374
 80012b4:	40012000 	.word	0x40012000
 80012b8:	0f000001 	.word	0x0f000001

080012bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_CAN1_Init+0x60>)
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <MX_CAN1_Init+0x64>)
 80012c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_CAN1_Init+0x60>)
 80012c8:	2210      	movs	r2, #16
 80012ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_CAN1_Init+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_CAN1_Init+0x60>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_CAN1_Init+0x60>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_CAN1_Init+0x60>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_CAN1_Init+0x60>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_CAN1_Init+0x60>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_CAN1_Init+0x60>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_CAN1_Init+0x60>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_CAN1_Init+0x60>)
 80012fe:	2200      	movs	r2, #0
 8001300:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_CAN1_Init+0x60>)
 8001304:	2200      	movs	r2, #0
 8001306:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_CAN1_Init+0x60>)
 800130a:	f001 f8ab 	bl	8002464 <HAL_CAN_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001314:	f000 fa26 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000446c 	.word	0x2000446c
 8001320:	40006400 	.word	0x40006400

08001324 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_DAC_Init+0x4c>)
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <MX_DAC_Init+0x50>)
 8001336:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_DAC_Init+0x4c>)
 800133a:	f001 fa71 	bl	8002820 <HAL_DAC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001344:	f000 fa0e 	bl	8001764 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_DAC_Init+0x4c>)
 8001358:	f001 fafb 	bl	8002952 <HAL_DAC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001362:	f000 f9ff 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200043bc 	.word	0x200043bc
 8001374:	40007400 	.word	0x40007400

08001378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI1_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ca:	f002 f987 	bl	80036dc <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 f9c6 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20004414 	.word	0x20004414
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_SPI2_Init+0x64>)
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <MX_SPI2_Init+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_SPI2_Init+0x64>)
 80013f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_SPI2_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_SPI2_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_SPI2_Init+0x64>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_SPI2_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_SPI2_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_SPI2_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_SPI2_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_SPI2_Init+0x64>)
 8001430:	220a      	movs	r2, #10
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_SPI2_Init+0x64>)
 8001436:	f002 f951 	bl	80036dc <HAL_SPI_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001440:	f000 f990 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200042d8 	.word	0x200042d8
 800144c:	40003800 	.word	0x40003800

08001450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_USART3_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001488:	f002 fc5e 	bl	8003d48 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f967 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20004330 	.word	0x20004330
 80014a0:	40004800 	.word	0x40004800

080014a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_USART6_UART_Init+0x50>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART6_UART_Init+0x4c>)
 80014dc:	f002 fc34 	bl	8003d48 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014e6:	f000 f93d 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200043d0 	.word	0x200043d0
 80014f4:	40011400 	.word	0x40011400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <MX_GPIO_Init+0x220>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a80      	ldr	r2, [pc, #512]	; (8001718 <MX_GPIO_Init+0x220>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <MX_GPIO_Init+0x220>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <MX_GPIO_Init+0x220>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a79      	ldr	r2, [pc, #484]	; (8001718 <MX_GPIO_Init+0x220>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <MX_GPIO_Init+0x220>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <MX_GPIO_Init+0x220>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a72      	ldr	r2, [pc, #456]	; (8001718 <MX_GPIO_Init+0x220>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b70      	ldr	r3, [pc, #448]	; (8001718 <MX_GPIO_Init+0x220>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <MX_GPIO_Init+0x220>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a6b      	ldr	r2, [pc, #428]	; (8001718 <MX_GPIO_Init+0x220>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b69      	ldr	r3, [pc, #420]	; (8001718 <MX_GPIO_Init+0x220>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <MX_GPIO_Init+0x220>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a64      	ldr	r2, [pc, #400]	; (8001718 <MX_GPIO_Init+0x220>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b62      	ldr	r3, [pc, #392]	; (8001718 <MX_GPIO_Init+0x220>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <MX_GPIO_Init+0x220>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <MX_GPIO_Init+0x220>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <MX_GPIO_Init+0x220>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2108      	movs	r1, #8
 80015ba:	4858      	ldr	r0, [pc, #352]	; (800171c <MX_GPIO_Init+0x224>)
 80015bc:	f001 fbb4 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2101      	movs	r1, #1
 80015c4:	4856      	ldr	r0, [pc, #344]	; (8001720 <MX_GPIO_Init+0x228>)
 80015c6:	f001 fbaf 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80015d0:	4854      	ldr	r0, [pc, #336]	; (8001724 <MX_GPIO_Init+0x22c>)
 80015d2:	f001 fba9 	bl	8002d28 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d6:	2308      	movs	r3, #8
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	484b      	ldr	r0, [pc, #300]	; (800171c <MX_GPIO_Init+0x224>)
 80015ee:	f001 f9ff 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4845      	ldr	r0, [pc, #276]	; (8001720 <MX_GPIO_Init+0x228>)
 800160a:	f001 f9f1 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800160e:	2308      	movs	r3, #8
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161e:	2305      	movs	r3, #5
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	483d      	ldr	r0, [pc, #244]	; (8001720 <MX_GPIO_Init+0x228>)
 800162a:	f001 f9e1 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001632:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4839      	ldr	r0, [pc, #228]	; (8001728 <MX_GPIO_Init+0x230>)
 8001644:	f001 f9d4 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001648:	2304      	movs	r3, #4
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4834      	ldr	r0, [pc, #208]	; (800172c <MX_GPIO_Init+0x234>)
 800165c:	f001 f9c8 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001672:	2305      	movs	r3, #5
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	482b      	ldr	r0, [pc, #172]	; (800172c <MX_GPIO_Init+0x234>)
 800167e:	f001 f9b7 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD4_Pin|LD3_Pin
 8001682:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8001686:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4822      	ldr	r0, [pc, #136]	; (8001724 <MX_GPIO_Init+0x22c>)
 800169c:	f001 f9a8 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80016a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	481c      	ldr	r0, [pc, #112]	; (8001728 <MX_GPIO_Init+0x230>)
 80016b6:	f001 f99b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80016ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016cc:	230a      	movs	r3, #10
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0x230>)
 80016d8:	f001 f98a 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016dc:	2320      	movs	r3, #32
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_GPIO_Init+0x22c>)
 80016f0:	f001 f97e 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_GPIO_Init+0x224>)
 800170a:	f001 f971 	bl	80029f0 <HAL_GPIO_Init>

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40021000 	.word	0x40021000
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400

08001730 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f002 fd86 	bl	800424a <osDelay>
 800173e:	e7fb      	b.n	8001738 <StartDefaultTask+0x8>

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f000 fc05 	bl	8001f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40010000 	.word	0x40010000

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_MspInit+0x54>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_MspInit+0x54>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x54>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_MspInit+0x54>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_MspInit+0x54>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_MspInit+0x54>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	210f      	movs	r1, #15
 80017b2:	f06f 0001 	mvn.w	r0, #1
 80017b6:	f001 f809 	bl	80027cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_ADC_MspInit+0xe4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d15b      	bne.n	80018a2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_ADC_MspInit+0xe8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800185a:	2332      	movs	r3, #50	; 0x32
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <HAL_ADC_MspInit+0xec>)
 800186e:	f001 f8bf 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001872:	230e      	movs	r3, #14
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <HAL_ADC_MspInit+0xf0>)
 8001886:	f001 f8b3 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188a:	2303      	movs	r3, #3
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4807      	ldr	r0, [pc, #28]	; (80018bc <HAL_ADC_MspInit+0xf4>)
 800189e:	f001 f8a7 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012000 	.word	0x40012000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_CAN_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12b      	bne.n	800193a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_CAN_MspInit+0x88>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_CAN_MspInit+0x88>)
 80018ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_CAN_MspInit+0x88>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_CAN_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_CAN_MspInit+0x88>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_CAN_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191a:	2303      	movs	r3, #3
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800192a:	2309      	movs	r3, #9
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_CAN_MspInit+0x8c>)
 8001936:	f001 f85b 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40006400 	.word	0x40006400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020c00 	.word	0x40020c00

08001950 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_DAC_MspInit+0x7c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d127      	bne.n	80019c2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 800197c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_DAC_MspInit+0x80>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019aa:	2310      	movs	r3, #16
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ae:	2303      	movs	r3, #3
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_DAC_MspInit+0x84>)
 80019be:	f001 f817 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40007400 	.word	0x40007400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a32      	ldr	r2, [pc, #200]	; (8001ac0 <HAL_SPI_MspInit+0xe8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12c      	bne.n	8001a54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a32:	23e0      	movs	r3, #224	; 0xe0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a42:	2305      	movs	r3, #5
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <HAL_SPI_MspInit+0xf0>)
 8001a4e:	f000 ffcf 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a52:	e031      	b.n	8001ab8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_SPI_MspInit+0xf4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12c      	bne.n	8001ab8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_SPI_MspInit+0xec>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_MISO_Pin|CAN_MOSI_Pin;
 8001a96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <HAL_SPI_MspInit+0xf8>)
 8001ab4:	f000 ff9c 	bl	80029f0 <HAL_GPIO_Init>
}
 8001ab8:	bf00      	nop
 8001aba:	3730      	adds	r7, #48	; 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40003800 	.word	0x40003800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_UART_MspInit+0x128>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d14c      	bne.n	8001b90 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a40      	ldr	r2, [pc, #256]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a32      	ldr	r2, [pc, #200]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	4827      	ldr	r0, [pc, #156]	; (8001c04 <HAL_UART_MspInit+0x130>)
 8001b68:	f000 ff42 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	481f      	ldr	r0, [pc, #124]	; (8001c08 <HAL_UART_MspInit+0x134>)
 8001b8a:	f000 ff31 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b8e:	e030      	b.n	8001bf2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART6)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_UART_MspInit+0x138>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12b      	bne.n	8001bf2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_UART_MspInit+0x12c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001be2:	2308      	movs	r3, #8
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4808      	ldr	r0, [pc, #32]	; (8001c10 <HAL_UART_MspInit+0x13c>)
 8001bee:	f000 feff 	bl	80029f0 <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	; 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40020800 	.word	0x40020800

08001c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2019      	movs	r0, #25
 8001c2a:	f000 fdcf 	bl	80027cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c2e:	2019      	movs	r0, #25
 8001c30:	f000 fde8 	bl	8002804 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_InitTick+0xa4>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_InitTick+0xa4>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6453      	str	r3, [r2, #68]	; 0x44
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_InitTick+0xa4>)
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c50:	f107 0210 	add.w	r2, r7, #16
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fd0c 	bl	8003678 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c60:	f001 fcf6 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8001c64:	4603      	mov	r3, r0
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_InitTick+0xa8>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	3b01      	subs	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_InitTick+0xb0>)
 8001c7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_InitTick+0xac>)
 8001c9a:	f001 fda8 	bl	80037ee <HAL_TIM_Base_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ca4:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <HAL_InitTick+0xac>)
 8001ca6:	f001 fdfb 	bl	80038a0 <HAL_TIM_Base_Start_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	20004494 	.word	0x20004494
 8001cc4:	40010000 	.word	0x40010000

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cfa:	f001 fe41 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20004494 	.word	0x20004494

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f003 fc98 	bl	800566c <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20020000 	.word	0x20020000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	200004bc 	.word	0x200004bc
 8001d70:	200044e8 	.word	0x200044e8

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9e:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff ffd7 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f003 fd4d 	bl	8005864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff f989 	bl	80010e0 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ddc:	0800ab3c 	.word	0x0800ab3c
  ldr r2, =_sbss
 8001de0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001de4:	200044e4 	.word	0x200044e4

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>

08001dea <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
 8001dfc:	f7ff fcb2 	bl	8001764 <Error_Handler>
 8001e00:	e7fe      	b.n	8001e00 <stm32_lock_init+0x16>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
 8001e1c:	f7ff fca2 	bl	8001764 <Error_Handler>
 8001e20:	e7fe      	b.n	8001e20 <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e22:	f3ef 8305 	mrs	r3, IPSR
 8001e26:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e28:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2e:	b672      	cpsid	i
}
 8001e30:	bf00      	nop
 8001e32:	f7ff fc97 	bl	8001764 <Error_Handler>
 8001e36:	e7fe      	b.n	8001e36 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8001e38:	f002 fd18 	bl	800486c <vTaskSuspendAll>
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e52:	b672      	cpsid	i
}
 8001e54:	bf00      	nop
 8001e56:	f7ff fc85 	bl	8001764 <Error_Handler>
 8001e5a:	e7fe      	b.n	8001e5a <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5c:	f3ef 8305 	mrs	r3, IPSR
 8001e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e62:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
 8001e6c:	f7ff fc7a 	bl	8001764 <Error_Handler>
 8001e70:	e7fe      	b.n	8001e70 <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8001e72:	f002 fd09 	bl	8004888 <xTaskResumeAll>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001e8c:	f003 fbee 	bl	800566c <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2216      	movs	r2, #22
 8001e94:	601a      	str	r2, [r3, #0]
    return;
 8001e96:	e015      	b.n	8001ec4 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f003 fd07 	bl	80058ac <malloc>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff99 	bl	8001dea <stm32_lock_init>
    return;
 8001eb8:	e004      	b.n	8001ec4 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001eba:	b672      	cpsid	i
}
 8001ebc:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001ebe:	f7ff fc51 	bl	8001764 <Error_Handler>
 8001ec2:	e7fe      	b.n	8001ec2 <__retarget_lock_init_recursive+0x44>
}
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
 8001edc:	f7ff fc42 	bl	8001764 <Error_Handler>
 8001ee0:	e7fe      	b.n	8001ee0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff90 	bl	8001e0a <stm32_lock_acquire>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
 8001f04:	f7ff fc2e 	bl	8001764 <Error_Handler>
 8001f08:	e7fe      	b.n	8001f08 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff99 	bl	8001e44 <stm32_lock_release>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 fc36 	bl	80027b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f7ff fe62 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fc0e 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	200044dc 	.word	0x200044dc

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200044dc 	.word	0x200044dc

08001fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e033      	b.n	800201e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fc02 	bl	80017c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe6:	f023 0302 	bic.w	r3, r3, #2
 8001fea:	f043 0202 	orr.w	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f93a 	bl	800226c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
 800200e:	e001      	b.n	8002014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1c>
 8002040:	2302      	movs	r3, #2
 8002042:	e105      	b.n	8002250 <HAL_ADC_ConfigChannel+0x228>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b09      	cmp	r3, #9
 8002052:	d925      	bls.n	80020a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1e      	subs	r3, #30
 800206a:	2207      	movs	r2, #7
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43da      	mvns	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	400a      	ands	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68d9      	ldr	r1, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	4603      	mov	r3, r0
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4403      	add	r3, r0
 8002092:	3b1e      	subs	r3, #30
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	e022      	b.n	80020e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	2207      	movs	r2, #7
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	400a      	ands	r2, r1
 80020c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4403      	add	r3, r0
 80020dc:	409a      	lsls	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d824      	bhi.n	8002138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3b05      	subs	r3, #5
 8002100:	221f      	movs	r2, #31
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	400a      	ands	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b05      	subs	r3, #5
 800212a:	fa00 f203 	lsl.w	r2, r0, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
 8002136:	e04c      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b0c      	cmp	r3, #12
 800213e:	d824      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b23      	subs	r3, #35	; 0x23
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b23      	subs	r3, #35	; 0x23
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e023      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b41      	subs	r3, #65	; 0x41
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b41      	subs	r3, #65	; 0x41
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_ADC_ConfigChannel+0x234>)
 80021d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <HAL_ADC_ConfigChannel+0x238>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1cc>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b12      	cmp	r3, #18
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_ADC_ConfigChannel+0x238>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d123      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d003      	beq.n	800220e <HAL_ADC_ConfigChannel+0x1e6>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b11      	cmp	r3, #17
 800220c:	d11b      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d111      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_ADC_ConfigChannel+0x23c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_ADC_ConfigChannel+0x240>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	0c9a      	lsrs	r2, r3, #18
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002238:	e002      	b.n	8002240 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3b01      	subs	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f9      	bne.n	800223a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	40012000 	.word	0x40012000
 8002264:	20000000 	.word	0x20000000
 8002268:	431bde83 	.word	0x431bde83

0800226c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <ADC_Init+0x1f0>)
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	4a58      	ldr	r2, [pc, #352]	; (8002460 <ADC_Init+0x1f4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e00f      	b.n	800236a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0202 	bic.w	r2, r2, #2
 8002378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
 8002384:	005a      	lsls	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	3b01      	subs	r3, #1
 80023c4:	035a      	lsls	r2, r3, #13
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e007      	b.n	80023e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	051a      	lsls	r2, r3, #20
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002422:	025a      	lsls	r2, r3, #9
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	029a      	lsls	r2, r3, #10
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012300 	.word	0x40012300
 8002460:	0f000001 	.word	0x0f000001

08002464 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0ed      	b.n	8002652 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d102      	bne.n	8002488 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fa1c 	bl	80018c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff fd76 	bl	8001f88 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800249e:	e012      	b.n	80024c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a0:	f7ff fd72 	bl	8001f88 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d90b      	bls.n	80024c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2205      	movs	r2, #5
 80024be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0c5      	b.n	8002652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0e5      	beq.n	80024a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0202 	bic.w	r2, r2, #2
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e4:	f7ff fd50 	bl	8001f88 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ea:	e012      	b.n	8002512 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ec:	f7ff fd4c 	bl	8001f88 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e09f      	b.n	8002652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e007      	b.n	800254a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7e5b      	ldrb	r3, [r3, #25]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e9b      	ldrb	r3, [r3, #26]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0220 	bic.w	r2, r2, #32
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7edb      	ldrb	r3, [r3, #27]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0210 	bic.w	r2, r2, #16
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0210 	orr.w	r2, r2, #16
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7f1b      	ldrb	r3, [r3, #28]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f5b      	ldrb	r3, [r3, #29]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0204 	orr.w	r2, r2, #4
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e007      	b.n	800261c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	ea42 0103 	orr.w	r1, r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	; (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff4c 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027de:	f7ff ff61 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 80027e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7ff ffb1 	bl	8002750 <NVIC_EncodePriority>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff80 	bl	80026fc <__NVIC_SetPriority>
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff54 	bl	80026c0 <__NVIC_EnableIRQ>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e014      	b.n	800285c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	791b      	ldrb	r3, [r3, #4]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f884 	bl	8001950 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	795b      	ldrb	r3, [r3, #5]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DAC_Start+0x16>
 8002876:	2302      	movs	r3, #2
 8002878:	e040      	b.n	80028fc <HAL_DAC_Start+0x98>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10f      	bne.n	80028c4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80028ae:	2b3c      	cmp	r3, #60	; 0x3c
 80028b0:	d11d      	bne.n	80028ee <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e014      	b.n	80028ee <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	213c      	movs	r1, #60	; 0x3c
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	429a      	cmp	r2, r3
 80028dc:	d107      	bne.n	80028ee <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0202 	orr.w	r2, r2, #2
 80028ec:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	3308      	adds	r3, #8
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e004      	b.n	800293c <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	3314      	adds	r3, #20
 800293a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	461a      	mov	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	795b      	ldrb	r3, [r3, #5]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_DAC_ConfigChannel+0x18>
 8002966:	2302      	movs	r3, #2
 8002968:	e03c      	b.n	80029e4 <HAL_DAC_ConfigChannel+0x92>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2202      	movs	r2, #2
 8002974:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	22c0      	movs	r2, #192	; 0xc0
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	400a      	ands	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e16b      	b.n	8002ce4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 815a 	bne.w	8002cde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80b4 	beq.w	8002cde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a5f      	ldr	r2, [pc, #380]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_GPIO_Init+0x314>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02b      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_GPIO_Init+0x318>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_GPIO_Init+0x31c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4f      	ldr	r2, [pc, #316]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4d      	ldr	r2, [pc, #308]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4c      	ldr	r2, [pc, #304]	; (8002d1c <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x20a>
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e00e      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e00c      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfe:	2306      	movs	r3, #6
 8002c00:	e00a      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c02:	2305      	movs	r3, #5
 8002c04:	e008      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e004      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c16:	2300      	movs	r3, #0
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4093      	lsls	r3, r2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c28:	4935      	ldr	r1, [pc, #212]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5a:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	f67f ae90 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40021c00 	.word	0x40021c00
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e264      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dae:	4ba3      	ldr	r3, [pc, #652]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4ba0      	ldr	r3, [pc, #640]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d112      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b9d      	ldr	r3, [pc, #628]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b99      	ldr	r3, [pc, #612]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e23f      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x74>
 8002df6:	4b91      	ldr	r3, [pc, #580]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a90      	ldr	r2, [pc, #576]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x98>
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a8a      	ldr	r2, [pc, #552]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e28:	4b84      	ldr	r3, [pc, #528]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7ff f89e 	bl	8001f88 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff f89a 	bl	8001f88 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e204      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff f88a 	bl	8001f88 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff f886 	bl	8001f88 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1f0      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b62      	ldr	r3, [pc, #392]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1c4      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b56      	ldr	r3, [pc, #344]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4952      	ldr	r1, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e03a      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <HAL_RCC_OscConfig+0x2b0>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7ff f83f 	bl	8001f88 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7ff f83b 	bl	8001f88 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1a5      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4940      	ldr	r1, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_OscConfig+0x2b0>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7ff f81e 	bl	8001f88 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f50:	f7ff f81a 	bl	8001f88 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e184      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d030      	beq.n	8002fdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x2b4>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe fffe 	bl	8001f88 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fe fffa 	bl	8001f88 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e164      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x200>
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x2b4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe ffe7 	bl	8001f88 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe ffe3 	bl	8001f88 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e14d      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a0 	beq.w	800312a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d121      	bne.n	800306a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe ffa9 	bl	8001f88 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e011      	b.n	800305e <HAL_RCC_OscConfig+0x2ce>
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	42470000 	.word	0x42470000
 8003044:	42470e80 	.word	0x42470e80
 8003048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe ff9c 	bl	8001f88 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e106      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b85      	ldr	r3, [pc, #532]	; (8003274 <HAL_RCC_OscConfig+0x4e4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8003072:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a80      	ldr	r2, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x32a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x312>
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x32a>
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a74      	ldr	r2, [pc, #464]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a71      	ldr	r2, [pc, #452]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe ff61 	bl	8001f88 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe ff5d 	bl	8001f88 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0c5      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x33a>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe ff4b 	bl	8001f88 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fe ff47 	bl	8001f88 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0af      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a55      	ldr	r2, [pc, #340]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 809b 	beq.w	800326a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d05c      	beq.n	80031fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d141      	bne.n	80031cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe ff1b 	bl	8001f88 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe ff17 	bl	8001f88 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e081      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	019b      	lsls	r3, r3, #6
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fef0 	bl	8001f88 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe feec 	bl	8001f88 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e056      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x41c>
 80031ca:	e04e      	b.n	800326a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fed9 	bl	8001f88 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fed5 	bl	8001f88 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03f      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x44a>
 80031f8:	e037      	b.n	800326a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e032      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d028      	beq.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d11a      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40007000 	.word	0x40007000
 8003278:	40023800 	.word	0x40023800
 800327c:	42470060 	.word	0x42470060

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cc      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90c      	bls.n	80032bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e067      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fe fe0a 	bl	8001f88 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe fe06 	bl	8001f88 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d20c      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fbf4 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	0800a644 	.word	0x0800a644
 8003444:	20000000 	.word	0x20000000
 8003448:	20000004 	.word	0x20000004

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	2300      	movs	r3, #0
 800345e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d00d      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003470:	2b08      	cmp	r3, #8
 8003472:	f200 80bd 	bhi.w	80035f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x34>
 800347a:	2b04      	cmp	r3, #4
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e0b7      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003482:	60bb      	str	r3, [r7, #8]
       break;
 8003484:	e0b7      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003488:	60bb      	str	r3, [r7, #8]
      break;
 800348a:	e0b4      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348c:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003494:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003496:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04d      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	461a      	mov	r2, r3
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034b2:	f04f 0100 	mov.w	r1, #0
 80034b6:	ea02 0800 	and.w	r8, r2, r0
 80034ba:	ea03 0901 	and.w	r9, r3, r1
 80034be:	4640      	mov	r0, r8
 80034c0:	4649      	mov	r1, r9
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	014b      	lsls	r3, r1, #5
 80034cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d0:	0142      	lsls	r2, r0, #5
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	ebb0 0008 	subs.w	r0, r0, r8
 80034da:	eb61 0109 	sbc.w	r1, r1, r9
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	018b      	lsls	r3, r1, #6
 80034e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ec:	0182      	lsls	r2, r0, #6
 80034ee:	1a12      	subs	r2, r2, r0
 80034f0:	eb63 0301 	sbc.w	r3, r3, r1
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	00d9      	lsls	r1, r3, #3
 80034fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003502:	00d0      	lsls	r0, r2, #3
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	eb12 0208 	adds.w	r2, r2, r8
 800350c:	eb43 0309 	adc.w	r3, r3, r9
 8003510:	f04f 0000 	mov.w	r0, #0
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	0259      	lsls	r1, r3, #9
 800351a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800351e:	0250      	lsls	r0, r2, #9
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f7fd fbaa 	bl	8000c88 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e04a      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	461a      	mov	r2, r3
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800354e:	f04f 0100 	mov.w	r1, #0
 8003552:	ea02 0400 	and.w	r4, r2, r0
 8003556:	ea03 0501 	and.w	r5, r3, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	014b      	lsls	r3, r1, #5
 8003568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800356c:	0142      	lsls	r2, r0, #5
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	1b00      	subs	r0, r0, r4
 8003574:	eb61 0105 	sbc.w	r1, r1, r5
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	018b      	lsls	r3, r1, #6
 8003582:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003586:	0182      	lsls	r2, r0, #6
 8003588:	1a12      	subs	r2, r2, r0
 800358a:	eb63 0301 	sbc.w	r3, r3, r1
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	00d9      	lsls	r1, r3, #3
 8003598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800359c:	00d0      	lsls	r0, r2, #3
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	1912      	adds	r2, r2, r4
 80035a4:	eb45 0303 	adc.w	r3, r5, r3
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0299      	lsls	r1, r3, #10
 80035b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035b6:	0290      	lsls	r0, r2, #10
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	f7fd fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4613      	mov	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	3301      	adds	r3, #1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	60bb      	str	r3, [r7, #8]
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035f2:	60bb      	str	r3, [r7, #8]
      break;
 80035f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f6:	68bb      	ldr	r3, [r7, #8]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	00f42400 	.word	0x00f42400
 800360c:	007a1200 	.word	0x007a1200

08003610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCC_GetHCLKFreq+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff0 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a9b      	lsrs	r3, r3, #10
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	0800a654 	.word	0x0800a654

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffdc 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0b5b      	lsrs	r3, r3, #13
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	0800a654 	.word	0x0800a654

08003678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	220f      	movs	r2, #15
 8003686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_RCC_GetClockConfig+0x60>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0207 	and.w	r2, r3, #7
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40023c00 	.word	0x40023c00

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07b      	b.n	80037e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fe:	d009      	beq.n	8003714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
 8003706:	e005      	b.n	8003714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe f952 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0104 	and.w	r1, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0210 	and.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e041      	b.n	8003884 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f839 	bl	800388c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 f9d7 	bl	8003be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e04e      	b.n	8003956 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <HAL_TIM_Base_Start_IT+0xc4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d01d      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_TIM_Base_Start_IT+0xc8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_TIM_Base_Start_IT+0xcc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_TIM_Base_Start_IT+0xd0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_TIM_Base_Start_IT+0xd4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <HAL_TIM_Base_Start_IT+0xd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x80>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_TIM_Base_Start_IT+0xdc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d111      	bne.n	8003944 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d010      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	e007      	b.n	8003954 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40010400 	.word	0x40010400
 8003978:	40014000 	.word	0x40014000
 800397c:	40001800 	.word	0x40001800

08003980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0202 	mvn.w	r2, #2
 80039ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8ee 	bl	8003ba4 <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f8e0 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8f1 	bl	8003bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0204 	mvn.w	r2, #4
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8c4 	bl	8003ba4 <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8b6 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f8c7 	bl	8003bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0208 	mvn.w	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f89a 	bl	8003ba4 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f88c 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f89d 	bl	8003bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0210 	mvn.w	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2208      	movs	r2, #8
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f870 	bl	8003ba4 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f862 	bl	8003b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f873 	bl	8003bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fe1e 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f902 	bl	8003d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f838 	bl	8003bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0220 	mvn.w	r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8cc 	bl	8003d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a40      	ldr	r2, [pc, #256]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <TIM_Base_SetConfig+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <TIM_Base_SetConfig+0x11c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3b      	ldr	r2, [pc, #236]	; (8003d00 <TIM_Base_SetConfig+0x120>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3a      	ldr	r2, [pc, #232]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d027      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <TIM_Base_SetConfig+0x118>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d023      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	; (8003cfc <TIM_Base_SetConfig+0x11c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01f      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <TIM_Base_SetConfig+0x120>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d017      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <TIM_Base_SetConfig+0x128>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_Base_SetConfig+0x12c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <TIM_Base_SetConfig+0x130>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_Base_SetConfig+0x134>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <TIM_Base_SetConfig+0x138>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <TIM_Base_SetConfig+0x13c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_Base_SetConfig+0xf8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800
 8003d14:	40001800 	.word	0x40001800
 8003d18:	40001c00 	.word	0x40001c00
 8003d1c:	40002000 	.word	0x40002000

08003d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e03f      	b.n	8003dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd feb0 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f829 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	b09f      	sub	sp, #124	; 0x7c
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	ea40 0301 	orr.w	r3, r0, r1
 8003e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e28:	f021 010c 	bic.w	r1, r1, #12
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e32:	430b      	orrs	r3, r1
 8003e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	6999      	ldr	r1, [r3, #24]
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	ea40 0301 	orr.w	r3, r0, r1
 8003e4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4bc5      	ldr	r3, [pc, #788]	; (8004168 <UART_SetConfig+0x384>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d004      	beq.n	8003e62 <UART_SetConfig+0x7e>
 8003e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4bc3      	ldr	r3, [pc, #780]	; (800416c <UART_SetConfig+0x388>)
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d103      	bne.n	8003e6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e62:	f7ff fbf5 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8003e66:	6778      	str	r0, [r7, #116]	; 0x74
 8003e68:	e002      	b.n	8003e70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e6a:	f7ff fbdd 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8003e6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e78:	f040 80b6 	bne.w	8003fe8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7e:	461c      	mov	r4, r3
 8003e80:	f04f 0500 	mov.w	r5, #0
 8003e84:	4622      	mov	r2, r4
 8003e86:	462b      	mov	r3, r5
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e94:	1912      	adds	r2, r2, r4
 8003e96:	eb45 0303 	adc.w	r3, r5, r3
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	00d9      	lsls	r1, r3, #3
 8003ea4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ea8:	00d0      	lsls	r0, r2, #3
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	1911      	adds	r1, r2, r4
 8003eb0:	6639      	str	r1, [r7, #96]	; 0x60
 8003eb2:	416b      	adcs	r3, r5
 8003eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ecc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ed0:	f7fc feda 	bl	8000c88 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4ba5      	ldr	r3, [pc, #660]	; (8004170 <UART_SetConfig+0x38c>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	011e      	lsls	r6, r3, #4
 8003ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee4:	461c      	mov	r4, r3
 8003ee6:	f04f 0500 	mov.w	r5, #0
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	1891      	adds	r1, r2, r2
 8003ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ef2:	415b      	adcs	r3, r3
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003efa:	1912      	adds	r2, r2, r4
 8003efc:	eb45 0303 	adc.w	r3, r5, r3
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0e:	00d0      	lsls	r0, r2, #3
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	1911      	adds	r1, r2, r4
 8003f16:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f18:	416b      	adcs	r3, r5
 8003f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	1891      	adds	r1, r2, r2
 8003f28:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f36:	f7fc fea7 	bl	8000c88 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4b8c      	ldr	r3, [pc, #560]	; (8004170 <UART_SetConfig+0x38c>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	; 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a87      	ldr	r2, [pc, #540]	; (8004170 <UART_SetConfig+0x38c>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f60:	441e      	add	r6, r3
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	4618      	mov	r0, r3
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	1894      	adds	r4, r2, r2
 8003f70:	623c      	str	r4, [r7, #32]
 8003f72:	415b      	adcs	r3, r3
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f7a:	1812      	adds	r2, r2, r0
 8003f7c:	eb41 0303 	adc.w	r3, r1, r3
 8003f80:	f04f 0400 	mov.w	r4, #0
 8003f84:	f04f 0500 	mov.w	r5, #0
 8003f88:	00dd      	lsls	r5, r3, #3
 8003f8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f8e:	00d4      	lsls	r4, r2, #3
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	1814      	adds	r4, r2, r0
 8003f96:	653c      	str	r4, [r7, #80]	; 0x50
 8003f98:	414b      	adcs	r3, r1
 8003f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	61b9      	str	r1, [r7, #24]
 8003faa:	415b      	adcs	r3, r3
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fb6:	f7fc fe67 	bl	8000c88 <__aeabi_uldivmod>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <UART_SetConfig+0x38c>)
 8003fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	2164      	movs	r1, #100	; 0x64
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	4a67      	ldr	r2, [pc, #412]	; (8004170 <UART_SetConfig+0x38c>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0207 	and.w	r2, r3, #7
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4432      	add	r2, r6
 8003fe4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe6:	e0b9      	b.n	800415c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fea:	461c      	mov	r4, r3
 8003fec:	f04f 0500 	mov.w	r5, #0
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	1891      	adds	r1, r2, r2
 8003ff6:	6139      	str	r1, [r7, #16]
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004000:	1912      	adds	r2, r2, r4
 8004002:	eb45 0303 	adc.w	r3, r5, r3
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	00d9      	lsls	r1, r3, #3
 8004010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004014:	00d0      	lsls	r0, r2, #3
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	eb12 0804 	adds.w	r8, r2, r4
 800401e:	eb43 0905 	adc.w	r9, r3, r5
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	008b      	lsls	r3, r1, #2
 8004036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800403a:	0082      	lsls	r2, r0, #2
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc fe22 	bl	8000c88 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b49      	ldr	r3, [pc, #292]	; (8004170 <UART_SetConfig+0x38c>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011e      	lsls	r6, r3, #4
 8004052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004054:	4618      	mov	r0, r3
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	1894      	adds	r4, r2, r2
 8004060:	60bc      	str	r4, [r7, #8]
 8004062:	415b      	adcs	r3, r3
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800406a:	1812      	adds	r2, r2, r0
 800406c:	eb41 0303 	adc.w	r3, r1, r3
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	f04f 0500 	mov.w	r5, #0
 8004078:	00dd      	lsls	r5, r3, #3
 800407a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800407e:	00d4      	lsls	r4, r2, #3
 8004080:	4622      	mov	r2, r4
 8004082:	462b      	mov	r3, r5
 8004084:	1814      	adds	r4, r2, r0
 8004086:	64bc      	str	r4, [r7, #72]	; 0x48
 8004088:	414b      	adcs	r3, r1
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	008b      	lsls	r3, r1, #2
 80040a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040a4:	0082      	lsls	r2, r0, #2
 80040a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040aa:	f7fc fded 	bl	8000c88 <__aeabi_uldivmod>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <UART_SetConfig+0x38c>)
 80040b4:	fba3 1302 	umull	r1, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2164      	movs	r1, #100	; 0x64
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	3332      	adds	r3, #50	; 0x32
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <UART_SetConfig+0x38c>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d2:	441e      	add	r6, r3
 80040d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d6:	4618      	mov	r0, r3
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	1894      	adds	r4, r2, r2
 80040e2:	603c      	str	r4, [r7, #0]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ec:	1812      	adds	r2, r2, r0
 80040ee:	eb41 0303 	adc.w	r3, r1, r3
 80040f2:	f04f 0400 	mov.w	r4, #0
 80040f6:	f04f 0500 	mov.w	r5, #0
 80040fa:	00dd      	lsls	r5, r3, #3
 80040fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004100:	00d4      	lsls	r4, r2, #3
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	eb12 0a00 	adds.w	sl, r2, r0
 800410a:	eb43 0b01 	adc.w	fp, r3, r1
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4618      	mov	r0, r3
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004126:	0082      	lsls	r2, r0, #2
 8004128:	4650      	mov	r0, sl
 800412a:	4659      	mov	r1, fp
 800412c:	f7fc fdac 	bl	8000c88 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <UART_SetConfig+0x38c>)
 8004136:	fba3 1302 	umull	r1, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2164      	movs	r1, #100	; 0x64
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	; 0x32
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <UART_SetConfig+0x38c>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4432      	add	r2, r6
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	377c      	adds	r7, #124	; 0x7c
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	40011000 	.word	0x40011000
 800416c:	40011400 	.word	0x40011400
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004186:	2b84      	cmp	r3, #132	; 0x84
 8004188:	d005      	beq.n	8004196 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800418a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	3303      	adds	r3, #3
 8004194:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041a8:	f000 faf6 	bl	8004798 <vTaskStartScheduler>
  
  return osOK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b4:	b089      	sub	sp, #36	; 0x24
 80041b6:	af04      	add	r7, sp, #16
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d020      	beq.n	8004206 <osThreadCreate+0x54>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01c      	beq.n	8004206 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685c      	ldr	r4, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681d      	ldr	r5, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691e      	ldr	r6, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffc8 	bl	8004174 <makeFreeRtosPriority>
 80041e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ee:	9202      	str	r2, [sp, #8]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	9100      	str	r1, [sp, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4632      	mov	r2, r6
 80041f8:	4629      	mov	r1, r5
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 f8ed 	bl	80043da <xTaskCreateStatic>
 8004200:	4603      	mov	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e01c      	b.n	8004240 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685c      	ldr	r4, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004212:	b29e      	uxth	r6, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffaa 	bl	8004174 <makeFreeRtosPriority>
 8004220:	4602      	mov	r2, r0
 8004222:	f107 030c 	add.w	r3, r7, #12
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4632      	mov	r2, r6
 800422e:	4629      	mov	r1, r5
 8004230:	4620      	mov	r0, r4
 8004232:	f000 f92f 	bl	8004494 <xTaskCreate>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d001      	beq.n	8004240 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004240:	68fb      	ldr	r3, [r7, #12]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800424a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <osDelay+0x16>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	e000      	b.n	8004262 <osDelay+0x18>
 8004260:	2301      	movs	r3, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fa64 	bl	8004730 <vTaskDelay>
  
  return osOK;
 8004268:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f103 0208 	add.w	r2, r3, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f103 0208 	add.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f103 0208 	add.w	r2, r3, #8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432a:	d103      	bne.n	8004334 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e00c      	b.n	800434e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3308      	adds	r3, #8
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e002      	b.n	8004342 <vListInsert+0x2e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	429a      	cmp	r2, r3
 800434c:	d2f6      	bcs.n	800433c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6892      	ldr	r2, [r2, #8]
 800439c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6852      	ldr	r2, [r2, #4]
 80043a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d103      	bne.n	80043ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b08e      	sub	sp, #56	; 0x38
 80043de:	af04      	add	r7, sp, #16
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004400:	bf00      	nop
 8004402:	e7fe      	b.n	8004402 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xTaskCreateStatic+0x46>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	61fb      	str	r3, [r7, #28]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004420:	23b4      	movs	r3, #180	; 0xb4
 8004422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2bb4      	cmp	r3, #180	; 0xb4
 8004428:	d00a      	beq.n	8004440 <xTaskCreateStatic+0x66>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	61bb      	str	r3, [r7, #24]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004440:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01e      	beq.n	8004486 <xTaskCreateStatic+0xac>
 8004448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01b      	beq.n	8004486 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004456:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	2202      	movs	r2, #2
 800445c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004460:	2300      	movs	r3, #0
 8004462:	9303      	str	r3, [sp, #12]
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	9302      	str	r3, [sp, #8]
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f851 	bl	8004520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800447e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004480:	f000 f8ec 	bl	800465c <prvAddNewTaskToReadyList>
 8004484:	e001      	b.n	800448a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800448a:	697b      	ldr	r3, [r7, #20]
	}
 800448c:	4618      	mov	r0, r3
 800448e:	3728      	adds	r7, #40	; 0x28
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af04      	add	r7, sp, #16
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fef5 	bl	8005298 <pvPortMalloc>
 80044ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044b6:	20b4      	movs	r0, #180	; 0xb4
 80044b8:	f000 feee 	bl	8005298 <pvPortMalloc>
 80044bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
 80044ca:	e005      	b.n	80044d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f000 ffaf 	bl	8005430 <vPortFree>
 80044d2:	e001      	b.n	80044d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9303      	str	r3, [sp, #12]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	9302      	str	r3, [sp, #8]
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f80f 	bl	8004520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004502:	69f8      	ldr	r0, [r7, #28]
 8004504:	f000 f8aa 	bl	800465c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e002      	b.n	8004514 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004512:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004514:	69bb      	ldr	r3, [r7, #24]
	}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004538:	3b01      	subs	r3, #1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	617b      	str	r3, [r7, #20]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01f      	beq.n	80045ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e012      	b.n	800459a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	7819      	ldrb	r1, [r3, #0]
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	3334      	adds	r3, #52	; 0x34
 8004584:	460a      	mov	r2, r1
 8004586:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d9e9      	bls.n	8004574 <prvInitialiseNewTask+0x54>
 80045a0:	e000      	b.n	80045a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80045a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ac:	e003      	b.n	80045b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2b06      	cmp	r3, #6
 80045ba:	d901      	bls.n	80045c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045bc:	2306      	movs	r3, #6
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2200      	movs	r2, #0
 80045d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe6b 	bl	80042b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	3318      	adds	r3, #24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fe66 	bl	80042b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f1c3 0207 	rsb	r2, r3, #7
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2200      	movs	r2, #0
 8004608:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	334c      	adds	r3, #76	; 0x4c
 8004610:	2260      	movs	r2, #96	; 0x60
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f95f 	bl	80058d8 <memset>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <prvInitialiseNewTask+0x130>)
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <prvInitialiseNewTask+0x134>)
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <prvInitialiseNewTask+0x138>)
 800462a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	69b8      	ldr	r0, [r7, #24]
 8004632:	f000 fc1f 	bl	8004e74 <pxPortInitialiseStack>
 8004636:	4602      	mov	r2, r0
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004646:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004648:	bf00      	nop
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0800a67c 	.word	0x0800a67c
 8004654:	0800a69c 	.word	0x0800a69c
 8004658:	0800a65c 	.word	0x0800a65c

0800465c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004664:	f000 fd36 	bl	80050d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004668:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <prvAddNewTaskToReadyList+0xb8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a29      	ldr	r2, [pc, #164]	; (8004714 <prvAddNewTaskToReadyList+0xb8>)
 8004670:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <prvAddNewTaskToReadyList+0xbc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800467a:	4a27      	ldr	r2, [pc, #156]	; (8004718 <prvAddNewTaskToReadyList+0xbc>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <prvAddNewTaskToReadyList+0xb8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d110      	bne.n	80046aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004688:	f000 facc 	bl	8004c24 <prvInitialiseTaskLists>
 800468c:	e00d      	b.n	80046aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <prvAddNewTaskToReadyList+0xc0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <prvAddNewTaskToReadyList+0xbc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d802      	bhi.n	80046aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <prvAddNewTaskToReadyList+0xbc>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <prvAddNewTaskToReadyList+0xc4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <prvAddNewTaskToReadyList+0xc4>)
 80046b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2201      	movs	r2, #1
 80046ba:	409a      	lsls	r2, r3
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <prvAddNewTaskToReadyList+0xc8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <prvAddNewTaskToReadyList+0xc8>)
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <prvAddNewTaskToReadyList+0xcc>)
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f7ff fdf5 	bl	80042cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046e2:	f000 fd27 	bl	8005134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <prvAddNewTaskToReadyList+0xc0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <prvAddNewTaskToReadyList+0xbc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d207      	bcs.n	800470c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <prvAddNewTaskToReadyList+0xd0>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200005cc 	.word	0x200005cc
 8004718:	200004cc 	.word	0x200004cc
 800471c:	200005d8 	.word	0x200005d8
 8004720:	200005e8 	.word	0x200005e8
 8004724:	200005d4 	.word	0x200005d4
 8004728:	200004d0 	.word	0x200004d0
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d017      	beq.n	8004772 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <vTaskDelay+0x60>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <vTaskDelay+0x30>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004760:	f000 f884 	bl	800486c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004764:	2100      	movs	r1, #0
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb1e 	bl	8004da8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800476c:	f000 f88c 	bl	8004888 <xTaskResumeAll>
 8004770:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <vTaskDelay+0x64>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	200005f4 	.word	0x200005f4
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047a6:	463a      	mov	r2, r7
 80047a8:	1d39      	adds	r1, r7, #4
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc fc7c 	bl	80010ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	9202      	str	r2, [sp, #8]
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	2300      	movs	r3, #0
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	460a      	mov	r2, r1
 80047c6:	4921      	ldr	r1, [pc, #132]	; (800484c <vTaskStartScheduler+0xb4>)
 80047c8:	4821      	ldr	r0, [pc, #132]	; (8004850 <vTaskStartScheduler+0xb8>)
 80047ca:	f7ff fe06 	bl	80043da <xTaskCreateStatic>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a20      	ldr	r2, [pc, #128]	; (8004854 <vTaskStartScheduler+0xbc>)
 80047d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <vTaskStartScheduler+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e001      	b.n	80047e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d11b      	bne.n	8004824 <vTaskStartScheduler+0x8c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	613b      	str	r3, [r7, #16]
}
 80047fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <vTaskStartScheduler+0xc0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	334c      	adds	r3, #76	; 0x4c
 8004806:	4a15      	ldr	r2, [pc, #84]	; (800485c <vTaskStartScheduler+0xc4>)
 8004808:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <vTaskStartScheduler+0xc8>)
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <vTaskStartScheduler+0xcc>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <vTaskStartScheduler+0xd0>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800481e:	f000 fbb7 	bl	8004f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004822:	e00e      	b.n	8004842 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800482a:	d10a      	bne.n	8004842 <vTaskStartScheduler+0xaa>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vTaskStartScheduler+0xa8>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	0800a63c 	.word	0x0800a63c
 8004850:	08004bf5 	.word	0x08004bf5
 8004854:	200005f0 	.word	0x200005f0
 8004858:	200004cc 	.word	0x200004cc
 800485c:	20000010 	.word	0x20000010
 8004860:	200005ec 	.word	0x200005ec
 8004864:	200005d8 	.word	0x200005d8
 8004868:	200005d0 	.word	0x200005d0

0800486c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <vTaskSuspendAll+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a03      	ldr	r2, [pc, #12]	; (8004884 <vTaskSuspendAll+0x18>)
 8004878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	200005f4 	.word	0x200005f4

08004888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004896:	4b41      	ldr	r3, [pc, #260]	; (800499c <xTaskResumeAll+0x114>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	603b      	str	r3, [r7, #0]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048b4:	f000 fc0e 	bl	80050d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <xTaskResumeAll+0x114>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a37      	ldr	r2, [pc, #220]	; (800499c <xTaskResumeAll+0x114>)
 80048c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <xTaskResumeAll+0x114>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d161      	bne.n	800498e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048ca:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <xTaskResumeAll+0x118>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d05d      	beq.n	800498e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d2:	e02e      	b.n	8004932 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d4:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <xTaskResumeAll+0x11c>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3318      	adds	r3, #24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fd50 	bl	8004386 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fd4b 	bl	8004386 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <xTaskResumeAll+0x120>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <xTaskResumeAll+0x120>)
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4a27      	ldr	r2, [pc, #156]	; (80049ac <xTaskResumeAll+0x124>)
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7ff fcd7 	bl	80042cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <xTaskResumeAll+0x128>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <xTaskResumeAll+0x12c>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xTaskResumeAll+0x11c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1cc      	bne.n	80048d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004940:	f000 fa12 	bl	8004d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <xTaskResumeAll+0x130>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004950:	f000 f836 	bl	80049c0 <xTaskIncrementTick>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <xTaskResumeAll+0x12c>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f1      	bne.n	8004950 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <xTaskResumeAll+0x130>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <xTaskResumeAll+0x12c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <xTaskResumeAll+0x134>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f000 fbd1 	bl	8005134 <vPortExitCritical>

	return xAlreadyYielded;
 8004992:	68bb      	ldr	r3, [r7, #8]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200005f4 	.word	0x200005f4
 80049a0:	200005cc 	.word	0x200005cc
 80049a4:	2000058c 	.word	0x2000058c
 80049a8:	200005d4 	.word	0x200005d4
 80049ac:	200004d0 	.word	0x200004d0
 80049b0:	200004cc 	.word	0x200004cc
 80049b4:	200005e0 	.word	0x200005e0
 80049b8:	200005dc 	.word	0x200005dc
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <xTaskIncrementTick+0x144>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 808e 	bne.w	8004af0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d4:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <xTaskIncrementTick+0x148>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049dc:	4a4a      	ldr	r2, [pc, #296]	; (8004b08 <xTaskIncrementTick+0x148>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d120      	bne.n	8004a2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <xTaskIncrementTick+0x14c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <xTaskIncrementTick+0x48>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskIncrementTick+0x46>
 8004a08:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <xTaskIncrementTick+0x150>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <xTaskIncrementTick+0x150>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <xTaskIncrementTick+0x154>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <xTaskIncrementTick+0x154>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	f000 f99f 	bl	8004d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d348      	bcc.n	8004ac6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a44:	601a      	str	r2, [r3, #0]
					break;
 8004a46:	e03e      	b.n	8004ac6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <xTaskIncrementTick+0x14c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d203      	bcs.n	8004a68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <xTaskIncrementTick+0x158>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a66:	e02e      	b.n	8004ac6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fc8a 	bl	8004386 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fc81 	bl	8004386 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <xTaskIncrementTick+0x15c>)
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7ff fc0d 	bl	80042cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3b9      	bcc.n	8004a34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac4:	e7b6      	b.n	8004a34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <xTaskIncrementTick+0x164>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4914      	ldr	r1, [pc, #80]	; (8004b20 <xTaskIncrementTick+0x160>)
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d901      	bls.n	8004ae2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <xTaskIncrementTick+0x168>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e004      	b.n	8004afa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <xTaskIncrementTick+0x16c>)
 8004af8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004afa:	697b      	ldr	r3, [r7, #20]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200005f4 	.word	0x200005f4
 8004b08:	200005d0 	.word	0x200005d0
 8004b0c:	20000584 	.word	0x20000584
 8004b10:	20000588 	.word	0x20000588
 8004b14:	200005e4 	.word	0x200005e4
 8004b18:	200005ec 	.word	0x200005ec
 8004b1c:	200005d4 	.word	0x200005d4
 8004b20:	200004d0 	.word	0x200004d0
 8004b24:	200004cc 	.word	0x200004cc
 8004b28:	200005e0 	.word	0x200005e0
 8004b2c:	200005dc 	.word	0x200005dc

08004b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <vTaskSwitchContext+0xac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b44:	e044      	b.n	8004bd0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <vTaskSwitchContext+0xb4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	f1c3 031f 	rsb	r3, r3, #31
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	4921      	ldr	r1, [pc, #132]	; (8004be8 <vTaskSwitchContext+0xb8>)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	607b      	str	r3, [r7, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <vTaskSwitchContext+0x5a>
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <vTaskSwitchContext+0xb8>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3308      	adds	r3, #8
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d104      	bne.n	8004bbc <vTaskSwitchContext+0x8c>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <vTaskSwitchContext+0xbc>)
 8004bc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <vTaskSwitchContext+0xbc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	334c      	adds	r3, #76	; 0x4c
 8004bcc:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <vTaskSwitchContext+0xc0>)
 8004bce:	6013      	str	r3, [r2, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	200005f4 	.word	0x200005f4
 8004be0:	200005e0 	.word	0x200005e0
 8004be4:	200005d4 	.word	0x200005d4
 8004be8:	200004d0 	.word	0x200004d0
 8004bec:	200004cc 	.word	0x200004cc
 8004bf0:	20000010 	.word	0x20000010

08004bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bfc:	f000 f852 	bl	8004ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <prvIdleTask+0x28>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d9f9      	bls.n	8004bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <prvIdleTask+0x2c>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c18:	e7f0      	b.n	8004bfc <prvIdleTask+0x8>
 8004c1a:	bf00      	nop
 8004c1c:	200004d0 	.word	0x200004d0
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e00c      	b.n	8004c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <prvInitialiseTaskLists+0x60>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fb17 	bl	8004272 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3301      	adds	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d9ef      	bls.n	8004c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c52:	f7ff fb0e 	bl	8004272 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c56:	480d      	ldr	r0, [pc, #52]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c58:	f7ff fb0b 	bl	8004272 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <prvInitialiseTaskLists+0x6c>)
 8004c5e:	f7ff fb08 	bl	8004272 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c62:	480c      	ldr	r0, [pc, #48]	; (8004c94 <prvInitialiseTaskLists+0x70>)
 8004c64:	f7ff fb05 	bl	8004272 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <prvInitialiseTaskLists+0x74>)
 8004c6a:	f7ff fb02 	bl	8004272 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <prvInitialiseTaskLists+0x78>)
 8004c70:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <prvInitialiseTaskLists+0x64>)
 8004c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvInitialiseTaskLists+0x7c>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <prvInitialiseTaskLists+0x68>)
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200004d0 	.word	0x200004d0
 8004c88:	2000055c 	.word	0x2000055c
 8004c8c:	20000570 	.word	0x20000570
 8004c90:	2000058c 	.word	0x2000058c
 8004c94:	200005a0 	.word	0x200005a0
 8004c98:	200005b8 	.word	0x200005b8
 8004c9c:	20000584 	.word	0x20000584
 8004ca0:	20000588 	.word	0x20000588

08004ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004caa:	e019      	b.n	8004ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cac:	f000 fa12 	bl	80050d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <prvCheckTasksWaitingTermination+0x50>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fb62 	bl	8004386 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <prvCheckTasksWaitingTermination+0x54>)
 8004cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cd6:	f000 fa2d 	bl	8005134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f810 	bl	8004d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <prvCheckTasksWaitingTermination+0x58>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e1      	bne.n	8004cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200005a0 	.word	0x200005a0
 8004cf8:	200005cc 	.word	0x200005cc
 8004cfc:	200005b4 	.word	0x200005b4

08004d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	334c      	adds	r3, #76	; 0x4c
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fd35 	bl	800677c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb85 	bl	8005430 <vPortFree>
				vPortFree( pxTCB );
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb82 	bl	8005430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d2c:	e018      	b.n	8004d60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d103      	bne.n	8004d40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb79 	bl	8005430 <vPortFree>
	}
 8004d3e:	e00f      	b.n	8004d60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d00a      	beq.n	8004d60 <prvDeleteTCB+0x60>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60fb      	str	r3, [r7, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <prvDeleteTCB+0x5e>
	}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <prvResetNextTaskUnblockTime+0x38>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <prvResetNextTaskUnblockTime+0x3c>)
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d80:	e008      	b.n	8004d94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <prvResetNextTaskUnblockTime+0x38>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <prvResetNextTaskUnblockTime+0x3c>)
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	20000584 	.word	0x20000584
 8004da4:	200005ec 	.word	0x200005ec

08004da8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004db2:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fae1 	bl	8004386 <uxListRemove>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004de0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de8:	d10a      	bne.n	8004e00 <prvAddCurrentTaskToDelayedList+0x58>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	481a      	ldr	r0, [pc, #104]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dfa:	f7ff fa67 	bl	80042cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dfe:	e026      	b.n	8004e4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d209      	bcs.n	8004e2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f7ff fa75 	bl	8004314 <vListInsert>
}
 8004e2a:	e010      	b.n	8004e4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7ff fa6b 	bl	8004314 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d202      	bcs.n	8004e4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e48:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200005d0 	.word	0x200005d0
 8004e5c:	200004cc 	.word	0x200004cc
 8004e60:	200005d4 	.word	0x200005d4
 8004e64:	200005b8 	.word	0x200005b8
 8004e68:	20000588 	.word	0x20000588
 8004e6c:	20000584 	.word	0x20000584
 8004e70:	200005ec 	.word	0x200005ec

08004e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b04      	subs	r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <pxPortInitialiseStack+0x64>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b14      	subs	r3, #20
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b04      	subs	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f06f 0202 	mvn.w	r2, #2
 8004ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b20      	subs	r3, #32
 8004ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	08004edd 	.word	0x08004edd

08004edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <prvTaskExitError+0x54>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	d00a      	beq.n	8004f06 <prvTaskExitError+0x2a>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	60fb      	str	r3, [r7, #12]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvTaskExitError+0x28>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60bb      	str	r3, [r7, #8]
}
 8004f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f1a:	bf00      	nop
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0fc      	beq.n	8004f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	2000000c 	.word	0x2000000c
	...

08004f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <pxCurrentTCBConst2>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	f380 8809 	msr	PSP, r0
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8811 	msr	BASEPRI, r0
 8004f5a:	4770      	bx	lr
 8004f5c:	f3af 8000 	nop.w

08004f60 <pxCurrentTCBConst2>:
 8004f60:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f68:	4808      	ldr	r0, [pc, #32]	; (8004f8c <prvPortStartFirstTask+0x24>)
 8004f6a:	6800      	ldr	r0, [r0, #0]
 8004f6c:	6800      	ldr	r0, [r0, #0]
 8004f6e:	f380 8808 	msr	MSP, r0
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8814 	msr	CONTROL, r0
 8004f7a:	b662      	cpsie	i
 8004f7c:	b661      	cpsie	f
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	df00      	svc	0
 8004f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f8a:	bf00      	nop
 8004f8c:	e000ed08 	.word	0xe000ed08

08004f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <xPortStartScheduler+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fb6:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <xPortStartScheduler+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <xPortStartScheduler+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10a      	bne.n	8004fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <xPortStartScheduler+0x12c>)
 8004fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <xPortStartScheduler+0x130>)
 8004ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ffe:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <xPortStartScheduler+0x134>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005004:	e009      	b.n	800501a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <xPortStartScheduler+0x134>)
 800500e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d0ef      	beq.n	8005006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <xPortStartScheduler+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	d00a      	beq.n	8005048 <xPortStartScheduler+0xb8>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <xPortStartScheduler+0x134>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <xPortStartScheduler+0x134>)
 8005050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005052:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <xPortStartScheduler+0x134>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <xPortStartScheduler+0x134>)
 800505c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <xPortStartScheduler+0x138>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <xPortStartScheduler+0x138>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <xPortStartScheduler+0x138>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <xPortStartScheduler+0x138>)
 8005078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800507e:	f000 f8dd 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <xPortStartScheduler+0x13c>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005088:	f000 f8fc 	bl	8005284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <xPortStartScheduler+0x140>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <xPortStartScheduler+0x140>)
 8005092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005098:	f7ff ff66 	bl	8004f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800509c:	f7ff fd48 	bl	8004b30 <vTaskSwitchContext>
	prvTaskExitError();
 80050a0:	f7ff ff1c 	bl	8004edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000ed00 	.word	0xe000ed00
 80050b4:	410fc271 	.word	0x410fc271
 80050b8:	410fc270 	.word	0x410fc270
 80050bc:	e000e400 	.word	0xe000e400
 80050c0:	200005f8 	.word	0x200005f8
 80050c4:	200005fc 	.word	0x200005fc
 80050c8:	e000ed20 	.word	0xe000ed20
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	e000ef34 	.word	0xe000ef34

080050d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <vPortEnterCritical+0x58>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <vPortEnterCritical+0x58>)
 80050f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <vPortEnterCritical+0x58>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10f      	bne.n	8005120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortEnterCritical+0x5c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <vPortEnterCritical+0x4c>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <vPortEnterCritical+0x4a>
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <vPortExitCritical+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vPortExitCritical+0x24>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vPortExitCritical+0x50>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <vPortExitCritical+0x50>)
 8005160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <vPortExitCritical+0x50>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <vPortExitCritical+0x42>
 800516a:	2300      	movs	r3, #0
 800516c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7ff fcb6 	bl	8004b30 <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7ff fbd5 	bl	80049c0 <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SysTick_Handler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a09      	ldr	r2, [pc, #36]	; (8005280 <vPortSetupTimerInterrupt+0x44>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010
 8005274:	e000e018 	.word	0xe000e018
 8005278:	20000000 	.word	0x20000000
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	e000e014 	.word	0xe000e014

08005284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005294 <vPortEnableVFP+0x10>
 8005288:	6801      	ldr	r1, [r0, #0]
 800528a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800528e:	6001      	str	r1, [r0, #0]
 8005290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005292:	bf00      	nop
 8005294:	e000ed88 	.word	0xe000ed88

08005298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052a4:	f7ff fae2 	bl	800486c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052a8:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <pvPortMalloc+0x180>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052b0:	f000 f920 	bl	80054f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052b4:	4b59      	ldr	r3, [pc, #356]	; (800541c <pvPortMalloc+0x184>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8093 	bne.w	80053e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01d      	beq.n	8005304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052c8:	2208      	movs	r2, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d014      	beq.n	8005304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	3308      	adds	r3, #8
 80052e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <pvPortMalloc+0x6c>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	617b      	str	r3, [r7, #20]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06e      	beq.n	80053e8 <pvPortMalloc+0x150>
 800530a:	4b45      	ldr	r3, [pc, #276]	; (8005420 <pvPortMalloc+0x188>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d869      	bhi.n	80053e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <pvPortMalloc+0x18c>)
 8005316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <pvPortMalloc+0x18c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800531e:	e004      	b.n	800532a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d903      	bls.n	800533c <pvPortMalloc+0xa4>
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f1      	bne.n	8005320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800533c:	4b36      	ldr	r3, [pc, #216]	; (8005418 <pvPortMalloc+0x180>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	429a      	cmp	r2, r3
 8005344:	d050      	beq.n	80053e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2208      	movs	r2, #8
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	2308      	movs	r3, #8
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	429a      	cmp	r2, r3
 8005366:	d91f      	bls.n	80053a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <pvPortMalloc+0xf8>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	613b      	str	r3, [r7, #16]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f000 f908 	bl	80055b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <pvPortMalloc+0x188>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <pvPortMalloc+0x188>)
 80053b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <pvPortMalloc+0x188>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <pvPortMalloc+0x190>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d203      	bcs.n	80053ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <pvPortMalloc+0x188>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <pvPortMalloc+0x190>)
 80053c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <pvPortMalloc+0x184>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <pvPortMalloc+0x194>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <pvPortMalloc+0x194>)
 80053e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053e8:	f7ff fa4e 	bl	8004888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <pvPortMalloc+0x174>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <pvPortMalloc+0x172>
	return pvReturn;
 800540c:	69fb      	ldr	r3, [r7, #28]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20004208 	.word	0x20004208
 800541c:	2000421c 	.word	0x2000421c
 8005420:	2000420c 	.word	0x2000420c
 8005424:	20004200 	.word	0x20004200
 8005428:	20004210 	.word	0x20004210
 800542c:	20004214 	.word	0x20004214

08005430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04d      	beq.n	80054de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005442:	2308      	movs	r3, #8
 8005444:	425b      	negs	r3, r3
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4413      	add	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <vPortFree+0xb8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <vPortFree+0x44>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <vPortFree+0x62>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <vPortFree+0xb8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01e      	beq.n	80054de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11a      	bne.n	80054de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <vPortFree+0xb8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054b8:	f7ff f9d8 	bl	800486c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <vPortFree+0xbc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	4a09      	ldr	r2, [pc, #36]	; (80054ec <vPortFree+0xbc>)
 80054c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f000 f874 	bl	80055b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <vPortFree+0xc0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <vPortFree+0xc0>)
 80054d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054da:	f7ff f9d5 	bl	8004888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	2000421c 	.word	0x2000421c
 80054ec:	2000420c 	.word	0x2000420c
 80054f0:	20004218 	.word	0x20004218

080054f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005500:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <prvHeapInit+0xac>)
 8005502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3307      	adds	r3, #7
 8005512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0307 	bic.w	r3, r3, #7
 800551a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <prvHeapInit+0xac>)
 8005524:	4413      	add	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800552c:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <prvHeapInit+0xb0>)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <prvHeapInit+0xb0>)
 8005534:	2200      	movs	r2, #0
 8005536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005540:	2208      	movs	r2, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <prvHeapInit+0xb4>)
 8005554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <prvHeapInit+0xb4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <prvHeapInit+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvHeapInit+0xb4>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <prvHeapInit+0xb8>)
 8005582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <prvHeapInit+0xbc>)
 800558a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <prvHeapInit+0xc0>)
 800558e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20000600 	.word	0x20000600
 80055a4:	20004200 	.word	0x20004200
 80055a8:	20004208 	.word	0x20004208
 80055ac:	20004210 	.word	0x20004210
 80055b0:	2000420c 	.word	0x2000420c
 80055b4:	2000421c 	.word	0x2000421c

080055b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <prvInsertBlockIntoFreeList+0xac>)
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e002      	b.n	80055cc <prvInsertBlockIntoFreeList+0x14>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d8f7      	bhi.n	80055c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4413      	add	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d108      	bne.n	80055fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	441a      	add	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d118      	bne.n	8005640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b15      	ldr	r3, [pc, #84]	; (8005668 <prvInsertBlockIntoFreeList+0xb0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d00d      	beq.n	8005636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e008      	b.n	8005648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvInsertBlockIntoFreeList+0xb0>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e003      	b.n	8005648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d002      	beq.n	8005656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20004200 	.word	0x20004200
 8005668:	20004208 	.word	0x20004208

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000010 	.word	0x20000010

08005678 <std>:
 8005678:	2300      	movs	r3, #0
 800567a:	b510      	push	{r4, lr}
 800567c:	4604      	mov	r4, r0
 800567e:	e9c0 3300 	strd	r3, r3, [r0]
 8005682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005686:	6083      	str	r3, [r0, #8]
 8005688:	8181      	strh	r1, [r0, #12]
 800568a:	6643      	str	r3, [r0, #100]	; 0x64
 800568c:	81c2      	strh	r2, [r0, #14]
 800568e:	6183      	str	r3, [r0, #24]
 8005690:	4619      	mov	r1, r3
 8005692:	2208      	movs	r2, #8
 8005694:	305c      	adds	r0, #92	; 0x5c
 8005696:	f000 f91f 	bl	80058d8 <memset>
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <std+0x38>)
 800569c:	6263      	str	r3, [r4, #36]	; 0x24
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <std+0x3c>)
 80056a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <std+0x40>)
 80056a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <std+0x44>)
 80056a8:	6224      	str	r4, [r4, #32]
 80056aa:	6323      	str	r3, [r4, #48]	; 0x30
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	080068a1 	.word	0x080068a1
 80056b4:	080068c3 	.word	0x080068c3
 80056b8:	080068fb 	.word	0x080068fb
 80056bc:	0800691f 	.word	0x0800691f

080056c0 <_cleanup_r>:
 80056c0:	4901      	ldr	r1, [pc, #4]	; (80056c8 <_cleanup_r+0x8>)
 80056c2:	f000 b8af 	b.w	8005824 <_fwalk_reent>
 80056c6:	bf00      	nop
 80056c8:	080084cd 	.word	0x080084cd

080056cc <__sfmoreglue>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	1e4a      	subs	r2, r1, #1
 80056d0:	2568      	movs	r5, #104	; 0x68
 80056d2:	4355      	muls	r5, r2
 80056d4:	460e      	mov	r6, r1
 80056d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056da:	f000 f955 	bl	8005988 <_malloc_r>
 80056de:	4604      	mov	r4, r0
 80056e0:	b140      	cbz	r0, 80056f4 <__sfmoreglue+0x28>
 80056e2:	2100      	movs	r1, #0
 80056e4:	e9c0 1600 	strd	r1, r6, [r0]
 80056e8:	300c      	adds	r0, #12
 80056ea:	60a0      	str	r0, [r4, #8]
 80056ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056f0:	f000 f8f2 	bl	80058d8 <memset>
 80056f4:	4620      	mov	r0, r4
 80056f6:	bd70      	pop	{r4, r5, r6, pc}

080056f8 <__sfp_lock_acquire>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__sfp_lock_acquire+0x8>)
 80056fa:	f7fc bbe6 	b.w	8001eca <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	200004c4 	.word	0x200004c4

08005704 <__sfp_lock_release>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__sfp_lock_release+0x8>)
 8005706:	f7fc bbf4 	b.w	8001ef2 <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	200004c4 	.word	0x200004c4

08005710 <__sinit_lock_acquire>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__sinit_lock_acquire+0x8>)
 8005712:	f7fc bbda 	b.w	8001eca <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	200004c0 	.word	0x200004c0

0800571c <__sinit_lock_release>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__sinit_lock_release+0x8>)
 800571e:	f7fc bbe8 	b.w	8001ef2 <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	200004c0 	.word	0x200004c0

08005728 <__sinit>:
 8005728:	b510      	push	{r4, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	f7ff fff0 	bl	8005710 <__sinit_lock_acquire>
 8005730:	69a3      	ldr	r3, [r4, #24]
 8005732:	b11b      	cbz	r3, 800573c <__sinit+0x14>
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005738:	f7ff bff0 	b.w	800571c <__sinit_lock_release>
 800573c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005740:	6523      	str	r3, [r4, #80]	; 0x50
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <__sinit+0x68>)
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <__sinit+0x6c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62a2      	str	r2, [r4, #40]	; 0x28
 800574a:	42a3      	cmp	r3, r4
 800574c:	bf04      	itt	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	61a3      	streq	r3, [r4, #24]
 8005752:	4620      	mov	r0, r4
 8005754:	f000 f820 	bl	8005798 <__sfp>
 8005758:	6060      	str	r0, [r4, #4]
 800575a:	4620      	mov	r0, r4
 800575c:	f000 f81c 	bl	8005798 <__sfp>
 8005760:	60a0      	str	r0, [r4, #8]
 8005762:	4620      	mov	r0, r4
 8005764:	f000 f818 	bl	8005798 <__sfp>
 8005768:	2200      	movs	r2, #0
 800576a:	60e0      	str	r0, [r4, #12]
 800576c:	2104      	movs	r1, #4
 800576e:	6860      	ldr	r0, [r4, #4]
 8005770:	f7ff ff82 	bl	8005678 <std>
 8005774:	68a0      	ldr	r0, [r4, #8]
 8005776:	2201      	movs	r2, #1
 8005778:	2109      	movs	r1, #9
 800577a:	f7ff ff7d 	bl	8005678 <std>
 800577e:	68e0      	ldr	r0, [r4, #12]
 8005780:	2202      	movs	r2, #2
 8005782:	2112      	movs	r1, #18
 8005784:	f7ff ff78 	bl	8005678 <std>
 8005788:	2301      	movs	r3, #1
 800578a:	61a3      	str	r3, [r4, #24]
 800578c:	e7d2      	b.n	8005734 <__sinit+0xc>
 800578e:	bf00      	nop
 8005790:	0800a6bc 	.word	0x0800a6bc
 8005794:	080056c1 	.word	0x080056c1

08005798 <__sfp>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	4607      	mov	r7, r0
 800579c:	f7ff ffac 	bl	80056f8 <__sfp_lock_acquire>
 80057a0:	4b1e      	ldr	r3, [pc, #120]	; (800581c <__sfp+0x84>)
 80057a2:	681e      	ldr	r6, [r3, #0]
 80057a4:	69b3      	ldr	r3, [r6, #24]
 80057a6:	b913      	cbnz	r3, 80057ae <__sfp+0x16>
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff ffbd 	bl	8005728 <__sinit>
 80057ae:	3648      	adds	r6, #72	; 0x48
 80057b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	d503      	bpl.n	80057c0 <__sfp+0x28>
 80057b8:	6833      	ldr	r3, [r6, #0]
 80057ba:	b30b      	cbz	r3, 8005800 <__sfp+0x68>
 80057bc:	6836      	ldr	r6, [r6, #0]
 80057be:	e7f7      	b.n	80057b0 <__sfp+0x18>
 80057c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057c4:	b9d5      	cbnz	r5, 80057fc <__sfp+0x64>
 80057c6:	4b16      	ldr	r3, [pc, #88]	; (8005820 <__sfp+0x88>)
 80057c8:	60e3      	str	r3, [r4, #12]
 80057ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057ce:	6665      	str	r5, [r4, #100]	; 0x64
 80057d0:	f7fc fb55 	bl	8001e7e <__retarget_lock_init_recursive>
 80057d4:	f7ff ff96 	bl	8005704 <__sfp_lock_release>
 80057d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057e0:	6025      	str	r5, [r4, #0]
 80057e2:	61a5      	str	r5, [r4, #24]
 80057e4:	2208      	movs	r2, #8
 80057e6:	4629      	mov	r1, r5
 80057e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057ec:	f000 f874 	bl	80058d8 <memset>
 80057f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057f8:	4620      	mov	r0, r4
 80057fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fc:	3468      	adds	r4, #104	; 0x68
 80057fe:	e7d9      	b.n	80057b4 <__sfp+0x1c>
 8005800:	2104      	movs	r1, #4
 8005802:	4638      	mov	r0, r7
 8005804:	f7ff ff62 	bl	80056cc <__sfmoreglue>
 8005808:	4604      	mov	r4, r0
 800580a:	6030      	str	r0, [r6, #0]
 800580c:	2800      	cmp	r0, #0
 800580e:	d1d5      	bne.n	80057bc <__sfp+0x24>
 8005810:	f7ff ff78 	bl	8005704 <__sfp_lock_release>
 8005814:	230c      	movs	r3, #12
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	e7ee      	b.n	80057f8 <__sfp+0x60>
 800581a:	bf00      	nop
 800581c:	0800a6bc 	.word	0x0800a6bc
 8005820:	ffff0001 	.word	0xffff0001

08005824 <_fwalk_reent>:
 8005824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005828:	4606      	mov	r6, r0
 800582a:	4688      	mov	r8, r1
 800582c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005830:	2700      	movs	r7, #0
 8005832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005836:	f1b9 0901 	subs.w	r9, r9, #1
 800583a:	d505      	bpl.n	8005848 <_fwalk_reent+0x24>
 800583c:	6824      	ldr	r4, [r4, #0]
 800583e:	2c00      	cmp	r4, #0
 8005840:	d1f7      	bne.n	8005832 <_fwalk_reent+0xe>
 8005842:	4638      	mov	r0, r7
 8005844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005848:	89ab      	ldrh	r3, [r5, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d907      	bls.n	800585e <_fwalk_reent+0x3a>
 800584e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005852:	3301      	adds	r3, #1
 8005854:	d003      	beq.n	800585e <_fwalk_reent+0x3a>
 8005856:	4629      	mov	r1, r5
 8005858:	4630      	mov	r0, r6
 800585a:	47c0      	blx	r8
 800585c:	4307      	orrs	r7, r0
 800585e:	3568      	adds	r5, #104	; 0x68
 8005860:	e7e9      	b.n	8005836 <_fwalk_reent+0x12>
	...

08005864 <__libc_init_array>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4d0d      	ldr	r5, [pc, #52]	; (800589c <__libc_init_array+0x38>)
 8005868:	4c0d      	ldr	r4, [pc, #52]	; (80058a0 <__libc_init_array+0x3c>)
 800586a:	1b64      	subs	r4, r4, r5
 800586c:	10a4      	asrs	r4, r4, #2
 800586e:	2600      	movs	r6, #0
 8005870:	42a6      	cmp	r6, r4
 8005872:	d109      	bne.n	8005888 <__libc_init_array+0x24>
 8005874:	4d0b      	ldr	r5, [pc, #44]	; (80058a4 <__libc_init_array+0x40>)
 8005876:	4c0c      	ldr	r4, [pc, #48]	; (80058a8 <__libc_init_array+0x44>)
 8005878:	f004 feb0 	bl	800a5dc <_init>
 800587c:	1b64      	subs	r4, r4, r5
 800587e:	10a4      	asrs	r4, r4, #2
 8005880:	2600      	movs	r6, #0
 8005882:	42a6      	cmp	r6, r4
 8005884:	d105      	bne.n	8005892 <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	f855 3b04 	ldr.w	r3, [r5], #4
 800588c:	4798      	blx	r3
 800588e:	3601      	adds	r6, #1
 8005890:	e7ee      	b.n	8005870 <__libc_init_array+0xc>
 8005892:	f855 3b04 	ldr.w	r3, [r5], #4
 8005896:	4798      	blx	r3
 8005898:	3601      	adds	r6, #1
 800589a:	e7f2      	b.n	8005882 <__libc_init_array+0x1e>
 800589c:	0800ab34 	.word	0x0800ab34
 80058a0:	0800ab34 	.word	0x0800ab34
 80058a4:	0800ab34 	.word	0x0800ab34
 80058a8:	0800ab38 	.word	0x0800ab38

080058ac <malloc>:
 80058ac:	4b02      	ldr	r3, [pc, #8]	; (80058b8 <malloc+0xc>)
 80058ae:	4601      	mov	r1, r0
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	f000 b869 	b.w	8005988 <_malloc_r>
 80058b6:	bf00      	nop
 80058b8:	20000010 	.word	0x20000010

080058bc <memcpy>:
 80058bc:	440a      	add	r2, r1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058c4:	d100      	bne.n	80058c8 <memcpy+0xc>
 80058c6:	4770      	bx	lr
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	4291      	cmp	r1, r2
 80058d4:	d1f9      	bne.n	80058ca <memcpy+0xe>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <memset>:
 80058d8:	4402      	add	r2, r0
 80058da:	4603      	mov	r3, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <_free_r>:
 80058e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ea:	2900      	cmp	r1, #0
 80058ec:	d048      	beq.n	8005980 <_free_r+0x98>
 80058ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f2:	9001      	str	r0, [sp, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f1a1 0404 	sub.w	r4, r1, #4
 80058fa:	bfb8      	it	lt
 80058fc:	18e4      	addlt	r4, r4, r3
 80058fe:	f003 f9b9 	bl	8008c74 <__malloc_lock>
 8005902:	4a20      	ldr	r2, [pc, #128]	; (8005984 <_free_r+0x9c>)
 8005904:	9801      	ldr	r0, [sp, #4]
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	4615      	mov	r5, r2
 800590a:	b933      	cbnz	r3, 800591a <_free_r+0x32>
 800590c:	6063      	str	r3, [r4, #4]
 800590e:	6014      	str	r4, [r2, #0]
 8005910:	b003      	add	sp, #12
 8005912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005916:	f003 b9b3 	b.w	8008c80 <__malloc_unlock>
 800591a:	42a3      	cmp	r3, r4
 800591c:	d90b      	bls.n	8005936 <_free_r+0x4e>
 800591e:	6821      	ldr	r1, [r4, #0]
 8005920:	1862      	adds	r2, r4, r1
 8005922:	4293      	cmp	r3, r2
 8005924:	bf04      	itt	eq
 8005926:	681a      	ldreq	r2, [r3, #0]
 8005928:	685b      	ldreq	r3, [r3, #4]
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	bf04      	itt	eq
 800592e:	1852      	addeq	r2, r2, r1
 8005930:	6022      	streq	r2, [r4, #0]
 8005932:	602c      	str	r4, [r5, #0]
 8005934:	e7ec      	b.n	8005910 <_free_r+0x28>
 8005936:	461a      	mov	r2, r3
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b10b      	cbz	r3, 8005940 <_free_r+0x58>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d9fa      	bls.n	8005936 <_free_r+0x4e>
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	1855      	adds	r5, r2, r1
 8005944:	42a5      	cmp	r5, r4
 8005946:	d10b      	bne.n	8005960 <_free_r+0x78>
 8005948:	6824      	ldr	r4, [r4, #0]
 800594a:	4421      	add	r1, r4
 800594c:	1854      	adds	r4, r2, r1
 800594e:	42a3      	cmp	r3, r4
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	d1dd      	bne.n	8005910 <_free_r+0x28>
 8005954:	681c      	ldr	r4, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6053      	str	r3, [r2, #4]
 800595a:	4421      	add	r1, r4
 800595c:	6011      	str	r1, [r2, #0]
 800595e:	e7d7      	b.n	8005910 <_free_r+0x28>
 8005960:	d902      	bls.n	8005968 <_free_r+0x80>
 8005962:	230c      	movs	r3, #12
 8005964:	6003      	str	r3, [r0, #0]
 8005966:	e7d3      	b.n	8005910 <_free_r+0x28>
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	1961      	adds	r1, r4, r5
 800596c:	428b      	cmp	r3, r1
 800596e:	bf04      	itt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	6063      	str	r3, [r4, #4]
 8005976:	bf04      	itt	eq
 8005978:	1949      	addeq	r1, r1, r5
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6054      	str	r4, [r2, #4]
 800597e:	e7c7      	b.n	8005910 <_free_r+0x28>
 8005980:	b003      	add	sp, #12
 8005982:	bd30      	pop	{r4, r5, pc}
 8005984:	20004220 	.word	0x20004220

08005988 <_malloc_r>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	1ccd      	adds	r5, r1, #3
 800598c:	f025 0503 	bic.w	r5, r5, #3
 8005990:	3508      	adds	r5, #8
 8005992:	2d0c      	cmp	r5, #12
 8005994:	bf38      	it	cc
 8005996:	250c      	movcc	r5, #12
 8005998:	2d00      	cmp	r5, #0
 800599a:	4606      	mov	r6, r0
 800599c:	db01      	blt.n	80059a2 <_malloc_r+0x1a>
 800599e:	42a9      	cmp	r1, r5
 80059a0:	d903      	bls.n	80059aa <_malloc_r+0x22>
 80059a2:	230c      	movs	r3, #12
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	2000      	movs	r0, #0
 80059a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059aa:	f003 f963 	bl	8008c74 <__malloc_lock>
 80059ae:	4921      	ldr	r1, [pc, #132]	; (8005a34 <_malloc_r+0xac>)
 80059b0:	680a      	ldr	r2, [r1, #0]
 80059b2:	4614      	mov	r4, r2
 80059b4:	b99c      	cbnz	r4, 80059de <_malloc_r+0x56>
 80059b6:	4f20      	ldr	r7, [pc, #128]	; (8005a38 <_malloc_r+0xb0>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	b923      	cbnz	r3, 80059c6 <_malloc_r+0x3e>
 80059bc:	4621      	mov	r1, r4
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 ff38 	bl	8006834 <_sbrk_r>
 80059c4:	6038      	str	r0, [r7, #0]
 80059c6:	4629      	mov	r1, r5
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 ff33 	bl	8006834 <_sbrk_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d123      	bne.n	8005a1a <_malloc_r+0x92>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	4630      	mov	r0, r6
 80059d8:	f003 f952 	bl	8008c80 <__malloc_unlock>
 80059dc:	e7e3      	b.n	80059a6 <_malloc_r+0x1e>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	1b5b      	subs	r3, r3, r5
 80059e2:	d417      	bmi.n	8005a14 <_malloc_r+0x8c>
 80059e4:	2b0b      	cmp	r3, #11
 80059e6:	d903      	bls.n	80059f0 <_malloc_r+0x68>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	441c      	add	r4, r3
 80059ec:	6025      	str	r5, [r4, #0]
 80059ee:	e004      	b.n	80059fa <_malloc_r+0x72>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	42a2      	cmp	r2, r4
 80059f4:	bf0c      	ite	eq
 80059f6:	600b      	streq	r3, [r1, #0]
 80059f8:	6053      	strne	r3, [r2, #4]
 80059fa:	4630      	mov	r0, r6
 80059fc:	f003 f940 	bl	8008c80 <__malloc_unlock>
 8005a00:	f104 000b 	add.w	r0, r4, #11
 8005a04:	1d23      	adds	r3, r4, #4
 8005a06:	f020 0007 	bic.w	r0, r0, #7
 8005a0a:	1ac2      	subs	r2, r0, r3
 8005a0c:	d0cc      	beq.n	80059a8 <_malloc_r+0x20>
 8005a0e:	1a1b      	subs	r3, r3, r0
 8005a10:	50a3      	str	r3, [r4, r2]
 8005a12:	e7c9      	b.n	80059a8 <_malloc_r+0x20>
 8005a14:	4622      	mov	r2, r4
 8005a16:	6864      	ldr	r4, [r4, #4]
 8005a18:	e7cc      	b.n	80059b4 <_malloc_r+0x2c>
 8005a1a:	1cc4      	adds	r4, r0, #3
 8005a1c:	f024 0403 	bic.w	r4, r4, #3
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d0e3      	beq.n	80059ec <_malloc_r+0x64>
 8005a24:	1a21      	subs	r1, r4, r0
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 ff04 	bl	8006834 <_sbrk_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d1dd      	bne.n	80059ec <_malloc_r+0x64>
 8005a30:	e7cf      	b.n	80059d2 <_malloc_r+0x4a>
 8005a32:	bf00      	nop
 8005a34:	20004220 	.word	0x20004220
 8005a38:	20004224 	.word	0x20004224

08005a3c <__cvt>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	ec55 4b10 	vmov	r4, r5, d0
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	460e      	mov	r6, r1
 8005a48:	4619      	mov	r1, r3
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	bfbb      	ittet	lt
 8005a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a52:	461d      	movlt	r5, r3
 8005a54:	2300      	movge	r3, #0
 8005a56:	232d      	movlt	r3, #45	; 0x2d
 8005a58:	700b      	strb	r3, [r1, #0]
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a60:	4691      	mov	r9, r2
 8005a62:	f023 0820 	bic.w	r8, r3, #32
 8005a66:	bfbc      	itt	lt
 8005a68:	4622      	movlt	r2, r4
 8005a6a:	4614      	movlt	r4, r2
 8005a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a70:	d005      	beq.n	8005a7e <__cvt+0x42>
 8005a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a76:	d100      	bne.n	8005a7a <__cvt+0x3e>
 8005a78:	3601      	adds	r6, #1
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	e000      	b.n	8005a80 <__cvt+0x44>
 8005a7e:	2103      	movs	r1, #3
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	ab02      	add	r3, sp, #8
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	ec45 4b10 	vmov	d0, r4, r5
 8005a8c:	4653      	mov	r3, sl
 8005a8e:	4632      	mov	r2, r6
 8005a90:	f001 feaa 	bl	80077e8 <_dtoa_r>
 8005a94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a98:	4607      	mov	r7, r0
 8005a9a:	d102      	bne.n	8005aa2 <__cvt+0x66>
 8005a9c:	f019 0f01 	tst.w	r9, #1
 8005aa0:	d022      	beq.n	8005ae8 <__cvt+0xac>
 8005aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa6:	eb07 0906 	add.w	r9, r7, r6
 8005aaa:	d110      	bne.n	8005ace <__cvt+0x92>
 8005aac:	783b      	ldrb	r3, [r7, #0]
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d10a      	bne.n	8005ac8 <__cvt+0x8c>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fb f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8005abe:	b918      	cbnz	r0, 8005ac8 <__cvt+0x8c>
 8005ac0:	f1c6 0601 	rsb	r6, r6, #1
 8005ac4:	f8ca 6000 	str.w	r6, [sl]
 8005ac8:	f8da 3000 	ldr.w	r3, [sl]
 8005acc:	4499      	add	r9, r3
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ada:	b108      	cbz	r0, 8005ae0 <__cvt+0xa4>
 8005adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ae0:	2230      	movs	r2, #48	; 0x30
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	454b      	cmp	r3, r9
 8005ae6:	d307      	bcc.n	8005af8 <__cvt+0xbc>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aec:	1bdb      	subs	r3, r3, r7
 8005aee:	4638      	mov	r0, r7
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	b004      	add	sp, #16
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	9103      	str	r1, [sp, #12]
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e7f0      	b.n	8005ae2 <__cvt+0xa6>

08005b00 <__exponent>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	4603      	mov	r3, r0
 8005b04:	2900      	cmp	r1, #0
 8005b06:	bfb8      	it	lt
 8005b08:	4249      	neglt	r1, r1
 8005b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b0e:	bfb4      	ite	lt
 8005b10:	222d      	movlt	r2, #45	; 0x2d
 8005b12:	222b      	movge	r2, #43	; 0x2b
 8005b14:	2909      	cmp	r1, #9
 8005b16:	7042      	strb	r2, [r0, #1]
 8005b18:	dd2a      	ble.n	8005b70 <__exponent+0x70>
 8005b1a:	f10d 0407 	add.w	r4, sp, #7
 8005b1e:	46a4      	mov	ip, r4
 8005b20:	270a      	movs	r7, #10
 8005b22:	46a6      	mov	lr, r4
 8005b24:	460a      	mov	r2, r1
 8005b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005b2e:	3530      	adds	r5, #48	; 0x30
 8005b30:	2a63      	cmp	r2, #99	; 0x63
 8005b32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	dcf1      	bgt.n	8005b22 <__exponent+0x22>
 8005b3e:	3130      	adds	r1, #48	; 0x30
 8005b40:	f1ae 0502 	sub.w	r5, lr, #2
 8005b44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b48:	1c44      	adds	r4, r0, #1
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4561      	cmp	r1, ip
 8005b4e:	d30a      	bcc.n	8005b66 <__exponent+0x66>
 8005b50:	f10d 0209 	add.w	r2, sp, #9
 8005b54:	eba2 020e 	sub.w	r2, r2, lr
 8005b58:	4565      	cmp	r5, ip
 8005b5a:	bf88      	it	hi
 8005b5c:	2200      	movhi	r2, #0
 8005b5e:	4413      	add	r3, r2
 8005b60:	1a18      	subs	r0, r3, r0
 8005b62:	b003      	add	sp, #12
 8005b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b6e:	e7ed      	b.n	8005b4c <__exponent+0x4c>
 8005b70:	2330      	movs	r3, #48	; 0x30
 8005b72:	3130      	adds	r1, #48	; 0x30
 8005b74:	7083      	strb	r3, [r0, #2]
 8005b76:	70c1      	strb	r1, [r0, #3]
 8005b78:	1d03      	adds	r3, r0, #4
 8005b7a:	e7f1      	b.n	8005b60 <__exponent+0x60>

08005b7c <_printf_float>:
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	ed2d 8b02 	vpush	{d8}
 8005b84:	b08d      	sub	sp, #52	; 0x34
 8005b86:	460c      	mov	r4, r1
 8005b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	461f      	mov	r7, r3
 8005b90:	4605      	mov	r5, r0
 8005b92:	f003 f847 	bl	8008c24 <_localeconv_r>
 8005b96:	f8d0 a000 	ldr.w	sl, [r0]
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f7fa fb18 	bl	80001d0 <strlen>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	9305      	str	r3, [sp, #20]
 8005ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bb0:	3307      	adds	r3, #7
 8005bb2:	f023 0307 	bic.w	r3, r3, #7
 8005bb6:	f103 0208 	add.w	r2, r3, #8
 8005bba:	f8c8 2000 	str.w	r2, [r8]
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bce:	9307      	str	r3, [sp, #28]
 8005bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bd4:	ee08 0a10 	vmov	s16, r0
 8005bd8:	4b9f      	ldr	r3, [pc, #636]	; (8005e58 <_printf_float+0x2dc>)
 8005bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005be2:	f7fa ffa3 	bl	8000b2c <__aeabi_dcmpun>
 8005be6:	bb88      	cbnz	r0, 8005c4c <_printf_float+0xd0>
 8005be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bec:	4b9a      	ldr	r3, [pc, #616]	; (8005e58 <_printf_float+0x2dc>)
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf2:	f7fa ff7d 	bl	8000af0 <__aeabi_dcmple>
 8005bf6:	bb48      	cbnz	r0, 8005c4c <_printf_float+0xd0>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fa ff6c 	bl	8000adc <__aeabi_dcmplt>
 8005c04:	b110      	cbz	r0, 8005c0c <_printf_float+0x90>
 8005c06:	232d      	movs	r3, #45	; 0x2d
 8005c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0c:	4b93      	ldr	r3, [pc, #588]	; (8005e5c <_printf_float+0x2e0>)
 8005c0e:	4894      	ldr	r0, [pc, #592]	; (8005e60 <_printf_float+0x2e4>)
 8005c10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c14:	bf94      	ite	ls
 8005c16:	4698      	movls	r8, r3
 8005c18:	4680      	movhi	r8, r0
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	9b05      	ldr	r3, [sp, #20]
 8005c20:	f023 0204 	bic.w	r2, r3, #4
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	4633      	mov	r3, r6
 8005c2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c30:	4621      	mov	r1, r4
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f9d8 	bl	8005fe8 <_printf_common>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f040 8090 	bne.w	8005d5e <_printf_float+0x1e2>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c42:	b00d      	add	sp, #52	; 0x34
 8005c44:	ecbd 8b02 	vpop	{d8}
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	4640      	mov	r0, r8
 8005c52:	4649      	mov	r1, r9
 8005c54:	f7fa ff6a 	bl	8000b2c <__aeabi_dcmpun>
 8005c58:	b140      	cbz	r0, 8005c6c <_printf_float+0xf0>
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbc      	itt	lt
 8005c60:	232d      	movlt	r3, #45	; 0x2d
 8005c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c66:	487f      	ldr	r0, [pc, #508]	; (8005e64 <_printf_float+0x2e8>)
 8005c68:	4b7f      	ldr	r3, [pc, #508]	; (8005e68 <_printf_float+0x2ec>)
 8005c6a:	e7d1      	b.n	8005c10 <_printf_float+0x94>
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c72:	9206      	str	r2, [sp, #24]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	d13f      	bne.n	8005cf8 <_printf_float+0x17c>
 8005c78:	2306      	movs	r3, #6
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	9b05      	ldr	r3, [sp, #20]
 8005c7e:	6861      	ldr	r1, [r4, #4]
 8005c80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c84:	2300      	movs	r3, #0
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	ab0a      	add	r3, sp, #40	; 0x28
 8005c8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c8e:	ab09      	add	r3, sp, #36	; 0x24
 8005c90:	ec49 8b10 	vmov	d0, r8, r9
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fecd 	bl	8005a3c <__cvt>
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ca6:	2b47      	cmp	r3, #71	; 0x47
 8005ca8:	4680      	mov	r8, r0
 8005caa:	d108      	bne.n	8005cbe <_printf_float+0x142>
 8005cac:	1cc8      	adds	r0, r1, #3
 8005cae:	db02      	blt.n	8005cb6 <_printf_float+0x13a>
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	dd41      	ble.n	8005d3a <_printf_float+0x1be>
 8005cb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cba:	fa5f fb8b 	uxtb.w	fp, fp
 8005cbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cc2:	d820      	bhi.n	8005d06 <_printf_float+0x18a>
 8005cc4:	3901      	subs	r1, #1
 8005cc6:	465a      	mov	r2, fp
 8005cc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8005cce:	f7ff ff17 	bl	8005b00 <__exponent>
 8005cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cd4:	1813      	adds	r3, r2, r0
 8005cd6:	2a01      	cmp	r2, #1
 8005cd8:	4681      	mov	r9, r0
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	dc02      	bgt.n	8005ce4 <_printf_float+0x168>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	07d2      	lsls	r2, r2, #31
 8005ce2:	d501      	bpl.n	8005ce8 <_printf_float+0x16c>
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d09c      	beq.n	8005c2a <_printf_float+0xae>
 8005cf0:	232d      	movs	r3, #45	; 0x2d
 8005cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf6:	e798      	b.n	8005c2a <_printf_float+0xae>
 8005cf8:	9a06      	ldr	r2, [sp, #24]
 8005cfa:	2a47      	cmp	r2, #71	; 0x47
 8005cfc:	d1be      	bne.n	8005c7c <_printf_float+0x100>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1bc      	bne.n	8005c7c <_printf_float+0x100>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e7b9      	b.n	8005c7a <_printf_float+0xfe>
 8005d06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d0a:	d118      	bne.n	8005d3e <_printf_float+0x1c2>
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	dd0b      	ble.n	8005d2a <_printf_float+0x1ae>
 8005d12:	6121      	str	r1, [r4, #16]
 8005d14:	b913      	cbnz	r3, 8005d1c <_printf_float+0x1a0>
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d502      	bpl.n	8005d22 <_printf_float+0x1a6>
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	440b      	add	r3, r1
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d24:	f04f 0900 	mov.w	r9, #0
 8005d28:	e7de      	b.n	8005ce8 <_printf_float+0x16c>
 8005d2a:	b913      	cbnz	r3, 8005d32 <_printf_float+0x1b6>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	07d2      	lsls	r2, r2, #31
 8005d30:	d501      	bpl.n	8005d36 <_printf_float+0x1ba>
 8005d32:	3302      	adds	r3, #2
 8005d34:	e7f4      	b.n	8005d20 <_printf_float+0x1a4>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7f2      	b.n	8005d20 <_printf_float+0x1a4>
 8005d3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d40:	4299      	cmp	r1, r3
 8005d42:	db05      	blt.n	8005d50 <_printf_float+0x1d4>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	07d8      	lsls	r0, r3, #31
 8005d4a:	d5ea      	bpl.n	8005d22 <_printf_float+0x1a6>
 8005d4c:	1c4b      	adds	r3, r1, #1
 8005d4e:	e7e7      	b.n	8005d20 <_printf_float+0x1a4>
 8005d50:	2900      	cmp	r1, #0
 8005d52:	bfd4      	ite	le
 8005d54:	f1c1 0202 	rsble	r2, r1, #2
 8005d58:	2201      	movgt	r2, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	e7e0      	b.n	8005d20 <_printf_float+0x1a4>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	055a      	lsls	r2, r3, #21
 8005d62:	d407      	bmi.n	8005d74 <_printf_float+0x1f8>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	4642      	mov	r2, r8
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d12c      	bne.n	8005dcc <_printf_float+0x250>
 8005d72:	e764      	b.n	8005c3e <_printf_float+0xc2>
 8005d74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d78:	f240 80e0 	bls.w	8005f3c <_printf_float+0x3c0>
 8005d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	f7fa fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d034      	beq.n	8005df6 <_printf_float+0x27a>
 8005d8c:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <_printf_float+0x2f0>)
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f af51 	beq.w	8005c3e <_printf_float+0xc2>
 8005d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da0:	429a      	cmp	r2, r3
 8005da2:	db02      	blt.n	8005daa <_printf_float+0x22e>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07d8      	lsls	r0, r3, #31
 8005da8:	d510      	bpl.n	8005dcc <_printf_float+0x250>
 8005daa:	ee18 3a10 	vmov	r3, s16
 8005dae:	4652      	mov	r2, sl
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f af41 	beq.w	8005c3e <_printf_float+0xc2>
 8005dbc:	f04f 0800 	mov.w	r8, #0
 8005dc0:	f104 091a 	add.w	r9, r4, #26
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dc09      	bgt.n	8005de0 <_printf_float+0x264>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	079b      	lsls	r3, r3, #30
 8005dd0:	f100 8105 	bmi.w	8005fde <_printf_float+0x462>
 8005dd4:	68e0      	ldr	r0, [r4, #12]
 8005dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd8:	4298      	cmp	r0, r3
 8005dda:	bfb8      	it	lt
 8005ddc:	4618      	movlt	r0, r3
 8005dde:	e730      	b.n	8005c42 <_printf_float+0xc6>
 8005de0:	2301      	movs	r3, #1
 8005de2:	464a      	mov	r2, r9
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af27 	beq.w	8005c3e <_printf_float+0xc2>
 8005df0:	f108 0801 	add.w	r8, r8, #1
 8005df4:	e7e6      	b.n	8005dc4 <_printf_float+0x248>
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	dc39      	bgt.n	8005e70 <_printf_float+0x2f4>
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <_printf_float+0x2f0>)
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af19 	beq.w	8005c3e <_printf_float+0xc2>
 8005e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e10:	4313      	orrs	r3, r2
 8005e12:	d102      	bne.n	8005e1a <_printf_float+0x29e>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	d5d8      	bpl.n	8005dcc <_printf_float+0x250>
 8005e1a:	ee18 3a10 	vmov	r3, s16
 8005e1e:	4652      	mov	r2, sl
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f af09 	beq.w	8005c3e <_printf_float+0xc2>
 8005e2c:	f04f 0900 	mov.w	r9, #0
 8005e30:	f104 0a1a 	add.w	sl, r4, #26
 8005e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e36:	425b      	negs	r3, r3
 8005e38:	454b      	cmp	r3, r9
 8005e3a:	dc01      	bgt.n	8005e40 <_printf_float+0x2c4>
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3e:	e792      	b.n	8005d66 <_printf_float+0x1ea>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4652      	mov	r2, sl
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f aef7 	beq.w	8005c3e <_printf_float+0xc2>
 8005e50:	f109 0901 	add.w	r9, r9, #1
 8005e54:	e7ee      	b.n	8005e34 <_printf_float+0x2b8>
 8005e56:	bf00      	nop
 8005e58:	7fefffff 	.word	0x7fefffff
 8005e5c:	0800a6c0 	.word	0x0800a6c0
 8005e60:	0800a6c4 	.word	0x0800a6c4
 8005e64:	0800a6cc 	.word	0x0800a6cc
 8005e68:	0800a6c8 	.word	0x0800a6c8
 8005e6c:	0800a6d0 	.word	0x0800a6d0
 8005e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e74:	429a      	cmp	r2, r3
 8005e76:	bfa8      	it	ge
 8005e78:	461a      	movge	r2, r3
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	4691      	mov	r9, r2
 8005e7e:	dc37      	bgt.n	8005ef0 <_printf_float+0x374>
 8005e80:	f04f 0b00 	mov.w	fp, #0
 8005e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e88:	f104 021a 	add.w	r2, r4, #26
 8005e8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	eba3 0309 	sub.w	r3, r3, r9
 8005e94:	455b      	cmp	r3, fp
 8005e96:	dc33      	bgt.n	8005f00 <_printf_float+0x384>
 8005e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	db3b      	blt.n	8005f18 <_printf_float+0x39c>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	07da      	lsls	r2, r3, #31
 8005ea4:	d438      	bmi.n	8005f18 <_printf_float+0x39c>
 8005ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ea8:	9b05      	ldr	r3, [sp, #20]
 8005eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	eba2 0901 	sub.w	r9, r2, r1
 8005eb2:	4599      	cmp	r9, r3
 8005eb4:	bfa8      	it	ge
 8005eb6:	4699      	movge	r9, r3
 8005eb8:	f1b9 0f00 	cmp.w	r9, #0
 8005ebc:	dc35      	bgt.n	8005f2a <_printf_float+0x3ae>
 8005ebe:	f04f 0800 	mov.w	r8, #0
 8005ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec6:	f104 0a1a 	add.w	sl, r4, #26
 8005eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	eba3 0309 	sub.w	r3, r3, r9
 8005ed4:	4543      	cmp	r3, r8
 8005ed6:	f77f af79 	ble.w	8005dcc <_printf_float+0x250>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4652      	mov	r2, sl
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f aeaa 	beq.w	8005c3e <_printf_float+0xc2>
 8005eea:	f108 0801 	add.w	r8, r8, #1
 8005eee:	e7ec      	b.n	8005eca <_printf_float+0x34e>
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	d1c0      	bne.n	8005e80 <_printf_float+0x304>
 8005efe:	e69e      	b.n	8005c3e <_printf_float+0xc2>
 8005f00:	2301      	movs	r3, #1
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	9205      	str	r2, [sp, #20]
 8005f08:	47b8      	blx	r7
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	f43f ae97 	beq.w	8005c3e <_printf_float+0xc2>
 8005f10:	9a05      	ldr	r2, [sp, #20]
 8005f12:	f10b 0b01 	add.w	fp, fp, #1
 8005f16:	e7b9      	b.n	8005e8c <_printf_float+0x310>
 8005f18:	ee18 3a10 	vmov	r3, s16
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	d1be      	bne.n	8005ea6 <_printf_float+0x32a>
 8005f28:	e689      	b.n	8005c3e <_printf_float+0xc2>
 8005f2a:	9a05      	ldr	r2, [sp, #20]
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4442      	add	r2, r8
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	d1c1      	bne.n	8005ebe <_printf_float+0x342>
 8005f3a:	e680      	b.n	8005c3e <_printf_float+0xc2>
 8005f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f3e:	2a01      	cmp	r2, #1
 8005f40:	dc01      	bgt.n	8005f46 <_printf_float+0x3ca>
 8005f42:	07db      	lsls	r3, r3, #31
 8005f44:	d538      	bpl.n	8005fb8 <_printf_float+0x43c>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4642      	mov	r2, r8
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f ae74 	beq.w	8005c3e <_printf_float+0xc2>
 8005f56:	ee18 3a10 	vmov	r3, s16
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f ae6b 	beq.w	8005c3e <_printf_float+0xc2>
 8005f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f7fa fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f74:	b9d8      	cbnz	r0, 8005fae <_printf_float+0x432>
 8005f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f78:	f108 0201 	add.w	r2, r8, #1
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	d10e      	bne.n	8005fa6 <_printf_float+0x42a>
 8005f88:	e659      	b.n	8005c3e <_printf_float+0xc2>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	f43f ae52 	beq.w	8005c3e <_printf_float+0xc2>
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	4543      	cmp	r3, r8
 8005fa4:	dcf1      	bgt.n	8005f8a <_printf_float+0x40e>
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fac:	e6dc      	b.n	8005d68 <_printf_float+0x1ec>
 8005fae:	f04f 0800 	mov.w	r8, #0
 8005fb2:	f104 0a1a 	add.w	sl, r4, #26
 8005fb6:	e7f2      	b.n	8005f9e <_printf_float+0x422>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4642      	mov	r2, r8
 8005fbc:	e7df      	b.n	8005f7e <_printf_float+0x402>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	464a      	mov	r2, r9
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f ae38 	beq.w	8005c3e <_printf_float+0xc2>
 8005fce:	f108 0801 	add.w	r8, r8, #1
 8005fd2:	68e3      	ldr	r3, [r4, #12]
 8005fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fd6:	1a5b      	subs	r3, r3, r1
 8005fd8:	4543      	cmp	r3, r8
 8005fda:	dcf0      	bgt.n	8005fbe <_printf_float+0x442>
 8005fdc:	e6fa      	b.n	8005dd4 <_printf_float+0x258>
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	f104 0919 	add.w	r9, r4, #25
 8005fe6:	e7f4      	b.n	8005fd2 <_printf_float+0x456>

08005fe8 <_printf_common>:
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	4616      	mov	r6, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	688a      	ldr	r2, [r1, #8]
 8005ff2:	690b      	ldr	r3, [r1, #16]
 8005ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bfb8      	it	lt
 8005ffc:	4613      	movlt	r3, r2
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006004:	4607      	mov	r7, r0
 8006006:	460c      	mov	r4, r1
 8006008:	b10a      	cbz	r2, 800600e <_printf_common+0x26>
 800600a:	3301      	adds	r3, #1
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	0699      	lsls	r1, r3, #26
 8006012:	bf42      	ittt	mi
 8006014:	6833      	ldrmi	r3, [r6, #0]
 8006016:	3302      	addmi	r3, #2
 8006018:	6033      	strmi	r3, [r6, #0]
 800601a:	6825      	ldr	r5, [r4, #0]
 800601c:	f015 0506 	ands.w	r5, r5, #6
 8006020:	d106      	bne.n	8006030 <_printf_common+0x48>
 8006022:	f104 0a19 	add.w	sl, r4, #25
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	6832      	ldr	r2, [r6, #0]
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	42ab      	cmp	r3, r5
 800602e:	dc26      	bgt.n	800607e <_printf_common+0x96>
 8006030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006034:	1e13      	subs	r3, r2, #0
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	bf18      	it	ne
 800603a:	2301      	movne	r3, #1
 800603c:	0692      	lsls	r2, r2, #26
 800603e:	d42b      	bmi.n	8006098 <_printf_common+0xb0>
 8006040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006044:	4649      	mov	r1, r9
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	3001      	adds	r0, #1
 800604c:	d01e      	beq.n	800608c <_printf_common+0xa4>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	68e5      	ldr	r5, [r4, #12]
 8006052:	6832      	ldr	r2, [r6, #0]
 8006054:	f003 0306 	and.w	r3, r3, #6
 8006058:	2b04      	cmp	r3, #4
 800605a:	bf08      	it	eq
 800605c:	1aad      	subeq	r5, r5, r2
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	bf0c      	ite	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	2500      	movne	r5, #0
 800606a:	4293      	cmp	r3, r2
 800606c:	bfc4      	itt	gt
 800606e:	1a9b      	subgt	r3, r3, r2
 8006070:	18ed      	addgt	r5, r5, r3
 8006072:	2600      	movs	r6, #0
 8006074:	341a      	adds	r4, #26
 8006076:	42b5      	cmp	r5, r6
 8006078:	d11a      	bne.n	80060b0 <_printf_common+0xc8>
 800607a:	2000      	movs	r0, #0
 800607c:	e008      	b.n	8006090 <_printf_common+0xa8>
 800607e:	2301      	movs	r3, #1
 8006080:	4652      	mov	r2, sl
 8006082:	4649      	mov	r1, r9
 8006084:	4638      	mov	r0, r7
 8006086:	47c0      	blx	r8
 8006088:	3001      	adds	r0, #1
 800608a:	d103      	bne.n	8006094 <_printf_common+0xac>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006094:	3501      	adds	r5, #1
 8006096:	e7c6      	b.n	8006026 <_printf_common+0x3e>
 8006098:	18e1      	adds	r1, r4, r3
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	2030      	movs	r0, #48	; 0x30
 800609e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a2:	4422      	add	r2, r4
 80060a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ac:	3302      	adds	r3, #2
 80060ae:	e7c7      	b.n	8006040 <_printf_common+0x58>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4622      	mov	r2, r4
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d0e6      	beq.n	800608c <_printf_common+0xa4>
 80060be:	3601      	adds	r6, #1
 80060c0:	e7d9      	b.n	8006076 <_printf_common+0x8e>
	...

080060c4 <_printf_i>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	4691      	mov	r9, r2
 80060cc:	7e27      	ldrb	r7, [r4, #24]
 80060ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060d0:	2f78      	cmp	r7, #120	; 0x78
 80060d2:	4680      	mov	r8, r0
 80060d4:	469a      	mov	sl, r3
 80060d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060da:	d807      	bhi.n	80060ec <_printf_i+0x28>
 80060dc:	2f62      	cmp	r7, #98	; 0x62
 80060de:	d80a      	bhi.n	80060f6 <_printf_i+0x32>
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	f000 80d8 	beq.w	8006296 <_printf_i+0x1d2>
 80060e6:	2f58      	cmp	r7, #88	; 0x58
 80060e8:	f000 80a3 	beq.w	8006232 <_printf_i+0x16e>
 80060ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f4:	e03a      	b.n	800616c <_printf_i+0xa8>
 80060f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fa:	2b15      	cmp	r3, #21
 80060fc:	d8f6      	bhi.n	80060ec <_printf_i+0x28>
 80060fe:	a001      	add	r0, pc, #4	; (adr r0, 8006104 <_printf_i+0x40>)
 8006100:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006171 	.word	0x08006171
 800610c:	080060ed 	.word	0x080060ed
 8006110:	080060ed 	.word	0x080060ed
 8006114:	080060ed 	.word	0x080060ed
 8006118:	080060ed 	.word	0x080060ed
 800611c:	08006171 	.word	0x08006171
 8006120:	080060ed 	.word	0x080060ed
 8006124:	080060ed 	.word	0x080060ed
 8006128:	080060ed 	.word	0x080060ed
 800612c:	080060ed 	.word	0x080060ed
 8006130:	0800627d 	.word	0x0800627d
 8006134:	080061a1 	.word	0x080061a1
 8006138:	0800625f 	.word	0x0800625f
 800613c:	080060ed 	.word	0x080060ed
 8006140:	080060ed 	.word	0x080060ed
 8006144:	0800629f 	.word	0x0800629f
 8006148:	080060ed 	.word	0x080060ed
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080060ed 	.word	0x080060ed
 8006154:	080060ed 	.word	0x080060ed
 8006158:	08006267 	.word	0x08006267
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	600a      	str	r2, [r1, #0]
 8006164:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616c:	2301      	movs	r3, #1
 800616e:	e0a3      	b.n	80062b8 <_printf_i+0x1f4>
 8006170:	6825      	ldr	r5, [r4, #0]
 8006172:	6808      	ldr	r0, [r1, #0]
 8006174:	062e      	lsls	r6, r5, #24
 8006176:	f100 0304 	add.w	r3, r0, #4
 800617a:	d50a      	bpl.n	8006192 <_printf_i+0xce>
 800617c:	6805      	ldr	r5, [r0, #0]
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	2d00      	cmp	r5, #0
 8006182:	da03      	bge.n	800618c <_printf_i+0xc8>
 8006184:	232d      	movs	r3, #45	; 0x2d
 8006186:	426d      	negs	r5, r5
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800618c:	485e      	ldr	r0, [pc, #376]	; (8006308 <_printf_i+0x244>)
 800618e:	230a      	movs	r3, #10
 8006190:	e019      	b.n	80061c6 <_printf_i+0x102>
 8006192:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006196:	6805      	ldr	r5, [r0, #0]
 8006198:	600b      	str	r3, [r1, #0]
 800619a:	bf18      	it	ne
 800619c:	b22d      	sxthne	r5, r5
 800619e:	e7ef      	b.n	8006180 <_printf_i+0xbc>
 80061a0:	680b      	ldr	r3, [r1, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	1d18      	adds	r0, r3, #4
 80061a6:	6008      	str	r0, [r1, #0]
 80061a8:	0628      	lsls	r0, r5, #24
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0xec>
 80061ac:	681d      	ldr	r5, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <_printf_i+0xf2>
 80061b0:	0669      	lsls	r1, r5, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0xe8>
 80061b4:	881d      	ldrh	r5, [r3, #0]
 80061b6:	4854      	ldr	r0, [pc, #336]	; (8006308 <_printf_i+0x244>)
 80061b8:	2f6f      	cmp	r7, #111	; 0x6f
 80061ba:	bf0c      	ite	eq
 80061bc:	2308      	moveq	r3, #8
 80061be:	230a      	movne	r3, #10
 80061c0:	2100      	movs	r1, #0
 80061c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c6:	6866      	ldr	r6, [r4, #4]
 80061c8:	60a6      	str	r6, [r4, #8]
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	bfa2      	ittt	ge
 80061ce:	6821      	ldrge	r1, [r4, #0]
 80061d0:	f021 0104 	bicge.w	r1, r1, #4
 80061d4:	6021      	strge	r1, [r4, #0]
 80061d6:	b90d      	cbnz	r5, 80061dc <_printf_i+0x118>
 80061d8:	2e00      	cmp	r6, #0
 80061da:	d04d      	beq.n	8006278 <_printf_i+0x1b4>
 80061dc:	4616      	mov	r6, r2
 80061de:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e2:	fb03 5711 	mls	r7, r3, r1, r5
 80061e6:	5dc7      	ldrb	r7, [r0, r7]
 80061e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ec:	462f      	mov	r7, r5
 80061ee:	42bb      	cmp	r3, r7
 80061f0:	460d      	mov	r5, r1
 80061f2:	d9f4      	bls.n	80061de <_printf_i+0x11a>
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d10b      	bne.n	8006210 <_printf_i+0x14c>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	07df      	lsls	r7, r3, #31
 80061fc:	d508      	bpl.n	8006210 <_printf_i+0x14c>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	4299      	cmp	r1, r3
 8006204:	bfde      	ittt	le
 8006206:	2330      	movle	r3, #48	; 0x30
 8006208:	f806 3c01 	strble.w	r3, [r6, #-1]
 800620c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006210:	1b92      	subs	r2, r2, r6
 8006212:	6122      	str	r2, [r4, #16]
 8006214:	f8cd a000 	str.w	sl, [sp]
 8006218:	464b      	mov	r3, r9
 800621a:	aa03      	add	r2, sp, #12
 800621c:	4621      	mov	r1, r4
 800621e:	4640      	mov	r0, r8
 8006220:	f7ff fee2 	bl	8005fe8 <_printf_common>
 8006224:	3001      	adds	r0, #1
 8006226:	d14c      	bne.n	80062c2 <_printf_i+0x1fe>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622c:	b004      	add	sp, #16
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	4835      	ldr	r0, [pc, #212]	; (8006308 <_printf_i+0x244>)
 8006234:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	061f      	lsls	r7, r3, #24
 800623e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006242:	600e      	str	r6, [r1, #0]
 8006244:	d514      	bpl.n	8006270 <_printf_i+0x1ac>
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	bf44      	itt	mi
 800624a:	f043 0320 	orrmi.w	r3, r3, #32
 800624e:	6023      	strmi	r3, [r4, #0]
 8006250:	b91d      	cbnz	r5, 800625a <_printf_i+0x196>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	f023 0320 	bic.w	r3, r3, #32
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	2310      	movs	r3, #16
 800625c:	e7b0      	b.n	80061c0 <_printf_i+0xfc>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	f043 0320 	orr.w	r3, r3, #32
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	2378      	movs	r3, #120	; 0x78
 8006268:	4828      	ldr	r0, [pc, #160]	; (800630c <_printf_i+0x248>)
 800626a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800626e:	e7e3      	b.n	8006238 <_printf_i+0x174>
 8006270:	065e      	lsls	r6, r3, #25
 8006272:	bf48      	it	mi
 8006274:	b2ad      	uxthmi	r5, r5
 8006276:	e7e6      	b.n	8006246 <_printf_i+0x182>
 8006278:	4616      	mov	r6, r2
 800627a:	e7bb      	b.n	80061f4 <_printf_i+0x130>
 800627c:	680b      	ldr	r3, [r1, #0]
 800627e:	6826      	ldr	r6, [r4, #0]
 8006280:	6960      	ldr	r0, [r4, #20]
 8006282:	1d1d      	adds	r5, r3, #4
 8006284:	600d      	str	r5, [r1, #0]
 8006286:	0635      	lsls	r5, r6, #24
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	d501      	bpl.n	8006290 <_printf_i+0x1cc>
 800628c:	6018      	str	r0, [r3, #0]
 800628e:	e002      	b.n	8006296 <_printf_i+0x1d2>
 8006290:	0671      	lsls	r1, r6, #25
 8006292:	d5fb      	bpl.n	800628c <_printf_i+0x1c8>
 8006294:	8018      	strh	r0, [r3, #0]
 8006296:	2300      	movs	r3, #0
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	4616      	mov	r6, r2
 800629c:	e7ba      	b.n	8006214 <_printf_i+0x150>
 800629e:	680b      	ldr	r3, [r1, #0]
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	600a      	str	r2, [r1, #0]
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7f9 ff98 	bl	80001e0 <memchr>
 80062b0:	b108      	cbz	r0, 80062b6 <_printf_i+0x1f2>
 80062b2:	1b80      	subs	r0, r0, r6
 80062b4:	6060      	str	r0, [r4, #4]
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	e7a8      	b.n	8006214 <_printf_i+0x150>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d0ab      	beq.n	8006228 <_printf_i+0x164>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	079b      	lsls	r3, r3, #30
 80062d4:	d413      	bmi.n	80062fe <_printf_i+0x23a>
 80062d6:	68e0      	ldr	r0, [r4, #12]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	4298      	cmp	r0, r3
 80062dc:	bfb8      	it	lt
 80062de:	4618      	movlt	r0, r3
 80062e0:	e7a4      	b.n	800622c <_printf_i+0x168>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	47d0      	blx	sl
 80062ec:	3001      	adds	r0, #1
 80062ee:	d09b      	beq.n	8006228 <_printf_i+0x164>
 80062f0:	3501      	adds	r5, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	9903      	ldr	r1, [sp, #12]
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dcf2      	bgt.n	80062e2 <_printf_i+0x21e>
 80062fc:	e7eb      	b.n	80062d6 <_printf_i+0x212>
 80062fe:	2500      	movs	r5, #0
 8006300:	f104 0619 	add.w	r6, r4, #25
 8006304:	e7f5      	b.n	80062f2 <_printf_i+0x22e>
 8006306:	bf00      	nop
 8006308:	0800a6d2 	.word	0x0800a6d2
 800630c:	0800a6e3 	.word	0x0800a6e3

08006310 <_scanf_float>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	b087      	sub	sp, #28
 8006316:	4617      	mov	r7, r2
 8006318:	9303      	str	r3, [sp, #12]
 800631a:	688b      	ldr	r3, [r1, #8]
 800631c:	1e5a      	subs	r2, r3, #1
 800631e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006322:	bf83      	ittte	hi
 8006324:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006328:	195b      	addhi	r3, r3, r5
 800632a:	9302      	strhi	r3, [sp, #8]
 800632c:	2300      	movls	r3, #0
 800632e:	bf86      	itte	hi
 8006330:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006334:	608b      	strhi	r3, [r1, #8]
 8006336:	9302      	strls	r3, [sp, #8]
 8006338:	680b      	ldr	r3, [r1, #0]
 800633a:	468b      	mov	fp, r1
 800633c:	2500      	movs	r5, #0
 800633e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006342:	f84b 3b1c 	str.w	r3, [fp], #28
 8006346:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800634a:	4680      	mov	r8, r0
 800634c:	460c      	mov	r4, r1
 800634e:	465e      	mov	r6, fp
 8006350:	46aa      	mov	sl, r5
 8006352:	46a9      	mov	r9, r5
 8006354:	9501      	str	r5, [sp, #4]
 8006356:	68a2      	ldr	r2, [r4, #8]
 8006358:	b152      	cbz	r2, 8006370 <_scanf_float+0x60>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b4e      	cmp	r3, #78	; 0x4e
 8006360:	d864      	bhi.n	800642c <_scanf_float+0x11c>
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d83c      	bhi.n	80063e0 <_scanf_float+0xd0>
 8006366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800636a:	b2c8      	uxtb	r0, r1
 800636c:	280e      	cmp	r0, #14
 800636e:	d93a      	bls.n	80063e6 <_scanf_float+0xd6>
 8006370:	f1b9 0f00 	cmp.w	r9, #0
 8006374:	d003      	beq.n	800637e <_scanf_float+0x6e>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006382:	f1ba 0f01 	cmp.w	sl, #1
 8006386:	f200 8113 	bhi.w	80065b0 <_scanf_float+0x2a0>
 800638a:	455e      	cmp	r6, fp
 800638c:	f200 8105 	bhi.w	800659a <_scanf_float+0x28a>
 8006390:	2501      	movs	r5, #1
 8006392:	4628      	mov	r0, r5
 8006394:	b007      	add	sp, #28
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800639e:	2a0d      	cmp	r2, #13
 80063a0:	d8e6      	bhi.n	8006370 <_scanf_float+0x60>
 80063a2:	a101      	add	r1, pc, #4	; (adr r1, 80063a8 <_scanf_float+0x98>)
 80063a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063a8:	080064e7 	.word	0x080064e7
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	08006371 	.word	0x08006371
 80063b8:	08006547 	.word	0x08006547
 80063bc:	0800651f 	.word	0x0800651f
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	080064f5 	.word	0x080064f5
 80063cc:	08006371 	.word	0x08006371
 80063d0:	08006371 	.word	0x08006371
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064ad 	.word	0x080064ad
 80063e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80063e4:	e7db      	b.n	800639e <_scanf_float+0x8e>
 80063e6:	290e      	cmp	r1, #14
 80063e8:	d8c2      	bhi.n	8006370 <_scanf_float+0x60>
 80063ea:	a001      	add	r0, pc, #4	; (adr r0, 80063f0 <_scanf_float+0xe0>)
 80063ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063f0:	0800649f 	.word	0x0800649f
 80063f4:	08006371 	.word	0x08006371
 80063f8:	0800649f 	.word	0x0800649f
 80063fc:	08006533 	.word	0x08006533
 8006400:	08006371 	.word	0x08006371
 8006404:	0800644d 	.word	0x0800644d
 8006408:	08006489 	.word	0x08006489
 800640c:	08006489 	.word	0x08006489
 8006410:	08006489 	.word	0x08006489
 8006414:	08006489 	.word	0x08006489
 8006418:	08006489 	.word	0x08006489
 800641c:	08006489 	.word	0x08006489
 8006420:	08006489 	.word	0x08006489
 8006424:	08006489 	.word	0x08006489
 8006428:	08006489 	.word	0x08006489
 800642c:	2b6e      	cmp	r3, #110	; 0x6e
 800642e:	d809      	bhi.n	8006444 <_scanf_float+0x134>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d8b2      	bhi.n	800639a <_scanf_float+0x8a>
 8006434:	2b54      	cmp	r3, #84	; 0x54
 8006436:	d077      	beq.n	8006528 <_scanf_float+0x218>
 8006438:	2b59      	cmp	r3, #89	; 0x59
 800643a:	d199      	bne.n	8006370 <_scanf_float+0x60>
 800643c:	2d07      	cmp	r5, #7
 800643e:	d197      	bne.n	8006370 <_scanf_float+0x60>
 8006440:	2508      	movs	r5, #8
 8006442:	e029      	b.n	8006498 <_scanf_float+0x188>
 8006444:	2b74      	cmp	r3, #116	; 0x74
 8006446:	d06f      	beq.n	8006528 <_scanf_float+0x218>
 8006448:	2b79      	cmp	r3, #121	; 0x79
 800644a:	e7f6      	b.n	800643a <_scanf_float+0x12a>
 800644c:	6821      	ldr	r1, [r4, #0]
 800644e:	05c8      	lsls	r0, r1, #23
 8006450:	d51a      	bpl.n	8006488 <_scanf_float+0x178>
 8006452:	9b02      	ldr	r3, [sp, #8]
 8006454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006458:	6021      	str	r1, [r4, #0]
 800645a:	f109 0901 	add.w	r9, r9, #1
 800645e:	b11b      	cbz	r3, 8006468 <_scanf_float+0x158>
 8006460:	3b01      	subs	r3, #1
 8006462:	3201      	adds	r2, #1
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	60a2      	str	r2, [r4, #8]
 8006468:	68a3      	ldr	r3, [r4, #8]
 800646a:	3b01      	subs	r3, #1
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	3301      	adds	r3, #1
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	f340 8084 	ble.w	8006588 <_scanf_float+0x278>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	e766      	b.n	8006356 <_scanf_float+0x46>
 8006488:	eb1a 0f05 	cmn.w	sl, r5
 800648c:	f47f af70 	bne.w	8006370 <_scanf_float+0x60>
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	f806 3b01 	strb.w	r3, [r6], #1
 800649c:	e7e4      	b.n	8006468 <_scanf_float+0x158>
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	0610      	lsls	r0, r2, #24
 80064a2:	f57f af65 	bpl.w	8006370 <_scanf_float+0x60>
 80064a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064aa:	e7f4      	b.n	8006496 <_scanf_float+0x186>
 80064ac:	f1ba 0f00 	cmp.w	sl, #0
 80064b0:	d10e      	bne.n	80064d0 <_scanf_float+0x1c0>
 80064b2:	f1b9 0f00 	cmp.w	r9, #0
 80064b6:	d10e      	bne.n	80064d6 <_scanf_float+0x1c6>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064c2:	d108      	bne.n	80064d6 <_scanf_float+0x1c6>
 80064c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	f04f 0a01 	mov.w	sl, #1
 80064ce:	e7e3      	b.n	8006498 <_scanf_float+0x188>
 80064d0:	f1ba 0f02 	cmp.w	sl, #2
 80064d4:	d055      	beq.n	8006582 <_scanf_float+0x272>
 80064d6:	2d01      	cmp	r5, #1
 80064d8:	d002      	beq.n	80064e0 <_scanf_float+0x1d0>
 80064da:	2d04      	cmp	r5, #4
 80064dc:	f47f af48 	bne.w	8006370 <_scanf_float+0x60>
 80064e0:	3501      	adds	r5, #1
 80064e2:	b2ed      	uxtb	r5, r5
 80064e4:	e7d8      	b.n	8006498 <_scanf_float+0x188>
 80064e6:	f1ba 0f01 	cmp.w	sl, #1
 80064ea:	f47f af41 	bne.w	8006370 <_scanf_float+0x60>
 80064ee:	f04f 0a02 	mov.w	sl, #2
 80064f2:	e7d1      	b.n	8006498 <_scanf_float+0x188>
 80064f4:	b97d      	cbnz	r5, 8006516 <_scanf_float+0x206>
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	f47f af3c 	bne.w	8006376 <_scanf_float+0x66>
 80064fe:	6822      	ldr	r2, [r4, #0]
 8006500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006508:	f47f af39 	bne.w	800637e <_scanf_float+0x6e>
 800650c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006510:	6022      	str	r2, [r4, #0]
 8006512:	2501      	movs	r5, #1
 8006514:	e7c0      	b.n	8006498 <_scanf_float+0x188>
 8006516:	2d03      	cmp	r5, #3
 8006518:	d0e2      	beq.n	80064e0 <_scanf_float+0x1d0>
 800651a:	2d05      	cmp	r5, #5
 800651c:	e7de      	b.n	80064dc <_scanf_float+0x1cc>
 800651e:	2d02      	cmp	r5, #2
 8006520:	f47f af26 	bne.w	8006370 <_scanf_float+0x60>
 8006524:	2503      	movs	r5, #3
 8006526:	e7b7      	b.n	8006498 <_scanf_float+0x188>
 8006528:	2d06      	cmp	r5, #6
 800652a:	f47f af21 	bne.w	8006370 <_scanf_float+0x60>
 800652e:	2507      	movs	r5, #7
 8006530:	e7b2      	b.n	8006498 <_scanf_float+0x188>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	0591      	lsls	r1, r2, #22
 8006536:	f57f af1b 	bpl.w	8006370 <_scanf_float+0x60>
 800653a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	f8cd 9004 	str.w	r9, [sp, #4]
 8006544:	e7a8      	b.n	8006498 <_scanf_float+0x188>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800654c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006550:	d006      	beq.n	8006560 <_scanf_float+0x250>
 8006552:	0550      	lsls	r0, r2, #21
 8006554:	f57f af0c 	bpl.w	8006370 <_scanf_float+0x60>
 8006558:	f1b9 0f00 	cmp.w	r9, #0
 800655c:	f43f af0f 	beq.w	800637e <_scanf_float+0x6e>
 8006560:	0591      	lsls	r1, r2, #22
 8006562:	bf58      	it	pl
 8006564:	9901      	ldrpl	r1, [sp, #4]
 8006566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800656a:	bf58      	it	pl
 800656c:	eba9 0101 	subpl.w	r1, r9, r1
 8006570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006574:	bf58      	it	pl
 8006576:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	f04f 0900 	mov.w	r9, #0
 8006580:	e78a      	b.n	8006498 <_scanf_float+0x188>
 8006582:	f04f 0a03 	mov.w	sl, #3
 8006586:	e787      	b.n	8006498 <_scanf_float+0x188>
 8006588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800658c:	4639      	mov	r1, r7
 800658e:	4640      	mov	r0, r8
 8006590:	4798      	blx	r3
 8006592:	2800      	cmp	r0, #0
 8006594:	f43f aedf 	beq.w	8006356 <_scanf_float+0x46>
 8006598:	e6ea      	b.n	8006370 <_scanf_float+0x60>
 800659a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800659e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065a2:	463a      	mov	r2, r7
 80065a4:	4640      	mov	r0, r8
 80065a6:	4798      	blx	r3
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	e6ec      	b.n	800638a <_scanf_float+0x7a>
 80065b0:	1e6b      	subs	r3, r5, #1
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d825      	bhi.n	8006602 <_scanf_float+0x2f2>
 80065b6:	2d02      	cmp	r5, #2
 80065b8:	d836      	bhi.n	8006628 <_scanf_float+0x318>
 80065ba:	455e      	cmp	r6, fp
 80065bc:	f67f aee8 	bls.w	8006390 <_scanf_float+0x80>
 80065c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065c8:	463a      	mov	r2, r7
 80065ca:	4640      	mov	r0, r8
 80065cc:	4798      	blx	r3
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	e7f1      	b.n	80065ba <_scanf_float+0x2aa>
 80065d6:	9802      	ldr	r0, [sp, #8]
 80065d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80065e0:	9002      	str	r0, [sp, #8]
 80065e2:	463a      	mov	r2, r7
 80065e4:	4640      	mov	r0, r8
 80065e6:	4798      	blx	r3
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065f2:	fa5f fa8a 	uxtb.w	sl, sl
 80065f6:	f1ba 0f02 	cmp.w	sl, #2
 80065fa:	d1ec      	bne.n	80065d6 <_scanf_float+0x2c6>
 80065fc:	3d03      	subs	r5, #3
 80065fe:	b2ed      	uxtb	r5, r5
 8006600:	1b76      	subs	r6, r6, r5
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	05da      	lsls	r2, r3, #23
 8006606:	d52f      	bpl.n	8006668 <_scanf_float+0x358>
 8006608:	055b      	lsls	r3, r3, #21
 800660a:	d510      	bpl.n	800662e <_scanf_float+0x31e>
 800660c:	455e      	cmp	r6, fp
 800660e:	f67f aebf 	bls.w	8006390 <_scanf_float+0x80>
 8006612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800661a:	463a      	mov	r2, r7
 800661c:	4640      	mov	r0, r8
 800661e:	4798      	blx	r3
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	3b01      	subs	r3, #1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	e7f1      	b.n	800660c <_scanf_float+0x2fc>
 8006628:	46aa      	mov	sl, r5
 800662a:	9602      	str	r6, [sp, #8]
 800662c:	e7df      	b.n	80065ee <_scanf_float+0x2de>
 800662e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	2965      	cmp	r1, #101	; 0x65
 8006636:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800663a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	d00c      	beq.n	800665c <_scanf_float+0x34c>
 8006642:	2945      	cmp	r1, #69	; 0x45
 8006644:	d00a      	beq.n	800665c <_scanf_float+0x34c>
 8006646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800664a:	463a      	mov	r2, r7
 800664c:	4640      	mov	r0, r8
 800664e:	4798      	blx	r3
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006656:	3b01      	subs	r3, #1
 8006658:	1eb5      	subs	r5, r6, #2
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006660:	463a      	mov	r2, r7
 8006662:	4640      	mov	r0, r8
 8006664:	4798      	blx	r3
 8006666:	462e      	mov	r6, r5
 8006668:	6825      	ldr	r5, [r4, #0]
 800666a:	f015 0510 	ands.w	r5, r5, #16
 800666e:	d158      	bne.n	8006722 <_scanf_float+0x412>
 8006670:	7035      	strb	r5, [r6, #0]
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d11c      	bne.n	80066b8 <_scanf_float+0x3a8>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	454b      	cmp	r3, r9
 8006682:	eba3 0209 	sub.w	r2, r3, r9
 8006686:	d124      	bne.n	80066d2 <_scanf_float+0x3c2>
 8006688:	2200      	movs	r2, #0
 800668a:	4659      	mov	r1, fp
 800668c:	4640      	mov	r0, r8
 800668e:	f000 ff71 	bl	8007574 <_strtod_r>
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	6821      	ldr	r1, [r4, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f011 0f02 	tst.w	r1, #2
 800669c:	ec57 6b10 	vmov	r6, r7, d0
 80066a0:	f103 0204 	add.w	r2, r3, #4
 80066a4:	d020      	beq.n	80066e8 <_scanf_float+0x3d8>
 80066a6:	9903      	ldr	r1, [sp, #12]
 80066a8:	600a      	str	r2, [r1, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	e9c3 6700 	strd	r6, r7, [r3]
 80066b0:	68e3      	ldr	r3, [r4, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60e3      	str	r3, [r4, #12]
 80066b6:	e66c      	b.n	8006392 <_scanf_float+0x82>
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0e4      	beq.n	8006688 <_scanf_float+0x378>
 80066be:	9905      	ldr	r1, [sp, #20]
 80066c0:	230a      	movs	r3, #10
 80066c2:	462a      	mov	r2, r5
 80066c4:	3101      	adds	r1, #1
 80066c6:	4640      	mov	r0, r8
 80066c8:	f000 ffde 	bl	8007688 <_strtol_r>
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	9e05      	ldr	r6, [sp, #20]
 80066d0:	1ac2      	subs	r2, r0, r3
 80066d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80066d6:	429e      	cmp	r6, r3
 80066d8:	bf28      	it	cs
 80066da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80066de:	4912      	ldr	r1, [pc, #72]	; (8006728 <_scanf_float+0x418>)
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 f8bd 	bl	8006860 <siprintf>
 80066e6:	e7cf      	b.n	8006688 <_scanf_float+0x378>
 80066e8:	f011 0f04 	tst.w	r1, #4
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	600a      	str	r2, [r1, #0]
 80066f0:	d1db      	bne.n	80066aa <_scanf_float+0x39a>
 80066f2:	f8d3 8000 	ldr.w	r8, [r3]
 80066f6:	ee10 2a10 	vmov	r2, s0
 80066fa:	ee10 0a10 	vmov	r0, s0
 80066fe:	463b      	mov	r3, r7
 8006700:	4639      	mov	r1, r7
 8006702:	f7fa fa13 	bl	8000b2c <__aeabi_dcmpun>
 8006706:	b128      	cbz	r0, 8006714 <_scanf_float+0x404>
 8006708:	4808      	ldr	r0, [pc, #32]	; (800672c <_scanf_float+0x41c>)
 800670a:	f000 f8a3 	bl	8006854 <nanf>
 800670e:	ed88 0a00 	vstr	s0, [r8]
 8006712:	e7cd      	b.n	80066b0 <_scanf_float+0x3a0>
 8006714:	4630      	mov	r0, r6
 8006716:	4639      	mov	r1, r7
 8006718:	f7fa fa66 	bl	8000be8 <__aeabi_d2f>
 800671c:	f8c8 0000 	str.w	r0, [r8]
 8006720:	e7c6      	b.n	80066b0 <_scanf_float+0x3a0>
 8006722:	2500      	movs	r5, #0
 8006724:	e635      	b.n	8006392 <_scanf_float+0x82>
 8006726:	bf00      	nop
 8006728:	0800a6f4 	.word	0x0800a6f4
 800672c:	0800ab10 	.word	0x0800ab10

08006730 <iprintf>:
 8006730:	b40f      	push	{r0, r1, r2, r3}
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <iprintf+0x2c>)
 8006734:	b513      	push	{r0, r1, r4, lr}
 8006736:	681c      	ldr	r4, [r3, #0]
 8006738:	b124      	cbz	r4, 8006744 <iprintf+0x14>
 800673a:	69a3      	ldr	r3, [r4, #24]
 800673c:	b913      	cbnz	r3, 8006744 <iprintf+0x14>
 800673e:	4620      	mov	r0, r4
 8006740:	f7fe fff2 	bl	8005728 <__sinit>
 8006744:	ab05      	add	r3, sp, #20
 8006746:	9a04      	ldr	r2, [sp, #16]
 8006748:	68a1      	ldr	r1, [r4, #8]
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	4620      	mov	r0, r4
 800674e:	f003 f8ed 	bl	800992c <_vfiprintf_r>
 8006752:	b002      	add	sp, #8
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	b004      	add	sp, #16
 800675a:	4770      	bx	lr
 800675c:	20000010 	.word	0x20000010

08006760 <cleanup_glue>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	460c      	mov	r4, r1
 8006764:	6809      	ldr	r1, [r1, #0]
 8006766:	4605      	mov	r5, r0
 8006768:	b109      	cbz	r1, 800676e <cleanup_glue+0xe>
 800676a:	f7ff fff9 	bl	8006760 <cleanup_glue>
 800676e:	4621      	mov	r1, r4
 8006770:	4628      	mov	r0, r5
 8006772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006776:	f7ff b8b7 	b.w	80058e8 <_free_r>
	...

0800677c <_reclaim_reent>:
 800677c:	4b2c      	ldr	r3, [pc, #176]	; (8006830 <_reclaim_reent+0xb4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4283      	cmp	r3, r0
 8006782:	b570      	push	{r4, r5, r6, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	d051      	beq.n	800682c <_reclaim_reent+0xb0>
 8006788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800678a:	b143      	cbz	r3, 800679e <_reclaim_reent+0x22>
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d14a      	bne.n	8006828 <_reclaim_reent+0xac>
 8006792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006794:	6819      	ldr	r1, [r3, #0]
 8006796:	b111      	cbz	r1, 800679e <_reclaim_reent+0x22>
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff f8a5 	bl	80058e8 <_free_r>
 800679e:	6961      	ldr	r1, [r4, #20]
 80067a0:	b111      	cbz	r1, 80067a8 <_reclaim_reent+0x2c>
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff f8a0 	bl	80058e8 <_free_r>
 80067a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067aa:	b111      	cbz	r1, 80067b2 <_reclaim_reent+0x36>
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff f89b 	bl	80058e8 <_free_r>
 80067b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067b4:	b111      	cbz	r1, 80067bc <_reclaim_reent+0x40>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f7ff f896 	bl	80058e8 <_free_r>
 80067bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80067be:	b111      	cbz	r1, 80067c6 <_reclaim_reent+0x4a>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f7ff f891 	bl	80058e8 <_free_r>
 80067c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067c8:	b111      	cbz	r1, 80067d0 <_reclaim_reent+0x54>
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff f88c 	bl	80058e8 <_free_r>
 80067d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80067d2:	b111      	cbz	r1, 80067da <_reclaim_reent+0x5e>
 80067d4:	4620      	mov	r0, r4
 80067d6:	f7ff f887 	bl	80058e8 <_free_r>
 80067da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80067dc:	b111      	cbz	r1, 80067e4 <_reclaim_reent+0x68>
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff f882 	bl	80058e8 <_free_r>
 80067e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e6:	b111      	cbz	r1, 80067ee <_reclaim_reent+0x72>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff f87d 	bl	80058e8 <_free_r>
 80067ee:	69a3      	ldr	r3, [r4, #24]
 80067f0:	b1e3      	cbz	r3, 800682c <_reclaim_reent+0xb0>
 80067f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067f4:	4620      	mov	r0, r4
 80067f6:	4798      	blx	r3
 80067f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067fa:	b1b9      	cbz	r1, 800682c <_reclaim_reent+0xb0>
 80067fc:	4620      	mov	r0, r4
 80067fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006802:	f7ff bfad 	b.w	8006760 <cleanup_glue>
 8006806:	5949      	ldr	r1, [r1, r5]
 8006808:	b941      	cbnz	r1, 800681c <_reclaim_reent+0xa0>
 800680a:	3504      	adds	r5, #4
 800680c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800680e:	2d80      	cmp	r5, #128	; 0x80
 8006810:	68d9      	ldr	r1, [r3, #12]
 8006812:	d1f8      	bne.n	8006806 <_reclaim_reent+0x8a>
 8006814:	4620      	mov	r0, r4
 8006816:	f7ff f867 	bl	80058e8 <_free_r>
 800681a:	e7ba      	b.n	8006792 <_reclaim_reent+0x16>
 800681c:	680e      	ldr	r6, [r1, #0]
 800681e:	4620      	mov	r0, r4
 8006820:	f7ff f862 	bl	80058e8 <_free_r>
 8006824:	4631      	mov	r1, r6
 8006826:	e7ef      	b.n	8006808 <_reclaim_reent+0x8c>
 8006828:	2500      	movs	r5, #0
 800682a:	e7ef      	b.n	800680c <_reclaim_reent+0x90>
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	bf00      	nop
 8006830:	20000010 	.word	0x20000010

08006834 <_sbrk_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	; (8006850 <_sbrk_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fb fa62 	bl	8001d08 <_sbrk>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_sbrk_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_sbrk_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	200044e0 	.word	0x200044e0

08006854 <nanf>:
 8006854:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800685c <nanf+0x8>
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	7fc00000 	.word	0x7fc00000

08006860 <siprintf>:
 8006860:	b40e      	push	{r1, r2, r3}
 8006862:	b500      	push	{lr}
 8006864:	b09c      	sub	sp, #112	; 0x70
 8006866:	ab1d      	add	r3, sp, #116	; 0x74
 8006868:	9002      	str	r0, [sp, #8]
 800686a:	9006      	str	r0, [sp, #24]
 800686c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006870:	4809      	ldr	r0, [pc, #36]	; (8006898 <siprintf+0x38>)
 8006872:	9107      	str	r1, [sp, #28]
 8006874:	9104      	str	r1, [sp, #16]
 8006876:	4909      	ldr	r1, [pc, #36]	; (800689c <siprintf+0x3c>)
 8006878:	f853 2b04 	ldr.w	r2, [r3], #4
 800687c:	9105      	str	r1, [sp, #20]
 800687e:	6800      	ldr	r0, [r0, #0]
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	a902      	add	r1, sp, #8
 8006884:	f002 ff28 	bl	80096d8 <_svfiprintf_r>
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	b01c      	add	sp, #112	; 0x70
 8006890:	f85d eb04 	ldr.w	lr, [sp], #4
 8006894:	b003      	add	sp, #12
 8006896:	4770      	bx	lr
 8006898:	20000010 	.word	0x20000010
 800689c:	ffff0208 	.word	0xffff0208

080068a0 <__sread>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	f003 f970 	bl	8009b8c <_read_r>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	bfab      	itete	ge
 80068b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068b2:	89a3      	ldrhlt	r3, [r4, #12]
 80068b4:	181b      	addge	r3, r3, r0
 80068b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ba:	bfac      	ite	ge
 80068bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068be:	81a3      	strhlt	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__swrite>:
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	461f      	mov	r7, r3
 80068c8:	898b      	ldrh	r3, [r1, #12]
 80068ca:	05db      	lsls	r3, r3, #23
 80068cc:	4605      	mov	r5, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	4616      	mov	r6, r2
 80068d2:	d505      	bpl.n	80068e0 <__swrite+0x1e>
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	2302      	movs	r3, #2
 80068da:	2200      	movs	r2, #0
 80068dc:	f002 f9a6 	bl	8008c2c <_lseek_r>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	4632      	mov	r2, r6
 80068ee:	463b      	mov	r3, r7
 80068f0:	4628      	mov	r0, r5
 80068f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	f000 bec9 	b.w	800768c <_write_r>

080068fa <__sseek>:
 80068fa:	b510      	push	{r4, lr}
 80068fc:	460c      	mov	r4, r1
 80068fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006902:	f002 f993 	bl	8008c2c <_lseek_r>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	bf15      	itete	ne
 800690c:	6560      	strne	r0, [r4, #84]	; 0x54
 800690e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006916:	81a3      	strheq	r3, [r4, #12]
 8006918:	bf18      	it	ne
 800691a:	81a3      	strhne	r3, [r4, #12]
 800691c:	bd10      	pop	{r4, pc}

0800691e <__sclose>:
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 bec5 	b.w	80076b0 <_close_r>

08006926 <sulp>:
 8006926:	b570      	push	{r4, r5, r6, lr}
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
 800692c:	ec45 4b10 	vmov	d0, r4, r5
 8006930:	4616      	mov	r6, r2
 8006932:	f002 fd17 	bl	8009364 <__ulp>
 8006936:	ec51 0b10 	vmov	r0, r1, d0
 800693a:	b17e      	cbz	r6, 800695c <sulp+0x36>
 800693c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006940:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd09      	ble.n	800695c <sulp+0x36>
 8006948:	051b      	lsls	r3, r3, #20
 800694a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800694e:	2400      	movs	r4, #0
 8006950:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006954:	4622      	mov	r2, r4
 8006956:	462b      	mov	r3, r5
 8006958:	f7f9 fe4e 	bl	80005f8 <__aeabi_dmul>
 800695c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006960 <_strtod_l>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b0a3      	sub	sp, #140	; 0x8c
 8006966:	461f      	mov	r7, r3
 8006968:	2300      	movs	r3, #0
 800696a:	931e      	str	r3, [sp, #120]	; 0x78
 800696c:	4ba4      	ldr	r3, [pc, #656]	; (8006c00 <_strtod_l+0x2a0>)
 800696e:	9219      	str	r2, [sp, #100]	; 0x64
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	4604      	mov	r4, r0
 8006976:	4618      	mov	r0, r3
 8006978:	4688      	mov	r8, r1
 800697a:	f7f9 fc29 	bl	80001d0 <strlen>
 800697e:	f04f 0a00 	mov.w	sl, #0
 8006982:	4605      	mov	r5, r0
 8006984:	f04f 0b00 	mov.w	fp, #0
 8006988:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800698c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	2a2b      	cmp	r2, #43	; 0x2b
 8006992:	d04c      	beq.n	8006a2e <_strtod_l+0xce>
 8006994:	d839      	bhi.n	8006a0a <_strtod_l+0xaa>
 8006996:	2a0d      	cmp	r2, #13
 8006998:	d832      	bhi.n	8006a00 <_strtod_l+0xa0>
 800699a:	2a08      	cmp	r2, #8
 800699c:	d832      	bhi.n	8006a04 <_strtod_l+0xa4>
 800699e:	2a00      	cmp	r2, #0
 80069a0:	d03c      	beq.n	8006a1c <_strtod_l+0xbc>
 80069a2:	2300      	movs	r3, #0
 80069a4:	930e      	str	r3, [sp, #56]	; 0x38
 80069a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80069a8:	7833      	ldrb	r3, [r6, #0]
 80069aa:	2b30      	cmp	r3, #48	; 0x30
 80069ac:	f040 80b4 	bne.w	8006b18 <_strtod_l+0x1b8>
 80069b0:	7873      	ldrb	r3, [r6, #1]
 80069b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069b6:	2b58      	cmp	r3, #88	; 0x58
 80069b8:	d16c      	bne.n	8006a94 <_strtod_l+0x134>
 80069ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	ab1e      	add	r3, sp, #120	; 0x78
 80069c0:	9702      	str	r7, [sp, #8]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	4a8f      	ldr	r2, [pc, #572]	; (8006c04 <_strtod_l+0x2a4>)
 80069c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80069c8:	a91d      	add	r1, sp, #116	; 0x74
 80069ca:	4620      	mov	r0, r4
 80069cc:	f001 fe22 	bl	8008614 <__gethex>
 80069d0:	f010 0707 	ands.w	r7, r0, #7
 80069d4:	4605      	mov	r5, r0
 80069d6:	d005      	beq.n	80069e4 <_strtod_l+0x84>
 80069d8:	2f06      	cmp	r7, #6
 80069da:	d12a      	bne.n	8006a32 <_strtod_l+0xd2>
 80069dc:	3601      	adds	r6, #1
 80069de:	2300      	movs	r3, #0
 80069e0:	961d      	str	r6, [sp, #116]	; 0x74
 80069e2:	930e      	str	r3, [sp, #56]	; 0x38
 80069e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f040 8596 	bne.w	8007518 <_strtod_l+0xbb8>
 80069ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ee:	b1db      	cbz	r3, 8006a28 <_strtod_l+0xc8>
 80069f0:	4652      	mov	r2, sl
 80069f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069f6:	ec43 2b10 	vmov	d0, r2, r3
 80069fa:	b023      	add	sp, #140	; 0x8c
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	2a20      	cmp	r2, #32
 8006a02:	d1ce      	bne.n	80069a2 <_strtod_l+0x42>
 8006a04:	3301      	adds	r3, #1
 8006a06:	931d      	str	r3, [sp, #116]	; 0x74
 8006a08:	e7c0      	b.n	800698c <_strtod_l+0x2c>
 8006a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8006a0c:	d1c9      	bne.n	80069a2 <_strtod_l+0x42>
 8006a0e:	2201      	movs	r2, #1
 8006a10:	920e      	str	r2, [sp, #56]	; 0x38
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	921d      	str	r2, [sp, #116]	; 0x74
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1c4      	bne.n	80069a6 <_strtod_l+0x46>
 8006a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 8576 	bne.w	8007514 <_strtod_l+0xbb4>
 8006a28:	4652      	mov	r2, sl
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	e7e3      	b.n	80069f6 <_strtod_l+0x96>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	e7ee      	b.n	8006a10 <_strtod_l+0xb0>
 8006a32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a34:	b13a      	cbz	r2, 8006a46 <_strtod_l+0xe6>
 8006a36:	2135      	movs	r1, #53	; 0x35
 8006a38:	a820      	add	r0, sp, #128	; 0x80
 8006a3a:	f002 fd9e 	bl	800957a <__copybits>
 8006a3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a40:	4620      	mov	r0, r4
 8006a42:	f002 f963 	bl	8008d0c <_Bfree>
 8006a46:	3f01      	subs	r7, #1
 8006a48:	2f05      	cmp	r7, #5
 8006a4a:	d807      	bhi.n	8006a5c <_strtod_l+0xfc>
 8006a4c:	e8df f007 	tbb	[pc, r7]
 8006a50:	1d180b0e 	.word	0x1d180b0e
 8006a54:	030e      	.short	0x030e
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	46da      	mov	sl, fp
 8006a5c:	0728      	lsls	r0, r5, #28
 8006a5e:	d5c1      	bpl.n	80069e4 <_strtod_l+0x84>
 8006a60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006a64:	e7be      	b.n	80069e4 <_strtod_l+0x84>
 8006a66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006a6a:	e7f7      	b.n	8006a5c <_strtod_l+0xfc>
 8006a6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006a70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006a72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a7e:	e7ed      	b.n	8006a5c <_strtod_l+0xfc>
 8006a80:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006c08 <_strtod_l+0x2a8>
 8006a84:	f04f 0a00 	mov.w	sl, #0
 8006a88:	e7e8      	b.n	8006a5c <_strtod_l+0xfc>
 8006a8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a8e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006a92:	e7e3      	b.n	8006a5c <_strtod_l+0xfc>
 8006a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	921d      	str	r2, [sp, #116]	; 0x74
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d0f9      	beq.n	8006a94 <_strtod_l+0x134>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d09f      	beq.n	80069e4 <_strtod_l+0x84>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f04f 0900 	mov.w	r9, #0
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006aae:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ab4:	464f      	mov	r7, r9
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006aba:	7806      	ldrb	r6, [r0, #0]
 8006abc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ac0:	b2d9      	uxtb	r1, r3
 8006ac2:	2909      	cmp	r1, #9
 8006ac4:	d92a      	bls.n	8006b1c <_strtod_l+0x1bc>
 8006ac6:	9907      	ldr	r1, [sp, #28]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	f003 f879 	bl	8009bc0 <strncmp>
 8006ace:	b398      	cbz	r0, 8006b38 <_strtod_l+0x1d8>
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	4633      	mov	r3, r6
 8006ad4:	463d      	mov	r5, r7
 8006ad6:	9007      	str	r0, [sp, #28]
 8006ad8:	4602      	mov	r2, r0
 8006ada:	2b65      	cmp	r3, #101	; 0x65
 8006adc:	d001      	beq.n	8006ae2 <_strtod_l+0x182>
 8006ade:	2b45      	cmp	r3, #69	; 0x45
 8006ae0:	d118      	bne.n	8006b14 <_strtod_l+0x1b4>
 8006ae2:	b91d      	cbnz	r5, 8006aec <_strtod_l+0x18c>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	4303      	orrs	r3, r0
 8006ae8:	d098      	beq.n	8006a1c <_strtod_l+0xbc>
 8006aea:	2500      	movs	r5, #0
 8006aec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006af0:	f108 0301 	add.w	r3, r8, #1
 8006af4:	931d      	str	r3, [sp, #116]	; 0x74
 8006af6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006afa:	2b2b      	cmp	r3, #43	; 0x2b
 8006afc:	d075      	beq.n	8006bea <_strtod_l+0x28a>
 8006afe:	2b2d      	cmp	r3, #45	; 0x2d
 8006b00:	d07b      	beq.n	8006bfa <_strtod_l+0x29a>
 8006b02:	f04f 0c00 	mov.w	ip, #0
 8006b06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b0a:	2909      	cmp	r1, #9
 8006b0c:	f240 8082 	bls.w	8006c14 <_strtod_l+0x2b4>
 8006b10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006b14:	2600      	movs	r6, #0
 8006b16:	e09d      	b.n	8006c54 <_strtod_l+0x2f4>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e7c4      	b.n	8006aa6 <_strtod_l+0x146>
 8006b1c:	2f08      	cmp	r7, #8
 8006b1e:	bfd8      	it	le
 8006b20:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006b22:	f100 0001 	add.w	r0, r0, #1
 8006b26:	bfda      	itte	le
 8006b28:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b2c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006b2e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006b32:	3701      	adds	r7, #1
 8006b34:	901d      	str	r0, [sp, #116]	; 0x74
 8006b36:	e7bf      	b.n	8006ab8 <_strtod_l+0x158>
 8006b38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b3a:	195a      	adds	r2, r3, r5
 8006b3c:	921d      	str	r2, [sp, #116]	; 0x74
 8006b3e:	5d5b      	ldrb	r3, [r3, r5]
 8006b40:	2f00      	cmp	r7, #0
 8006b42:	d037      	beq.n	8006bb4 <_strtod_l+0x254>
 8006b44:	9007      	str	r0, [sp, #28]
 8006b46:	463d      	mov	r5, r7
 8006b48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b4c:	2a09      	cmp	r2, #9
 8006b4e:	d912      	bls.n	8006b76 <_strtod_l+0x216>
 8006b50:	2201      	movs	r2, #1
 8006b52:	e7c2      	b.n	8006ada <_strtod_l+0x17a>
 8006b54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	921d      	str	r2, [sp, #116]	; 0x74
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	2b30      	cmp	r3, #48	; 0x30
 8006b60:	d0f8      	beq.n	8006b54 <_strtod_l+0x1f4>
 8006b62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006b66:	2a08      	cmp	r2, #8
 8006b68:	f200 84db 	bhi.w	8007522 <_strtod_l+0xbc2>
 8006b6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006b6e:	9007      	str	r0, [sp, #28]
 8006b70:	2000      	movs	r0, #0
 8006b72:	920a      	str	r2, [sp, #40]	; 0x28
 8006b74:	4605      	mov	r5, r0
 8006b76:	3b30      	subs	r3, #48	; 0x30
 8006b78:	f100 0201 	add.w	r2, r0, #1
 8006b7c:	d014      	beq.n	8006ba8 <_strtod_l+0x248>
 8006b7e:	9907      	ldr	r1, [sp, #28]
 8006b80:	4411      	add	r1, r2
 8006b82:	9107      	str	r1, [sp, #28]
 8006b84:	462a      	mov	r2, r5
 8006b86:	eb00 0e05 	add.w	lr, r0, r5
 8006b8a:	210a      	movs	r1, #10
 8006b8c:	4572      	cmp	r2, lr
 8006b8e:	d113      	bne.n	8006bb8 <_strtod_l+0x258>
 8006b90:	182a      	adds	r2, r5, r0
 8006b92:	2a08      	cmp	r2, #8
 8006b94:	f105 0501 	add.w	r5, r5, #1
 8006b98:	4405      	add	r5, r0
 8006b9a:	dc1c      	bgt.n	8006bd6 <_strtod_l+0x276>
 8006b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	fb02 3301 	mla	r3, r2, r1, r3
 8006ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	911d      	str	r1, [sp, #116]	; 0x74
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	e7c9      	b.n	8006b48 <_strtod_l+0x1e8>
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	e7d2      	b.n	8006b5e <_strtod_l+0x1fe>
 8006bb8:	2a08      	cmp	r2, #8
 8006bba:	dc04      	bgt.n	8006bc6 <_strtod_l+0x266>
 8006bbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006bbe:	434e      	muls	r6, r1
 8006bc0:	9609      	str	r6, [sp, #36]	; 0x24
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	e7e2      	b.n	8006b8c <_strtod_l+0x22c>
 8006bc6:	f102 0c01 	add.w	ip, r2, #1
 8006bca:	f1bc 0f10 	cmp.w	ip, #16
 8006bce:	bfd8      	it	le
 8006bd0:	fb01 f909 	mulle.w	r9, r1, r9
 8006bd4:	e7f5      	b.n	8006bc2 <_strtod_l+0x262>
 8006bd6:	2d10      	cmp	r5, #16
 8006bd8:	bfdc      	itt	le
 8006bda:	220a      	movle	r2, #10
 8006bdc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006be0:	e7e1      	b.n	8006ba6 <_strtod_l+0x246>
 8006be2:	2300      	movs	r3, #0
 8006be4:	9307      	str	r3, [sp, #28]
 8006be6:	2201      	movs	r2, #1
 8006be8:	e77c      	b.n	8006ae4 <_strtod_l+0x184>
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	f108 0302 	add.w	r3, r8, #2
 8006bf2:	931d      	str	r3, [sp, #116]	; 0x74
 8006bf4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006bf8:	e785      	b.n	8006b06 <_strtod_l+0x1a6>
 8006bfa:	f04f 0c01 	mov.w	ip, #1
 8006bfe:	e7f6      	b.n	8006bee <_strtod_l+0x28e>
 8006c00:	0800a950 	.word	0x0800a950
 8006c04:	0800a6fc 	.word	0x0800a6fc
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c0e:	1c59      	adds	r1, r3, #1
 8006c10:	911d      	str	r1, [sp, #116]	; 0x74
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b30      	cmp	r3, #48	; 0x30
 8006c16:	d0f9      	beq.n	8006c0c <_strtod_l+0x2ac>
 8006c18:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006c1c:	2908      	cmp	r1, #8
 8006c1e:	f63f af79 	bhi.w	8006b14 <_strtod_l+0x1b4>
 8006c22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c28:	9308      	str	r3, [sp, #32]
 8006c2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	911d      	str	r1, [sp, #116]	; 0x74
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006c36:	2e09      	cmp	r6, #9
 8006c38:	d937      	bls.n	8006caa <_strtod_l+0x34a>
 8006c3a:	9e08      	ldr	r6, [sp, #32]
 8006c3c:	1b89      	subs	r1, r1, r6
 8006c3e:	2908      	cmp	r1, #8
 8006c40:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006c44:	dc02      	bgt.n	8006c4c <_strtod_l+0x2ec>
 8006c46:	4576      	cmp	r6, lr
 8006c48:	bfa8      	it	ge
 8006c4a:	4676      	movge	r6, lr
 8006c4c:	f1bc 0f00 	cmp.w	ip, #0
 8006c50:	d000      	beq.n	8006c54 <_strtod_l+0x2f4>
 8006c52:	4276      	negs	r6, r6
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	d14f      	bne.n	8006cf8 <_strtod_l+0x398>
 8006c58:	9904      	ldr	r1, [sp, #16]
 8006c5a:	4301      	orrs	r1, r0
 8006c5c:	f47f aec2 	bne.w	80069e4 <_strtod_l+0x84>
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	f47f aedb 	bne.w	8006a1c <_strtod_l+0xbc>
 8006c66:	2b69      	cmp	r3, #105	; 0x69
 8006c68:	d027      	beq.n	8006cba <_strtod_l+0x35a>
 8006c6a:	dc24      	bgt.n	8006cb6 <_strtod_l+0x356>
 8006c6c:	2b49      	cmp	r3, #73	; 0x49
 8006c6e:	d024      	beq.n	8006cba <_strtod_l+0x35a>
 8006c70:	2b4e      	cmp	r3, #78	; 0x4e
 8006c72:	f47f aed3 	bne.w	8006a1c <_strtod_l+0xbc>
 8006c76:	499e      	ldr	r1, [pc, #632]	; (8006ef0 <_strtod_l+0x590>)
 8006c78:	a81d      	add	r0, sp, #116	; 0x74
 8006c7a:	f001 ff23 	bl	8008ac4 <__match>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f aecc 	beq.w	8006a1c <_strtod_l+0xbc>
 8006c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b28      	cmp	r3, #40	; 0x28
 8006c8a:	d12d      	bne.n	8006ce8 <_strtod_l+0x388>
 8006c8c:	4999      	ldr	r1, [pc, #612]	; (8006ef4 <_strtod_l+0x594>)
 8006c8e:	aa20      	add	r2, sp, #128	; 0x80
 8006c90:	a81d      	add	r0, sp, #116	; 0x74
 8006c92:	f001 ff2b 	bl	8008aec <__hexnan>
 8006c96:	2805      	cmp	r0, #5
 8006c98:	d126      	bne.n	8006ce8 <_strtod_l+0x388>
 8006c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c9c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006ca0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006ca4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006ca8:	e69c      	b.n	80069e4 <_strtod_l+0x84>
 8006caa:	210a      	movs	r1, #10
 8006cac:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006cb0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006cb4:	e7b9      	b.n	8006c2a <_strtod_l+0x2ca>
 8006cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8006cb8:	e7db      	b.n	8006c72 <_strtod_l+0x312>
 8006cba:	498f      	ldr	r1, [pc, #572]	; (8006ef8 <_strtod_l+0x598>)
 8006cbc:	a81d      	add	r0, sp, #116	; 0x74
 8006cbe:	f001 ff01 	bl	8008ac4 <__match>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f43f aeaa 	beq.w	8006a1c <_strtod_l+0xbc>
 8006cc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cca:	498c      	ldr	r1, [pc, #560]	; (8006efc <_strtod_l+0x59c>)
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	a81d      	add	r0, sp, #116	; 0x74
 8006cd0:	931d      	str	r3, [sp, #116]	; 0x74
 8006cd2:	f001 fef7 	bl	8008ac4 <__match>
 8006cd6:	b910      	cbnz	r0, 8006cde <_strtod_l+0x37e>
 8006cd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cda:	3301      	adds	r3, #1
 8006cdc:	931d      	str	r3, [sp, #116]	; 0x74
 8006cde:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006f0c <_strtod_l+0x5ac>
 8006ce2:	f04f 0a00 	mov.w	sl, #0
 8006ce6:	e67d      	b.n	80069e4 <_strtod_l+0x84>
 8006ce8:	4885      	ldr	r0, [pc, #532]	; (8006f00 <_strtod_l+0x5a0>)
 8006cea:	f002 ff61 	bl	8009bb0 <nan>
 8006cee:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006cf2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006cf6:	e675      	b.n	80069e4 <_strtod_l+0x84>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfc:	1af3      	subs	r3, r6, r3
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	bf08      	it	eq
 8006d02:	462f      	moveq	r7, r5
 8006d04:	2d10      	cmp	r5, #16
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	46a8      	mov	r8, r5
 8006d0a:	bfa8      	it	ge
 8006d0c:	f04f 0810 	movge.w	r8, #16
 8006d10:	f7f9 fbf8 	bl	8000504 <__aeabi_ui2d>
 8006d14:	2d09      	cmp	r5, #9
 8006d16:	4682      	mov	sl, r0
 8006d18:	468b      	mov	fp, r1
 8006d1a:	dd13      	ble.n	8006d44 <_strtod_l+0x3e4>
 8006d1c:	4b79      	ldr	r3, [pc, #484]	; (8006f04 <_strtod_l+0x5a4>)
 8006d1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d26:	f7f9 fc67 	bl	80005f8 <__aeabi_dmul>
 8006d2a:	4682      	mov	sl, r0
 8006d2c:	4648      	mov	r0, r9
 8006d2e:	468b      	mov	fp, r1
 8006d30:	f7f9 fbe8 	bl	8000504 <__aeabi_ui2d>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4650      	mov	r0, sl
 8006d3a:	4659      	mov	r1, fp
 8006d3c:	f7f9 faa6 	bl	800028c <__adddf3>
 8006d40:	4682      	mov	sl, r0
 8006d42:	468b      	mov	fp, r1
 8006d44:	2d0f      	cmp	r5, #15
 8006d46:	dc38      	bgt.n	8006dba <_strtod_l+0x45a>
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f43f ae4a 	beq.w	80069e4 <_strtod_l+0x84>
 8006d50:	dd24      	ble.n	8006d9c <_strtod_l+0x43c>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	dc0b      	bgt.n	8006d6e <_strtod_l+0x40e>
 8006d56:	4d6b      	ldr	r5, [pc, #428]	; (8006f04 <_strtod_l+0x5a4>)
 8006d58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006d5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006d60:	4652      	mov	r2, sl
 8006d62:	465b      	mov	r3, fp
 8006d64:	f7f9 fc48 	bl	80005f8 <__aeabi_dmul>
 8006d68:	4682      	mov	sl, r0
 8006d6a:	468b      	mov	fp, r1
 8006d6c:	e63a      	b.n	80069e4 <_strtod_l+0x84>
 8006d6e:	9a08      	ldr	r2, [sp, #32]
 8006d70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006d74:	4293      	cmp	r3, r2
 8006d76:	db20      	blt.n	8006dba <_strtod_l+0x45a>
 8006d78:	4c62      	ldr	r4, [pc, #392]	; (8006f04 <_strtod_l+0x5a4>)
 8006d7a:	f1c5 050f 	rsb	r5, r5, #15
 8006d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d82:	4652      	mov	r2, sl
 8006d84:	465b      	mov	r3, fp
 8006d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8a:	f7f9 fc35 	bl	80005f8 <__aeabi_dmul>
 8006d8e:	9b08      	ldr	r3, [sp, #32]
 8006d90:	1b5d      	subs	r5, r3, r5
 8006d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d9a:	e7e3      	b.n	8006d64 <_strtod_l+0x404>
 8006d9c:	9b08      	ldr	r3, [sp, #32]
 8006d9e:	3316      	adds	r3, #22
 8006da0:	db0b      	blt.n	8006dba <_strtod_l+0x45a>
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	4a57      	ldr	r2, [pc, #348]	; (8006f04 <_strtod_l+0x5a4>)
 8006da6:	1b9e      	subs	r6, r3, r6
 8006da8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006db0:	4650      	mov	r0, sl
 8006db2:	4659      	mov	r1, fp
 8006db4:	f7f9 fd4a 	bl	800084c <__aeabi_ddiv>
 8006db8:	e7d6      	b.n	8006d68 <_strtod_l+0x408>
 8006dba:	9b08      	ldr	r3, [sp, #32]
 8006dbc:	eba5 0808 	sub.w	r8, r5, r8
 8006dc0:	4498      	add	r8, r3
 8006dc2:	f1b8 0f00 	cmp.w	r8, #0
 8006dc6:	dd71      	ble.n	8006eac <_strtod_l+0x54c>
 8006dc8:	f018 030f 	ands.w	r3, r8, #15
 8006dcc:	d00a      	beq.n	8006de4 <_strtod_l+0x484>
 8006dce:	494d      	ldr	r1, [pc, #308]	; (8006f04 <_strtod_l+0x5a4>)
 8006dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	465b      	mov	r3, fp
 8006dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	4682      	mov	sl, r0
 8006de2:	468b      	mov	fp, r1
 8006de4:	f038 080f 	bics.w	r8, r8, #15
 8006de8:	d04d      	beq.n	8006e86 <_strtod_l+0x526>
 8006dea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006dee:	dd22      	ble.n	8006e36 <_strtod_l+0x4d6>
 8006df0:	2500      	movs	r5, #0
 8006df2:	462e      	mov	r6, r5
 8006df4:	9509      	str	r5, [sp, #36]	; 0x24
 8006df6:	9507      	str	r5, [sp, #28]
 8006df8:	2322      	movs	r3, #34	; 0x22
 8006dfa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006f0c <_strtod_l+0x5ac>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	f04f 0a00 	mov.w	sl, #0
 8006e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f43f adec 	beq.w	80069e4 <_strtod_l+0x84>
 8006e0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f001 ff7c 	bl	8008d0c <_Bfree>
 8006e14:	9907      	ldr	r1, [sp, #28]
 8006e16:	4620      	mov	r0, r4
 8006e18:	f001 ff78 	bl	8008d0c <_Bfree>
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 ff74 	bl	8008d0c <_Bfree>
 8006e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e26:	4620      	mov	r0, r4
 8006e28:	f001 ff70 	bl	8008d0c <_Bfree>
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 ff6c 	bl	8008d0c <_Bfree>
 8006e34:	e5d6      	b.n	80069e4 <_strtod_l+0x84>
 8006e36:	2300      	movs	r3, #0
 8006e38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	4659      	mov	r1, fp
 8006e40:	4699      	mov	r9, r3
 8006e42:	f1b8 0f01 	cmp.w	r8, #1
 8006e46:	dc21      	bgt.n	8006e8c <_strtod_l+0x52c>
 8006e48:	b10b      	cbz	r3, 8006e4e <_strtod_l+0x4ee>
 8006e4a:	4682      	mov	sl, r0
 8006e4c:	468b      	mov	fp, r1
 8006e4e:	4b2e      	ldr	r3, [pc, #184]	; (8006f08 <_strtod_l+0x5a8>)
 8006e50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006e54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006e58:	4652      	mov	r2, sl
 8006e5a:	465b      	mov	r3, fp
 8006e5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <_strtod_l+0x5ac>)
 8006e66:	460a      	mov	r2, r1
 8006e68:	400b      	ands	r3, r1
 8006e6a:	4929      	ldr	r1, [pc, #164]	; (8006f10 <_strtod_l+0x5b0>)
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	4682      	mov	sl, r0
 8006e70:	d8be      	bhi.n	8006df0 <_strtod_l+0x490>
 8006e72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006e76:	428b      	cmp	r3, r1
 8006e78:	bf86      	itte	hi
 8006e7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006f14 <_strtod_l+0x5b4>
 8006e7e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006e82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e86:	2300      	movs	r3, #0
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	e081      	b.n	8006f90 <_strtod_l+0x630>
 8006e8c:	f018 0f01 	tst.w	r8, #1
 8006e90:	d007      	beq.n	8006ea2 <_strtod_l+0x542>
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <_strtod_l+0x5a8>)
 8006e94:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f109 0901 	add.w	r9, r9, #1
 8006ea6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006eaa:	e7ca      	b.n	8006e42 <_strtod_l+0x4e2>
 8006eac:	d0eb      	beq.n	8006e86 <_strtod_l+0x526>
 8006eae:	f1c8 0800 	rsb	r8, r8, #0
 8006eb2:	f018 020f 	ands.w	r2, r8, #15
 8006eb6:	d00a      	beq.n	8006ece <_strtod_l+0x56e>
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <_strtod_l+0x5a4>)
 8006eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fcc1 	bl	800084c <__aeabi_ddiv>
 8006eca:	4682      	mov	sl, r0
 8006ecc:	468b      	mov	fp, r1
 8006ece:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ed2:	d0d8      	beq.n	8006e86 <_strtod_l+0x526>
 8006ed4:	f1b8 0f1f 	cmp.w	r8, #31
 8006ed8:	dd1e      	ble.n	8006f18 <_strtod_l+0x5b8>
 8006eda:	2500      	movs	r5, #0
 8006edc:	462e      	mov	r6, r5
 8006ede:	9509      	str	r5, [sp, #36]	; 0x24
 8006ee0:	9507      	str	r5, [sp, #28]
 8006ee2:	2322      	movs	r3, #34	; 0x22
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	e789      	b.n	8006e04 <_strtod_l+0x4a4>
 8006ef0:	0800a6cd 	.word	0x0800a6cd
 8006ef4:	0800a710 	.word	0x0800a710
 8006ef8:	0800a6c5 	.word	0x0800a6c5
 8006efc:	0800a854 	.word	0x0800a854
 8006f00:	0800ab10 	.word	0x0800ab10
 8006f04:	0800a9f0 	.word	0x0800a9f0
 8006f08:	0800a9c8 	.word	0x0800a9c8
 8006f0c:	7ff00000 	.word	0x7ff00000
 8006f10:	7ca00000 	.word	0x7ca00000
 8006f14:	7fefffff 	.word	0x7fefffff
 8006f18:	f018 0310 	ands.w	r3, r8, #16
 8006f1c:	bf18      	it	ne
 8006f1e:	236a      	movne	r3, #106	; 0x6a
 8006f20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80072d8 <_strtod_l+0x978>
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	4650      	mov	r0, sl
 8006f28:	4659      	mov	r1, fp
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f018 0f01 	tst.w	r8, #1
 8006f30:	d004      	beq.n	8006f3c <_strtod_l+0x5dc>
 8006f32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f36:	f7f9 fb5f 	bl	80005f8 <__aeabi_dmul>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006f40:	f109 0908 	add.w	r9, r9, #8
 8006f44:	d1f2      	bne.n	8006f2c <_strtod_l+0x5cc>
 8006f46:	b10b      	cbz	r3, 8006f4c <_strtod_l+0x5ec>
 8006f48:	4682      	mov	sl, r0
 8006f4a:	468b      	mov	fp, r1
 8006f4c:	9b04      	ldr	r3, [sp, #16]
 8006f4e:	b1bb      	cbz	r3, 8006f80 <_strtod_l+0x620>
 8006f50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006f54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	4659      	mov	r1, fp
 8006f5c:	dd10      	ble.n	8006f80 <_strtod_l+0x620>
 8006f5e:	2b1f      	cmp	r3, #31
 8006f60:	f340 8128 	ble.w	80071b4 <_strtod_l+0x854>
 8006f64:	2b34      	cmp	r3, #52	; 0x34
 8006f66:	bfde      	ittt	le
 8006f68:	3b20      	suble	r3, #32
 8006f6a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006f6e:	fa02 f303 	lslle.w	r3, r2, r3
 8006f72:	f04f 0a00 	mov.w	sl, #0
 8006f76:	bfcc      	ite	gt
 8006f78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f7c:	ea03 0b01 	andle.w	fp, r3, r1
 8006f80:	2200      	movs	r2, #0
 8006f82:	2300      	movs	r3, #0
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	f7f9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1a4      	bne.n	8006eda <_strtod_l+0x57a>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f96:	462b      	mov	r3, r5
 8006f98:	463a      	mov	r2, r7
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f001 ff22 	bl	8008de4 <__s2b>
 8006fa0:	9009      	str	r0, [sp, #36]	; 0x24
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f43f af24 	beq.w	8006df0 <_strtod_l+0x490>
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	1b9e      	subs	r6, r3, r6
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfb4      	ite	lt
 8006fb2:	4633      	movlt	r3, r6
 8006fb4:	2300      	movge	r3, #0
 8006fb6:	9310      	str	r3, [sp, #64]	; 0x40
 8006fb8:	9b08      	ldr	r3, [sp, #32]
 8006fba:	2500      	movs	r5, #0
 8006fbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006fc0:	9318      	str	r3, [sp, #96]	; 0x60
 8006fc2:	462e      	mov	r6, r5
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	f001 fe5f 	bl	8008c8c <_Balloc>
 8006fce:	9007      	str	r0, [sp, #28]
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f43f af11 	beq.w	8006df8 <_strtod_l+0x498>
 8006fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd8:	691a      	ldr	r2, [r3, #16]
 8006fda:	3202      	adds	r2, #2
 8006fdc:	f103 010c 	add.w	r1, r3, #12
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	300c      	adds	r0, #12
 8006fe4:	f7fe fc6a 	bl	80058bc <memcpy>
 8006fe8:	ec4b ab10 	vmov	d0, sl, fp
 8006fec:	aa20      	add	r2, sp, #128	; 0x80
 8006fee:	a91f      	add	r1, sp, #124	; 0x7c
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006ff6:	f002 fa31 	bl	800945c <__d2b>
 8006ffa:	901e      	str	r0, [sp, #120]	; 0x78
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f43f aefb 	beq.w	8006df8 <_strtod_l+0x498>
 8007002:	2101      	movs	r1, #1
 8007004:	4620      	mov	r0, r4
 8007006:	f001 ff87 	bl	8008f18 <__i2b>
 800700a:	4606      	mov	r6, r0
 800700c:	2800      	cmp	r0, #0
 800700e:	f43f aef3 	beq.w	8006df8 <_strtod_l+0x498>
 8007012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007014:	9904      	ldr	r1, [sp, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfab      	itete	ge
 800701a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800701c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800701e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007020:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007024:	bfac      	ite	ge
 8007026:	eb03 0902 	addge.w	r9, r3, r2
 800702a:	1ad7      	sublt	r7, r2, r3
 800702c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800702e:	eba3 0801 	sub.w	r8, r3, r1
 8007032:	4490      	add	r8, r2
 8007034:	4ba3      	ldr	r3, [pc, #652]	; (80072c4 <_strtod_l+0x964>)
 8007036:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800703a:	4598      	cmp	r8, r3
 800703c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007040:	f280 80cc 	bge.w	80071dc <_strtod_l+0x87c>
 8007044:	eba3 0308 	sub.w	r3, r3, r8
 8007048:	2b1f      	cmp	r3, #31
 800704a:	eba2 0203 	sub.w	r2, r2, r3
 800704e:	f04f 0101 	mov.w	r1, #1
 8007052:	f300 80b6 	bgt.w	80071c2 <_strtod_l+0x862>
 8007056:	fa01 f303 	lsl.w	r3, r1, r3
 800705a:	9311      	str	r3, [sp, #68]	; 0x44
 800705c:	2300      	movs	r3, #0
 800705e:	930c      	str	r3, [sp, #48]	; 0x30
 8007060:	eb09 0802 	add.w	r8, r9, r2
 8007064:	9b04      	ldr	r3, [sp, #16]
 8007066:	45c1      	cmp	r9, r8
 8007068:	4417      	add	r7, r2
 800706a:	441f      	add	r7, r3
 800706c:	464b      	mov	r3, r9
 800706e:	bfa8      	it	ge
 8007070:	4643      	movge	r3, r8
 8007072:	42bb      	cmp	r3, r7
 8007074:	bfa8      	it	ge
 8007076:	463b      	movge	r3, r7
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfc2      	ittt	gt
 800707c:	eba8 0803 	subgt.w	r8, r8, r3
 8007080:	1aff      	subgt	r7, r7, r3
 8007082:	eba9 0903 	subgt.w	r9, r9, r3
 8007086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	dd17      	ble.n	80070bc <_strtod_l+0x75c>
 800708c:	4631      	mov	r1, r6
 800708e:	461a      	mov	r2, r3
 8007090:	4620      	mov	r0, r4
 8007092:	f001 fffd 	bl	8009090 <__pow5mult>
 8007096:	4606      	mov	r6, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	f43f aead 	beq.w	8006df8 <_strtod_l+0x498>
 800709e:	4601      	mov	r1, r0
 80070a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070a2:	4620      	mov	r0, r4
 80070a4:	f001 ff4e 	bl	8008f44 <__multiply>
 80070a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f43f aea4 	beq.w	8006df8 <_strtod_l+0x498>
 80070b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070b2:	4620      	mov	r0, r4
 80070b4:	f001 fe2a 	bl	8008d0c <_Bfree>
 80070b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ba:	931e      	str	r3, [sp, #120]	; 0x78
 80070bc:	f1b8 0f00 	cmp.w	r8, #0
 80070c0:	f300 8091 	bgt.w	80071e6 <_strtod_l+0x886>
 80070c4:	9b08      	ldr	r3, [sp, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd08      	ble.n	80070dc <_strtod_l+0x77c>
 80070ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070cc:	9907      	ldr	r1, [sp, #28]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f001 ffde 	bl	8009090 <__pow5mult>
 80070d4:	9007      	str	r0, [sp, #28]
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f ae8e 	beq.w	8006df8 <_strtod_l+0x498>
 80070dc:	2f00      	cmp	r7, #0
 80070de:	dd08      	ble.n	80070f2 <_strtod_l+0x792>
 80070e0:	9907      	ldr	r1, [sp, #28]
 80070e2:	463a      	mov	r2, r7
 80070e4:	4620      	mov	r0, r4
 80070e6:	f002 f82d 	bl	8009144 <__lshift>
 80070ea:	9007      	str	r0, [sp, #28]
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f43f ae83 	beq.w	8006df8 <_strtod_l+0x498>
 80070f2:	f1b9 0f00 	cmp.w	r9, #0
 80070f6:	dd08      	ble.n	800710a <_strtod_l+0x7aa>
 80070f8:	4631      	mov	r1, r6
 80070fa:	464a      	mov	r2, r9
 80070fc:	4620      	mov	r0, r4
 80070fe:	f002 f821 	bl	8009144 <__lshift>
 8007102:	4606      	mov	r6, r0
 8007104:	2800      	cmp	r0, #0
 8007106:	f43f ae77 	beq.w	8006df8 <_strtod_l+0x498>
 800710a:	9a07      	ldr	r2, [sp, #28]
 800710c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800710e:	4620      	mov	r0, r4
 8007110:	f002 f8a0 	bl	8009254 <__mdiff>
 8007114:	4605      	mov	r5, r0
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f ae6e 	beq.w	8006df8 <_strtod_l+0x498>
 800711c:	68c3      	ldr	r3, [r0, #12]
 800711e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007120:	2300      	movs	r3, #0
 8007122:	60c3      	str	r3, [r0, #12]
 8007124:	4631      	mov	r1, r6
 8007126:	f002 f879 	bl	800921c <__mcmp>
 800712a:	2800      	cmp	r0, #0
 800712c:	da65      	bge.n	80071fa <_strtod_l+0x89a>
 800712e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007130:	ea53 030a 	orrs.w	r3, r3, sl
 8007134:	f040 8087 	bne.w	8007246 <_strtod_l+0x8e6>
 8007138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 8082 	bne.w	8007246 <_strtod_l+0x8e6>
 8007142:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007146:	0d1b      	lsrs	r3, r3, #20
 8007148:	051b      	lsls	r3, r3, #20
 800714a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800714e:	d97a      	bls.n	8007246 <_strtod_l+0x8e6>
 8007150:	696b      	ldr	r3, [r5, #20]
 8007152:	b913      	cbnz	r3, 800715a <_strtod_l+0x7fa>
 8007154:	692b      	ldr	r3, [r5, #16]
 8007156:	2b01      	cmp	r3, #1
 8007158:	dd75      	ble.n	8007246 <_strtod_l+0x8e6>
 800715a:	4629      	mov	r1, r5
 800715c:	2201      	movs	r2, #1
 800715e:	4620      	mov	r0, r4
 8007160:	f001 fff0 	bl	8009144 <__lshift>
 8007164:	4631      	mov	r1, r6
 8007166:	4605      	mov	r5, r0
 8007168:	f002 f858 	bl	800921c <__mcmp>
 800716c:	2800      	cmp	r0, #0
 800716e:	dd6a      	ble.n	8007246 <_strtod_l+0x8e6>
 8007170:	9904      	ldr	r1, [sp, #16]
 8007172:	4a55      	ldr	r2, [pc, #340]	; (80072c8 <_strtod_l+0x968>)
 8007174:	465b      	mov	r3, fp
 8007176:	2900      	cmp	r1, #0
 8007178:	f000 8085 	beq.w	8007286 <_strtod_l+0x926>
 800717c:	ea02 010b 	and.w	r1, r2, fp
 8007180:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007184:	dc7f      	bgt.n	8007286 <_strtod_l+0x926>
 8007186:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800718a:	f77f aeaa 	ble.w	8006ee2 <_strtod_l+0x582>
 800718e:	4a4f      	ldr	r2, [pc, #316]	; (80072cc <_strtod_l+0x96c>)
 8007190:	2300      	movs	r3, #0
 8007192:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007196:	4650      	mov	r0, sl
 8007198:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800719c:	4659      	mov	r1, fp
 800719e:	f7f9 fa2b 	bl	80005f8 <__aeabi_dmul>
 80071a2:	460b      	mov	r3, r1
 80071a4:	4303      	orrs	r3, r0
 80071a6:	bf08      	it	eq
 80071a8:	2322      	moveq	r3, #34	; 0x22
 80071aa:	4682      	mov	sl, r0
 80071ac:	468b      	mov	fp, r1
 80071ae:	bf08      	it	eq
 80071b0:	6023      	streq	r3, [r4, #0]
 80071b2:	e62b      	b.n	8006e0c <_strtod_l+0x4ac>
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	ea03 0a0a 	and.w	sl, r3, sl
 80071c0:	e6de      	b.n	8006f80 <_strtod_l+0x620>
 80071c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80071c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80071ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80071ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80071d2:	fa01 f308 	lsl.w	r3, r1, r8
 80071d6:	930c      	str	r3, [sp, #48]	; 0x30
 80071d8:	9111      	str	r1, [sp, #68]	; 0x44
 80071da:	e741      	b.n	8007060 <_strtod_l+0x700>
 80071dc:	2300      	movs	r3, #0
 80071de:	930c      	str	r3, [sp, #48]	; 0x30
 80071e0:	2301      	movs	r3, #1
 80071e2:	9311      	str	r3, [sp, #68]	; 0x44
 80071e4:	e73c      	b.n	8007060 <_strtod_l+0x700>
 80071e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80071e8:	4642      	mov	r2, r8
 80071ea:	4620      	mov	r0, r4
 80071ec:	f001 ffaa 	bl	8009144 <__lshift>
 80071f0:	901e      	str	r0, [sp, #120]	; 0x78
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f47f af66 	bne.w	80070c4 <_strtod_l+0x764>
 80071f8:	e5fe      	b.n	8006df8 <_strtod_l+0x498>
 80071fa:	465f      	mov	r7, fp
 80071fc:	d16e      	bne.n	80072dc <_strtod_l+0x97c>
 80071fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007204:	b342      	cbz	r2, 8007258 <_strtod_l+0x8f8>
 8007206:	4a32      	ldr	r2, [pc, #200]	; (80072d0 <_strtod_l+0x970>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d128      	bne.n	800725e <_strtod_l+0x8fe>
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	4650      	mov	r0, sl
 8007210:	b1eb      	cbz	r3, 800724e <_strtod_l+0x8ee>
 8007212:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <_strtod_l+0x968>)
 8007214:	403a      	ands	r2, r7
 8007216:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800721a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800721e:	d819      	bhi.n	8007254 <_strtod_l+0x8f4>
 8007220:	0d12      	lsrs	r2, r2, #20
 8007222:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	4298      	cmp	r0, r3
 800722c:	d117      	bne.n	800725e <_strtod_l+0x8fe>
 800722e:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <_strtod_l+0x974>)
 8007230:	429f      	cmp	r7, r3
 8007232:	d102      	bne.n	800723a <_strtod_l+0x8da>
 8007234:	3001      	adds	r0, #1
 8007236:	f43f addf 	beq.w	8006df8 <_strtod_l+0x498>
 800723a:	4b23      	ldr	r3, [pc, #140]	; (80072c8 <_strtod_l+0x968>)
 800723c:	403b      	ands	r3, r7
 800723e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007242:	f04f 0a00 	mov.w	sl, #0
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1a0      	bne.n	800718e <_strtod_l+0x82e>
 800724c:	e5de      	b.n	8006e0c <_strtod_l+0x4ac>
 800724e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007252:	e7ea      	b.n	800722a <_strtod_l+0x8ca>
 8007254:	460b      	mov	r3, r1
 8007256:	e7e8      	b.n	800722a <_strtod_l+0x8ca>
 8007258:	ea53 030a 	orrs.w	r3, r3, sl
 800725c:	d088      	beq.n	8007170 <_strtod_l+0x810>
 800725e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007260:	b1db      	cbz	r3, 800729a <_strtod_l+0x93a>
 8007262:	423b      	tst	r3, r7
 8007264:	d0ef      	beq.n	8007246 <_strtod_l+0x8e6>
 8007266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007268:	9a04      	ldr	r2, [sp, #16]
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	b1c3      	cbz	r3, 80072a2 <_strtod_l+0x942>
 8007270:	f7ff fb59 	bl	8006926 <sulp>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800727c:	f7f9 f806 	bl	800028c <__adddf3>
 8007280:	4682      	mov	sl, r0
 8007282:	468b      	mov	fp, r1
 8007284:	e7df      	b.n	8007246 <_strtod_l+0x8e6>
 8007286:	4013      	ands	r3, r2
 8007288:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800728c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007290:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007294:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007298:	e7d5      	b.n	8007246 <_strtod_l+0x8e6>
 800729a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800729c:	ea13 0f0a 	tst.w	r3, sl
 80072a0:	e7e0      	b.n	8007264 <_strtod_l+0x904>
 80072a2:	f7ff fb40 	bl	8006926 <sulp>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072ae:	f7f8 ffeb 	bl	8000288 <__aeabi_dsub>
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4682      	mov	sl, r0
 80072b8:	468b      	mov	fp, r1
 80072ba:	f7f9 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d0c1      	beq.n	8007246 <_strtod_l+0x8e6>
 80072c2:	e60e      	b.n	8006ee2 <_strtod_l+0x582>
 80072c4:	fffffc02 	.word	0xfffffc02
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	39500000 	.word	0x39500000
 80072d0:	000fffff 	.word	0x000fffff
 80072d4:	7fefffff 	.word	0x7fefffff
 80072d8:	0800a728 	.word	0x0800a728
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	f002 f918 	bl	8009514 <__ratio>
 80072e4:	ec59 8b10 	vmov	r8, r9, d0
 80072e8:	ee10 0a10 	vmov	r0, s0
 80072ec:	2200      	movs	r2, #0
 80072ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072f2:	4649      	mov	r1, r9
 80072f4:	f7f9 fbfc 	bl	8000af0 <__aeabi_dcmple>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d07c      	beq.n	80073f6 <_strtod_l+0xa96>
 80072fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d04c      	beq.n	800739c <_strtod_l+0xa3c>
 8007302:	4b95      	ldr	r3, [pc, #596]	; (8007558 <_strtod_l+0xbf8>)
 8007304:	2200      	movs	r2, #0
 8007306:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800730a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007558 <_strtod_l+0xbf8>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	4b92      	ldr	r3, [pc, #584]	; (800755c <_strtod_l+0xbfc>)
 8007314:	403b      	ands	r3, r7
 8007316:	9311      	str	r3, [sp, #68]	; 0x44
 8007318:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800731a:	4b91      	ldr	r3, [pc, #580]	; (8007560 <_strtod_l+0xc00>)
 800731c:	429a      	cmp	r2, r3
 800731e:	f040 80b2 	bne.w	8007486 <_strtod_l+0xb26>
 8007322:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800732a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800732e:	ec4b ab10 	vmov	d0, sl, fp
 8007332:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007336:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800733a:	f002 f813 	bl	8009364 <__ulp>
 800733e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007342:	ec53 2b10 	vmov	r2, r3, d0
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	4652      	mov	r2, sl
 800734c:	465b      	mov	r3, fp
 800734e:	f7f8 ff9d 	bl	800028c <__adddf3>
 8007352:	460b      	mov	r3, r1
 8007354:	4981      	ldr	r1, [pc, #516]	; (800755c <_strtod_l+0xbfc>)
 8007356:	4a83      	ldr	r2, [pc, #524]	; (8007564 <_strtod_l+0xc04>)
 8007358:	4019      	ands	r1, r3
 800735a:	4291      	cmp	r1, r2
 800735c:	4682      	mov	sl, r0
 800735e:	d95e      	bls.n	800741e <_strtod_l+0xabe>
 8007360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007362:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007366:	4293      	cmp	r3, r2
 8007368:	d103      	bne.n	8007372 <_strtod_l+0xa12>
 800736a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736c:	3301      	adds	r3, #1
 800736e:	f43f ad43 	beq.w	8006df8 <_strtod_l+0x498>
 8007372:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007570 <_strtod_l+0xc10>
 8007376:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800737a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800737c:	4620      	mov	r0, r4
 800737e:	f001 fcc5 	bl	8008d0c <_Bfree>
 8007382:	9907      	ldr	r1, [sp, #28]
 8007384:	4620      	mov	r0, r4
 8007386:	f001 fcc1 	bl	8008d0c <_Bfree>
 800738a:	4631      	mov	r1, r6
 800738c:	4620      	mov	r0, r4
 800738e:	f001 fcbd 	bl	8008d0c <_Bfree>
 8007392:	4629      	mov	r1, r5
 8007394:	4620      	mov	r0, r4
 8007396:	f001 fcb9 	bl	8008d0c <_Bfree>
 800739a:	e613      	b.n	8006fc4 <_strtod_l+0x664>
 800739c:	f1ba 0f00 	cmp.w	sl, #0
 80073a0:	d11b      	bne.n	80073da <_strtod_l+0xa7a>
 80073a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073a6:	b9f3      	cbnz	r3, 80073e6 <_strtod_l+0xa86>
 80073a8:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <_strtod_l+0xbf8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f9 fb94 	bl	8000adc <__aeabi_dcmplt>
 80073b4:	b9d0      	cbnz	r0, 80073ec <_strtod_l+0xa8c>
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	4b6b      	ldr	r3, [pc, #428]	; (8007568 <_strtod_l+0xc08>)
 80073bc:	2200      	movs	r2, #0
 80073be:	f7f9 f91b 	bl	80005f8 <__aeabi_dmul>
 80073c2:	4680      	mov	r8, r0
 80073c4:	4689      	mov	r9, r1
 80073c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80073ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80073d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80073d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073d8:	e79b      	b.n	8007312 <_strtod_l+0x9b2>
 80073da:	f1ba 0f01 	cmp.w	sl, #1
 80073de:	d102      	bne.n	80073e6 <_strtod_l+0xa86>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	f43f ad7e 	beq.w	8006ee2 <_strtod_l+0x582>
 80073e6:	4b61      	ldr	r3, [pc, #388]	; (800756c <_strtod_l+0xc0c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	e78c      	b.n	8007306 <_strtod_l+0x9a6>
 80073ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007568 <_strtod_l+0xc08>
 80073f0:	f04f 0800 	mov.w	r8, #0
 80073f4:	e7e7      	b.n	80073c6 <_strtod_l+0xa66>
 80073f6:	4b5c      	ldr	r3, [pc, #368]	; (8007568 <_strtod_l+0xc08>)
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	2200      	movs	r2, #0
 80073fe:	f7f9 f8fb 	bl	80005f8 <__aeabi_dmul>
 8007402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007404:	4680      	mov	r8, r0
 8007406:	4689      	mov	r9, r1
 8007408:	b933      	cbnz	r3, 8007418 <_strtod_l+0xab8>
 800740a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800740e:	9012      	str	r0, [sp, #72]	; 0x48
 8007410:	9313      	str	r3, [sp, #76]	; 0x4c
 8007412:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007416:	e7dd      	b.n	80073d4 <_strtod_l+0xa74>
 8007418:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800741c:	e7f9      	b.n	8007412 <_strtod_l+0xab2>
 800741e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1a8      	bne.n	800737a <_strtod_l+0xa1a>
 8007428:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800742c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800742e:	0d1b      	lsrs	r3, r3, #20
 8007430:	051b      	lsls	r3, r3, #20
 8007432:	429a      	cmp	r2, r3
 8007434:	d1a1      	bne.n	800737a <_strtod_l+0xa1a>
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f9 fc3d 	bl	8000cb8 <__aeabi_d2lz>
 800743e:	f7f9 f8ad 	bl	800059c <__aeabi_l2d>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4640      	mov	r0, r8
 8007448:	4649      	mov	r1, r9
 800744a:	f7f8 ff1d 	bl	8000288 <__aeabi_dsub>
 800744e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007454:	ea43 030a 	orr.w	r3, r3, sl
 8007458:	4313      	orrs	r3, r2
 800745a:	4680      	mov	r8, r0
 800745c:	4689      	mov	r9, r1
 800745e:	d053      	beq.n	8007508 <_strtod_l+0xba8>
 8007460:	a335      	add	r3, pc, #212	; (adr r3, 8007538 <_strtod_l+0xbd8>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 fb39 	bl	8000adc <__aeabi_dcmplt>
 800746a:	2800      	cmp	r0, #0
 800746c:	f47f acce 	bne.w	8006e0c <_strtod_l+0x4ac>
 8007470:	a333      	add	r3, pc, #204	; (adr r3, 8007540 <_strtod_l+0xbe0>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	4640      	mov	r0, r8
 8007478:	4649      	mov	r1, r9
 800747a:	f7f9 fb4d 	bl	8000b18 <__aeabi_dcmpgt>
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f af7b 	beq.w	800737a <_strtod_l+0xa1a>
 8007484:	e4c2      	b.n	8006e0c <_strtod_l+0x4ac>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	b333      	cbz	r3, 80074d8 <_strtod_l+0xb78>
 800748a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800748c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007490:	d822      	bhi.n	80074d8 <_strtod_l+0xb78>
 8007492:	a32d      	add	r3, pc, #180	; (adr r3, 8007548 <_strtod_l+0xbe8>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f7f9 fb28 	bl	8000af0 <__aeabi_dcmple>
 80074a0:	b1a0      	cbz	r0, 80074cc <_strtod_l+0xb6c>
 80074a2:	4649      	mov	r1, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	f7f9 fb7f 	bl	8000ba8 <__aeabi_d2uiz>
 80074aa:	2801      	cmp	r0, #1
 80074ac:	bf38      	it	cc
 80074ae:	2001      	movcc	r0, #1
 80074b0:	f7f9 f828 	bl	8000504 <__aeabi_ui2d>
 80074b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b6:	4680      	mov	r8, r0
 80074b8:	4689      	mov	r9, r1
 80074ba:	bb13      	cbnz	r3, 8007502 <_strtod_l+0xba2>
 80074bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074c0:	9014      	str	r0, [sp, #80]	; 0x50
 80074c2:	9315      	str	r3, [sp, #84]	; 0x54
 80074c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80074cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	930d      	str	r3, [sp, #52]	; 0x34
 80074d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80074e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074e4:	f001 ff3e 	bl	8009364 <__ulp>
 80074e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ec:	ec53 2b10 	vmov	r2, r3, d0
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074f8:	f7f8 fec8 	bl	800028c <__adddf3>
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	e78f      	b.n	8007422 <_strtod_l+0xac2>
 8007502:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007506:	e7dd      	b.n	80074c4 <_strtod_l+0xb64>
 8007508:	a311      	add	r3, pc, #68	; (adr r3, 8007550 <_strtod_l+0xbf0>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 fae5 	bl	8000adc <__aeabi_dcmplt>
 8007512:	e7b4      	b.n	800747e <_strtod_l+0xb1e>
 8007514:	2300      	movs	r3, #0
 8007516:	930e      	str	r3, [sp, #56]	; 0x38
 8007518:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800751a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	f7ff ba65 	b.w	80069ec <_strtod_l+0x8c>
 8007522:	2b65      	cmp	r3, #101	; 0x65
 8007524:	f43f ab5d 	beq.w	8006be2 <_strtod_l+0x282>
 8007528:	2b45      	cmp	r3, #69	; 0x45
 800752a:	f43f ab5a 	beq.w	8006be2 <_strtod_l+0x282>
 800752e:	2201      	movs	r2, #1
 8007530:	f7ff bb92 	b.w	8006c58 <_strtod_l+0x2f8>
 8007534:	f3af 8000 	nop.w
 8007538:	94a03595 	.word	0x94a03595
 800753c:	3fdfffff 	.word	0x3fdfffff
 8007540:	35afe535 	.word	0x35afe535
 8007544:	3fe00000 	.word	0x3fe00000
 8007548:	ffc00000 	.word	0xffc00000
 800754c:	41dfffff 	.word	0x41dfffff
 8007550:	94a03595 	.word	0x94a03595
 8007554:	3fcfffff 	.word	0x3fcfffff
 8007558:	3ff00000 	.word	0x3ff00000
 800755c:	7ff00000 	.word	0x7ff00000
 8007560:	7fe00000 	.word	0x7fe00000
 8007564:	7c9fffff 	.word	0x7c9fffff
 8007568:	3fe00000 	.word	0x3fe00000
 800756c:	bff00000 	.word	0xbff00000
 8007570:	7fefffff 	.word	0x7fefffff

08007574 <_strtod_r>:
 8007574:	4b01      	ldr	r3, [pc, #4]	; (800757c <_strtod_r+0x8>)
 8007576:	f7ff b9f3 	b.w	8006960 <_strtod_l>
 800757a:	bf00      	nop
 800757c:	20000078 	.word	0x20000078

08007580 <_strtol_l.isra.0>:
 8007580:	2b01      	cmp	r3, #1
 8007582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007586:	d001      	beq.n	800758c <_strtol_l.isra.0+0xc>
 8007588:	2b24      	cmp	r3, #36	; 0x24
 800758a:	d906      	bls.n	800759a <_strtol_l.isra.0+0x1a>
 800758c:	f7fe f86e 	bl	800566c <__errno>
 8007590:	2316      	movs	r3, #22
 8007592:	6003      	str	r3, [r0, #0]
 8007594:	2000      	movs	r0, #0
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	4f3a      	ldr	r7, [pc, #232]	; (8007684 <_strtol_l.isra.0+0x104>)
 800759c:	468e      	mov	lr, r1
 800759e:	4676      	mov	r6, lr
 80075a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80075a4:	5de5      	ldrb	r5, [r4, r7]
 80075a6:	f015 0508 	ands.w	r5, r5, #8
 80075aa:	d1f8      	bne.n	800759e <_strtol_l.isra.0+0x1e>
 80075ac:	2c2d      	cmp	r4, #45	; 0x2d
 80075ae:	d134      	bne.n	800761a <_strtol_l.isra.0+0x9a>
 80075b0:	f89e 4000 	ldrb.w	r4, [lr]
 80075b4:	f04f 0801 	mov.w	r8, #1
 80075b8:	f106 0e02 	add.w	lr, r6, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05c      	beq.n	800767a <_strtol_l.isra.0+0xfa>
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d10c      	bne.n	80075de <_strtol_l.isra.0+0x5e>
 80075c4:	2c30      	cmp	r4, #48	; 0x30
 80075c6:	d10a      	bne.n	80075de <_strtol_l.isra.0+0x5e>
 80075c8:	f89e 4000 	ldrb.w	r4, [lr]
 80075cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80075d0:	2c58      	cmp	r4, #88	; 0x58
 80075d2:	d14d      	bne.n	8007670 <_strtol_l.isra.0+0xf0>
 80075d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80075d8:	2310      	movs	r3, #16
 80075da:	f10e 0e02 	add.w	lr, lr, #2
 80075de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80075e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80075e6:	2600      	movs	r6, #0
 80075e8:	fbbc f9f3 	udiv	r9, ip, r3
 80075ec:	4635      	mov	r5, r6
 80075ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80075f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80075f6:	2f09      	cmp	r7, #9
 80075f8:	d818      	bhi.n	800762c <_strtol_l.isra.0+0xac>
 80075fa:	463c      	mov	r4, r7
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	dd24      	ble.n	800764a <_strtol_l.isra.0+0xca>
 8007600:	2e00      	cmp	r6, #0
 8007602:	db1f      	blt.n	8007644 <_strtol_l.isra.0+0xc4>
 8007604:	45a9      	cmp	r9, r5
 8007606:	d31d      	bcc.n	8007644 <_strtol_l.isra.0+0xc4>
 8007608:	d101      	bne.n	800760e <_strtol_l.isra.0+0x8e>
 800760a:	45a2      	cmp	sl, r4
 800760c:	db1a      	blt.n	8007644 <_strtol_l.isra.0+0xc4>
 800760e:	fb05 4503 	mla	r5, r5, r3, r4
 8007612:	2601      	movs	r6, #1
 8007614:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007618:	e7eb      	b.n	80075f2 <_strtol_l.isra.0+0x72>
 800761a:	2c2b      	cmp	r4, #43	; 0x2b
 800761c:	bf08      	it	eq
 800761e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007622:	46a8      	mov	r8, r5
 8007624:	bf08      	it	eq
 8007626:	f106 0e02 	addeq.w	lr, r6, #2
 800762a:	e7c7      	b.n	80075bc <_strtol_l.isra.0+0x3c>
 800762c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007630:	2f19      	cmp	r7, #25
 8007632:	d801      	bhi.n	8007638 <_strtol_l.isra.0+0xb8>
 8007634:	3c37      	subs	r4, #55	; 0x37
 8007636:	e7e1      	b.n	80075fc <_strtol_l.isra.0+0x7c>
 8007638:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800763c:	2f19      	cmp	r7, #25
 800763e:	d804      	bhi.n	800764a <_strtol_l.isra.0+0xca>
 8007640:	3c57      	subs	r4, #87	; 0x57
 8007642:	e7db      	b.n	80075fc <_strtol_l.isra.0+0x7c>
 8007644:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007648:	e7e4      	b.n	8007614 <_strtol_l.isra.0+0x94>
 800764a:	2e00      	cmp	r6, #0
 800764c:	da05      	bge.n	800765a <_strtol_l.isra.0+0xda>
 800764e:	2322      	movs	r3, #34	; 0x22
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	4665      	mov	r5, ip
 8007654:	b942      	cbnz	r2, 8007668 <_strtol_l.isra.0+0xe8>
 8007656:	4628      	mov	r0, r5
 8007658:	e79d      	b.n	8007596 <_strtol_l.isra.0+0x16>
 800765a:	f1b8 0f00 	cmp.w	r8, #0
 800765e:	d000      	beq.n	8007662 <_strtol_l.isra.0+0xe2>
 8007660:	426d      	negs	r5, r5
 8007662:	2a00      	cmp	r2, #0
 8007664:	d0f7      	beq.n	8007656 <_strtol_l.isra.0+0xd6>
 8007666:	b10e      	cbz	r6, 800766c <_strtol_l.isra.0+0xec>
 8007668:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	e7f2      	b.n	8007656 <_strtol_l.isra.0+0xd6>
 8007670:	2430      	movs	r4, #48	; 0x30
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1b3      	bne.n	80075de <_strtol_l.isra.0+0x5e>
 8007676:	2308      	movs	r3, #8
 8007678:	e7b1      	b.n	80075de <_strtol_l.isra.0+0x5e>
 800767a:	2c30      	cmp	r4, #48	; 0x30
 800767c:	d0a4      	beq.n	80075c8 <_strtol_l.isra.0+0x48>
 800767e:	230a      	movs	r3, #10
 8007680:	e7ad      	b.n	80075de <_strtol_l.isra.0+0x5e>
 8007682:	bf00      	nop
 8007684:	0800a751 	.word	0x0800a751

08007688 <_strtol_r>:
 8007688:	f7ff bf7a 	b.w	8007580 <_strtol_l.isra.0>

0800768c <_write_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d07      	ldr	r5, [pc, #28]	; (80076ac <_write_r+0x20>)
 8007690:	4604      	mov	r4, r0
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	2200      	movs	r2, #0
 8007698:	602a      	str	r2, [r5, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	f002 fd6c 	bl	800a178 <_write>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_write_r+0x1e>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_write_r+0x1e>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	200044e0 	.word	0x200044e0

080076b0 <_close_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d06      	ldr	r5, [pc, #24]	; (80076cc <_close_r+0x1c>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	602b      	str	r3, [r5, #0]
 80076bc:	f002 fd8e 	bl	800a1dc <_close>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_close_r+0x1a>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_close_r+0x1a>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	200044e0 	.word	0x200044e0

080076d0 <quorem>:
 80076d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	6903      	ldr	r3, [r0, #16]
 80076d6:	690c      	ldr	r4, [r1, #16]
 80076d8:	42a3      	cmp	r3, r4
 80076da:	4607      	mov	r7, r0
 80076dc:	f2c0 8081 	blt.w	80077e2 <quorem+0x112>
 80076e0:	3c01      	subs	r4, #1
 80076e2:	f101 0814 	add.w	r8, r1, #20
 80076e6:	f100 0514 	add.w	r5, r0, #20
 80076ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076f8:	3301      	adds	r3, #1
 80076fa:	429a      	cmp	r2, r3
 80076fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007704:	fbb2 f6f3 	udiv	r6, r2, r3
 8007708:	d331      	bcc.n	800776e <quorem+0x9e>
 800770a:	f04f 0e00 	mov.w	lr, #0
 800770e:	4640      	mov	r0, r8
 8007710:	46ac      	mov	ip, r5
 8007712:	46f2      	mov	sl, lr
 8007714:	f850 2b04 	ldr.w	r2, [r0], #4
 8007718:	b293      	uxth	r3, r2
 800771a:	fb06 e303 	mla	r3, r6, r3, lr
 800771e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007722:	b29b      	uxth	r3, r3
 8007724:	ebaa 0303 	sub.w	r3, sl, r3
 8007728:	0c12      	lsrs	r2, r2, #16
 800772a:	f8dc a000 	ldr.w	sl, [ip]
 800772e:	fb06 e202 	mla	r2, r6, r2, lr
 8007732:	fa13 f38a 	uxtah	r3, r3, sl
 8007736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800773a:	fa1f fa82 	uxth.w	sl, r2
 800773e:	f8dc 2000 	ldr.w	r2, [ip]
 8007742:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007750:	4581      	cmp	r9, r0
 8007752:	f84c 3b04 	str.w	r3, [ip], #4
 8007756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800775a:	d2db      	bcs.n	8007714 <quorem+0x44>
 800775c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007760:	b92b      	cbnz	r3, 800776e <quorem+0x9e>
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	3b04      	subs	r3, #4
 8007766:	429d      	cmp	r5, r3
 8007768:	461a      	mov	r2, r3
 800776a:	d32e      	bcc.n	80077ca <quorem+0xfa>
 800776c:	613c      	str	r4, [r7, #16]
 800776e:	4638      	mov	r0, r7
 8007770:	f001 fd54 	bl	800921c <__mcmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	db24      	blt.n	80077c2 <quorem+0xf2>
 8007778:	3601      	adds	r6, #1
 800777a:	4628      	mov	r0, r5
 800777c:	f04f 0c00 	mov.w	ip, #0
 8007780:	f858 2b04 	ldr.w	r2, [r8], #4
 8007784:	f8d0 e000 	ldr.w	lr, [r0]
 8007788:	b293      	uxth	r3, r2
 800778a:	ebac 0303 	sub.w	r3, ip, r3
 800778e:	0c12      	lsrs	r2, r2, #16
 8007790:	fa13 f38e 	uxtah	r3, r3, lr
 8007794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800779c:	b29b      	uxth	r3, r3
 800779e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a2:	45c1      	cmp	r9, r8
 80077a4:	f840 3b04 	str.w	r3, [r0], #4
 80077a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077ac:	d2e8      	bcs.n	8007780 <quorem+0xb0>
 80077ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b6:	b922      	cbnz	r2, 80077c2 <quorem+0xf2>
 80077b8:	3b04      	subs	r3, #4
 80077ba:	429d      	cmp	r5, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	d30a      	bcc.n	80077d6 <quorem+0x106>
 80077c0:	613c      	str	r4, [r7, #16]
 80077c2:	4630      	mov	r0, r6
 80077c4:	b003      	add	sp, #12
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1cc      	bne.n	800776c <quorem+0x9c>
 80077d2:	3c01      	subs	r4, #1
 80077d4:	e7c7      	b.n	8007766 <quorem+0x96>
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	3b04      	subs	r3, #4
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d1f0      	bne.n	80077c0 <quorem+0xf0>
 80077de:	3c01      	subs	r4, #1
 80077e0:	e7eb      	b.n	80077ba <quorem+0xea>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e7ee      	b.n	80077c4 <quorem+0xf4>
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	ed2d 8b02 	vpush	{d8}
 80077f0:	ec57 6b10 	vmov	r6, r7, d0
 80077f4:	b095      	sub	sp, #84	; 0x54
 80077f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007802:	4604      	mov	r4, r0
 8007804:	9209      	str	r2, [sp, #36]	; 0x24
 8007806:	930f      	str	r3, [sp, #60]	; 0x3c
 8007808:	b975      	cbnz	r5, 8007828 <_dtoa_r+0x40>
 800780a:	2010      	movs	r0, #16
 800780c:	f7fe f84e 	bl	80058ac <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	6260      	str	r0, [r4, #36]	; 0x24
 8007814:	b920      	cbnz	r0, 8007820 <_dtoa_r+0x38>
 8007816:	4bb2      	ldr	r3, [pc, #712]	; (8007ae0 <_dtoa_r+0x2f8>)
 8007818:	21ea      	movs	r1, #234	; 0xea
 800781a:	48b2      	ldr	r0, [pc, #712]	; (8007ae4 <_dtoa_r+0x2fc>)
 800781c:	f002 fab0 	bl	8009d80 <__assert_func>
 8007820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007824:	6005      	str	r5, [r0, #0]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782a:	6819      	ldr	r1, [r3, #0]
 800782c:	b151      	cbz	r1, 8007844 <_dtoa_r+0x5c>
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	604a      	str	r2, [r1, #4]
 8007832:	2301      	movs	r3, #1
 8007834:	4093      	lsls	r3, r2
 8007836:	608b      	str	r3, [r1, #8]
 8007838:	4620      	mov	r0, r4
 800783a:	f001 fa67 	bl	8008d0c <_Bfree>
 800783e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	1e3b      	subs	r3, r7, #0
 8007846:	bfb9      	ittee	lt
 8007848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800784c:	9303      	strlt	r3, [sp, #12]
 800784e:	2300      	movge	r3, #0
 8007850:	f8c8 3000 	strge.w	r3, [r8]
 8007854:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007858:	4ba3      	ldr	r3, [pc, #652]	; (8007ae8 <_dtoa_r+0x300>)
 800785a:	bfbc      	itt	lt
 800785c:	2201      	movlt	r2, #1
 800785e:	f8c8 2000 	strlt.w	r2, [r8]
 8007862:	ea33 0309 	bics.w	r3, r3, r9
 8007866:	d11b      	bne.n	80078a0 <_dtoa_r+0xb8>
 8007868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800786a:	f242 730f 	movw	r3, #9999	; 0x270f
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007874:	4333      	orrs	r3, r6
 8007876:	f000 857a 	beq.w	800836e <_dtoa_r+0xb86>
 800787a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800787c:	b963      	cbnz	r3, 8007898 <_dtoa_r+0xb0>
 800787e:	4b9b      	ldr	r3, [pc, #620]	; (8007aec <_dtoa_r+0x304>)
 8007880:	e024      	b.n	80078cc <_dtoa_r+0xe4>
 8007882:	4b9b      	ldr	r3, [pc, #620]	; (8007af0 <_dtoa_r+0x308>)
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	9800      	ldr	r0, [sp, #0]
 800788e:	b015      	add	sp, #84	; 0x54
 8007890:	ecbd 8b02 	vpop	{d8}
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4b94      	ldr	r3, [pc, #592]	; (8007aec <_dtoa_r+0x304>)
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	3303      	adds	r3, #3
 800789e:	e7f3      	b.n	8007888 <_dtoa_r+0xa0>
 80078a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	ec51 0b17 	vmov	r0, r1, d7
 80078aa:	2300      	movs	r3, #0
 80078ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80078b0:	f7f9 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b4:	4680      	mov	r8, r0
 80078b6:	b158      	cbz	r0, 80078d0 <_dtoa_r+0xe8>
 80078b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ba:	2301      	movs	r3, #1
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8551 	beq.w	8008368 <_dtoa_r+0xb80>
 80078c6:	488b      	ldr	r0, [pc, #556]	; (8007af4 <_dtoa_r+0x30c>)
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	e7dd      	b.n	800788c <_dtoa_r+0xa4>
 80078d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80078d4:	aa12      	add	r2, sp, #72	; 0x48
 80078d6:	a913      	add	r1, sp, #76	; 0x4c
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 fdbf 	bl	800945c <__d2b>
 80078de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078e2:	4683      	mov	fp, r0
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d07c      	beq.n	80079e2 <_dtoa_r+0x1fa>
 80078e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80078ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80078f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007902:	4b7d      	ldr	r3, [pc, #500]	; (8007af8 <_dtoa_r+0x310>)
 8007904:	2200      	movs	r2, #0
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f8 fcbd 	bl	8000288 <__aeabi_dsub>
 800790e:	a36e      	add	r3, pc, #440	; (adr r3, 8007ac8 <_dtoa_r+0x2e0>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fe70 	bl	80005f8 <__aeabi_dmul>
 8007918:	a36d      	add	r3, pc, #436	; (adr r3, 8007ad0 <_dtoa_r+0x2e8>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fcb5 	bl	800028c <__adddf3>
 8007922:	4606      	mov	r6, r0
 8007924:	4628      	mov	r0, r5
 8007926:	460f      	mov	r7, r1
 8007928:	f7f8 fdfc 	bl	8000524 <__aeabi_i2d>
 800792c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ad8 <_dtoa_r+0x2f0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fe61 	bl	80005f8 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fca5 	bl	800028c <__adddf3>
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	f7f9 f907 	bl	8000b58 <__aeabi_d2iz>
 800794a:	2200      	movs	r2, #0
 800794c:	4682      	mov	sl, r0
 800794e:	2300      	movs	r3, #0
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f9 f8c2 	bl	8000adc <__aeabi_dcmplt>
 8007958:	b148      	cbz	r0, 800796e <_dtoa_r+0x186>
 800795a:	4650      	mov	r0, sl
 800795c:	f7f8 fde2 	bl	8000524 <__aeabi_i2d>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	f7f9 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007968:	b908      	cbnz	r0, 800796e <_dtoa_r+0x186>
 800796a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800796e:	f1ba 0f16 	cmp.w	sl, #22
 8007972:	d854      	bhi.n	8007a1e <_dtoa_r+0x236>
 8007974:	4b61      	ldr	r3, [pc, #388]	; (8007afc <_dtoa_r+0x314>)
 8007976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007982:	f7f9 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	d04b      	beq.n	8007a22 <_dtoa_r+0x23a>
 800798a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800798e:	2300      	movs	r3, #0
 8007990:	930e      	str	r3, [sp, #56]	; 0x38
 8007992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007994:	1b5d      	subs	r5, r3, r5
 8007996:	1e6b      	subs	r3, r5, #1
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	bf43      	ittte	mi
 800799c:	2300      	movmi	r3, #0
 800799e:	f1c5 0801 	rsbmi	r8, r5, #1
 80079a2:	9304      	strmi	r3, [sp, #16]
 80079a4:	f04f 0800 	movpl.w	r8, #0
 80079a8:	f1ba 0f00 	cmp.w	sl, #0
 80079ac:	db3b      	blt.n	8007a26 <_dtoa_r+0x23e>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80079b4:	4453      	add	r3, sl
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	2300      	movs	r3, #0
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d869      	bhi.n	8007a96 <_dtoa_r+0x2ae>
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	bfc4      	itt	gt
 80079c6:	3b04      	subgt	r3, #4
 80079c8:	9305      	strgt	r3, [sp, #20]
 80079ca:	9b05      	ldr	r3, [sp, #20]
 80079cc:	f1a3 0302 	sub.w	r3, r3, #2
 80079d0:	bfcc      	ite	gt
 80079d2:	2500      	movgt	r5, #0
 80079d4:	2501      	movle	r5, #1
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d869      	bhi.n	8007aae <_dtoa_r+0x2c6>
 80079da:	e8df f003 	tbb	[pc, r3]
 80079de:	4e2c      	.short	0x4e2c
 80079e0:	5a4c      	.short	0x5a4c
 80079e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079e6:	441d      	add	r5, r3
 80079e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	bfc1      	itttt	gt
 80079f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80079f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80079fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a00:	bfda      	itte	le
 8007a02:	f1c3 0320 	rsble	r3, r3, #32
 8007a06:	fa06 f003 	lslle.w	r0, r6, r3
 8007a0a:	4318      	orrgt	r0, r3
 8007a0c:	f7f8 fd7a 	bl	8000504 <__aeabi_ui2d>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4606      	mov	r6, r0
 8007a14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a18:	3d01      	subs	r5, #1
 8007a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a1c:	e771      	b.n	8007902 <_dtoa_r+0x11a>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7b6      	b.n	8007990 <_dtoa_r+0x1a8>
 8007a22:	900e      	str	r0, [sp, #56]	; 0x38
 8007a24:	e7b5      	b.n	8007992 <_dtoa_r+0x1aa>
 8007a26:	f1ca 0300 	rsb	r3, sl, #0
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	eba8 080a 	sub.w	r8, r8, sl
 8007a32:	930d      	str	r3, [sp, #52]	; 0x34
 8007a34:	e7c2      	b.n	80079bc <_dtoa_r+0x1d4>
 8007a36:	2300      	movs	r3, #0
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc39      	bgt.n	8007ab4 <_dtoa_r+0x2cc>
 8007a40:	f04f 0901 	mov.w	r9, #1
 8007a44:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a48:	464b      	mov	r3, r9
 8007a4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	6042      	str	r2, [r0, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f102 0614 	add.w	r6, r2, #20
 8007a5a:	429e      	cmp	r6, r3
 8007a5c:	6841      	ldr	r1, [r0, #4]
 8007a5e:	d92f      	bls.n	8007ac0 <_dtoa_r+0x2d8>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f001 f913 	bl	8008c8c <_Balloc>
 8007a66:	9000      	str	r0, [sp, #0]
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d14b      	bne.n	8007b04 <_dtoa_r+0x31c>
 8007a6c:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <_dtoa_r+0x318>)
 8007a6e:	4602      	mov	r2, r0
 8007a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a74:	e6d1      	b.n	800781a <_dtoa_r+0x32>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e7de      	b.n	8007a38 <_dtoa_r+0x250>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a80:	eb0a 0903 	add.w	r9, sl, r3
 8007a84:	f109 0301 	add.w	r3, r9, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	bfb8      	it	lt
 8007a8e:	2301      	movlt	r3, #1
 8007a90:	e7dd      	b.n	8007a4e <_dtoa_r+0x266>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7f2      	b.n	8007a7c <_dtoa_r+0x294>
 8007a96:	2501      	movs	r5, #1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9305      	str	r3, [sp, #20]
 8007a9c:	9508      	str	r5, [sp, #32]
 8007a9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa8:	2312      	movs	r3, #18
 8007aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007aac:	e7cf      	b.n	8007a4e <_dtoa_r+0x266>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	9308      	str	r3, [sp, #32]
 8007ab2:	e7f4      	b.n	8007a9e <_dtoa_r+0x2b6>
 8007ab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007ab8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007abc:	464b      	mov	r3, r9
 8007abe:	e7c6      	b.n	8007a4e <_dtoa_r+0x266>
 8007ac0:	3101      	adds	r1, #1
 8007ac2:	6041      	str	r1, [r0, #4]
 8007ac4:	0052      	lsls	r2, r2, #1
 8007ac6:	e7c6      	b.n	8007a56 <_dtoa_r+0x26e>
 8007ac8:	636f4361 	.word	0x636f4361
 8007acc:	3fd287a7 	.word	0x3fd287a7
 8007ad0:	8b60c8b3 	.word	0x8b60c8b3
 8007ad4:	3fc68a28 	.word	0x3fc68a28
 8007ad8:	509f79fb 	.word	0x509f79fb
 8007adc:	3fd34413 	.word	0x3fd34413
 8007ae0:	0800a85e 	.word	0x0800a85e
 8007ae4:	0800a875 	.word	0x0800a875
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	0800a85a 	.word	0x0800a85a
 8007af0:	0800a851 	.word	0x0800a851
 8007af4:	0800a6d1 	.word	0x0800a6d1
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	0800a9f0 	.word	0x0800a9f0
 8007b00:	0800a8d4 	.word	0x0800a8d4
 8007b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b06:	9a00      	ldr	r2, [sp, #0]
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	2b0e      	cmp	r3, #14
 8007b0e:	f200 80ad 	bhi.w	8007c6c <_dtoa_r+0x484>
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	f000 80aa 	beq.w	8007c6c <_dtoa_r+0x484>
 8007b18:	f1ba 0f00 	cmp.w	sl, #0
 8007b1c:	dd36      	ble.n	8007b8c <_dtoa_r+0x3a4>
 8007b1e:	4ac3      	ldr	r2, [pc, #780]	; (8007e2c <_dtoa_r+0x644>)
 8007b20:	f00a 030f 	and.w	r3, sl, #15
 8007b24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b28:	ed93 7b00 	vldr	d7, [r3]
 8007b2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b34:	eeb0 8a47 	vmov.f32	s16, s14
 8007b38:	eef0 8a67 	vmov.f32	s17, s15
 8007b3c:	d016      	beq.n	8007b6c <_dtoa_r+0x384>
 8007b3e:	4bbc      	ldr	r3, [pc, #752]	; (8007e30 <_dtoa_r+0x648>)
 8007b40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b48:	f7f8 fe80 	bl	800084c <__aeabi_ddiv>
 8007b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b50:	f007 070f 	and.w	r7, r7, #15
 8007b54:	2503      	movs	r5, #3
 8007b56:	4eb6      	ldr	r6, [pc, #728]	; (8007e30 <_dtoa_r+0x648>)
 8007b58:	b957      	cbnz	r7, 8007b70 <_dtoa_r+0x388>
 8007b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5e:	ec53 2b18 	vmov	r2, r3, d8
 8007b62:	f7f8 fe73 	bl	800084c <__aeabi_ddiv>
 8007b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6a:	e029      	b.n	8007bc0 <_dtoa_r+0x3d8>
 8007b6c:	2502      	movs	r5, #2
 8007b6e:	e7f2      	b.n	8007b56 <_dtoa_r+0x36e>
 8007b70:	07f9      	lsls	r1, r7, #31
 8007b72:	d508      	bpl.n	8007b86 <_dtoa_r+0x39e>
 8007b74:	ec51 0b18 	vmov	r0, r1, d8
 8007b78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	ec41 0b18 	vmov	d8, r0, r1
 8007b84:	3501      	adds	r5, #1
 8007b86:	107f      	asrs	r7, r7, #1
 8007b88:	3608      	adds	r6, #8
 8007b8a:	e7e5      	b.n	8007b58 <_dtoa_r+0x370>
 8007b8c:	f000 80a6 	beq.w	8007cdc <_dtoa_r+0x4f4>
 8007b90:	f1ca 0600 	rsb	r6, sl, #0
 8007b94:	4ba5      	ldr	r3, [pc, #660]	; (8007e2c <_dtoa_r+0x644>)
 8007b96:	4fa6      	ldr	r7, [pc, #664]	; (8007e30 <_dtoa_r+0x648>)
 8007b98:	f006 020f 	and.w	r2, r6, #15
 8007b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ba8:	f7f8 fd26 	bl	80005f8 <__aeabi_dmul>
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	1136      	asrs	r6, r6, #4
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2502      	movs	r5, #2
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	f040 8085 	bne.w	8007cc6 <_dtoa_r+0x4de>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1d2      	bne.n	8007b66 <_dtoa_r+0x37e>
 8007bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 808c 	beq.w	8007ce0 <_dtoa_r+0x4f8>
 8007bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bcc:	4b99      	ldr	r3, [pc, #612]	; (8007e34 <_dtoa_r+0x64c>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ff82 	bl	8000adc <__aeabi_dcmplt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f000 8081 	beq.w	8007ce0 <_dtoa_r+0x4f8>
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d07d      	beq.n	8007ce0 <_dtoa_r+0x4f8>
 8007be4:	f1b9 0f00 	cmp.w	r9, #0
 8007be8:	dd3c      	ble.n	8007c64 <_dtoa_r+0x47c>
 8007bea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007bee:	9307      	str	r3, [sp, #28]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4b91      	ldr	r3, [pc, #580]	; (8007e38 <_dtoa_r+0x650>)
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8007bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c00:	3501      	adds	r5, #1
 8007c02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fc8a 	bl	8000524 <__aeabi_i2d>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	f7f8 fcf0 	bl	80005f8 <__aeabi_dmul>
 8007c18:	4b88      	ldr	r3, [pc, #544]	; (8007e3c <_dtoa_r+0x654>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7f8 fb36 	bl	800028c <__adddf3>
 8007c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d15c      	bne.n	8007cea <_dtoa_r+0x502>
 8007c30:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <_dtoa_r+0x658>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 fb26 	bl	8000288 <__aeabi_dsub>
 8007c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c40:	4606      	mov	r6, r0
 8007c42:	460f      	mov	r7, r1
 8007c44:	f7f8 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 8296 	bne.w	800817a <_dtoa_r+0x992>
 8007c4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c52:	4630      	mov	r0, r6
 8007c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f040 8288 	bne.w	8008174 <_dtoa_r+0x98c>
 8007c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f2c0 8158 	blt.w	8007f24 <_dtoa_r+0x73c>
 8007c74:	f1ba 0f0e 	cmp.w	sl, #14
 8007c78:	f300 8154 	bgt.w	8007f24 <_dtoa_r+0x73c>
 8007c7c:	4b6b      	ldr	r3, [pc, #428]	; (8007e2c <_dtoa_r+0x644>)
 8007c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f280 80e3 	bge.w	8007e54 <_dtoa_r+0x66c>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f300 80df 	bgt.w	8007e54 <_dtoa_r+0x66c>
 8007c96:	f040 826d 	bne.w	8008174 <_dtoa_r+0x98c>
 8007c9a:	4b69      	ldr	r3, [pc, #420]	; (8007e40 <_dtoa_r+0x658>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fca9 	bl	80005f8 <__aeabi_dmul>
 8007ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007caa:	f7f8 ff2b 	bl	8000b04 <__aeabi_dcmpge>
 8007cae:	9e01      	ldr	r6, [sp, #4]
 8007cb0:	4637      	mov	r7, r6
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f040 8243 	bne.w	800813e <_dtoa_r+0x956>
 8007cb8:	9d00      	ldr	r5, [sp, #0]
 8007cba:	2331      	movs	r3, #49	; 0x31
 8007cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8007cc0:	f10a 0a01 	add.w	sl, sl, #1
 8007cc4:	e23f      	b.n	8008146 <_dtoa_r+0x95e>
 8007cc6:	07f2      	lsls	r2, r6, #31
 8007cc8:	d505      	bpl.n	8007cd6 <_dtoa_r+0x4ee>
 8007cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cce:	f7f8 fc93 	bl	80005f8 <__aeabi_dmul>
 8007cd2:	3501      	adds	r5, #1
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	1076      	asrs	r6, r6, #1
 8007cd8:	3708      	adds	r7, #8
 8007cda:	e76c      	b.n	8007bb6 <_dtoa_r+0x3ce>
 8007cdc:	2502      	movs	r5, #2
 8007cde:	e76f      	b.n	8007bc0 <_dtoa_r+0x3d8>
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ce8:	e78d      	b.n	8007c06 <_dtoa_r+0x41e>
 8007cea:	9900      	ldr	r1, [sp, #0]
 8007cec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cf0:	4b4e      	ldr	r3, [pc, #312]	; (8007e2c <_dtoa_r+0x644>)
 8007cf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cf6:	4401      	add	r1, r0
 8007cf8:	9102      	str	r1, [sp, #8]
 8007cfa:	9908      	ldr	r1, [sp, #32]
 8007cfc:	eeb0 8a47 	vmov.f32	s16, s14
 8007d00:	eef0 8a67 	vmov.f32	s17, s15
 8007d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d045      	beq.n	8007d9c <_dtoa_r+0x5b4>
 8007d10:	494c      	ldr	r1, [pc, #304]	; (8007e44 <_dtoa_r+0x65c>)
 8007d12:	2000      	movs	r0, #0
 8007d14:	f7f8 fd9a 	bl	800084c <__aeabi_ddiv>
 8007d18:	ec53 2b18 	vmov	r2, r3, d8
 8007d1c:	f7f8 fab4 	bl	8000288 <__aeabi_dsub>
 8007d20:	9d00      	ldr	r5, [sp, #0]
 8007d22:	ec41 0b18 	vmov	d8, r0, r1
 8007d26:	4639      	mov	r1, r7
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7f8 ff15 	bl	8000b58 <__aeabi_d2iz>
 8007d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8007d30:	f7f8 fbf8 	bl	8000524 <__aeabi_i2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 faa4 	bl	8000288 <__aeabi_dsub>
 8007d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	f805 3b01 	strb.w	r3, [r5], #1
 8007d48:	ec53 2b18 	vmov	r2, r3, d8
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	f7f8 fec4 	bl	8000adc <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d165      	bne.n	8007e24 <_dtoa_r+0x63c>
 8007d58:	4632      	mov	r2, r6
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	4935      	ldr	r1, [pc, #212]	; (8007e34 <_dtoa_r+0x64c>)
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f7f8 fa92 	bl	8000288 <__aeabi_dsub>
 8007d64:	ec53 2b18 	vmov	r2, r3, d8
 8007d68:	f7f8 feb8 	bl	8000adc <__aeabi_dcmplt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f040 80b9 	bne.w	8007ee4 <_dtoa_r+0x6fc>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	429d      	cmp	r5, r3
 8007d76:	f43f af75 	beq.w	8007c64 <_dtoa_r+0x47c>
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <_dtoa_r+0x650>)
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	4b2c      	ldr	r3, [pc, #176]	; (8007e38 <_dtoa_r+0x650>)
 8007d88:	ec41 0b18 	vmov	d8, r0, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4630      	mov	r0, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 fc31 	bl	80005f8 <__aeabi_dmul>
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	e7c4      	b.n	8007d26 <_dtoa_r+0x53e>
 8007d9c:	ec51 0b17 	vmov	r0, r1, d7
 8007da0:	f7f8 fc2a 	bl	80005f8 <__aeabi_dmul>
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	9d00      	ldr	r5, [sp, #0]
 8007da8:	930c      	str	r3, [sp, #48]	; 0x30
 8007daa:	ec41 0b18 	vmov	d8, r0, r1
 8007dae:	4639      	mov	r1, r7
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7f8 fed1 	bl	8000b58 <__aeabi_d2iz>
 8007db6:	9011      	str	r0, [sp, #68]	; 0x44
 8007db8:	f7f8 fbb4 	bl	8000524 <__aeabi_i2d>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fa60 	bl	8000288 <__aeabi_dsub>
 8007dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dca:	3330      	adds	r3, #48	; 0x30
 8007dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	d134      	bne.n	8007e48 <_dtoa_r+0x660>
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <_dtoa_r+0x65c>)
 8007de0:	ec51 0b18 	vmov	r0, r1, d8
 8007de4:	f7f8 fa52 	bl	800028c <__adddf3>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fe92 	bl	8000b18 <__aeabi_dcmpgt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d175      	bne.n	8007ee4 <_dtoa_r+0x6fc>
 8007df8:	ec53 2b18 	vmov	r2, r3, d8
 8007dfc:	4911      	ldr	r1, [pc, #68]	; (8007e44 <_dtoa_r+0x65c>)
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f7f8 fa42 	bl	8000288 <__aeabi_dsub>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fe66 	bl	8000adc <__aeabi_dcmplt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f43f af27 	beq.w	8007c64 <_dtoa_r+0x47c>
 8007e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e18:	1e6b      	subs	r3, r5, #1
 8007e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e20:	2b30      	cmp	r3, #48	; 0x30
 8007e22:	d0f8      	beq.n	8007e16 <_dtoa_r+0x62e>
 8007e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e28:	e04a      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8007e2a:	bf00      	nop
 8007e2c:	0800a9f0 	.word	0x0800a9f0
 8007e30:	0800a9c8 	.word	0x0800a9c8
 8007e34:	3ff00000 	.word	0x3ff00000
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	401c0000 	.word	0x401c0000
 8007e40:	40140000 	.word	0x40140000
 8007e44:	3fe00000 	.word	0x3fe00000
 8007e48:	4baf      	ldr	r3, [pc, #700]	; (8008108 <_dtoa_r+0x920>)
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	e7ac      	b.n	8007dae <_dtoa_r+0x5c6>
 8007e54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e58:	9d00      	ldr	r5, [sp, #0]
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	4630      	mov	r0, r6
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fcf3 	bl	800084c <__aeabi_ddiv>
 8007e66:	f7f8 fe77 	bl	8000b58 <__aeabi_d2iz>
 8007e6a:	9002      	str	r0, [sp, #8]
 8007e6c:	f7f8 fb5a 	bl	8000524 <__aeabi_i2d>
 8007e70:	4642      	mov	r2, r8
 8007e72:	464b      	mov	r3, r9
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fa02 	bl	8000288 <__aeabi_dsub>
 8007e84:	9e02      	ldr	r6, [sp, #8]
 8007e86:	9f01      	ldr	r7, [sp, #4]
 8007e88:	3630      	adds	r6, #48	; 0x30
 8007e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e8e:	9e00      	ldr	r6, [sp, #0]
 8007e90:	1bae      	subs	r6, r5, r6
 8007e92:	42b7      	cmp	r7, r6
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	d137      	bne.n	8007f0a <_dtoa_r+0x722>
 8007e9a:	f7f8 f9f7 	bl	800028c <__adddf3>
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	f7f8 fe37 	bl	8000b18 <__aeabi_dcmpgt>
 8007eaa:	b9c8      	cbnz	r0, 8007ee0 <_dtoa_r+0x6f8>
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eb8:	b110      	cbz	r0, 8007ec0 <_dtoa_r+0x6d8>
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	d40f      	bmi.n	8007ee0 <_dtoa_r+0x6f8>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f000 ff22 	bl	8008d0c <_Bfree>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	702b      	strb	r3, [r5, #0]
 8007ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ece:	f10a 0001 	add.w	r0, sl, #1
 8007ed2:	6018      	str	r0, [r3, #0]
 8007ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f43f acd8 	beq.w	800788c <_dtoa_r+0xa4>
 8007edc:	601d      	str	r5, [r3, #0]
 8007ede:	e4d5      	b.n	800788c <_dtoa_r+0xa4>
 8007ee0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eec:	2a39      	cmp	r2, #57	; 0x39
 8007eee:	d108      	bne.n	8007f02 <_dtoa_r+0x71a>
 8007ef0:	9a00      	ldr	r2, [sp, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d1f7      	bne.n	8007ee6 <_dtoa_r+0x6fe>
 8007ef6:	9a07      	ldr	r2, [sp, #28]
 8007ef8:	9900      	ldr	r1, [sp, #0]
 8007efa:	3201      	adds	r2, #1
 8007efc:	9207      	str	r2, [sp, #28]
 8007efe:	2230      	movs	r2, #48	; 0x30
 8007f00:	700a      	strb	r2, [r1, #0]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	3201      	adds	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e78c      	b.n	8007e24 <_dtoa_r+0x63c>
 8007f0a:	4b7f      	ldr	r3, [pc, #508]	; (8008108 <_dtoa_r+0x920>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f7f8 fb73 	bl	80005f8 <__aeabi_dmul>
 8007f12:	2200      	movs	r2, #0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	f7f8 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d09b      	beq.n	8007e5a <_dtoa_r+0x672>
 8007f22:	e7cd      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8007f24:	9a08      	ldr	r2, [sp, #32]
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	f000 80c4 	beq.w	80080b4 <_dtoa_r+0x8cc>
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	2a01      	cmp	r2, #1
 8007f30:	f300 80a8 	bgt.w	8008084 <_dtoa_r+0x89c>
 8007f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	f000 80a0 	beq.w	800807c <_dtoa_r+0x894>
 8007f3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f40:	9e06      	ldr	r6, [sp, #24]
 8007f42:	4645      	mov	r5, r8
 8007f44:	9a04      	ldr	r2, [sp, #16]
 8007f46:	2101      	movs	r1, #1
 8007f48:	441a      	add	r2, r3
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4498      	add	r8, r3
 8007f4e:	9204      	str	r2, [sp, #16]
 8007f50:	f000 ffe2 	bl	8008f18 <__i2b>
 8007f54:	4607      	mov	r7, r0
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	dd0b      	ble.n	8007f72 <_dtoa_r+0x78a>
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd08      	ble.n	8007f72 <_dtoa_r+0x78a>
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	bfa8      	it	ge
 8007f66:	462b      	movge	r3, r5
 8007f68:	eba8 0803 	sub.w	r8, r8, r3
 8007f6c:	1aed      	subs	r5, r5, r3
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	b1fb      	cbz	r3, 8007fb6 <_dtoa_r+0x7ce>
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 809f 	beq.w	80080bc <_dtoa_r+0x8d4>
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	dd11      	ble.n	8007fa6 <_dtoa_r+0x7be>
 8007f82:	4639      	mov	r1, r7
 8007f84:	4632      	mov	r2, r6
 8007f86:	4620      	mov	r0, r4
 8007f88:	f001 f882 	bl	8009090 <__pow5mult>
 8007f8c:	465a      	mov	r2, fp
 8007f8e:	4601      	mov	r1, r0
 8007f90:	4607      	mov	r7, r0
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 ffd6 	bl	8008f44 <__multiply>
 8007f98:	4659      	mov	r1, fp
 8007f9a:	9007      	str	r0, [sp, #28]
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 feb5 	bl	8008d0c <_Bfree>
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	469b      	mov	fp, r3
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	1b9a      	subs	r2, r3, r6
 8007faa:	d004      	beq.n	8007fb6 <_dtoa_r+0x7ce>
 8007fac:	4659      	mov	r1, fp
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f001 f86e 	bl	8009090 <__pow5mult>
 8007fb4:	4683      	mov	fp, r0
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 ffad 	bl	8008f18 <__i2b>
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	dd7c      	ble.n	80080c0 <_dtoa_r+0x8d8>
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4601      	mov	r1, r0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f001 f860 	bl	8009090 <__pow5mult>
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	dd76      	ble.n	80080c6 <_dtoa_r+0x8de>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9306      	str	r3, [sp, #24]
 8007fdc:	6933      	ldr	r3, [r6, #16]
 8007fde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fe2:	6918      	ldr	r0, [r3, #16]
 8007fe4:	f000 ff48 	bl	8008e78 <__hi0bits>
 8007fe8:	f1c0 0020 	rsb	r0, r0, #32
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	4418      	add	r0, r3
 8007ff0:	f010 001f 	ands.w	r0, r0, #31
 8007ff4:	f000 8086 	beq.w	8008104 <_dtoa_r+0x91c>
 8007ff8:	f1c0 0320 	rsb	r3, r0, #32
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	dd7f      	ble.n	8008100 <_dtoa_r+0x918>
 8008000:	f1c0 001c 	rsb	r0, r0, #28
 8008004:	9b04      	ldr	r3, [sp, #16]
 8008006:	4403      	add	r3, r0
 8008008:	4480      	add	r8, r0
 800800a:	4405      	add	r5, r0
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	dd05      	ble.n	8008020 <_dtoa_r+0x838>
 8008014:	4659      	mov	r1, fp
 8008016:	4642      	mov	r2, r8
 8008018:	4620      	mov	r0, r4
 800801a:	f001 f893 	bl	8009144 <__lshift>
 800801e:	4683      	mov	fp, r0
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd05      	ble.n	8008032 <_dtoa_r+0x84a>
 8008026:	4631      	mov	r1, r6
 8008028:	461a      	mov	r2, r3
 800802a:	4620      	mov	r0, r4
 800802c:	f001 f88a 	bl	8009144 <__lshift>
 8008030:	4606      	mov	r6, r0
 8008032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008034:	2b00      	cmp	r3, #0
 8008036:	d069      	beq.n	800810c <_dtoa_r+0x924>
 8008038:	4631      	mov	r1, r6
 800803a:	4658      	mov	r0, fp
 800803c:	f001 f8ee 	bl	800921c <__mcmp>
 8008040:	2800      	cmp	r0, #0
 8008042:	da63      	bge.n	800810c <_dtoa_r+0x924>
 8008044:	2300      	movs	r3, #0
 8008046:	4659      	mov	r1, fp
 8008048:	220a      	movs	r2, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f000 fe80 	bl	8008d50 <__multadd>
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008056:	4683      	mov	fp, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 818f 	beq.w	800837c <_dtoa_r+0xb94>
 800805e:	4639      	mov	r1, r7
 8008060:	2300      	movs	r3, #0
 8008062:	220a      	movs	r2, #10
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fe73 	bl	8008d50 <__multadd>
 800806a:	f1b9 0f00 	cmp.w	r9, #0
 800806e:	4607      	mov	r7, r0
 8008070:	f300 808e 	bgt.w	8008190 <_dtoa_r+0x9a8>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	2b02      	cmp	r3, #2
 8008078:	dc50      	bgt.n	800811c <_dtoa_r+0x934>
 800807a:	e089      	b.n	8008190 <_dtoa_r+0x9a8>
 800807c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800807e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008082:	e75d      	b.n	8007f40 <_dtoa_r+0x758>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	1e5e      	subs	r6, r3, #1
 8008088:	9b06      	ldr	r3, [sp, #24]
 800808a:	42b3      	cmp	r3, r6
 800808c:	bfbf      	itttt	lt
 800808e:	9b06      	ldrlt	r3, [sp, #24]
 8008090:	9606      	strlt	r6, [sp, #24]
 8008092:	1af2      	sublt	r2, r6, r3
 8008094:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008096:	bfb6      	itet	lt
 8008098:	189b      	addlt	r3, r3, r2
 800809a:	1b9e      	subge	r6, r3, r6
 800809c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	bfb8      	it	lt
 80080a2:	2600      	movlt	r6, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfb5      	itete	lt
 80080a8:	eba8 0503 	sublt.w	r5, r8, r3
 80080ac:	9b01      	ldrge	r3, [sp, #4]
 80080ae:	2300      	movlt	r3, #0
 80080b0:	4645      	movge	r5, r8
 80080b2:	e747      	b.n	8007f44 <_dtoa_r+0x75c>
 80080b4:	9e06      	ldr	r6, [sp, #24]
 80080b6:	9f08      	ldr	r7, [sp, #32]
 80080b8:	4645      	mov	r5, r8
 80080ba:	e74c      	b.n	8007f56 <_dtoa_r+0x76e>
 80080bc:	9a06      	ldr	r2, [sp, #24]
 80080be:	e775      	b.n	8007fac <_dtoa_r+0x7c4>
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	dc18      	bgt.n	80080f8 <_dtoa_r+0x910>
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	b9b3      	cbnz	r3, 80080f8 <_dtoa_r+0x910>
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d0:	b9a3      	cbnz	r3, 80080fc <_dtoa_r+0x914>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	0d1b      	lsrs	r3, r3, #20
 80080da:	051b      	lsls	r3, r3, #20
 80080dc:	b12b      	cbz	r3, 80080ea <_dtoa_r+0x902>
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	3301      	adds	r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f108 0801 	add.w	r8, r8, #1
 80080e8:	2301      	movs	r3, #1
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f47f af74 	bne.w	8007fdc <_dtoa_r+0x7f4>
 80080f4:	2001      	movs	r0, #1
 80080f6:	e779      	b.n	8007fec <_dtoa_r+0x804>
 80080f8:	2300      	movs	r3, #0
 80080fa:	e7f6      	b.n	80080ea <_dtoa_r+0x902>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	e7f4      	b.n	80080ea <_dtoa_r+0x902>
 8008100:	d085      	beq.n	800800e <_dtoa_r+0x826>
 8008102:	4618      	mov	r0, r3
 8008104:	301c      	adds	r0, #28
 8008106:	e77d      	b.n	8008004 <_dtoa_r+0x81c>
 8008108:	40240000 	.word	0x40240000
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc38      	bgt.n	8008184 <_dtoa_r+0x99c>
 8008112:	9b05      	ldr	r3, [sp, #20]
 8008114:	2b02      	cmp	r3, #2
 8008116:	dd35      	ble.n	8008184 <_dtoa_r+0x99c>
 8008118:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d10d      	bne.n	800813e <_dtoa_r+0x956>
 8008122:	4631      	mov	r1, r6
 8008124:	464b      	mov	r3, r9
 8008126:	2205      	movs	r2, #5
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fe11 	bl	8008d50 <__multadd>
 800812e:	4601      	mov	r1, r0
 8008130:	4606      	mov	r6, r0
 8008132:	4658      	mov	r0, fp
 8008134:	f001 f872 	bl	800921c <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	f73f adbd 	bgt.w	8007cb8 <_dtoa_r+0x4d0>
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	9d00      	ldr	r5, [sp, #0]
 8008142:	ea6f 0a03 	mvn.w	sl, r3
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	4631      	mov	r1, r6
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fddd 	bl	8008d0c <_Bfree>
 8008152:	2f00      	cmp	r7, #0
 8008154:	f43f aeb4 	beq.w	8007ec0 <_dtoa_r+0x6d8>
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d005      	beq.n	800816a <_dtoa_r+0x982>
 800815e:	45b8      	cmp	r8, r7
 8008160:	d003      	beq.n	800816a <_dtoa_r+0x982>
 8008162:	4641      	mov	r1, r8
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fdd1 	bl	8008d0c <_Bfree>
 800816a:	4639      	mov	r1, r7
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fdcd 	bl	8008d0c <_Bfree>
 8008172:	e6a5      	b.n	8007ec0 <_dtoa_r+0x6d8>
 8008174:	2600      	movs	r6, #0
 8008176:	4637      	mov	r7, r6
 8008178:	e7e1      	b.n	800813e <_dtoa_r+0x956>
 800817a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800817c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008180:	4637      	mov	r7, r6
 8008182:	e599      	b.n	8007cb8 <_dtoa_r+0x4d0>
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80fd 	beq.w	800838a <_dtoa_r+0xba2>
 8008190:	2d00      	cmp	r5, #0
 8008192:	dd05      	ble.n	80081a0 <_dtoa_r+0x9b8>
 8008194:	4639      	mov	r1, r7
 8008196:	462a      	mov	r2, r5
 8008198:	4620      	mov	r0, r4
 800819a:	f000 ffd3 	bl	8009144 <__lshift>
 800819e:	4607      	mov	r7, r0
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d05c      	beq.n	8008260 <_dtoa_r+0xa78>
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fd6f 	bl	8008c8c <_Balloc>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b928      	cbnz	r0, 80081be <_dtoa_r+0x9d6>
 80081b2:	4b80      	ldr	r3, [pc, #512]	; (80083b4 <_dtoa_r+0xbcc>)
 80081b4:	4602      	mov	r2, r0
 80081b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081ba:	f7ff bb2e 	b.w	800781a <_dtoa_r+0x32>
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	3202      	adds	r2, #2
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	f107 010c 	add.w	r1, r7, #12
 80081c8:	300c      	adds	r0, #12
 80081ca:	f7fd fb77 	bl	80058bc <memcpy>
 80081ce:	2201      	movs	r2, #1
 80081d0:	4629      	mov	r1, r5
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 ffb6 	bl	8009144 <__lshift>
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	444b      	add	r3, r9
 80081e2:	9307      	str	r3, [sp, #28]
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	46b8      	mov	r8, r7
 80081ec:	9306      	str	r3, [sp, #24]
 80081ee:	4607      	mov	r7, r0
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	4631      	mov	r1, r6
 80081f4:	3b01      	subs	r3, #1
 80081f6:	4658      	mov	r0, fp
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f7ff fa69 	bl	80076d0 <quorem>
 80081fe:	4603      	mov	r3, r0
 8008200:	3330      	adds	r3, #48	; 0x30
 8008202:	9004      	str	r0, [sp, #16]
 8008204:	4641      	mov	r1, r8
 8008206:	4658      	mov	r0, fp
 8008208:	9308      	str	r3, [sp, #32]
 800820a:	f001 f807 	bl	800921c <__mcmp>
 800820e:	463a      	mov	r2, r7
 8008210:	4681      	mov	r9, r0
 8008212:	4631      	mov	r1, r6
 8008214:	4620      	mov	r0, r4
 8008216:	f001 f81d 	bl	8009254 <__mdiff>
 800821a:	68c2      	ldr	r2, [r0, #12]
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	4605      	mov	r5, r0
 8008220:	bb02      	cbnz	r2, 8008264 <_dtoa_r+0xa7c>
 8008222:	4601      	mov	r1, r0
 8008224:	4658      	mov	r0, fp
 8008226:	f000 fff9 	bl	800921c <__mcmp>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	4602      	mov	r2, r0
 800822e:	4629      	mov	r1, r5
 8008230:	4620      	mov	r0, r4
 8008232:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008236:	f000 fd69 	bl	8008d0c <_Bfree>
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823e:	9d01      	ldr	r5, [sp, #4]
 8008240:	ea43 0102 	orr.w	r1, r3, r2
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	430b      	orrs	r3, r1
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	d10d      	bne.n	8008268 <_dtoa_r+0xa80>
 800824c:	2b39      	cmp	r3, #57	; 0x39
 800824e:	d029      	beq.n	80082a4 <_dtoa_r+0xabc>
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	dd01      	ble.n	800825a <_dtoa_r+0xa72>
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3331      	adds	r3, #49	; 0x31
 800825a:	9a02      	ldr	r2, [sp, #8]
 800825c:	7013      	strb	r3, [r2, #0]
 800825e:	e774      	b.n	800814a <_dtoa_r+0x962>
 8008260:	4638      	mov	r0, r7
 8008262:	e7b9      	b.n	80081d8 <_dtoa_r+0x9f0>
 8008264:	2201      	movs	r2, #1
 8008266:	e7e2      	b.n	800822e <_dtoa_r+0xa46>
 8008268:	f1b9 0f00 	cmp.w	r9, #0
 800826c:	db06      	blt.n	800827c <_dtoa_r+0xa94>
 800826e:	9905      	ldr	r1, [sp, #20]
 8008270:	ea41 0909 	orr.w	r9, r1, r9
 8008274:	9906      	ldr	r1, [sp, #24]
 8008276:	ea59 0101 	orrs.w	r1, r9, r1
 800827a:	d120      	bne.n	80082be <_dtoa_r+0xad6>
 800827c:	2a00      	cmp	r2, #0
 800827e:	ddec      	ble.n	800825a <_dtoa_r+0xa72>
 8008280:	4659      	mov	r1, fp
 8008282:	2201      	movs	r2, #1
 8008284:	4620      	mov	r0, r4
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f000 ff5c 	bl	8009144 <__lshift>
 800828c:	4631      	mov	r1, r6
 800828e:	4683      	mov	fp, r0
 8008290:	f000 ffc4 	bl	800921c <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	dc02      	bgt.n	80082a0 <_dtoa_r+0xab8>
 800829a:	d1de      	bne.n	800825a <_dtoa_r+0xa72>
 800829c:	07da      	lsls	r2, r3, #31
 800829e:	d5dc      	bpl.n	800825a <_dtoa_r+0xa72>
 80082a0:	2b39      	cmp	r3, #57	; 0x39
 80082a2:	d1d8      	bne.n	8008256 <_dtoa_r+0xa6e>
 80082a4:	9a02      	ldr	r2, [sp, #8]
 80082a6:	2339      	movs	r3, #57	; 0x39
 80082a8:	7013      	strb	r3, [r2, #0]
 80082aa:	462b      	mov	r3, r5
 80082ac:	461d      	mov	r5, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082b4:	2a39      	cmp	r2, #57	; 0x39
 80082b6:	d050      	beq.n	800835a <_dtoa_r+0xb72>
 80082b8:	3201      	adds	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e745      	b.n	800814a <_dtoa_r+0x962>
 80082be:	2a00      	cmp	r2, #0
 80082c0:	dd03      	ble.n	80082ca <_dtoa_r+0xae2>
 80082c2:	2b39      	cmp	r3, #57	; 0x39
 80082c4:	d0ee      	beq.n	80082a4 <_dtoa_r+0xabc>
 80082c6:	3301      	adds	r3, #1
 80082c8:	e7c7      	b.n	800825a <_dtoa_r+0xa72>
 80082ca:	9a01      	ldr	r2, [sp, #4]
 80082cc:	9907      	ldr	r1, [sp, #28]
 80082ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082d2:	428a      	cmp	r2, r1
 80082d4:	d02a      	beq.n	800832c <_dtoa_r+0xb44>
 80082d6:	4659      	mov	r1, fp
 80082d8:	2300      	movs	r3, #0
 80082da:	220a      	movs	r2, #10
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fd37 	bl	8008d50 <__multadd>
 80082e2:	45b8      	cmp	r8, r7
 80082e4:	4683      	mov	fp, r0
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	f04f 020a 	mov.w	r2, #10
 80082ee:	4641      	mov	r1, r8
 80082f0:	4620      	mov	r0, r4
 80082f2:	d107      	bne.n	8008304 <_dtoa_r+0xb1c>
 80082f4:	f000 fd2c 	bl	8008d50 <__multadd>
 80082f8:	4680      	mov	r8, r0
 80082fa:	4607      	mov	r7, r0
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	3301      	adds	r3, #1
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	e775      	b.n	80081f0 <_dtoa_r+0xa08>
 8008304:	f000 fd24 	bl	8008d50 <__multadd>
 8008308:	4639      	mov	r1, r7
 800830a:	4680      	mov	r8, r0
 800830c:	2300      	movs	r3, #0
 800830e:	220a      	movs	r2, #10
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fd1d 	bl	8008d50 <__multadd>
 8008316:	4607      	mov	r7, r0
 8008318:	e7f0      	b.n	80082fc <_dtoa_r+0xb14>
 800831a:	f1b9 0f00 	cmp.w	r9, #0
 800831e:	9a00      	ldr	r2, [sp, #0]
 8008320:	bfcc      	ite	gt
 8008322:	464d      	movgt	r5, r9
 8008324:	2501      	movle	r5, #1
 8008326:	4415      	add	r5, r2
 8008328:	f04f 0800 	mov.w	r8, #0
 800832c:	4659      	mov	r1, fp
 800832e:	2201      	movs	r2, #1
 8008330:	4620      	mov	r0, r4
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	f000 ff06 	bl	8009144 <__lshift>
 8008338:	4631      	mov	r1, r6
 800833a:	4683      	mov	fp, r0
 800833c:	f000 ff6e 	bl	800921c <__mcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	dcb2      	bgt.n	80082aa <_dtoa_r+0xac2>
 8008344:	d102      	bne.n	800834c <_dtoa_r+0xb64>
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	07db      	lsls	r3, r3, #31
 800834a:	d4ae      	bmi.n	80082aa <_dtoa_r+0xac2>
 800834c:	462b      	mov	r3, r5
 800834e:	461d      	mov	r5, r3
 8008350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008354:	2a30      	cmp	r2, #48	; 0x30
 8008356:	d0fa      	beq.n	800834e <_dtoa_r+0xb66>
 8008358:	e6f7      	b.n	800814a <_dtoa_r+0x962>
 800835a:	9a00      	ldr	r2, [sp, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d1a5      	bne.n	80082ac <_dtoa_r+0xac4>
 8008360:	f10a 0a01 	add.w	sl, sl, #1
 8008364:	2331      	movs	r3, #49	; 0x31
 8008366:	e779      	b.n	800825c <_dtoa_r+0xa74>
 8008368:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <_dtoa_r+0xbd0>)
 800836a:	f7ff baaf 	b.w	80078cc <_dtoa_r+0xe4>
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f aa86 	bne.w	8007882 <_dtoa_r+0x9a>
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <_dtoa_r+0xbd4>)
 8008378:	f7ff baa8 	b.w	80078cc <_dtoa_r+0xe4>
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	dc03      	bgt.n	800838a <_dtoa_r+0xba2>
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	2b02      	cmp	r3, #2
 8008386:	f73f aec9 	bgt.w	800811c <_dtoa_r+0x934>
 800838a:	9d00      	ldr	r5, [sp, #0]
 800838c:	4631      	mov	r1, r6
 800838e:	4658      	mov	r0, fp
 8008390:	f7ff f99e 	bl	80076d0 <quorem>
 8008394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008398:	f805 3b01 	strb.w	r3, [r5], #1
 800839c:	9a00      	ldr	r2, [sp, #0]
 800839e:	1aaa      	subs	r2, r5, r2
 80083a0:	4591      	cmp	r9, r2
 80083a2:	ddba      	ble.n	800831a <_dtoa_r+0xb32>
 80083a4:	4659      	mov	r1, fp
 80083a6:	2300      	movs	r3, #0
 80083a8:	220a      	movs	r2, #10
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fcd0 	bl	8008d50 <__multadd>
 80083b0:	4683      	mov	fp, r0
 80083b2:	e7eb      	b.n	800838c <_dtoa_r+0xba4>
 80083b4:	0800a8d4 	.word	0x0800a8d4
 80083b8:	0800a6d0 	.word	0x0800a6d0
 80083bc:	0800a851 	.word	0x0800a851

080083c0 <__sflush_r>:
 80083c0:	898a      	ldrh	r2, [r1, #12]
 80083c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	4605      	mov	r5, r0
 80083c8:	0710      	lsls	r0, r2, #28
 80083ca:	460c      	mov	r4, r1
 80083cc:	d458      	bmi.n	8008480 <__sflush_r+0xc0>
 80083ce:	684b      	ldr	r3, [r1, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	dc05      	bgt.n	80083e0 <__sflush_r+0x20>
 80083d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dc02      	bgt.n	80083e0 <__sflush_r+0x20>
 80083da:	2000      	movs	r0, #0
 80083dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d0f9      	beq.n	80083da <__sflush_r+0x1a>
 80083e6:	2300      	movs	r3, #0
 80083e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083ec:	682f      	ldr	r7, [r5, #0]
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	d032      	beq.n	8008458 <__sflush_r+0x98>
 80083f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	075a      	lsls	r2, r3, #29
 80083f8:	d505      	bpl.n	8008406 <__sflush_r+0x46>
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	1ac0      	subs	r0, r0, r3
 80083fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008400:	b10b      	cbz	r3, 8008406 <__sflush_r+0x46>
 8008402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008404:	1ac0      	subs	r0, r0, r3
 8008406:	2300      	movs	r3, #0
 8008408:	4602      	mov	r2, r0
 800840a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800840c:	6a21      	ldr	r1, [r4, #32]
 800840e:	4628      	mov	r0, r5
 8008410:	47b0      	blx	r6
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	d106      	bne.n	8008426 <__sflush_r+0x66>
 8008418:	6829      	ldr	r1, [r5, #0]
 800841a:	291d      	cmp	r1, #29
 800841c:	d82c      	bhi.n	8008478 <__sflush_r+0xb8>
 800841e:	4a2a      	ldr	r2, [pc, #168]	; (80084c8 <__sflush_r+0x108>)
 8008420:	40ca      	lsrs	r2, r1
 8008422:	07d6      	lsls	r6, r2, #31
 8008424:	d528      	bpl.n	8008478 <__sflush_r+0xb8>
 8008426:	2200      	movs	r2, #0
 8008428:	6062      	str	r2, [r4, #4]
 800842a:	04d9      	lsls	r1, r3, #19
 800842c:	6922      	ldr	r2, [r4, #16]
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	d504      	bpl.n	800843c <__sflush_r+0x7c>
 8008432:	1c42      	adds	r2, r0, #1
 8008434:	d101      	bne.n	800843a <__sflush_r+0x7a>
 8008436:	682b      	ldr	r3, [r5, #0]
 8008438:	b903      	cbnz	r3, 800843c <__sflush_r+0x7c>
 800843a:	6560      	str	r0, [r4, #84]	; 0x54
 800843c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800843e:	602f      	str	r7, [r5, #0]
 8008440:	2900      	cmp	r1, #0
 8008442:	d0ca      	beq.n	80083da <__sflush_r+0x1a>
 8008444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008448:	4299      	cmp	r1, r3
 800844a:	d002      	beq.n	8008452 <__sflush_r+0x92>
 800844c:	4628      	mov	r0, r5
 800844e:	f7fd fa4b 	bl	80058e8 <_free_r>
 8008452:	2000      	movs	r0, #0
 8008454:	6360      	str	r0, [r4, #52]	; 0x34
 8008456:	e7c1      	b.n	80083dc <__sflush_r+0x1c>
 8008458:	6a21      	ldr	r1, [r4, #32]
 800845a:	2301      	movs	r3, #1
 800845c:	4628      	mov	r0, r5
 800845e:	47b0      	blx	r6
 8008460:	1c41      	adds	r1, r0, #1
 8008462:	d1c7      	bne.n	80083f4 <__sflush_r+0x34>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0c4      	beq.n	80083f4 <__sflush_r+0x34>
 800846a:	2b1d      	cmp	r3, #29
 800846c:	d001      	beq.n	8008472 <__sflush_r+0xb2>
 800846e:	2b16      	cmp	r3, #22
 8008470:	d101      	bne.n	8008476 <__sflush_r+0xb6>
 8008472:	602f      	str	r7, [r5, #0]
 8008474:	e7b1      	b.n	80083da <__sflush_r+0x1a>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	e7ad      	b.n	80083dc <__sflush_r+0x1c>
 8008480:	690f      	ldr	r7, [r1, #16]
 8008482:	2f00      	cmp	r7, #0
 8008484:	d0a9      	beq.n	80083da <__sflush_r+0x1a>
 8008486:	0793      	lsls	r3, r2, #30
 8008488:	680e      	ldr	r6, [r1, #0]
 800848a:	bf08      	it	eq
 800848c:	694b      	ldreq	r3, [r1, #20]
 800848e:	600f      	str	r7, [r1, #0]
 8008490:	bf18      	it	ne
 8008492:	2300      	movne	r3, #0
 8008494:	eba6 0807 	sub.w	r8, r6, r7
 8008498:	608b      	str	r3, [r1, #8]
 800849a:	f1b8 0f00 	cmp.w	r8, #0
 800849e:	dd9c      	ble.n	80083da <__sflush_r+0x1a>
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084a4:	4643      	mov	r3, r8
 80084a6:	463a      	mov	r2, r7
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b0      	blx	r6
 80084ac:	2800      	cmp	r0, #0
 80084ae:	dc06      	bgt.n	80084be <__sflush_r+0xfe>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084bc:	e78e      	b.n	80083dc <__sflush_r+0x1c>
 80084be:	4407      	add	r7, r0
 80084c0:	eba8 0800 	sub.w	r8, r8, r0
 80084c4:	e7e9      	b.n	800849a <__sflush_r+0xda>
 80084c6:	bf00      	nop
 80084c8:	20400001 	.word	0x20400001

080084cc <_fflush_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	690b      	ldr	r3, [r1, #16]
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b913      	cbnz	r3, 80084dc <_fflush_r+0x10>
 80084d6:	2500      	movs	r5, #0
 80084d8:	4628      	mov	r0, r5
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	b118      	cbz	r0, 80084e6 <_fflush_r+0x1a>
 80084de:	6983      	ldr	r3, [r0, #24]
 80084e0:	b90b      	cbnz	r3, 80084e6 <_fflush_r+0x1a>
 80084e2:	f7fd f921 	bl	8005728 <__sinit>
 80084e6:	4b14      	ldr	r3, [pc, #80]	; (8008538 <_fflush_r+0x6c>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	d11b      	bne.n	8008524 <_fflush_r+0x58>
 80084ec:	686c      	ldr	r4, [r5, #4]
 80084ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0ef      	beq.n	80084d6 <_fflush_r+0xa>
 80084f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084f8:	07d0      	lsls	r0, r2, #31
 80084fa:	d404      	bmi.n	8008506 <_fflush_r+0x3a>
 80084fc:	0599      	lsls	r1, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_fflush_r+0x3a>
 8008500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008502:	f7f9 fce2 	bl	8001eca <__retarget_lock_acquire_recursive>
 8008506:	4628      	mov	r0, r5
 8008508:	4621      	mov	r1, r4
 800850a:	f7ff ff59 	bl	80083c0 <__sflush_r>
 800850e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008510:	07da      	lsls	r2, r3, #31
 8008512:	4605      	mov	r5, r0
 8008514:	d4e0      	bmi.n	80084d8 <_fflush_r+0xc>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	059b      	lsls	r3, r3, #22
 800851a:	d4dd      	bmi.n	80084d8 <_fflush_r+0xc>
 800851c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851e:	f7f9 fce8 	bl	8001ef2 <__retarget_lock_release_recursive>
 8008522:	e7d9      	b.n	80084d8 <_fflush_r+0xc>
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <_fflush_r+0x70>)
 8008526:	429c      	cmp	r4, r3
 8008528:	d101      	bne.n	800852e <_fflush_r+0x62>
 800852a:	68ac      	ldr	r4, [r5, #8]
 800852c:	e7df      	b.n	80084ee <_fflush_r+0x22>
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <_fflush_r+0x74>)
 8008530:	429c      	cmp	r4, r3
 8008532:	bf08      	it	eq
 8008534:	68ec      	ldreq	r4, [r5, #12]
 8008536:	e7da      	b.n	80084ee <_fflush_r+0x22>
 8008538:	0800a67c 	.word	0x0800a67c
 800853c:	0800a69c 	.word	0x0800a69c
 8008540:	0800a65c 	.word	0x0800a65c

08008544 <rshift>:
 8008544:	6903      	ldr	r3, [r0, #16]
 8008546:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800854a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800854e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008552:	f100 0414 	add.w	r4, r0, #20
 8008556:	dd45      	ble.n	80085e4 <rshift+0xa0>
 8008558:	f011 011f 	ands.w	r1, r1, #31
 800855c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008560:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008564:	d10c      	bne.n	8008580 <rshift+0x3c>
 8008566:	f100 0710 	add.w	r7, r0, #16
 800856a:	4629      	mov	r1, r5
 800856c:	42b1      	cmp	r1, r6
 800856e:	d334      	bcc.n	80085da <rshift+0x96>
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	1eea      	subs	r2, r5, #3
 8008576:	4296      	cmp	r6, r2
 8008578:	bf38      	it	cc
 800857a:	2300      	movcc	r3, #0
 800857c:	4423      	add	r3, r4
 800857e:	e015      	b.n	80085ac <rshift+0x68>
 8008580:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008584:	f1c1 0820 	rsb	r8, r1, #32
 8008588:	40cf      	lsrs	r7, r1
 800858a:	f105 0e04 	add.w	lr, r5, #4
 800858e:	46a1      	mov	r9, r4
 8008590:	4576      	cmp	r6, lr
 8008592:	46f4      	mov	ip, lr
 8008594:	d815      	bhi.n	80085c2 <rshift+0x7e>
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	009a      	lsls	r2, r3, #2
 800859a:	3a04      	subs	r2, #4
 800859c:	3501      	adds	r5, #1
 800859e:	42ae      	cmp	r6, r5
 80085a0:	bf38      	it	cc
 80085a2:	2200      	movcc	r2, #0
 80085a4:	18a3      	adds	r3, r4, r2
 80085a6:	50a7      	str	r7, [r4, r2]
 80085a8:	b107      	cbz	r7, 80085ac <rshift+0x68>
 80085aa:	3304      	adds	r3, #4
 80085ac:	1b1a      	subs	r2, r3, r4
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085b4:	bf08      	it	eq
 80085b6:	2300      	moveq	r3, #0
 80085b8:	6102      	str	r2, [r0, #16]
 80085ba:	bf08      	it	eq
 80085bc:	6143      	streq	r3, [r0, #20]
 80085be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085c2:	f8dc c000 	ldr.w	ip, [ip]
 80085c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80085ca:	ea4c 0707 	orr.w	r7, ip, r7
 80085ce:	f849 7b04 	str.w	r7, [r9], #4
 80085d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085d6:	40cf      	lsrs	r7, r1
 80085d8:	e7da      	b.n	8008590 <rshift+0x4c>
 80085da:	f851 cb04 	ldr.w	ip, [r1], #4
 80085de:	f847 cf04 	str.w	ip, [r7, #4]!
 80085e2:	e7c3      	b.n	800856c <rshift+0x28>
 80085e4:	4623      	mov	r3, r4
 80085e6:	e7e1      	b.n	80085ac <rshift+0x68>

080085e8 <__hexdig_fun>:
 80085e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d802      	bhi.n	80085f6 <__hexdig_fun+0xe>
 80085f0:	3820      	subs	r0, #32
 80085f2:	b2c0      	uxtb	r0, r0
 80085f4:	4770      	bx	lr
 80085f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d801      	bhi.n	8008602 <__hexdig_fun+0x1a>
 80085fe:	3847      	subs	r0, #71	; 0x47
 8008600:	e7f7      	b.n	80085f2 <__hexdig_fun+0xa>
 8008602:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008606:	2b05      	cmp	r3, #5
 8008608:	d801      	bhi.n	800860e <__hexdig_fun+0x26>
 800860a:	3827      	subs	r0, #39	; 0x27
 800860c:	e7f1      	b.n	80085f2 <__hexdig_fun+0xa>
 800860e:	2000      	movs	r0, #0
 8008610:	4770      	bx	lr
	...

08008614 <__gethex>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	ed2d 8b02 	vpush	{d8}
 800861c:	b089      	sub	sp, #36	; 0x24
 800861e:	ee08 0a10 	vmov	s16, r0
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	4bbc      	ldr	r3, [pc, #752]	; (8008918 <__gethex+0x304>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	4618      	mov	r0, r3
 800862c:	468b      	mov	fp, r1
 800862e:	4690      	mov	r8, r2
 8008630:	f7f7 fdce 	bl	80001d0 <strlen>
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	f8db 2000 	ldr.w	r2, [fp]
 800863a:	4403      	add	r3, r0
 800863c:	4682      	mov	sl, r0
 800863e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	1c93      	adds	r3, r2, #2
 8008646:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800864a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800864e:	32fe      	adds	r2, #254	; 0xfe
 8008650:	18d1      	adds	r1, r2, r3
 8008652:	461f      	mov	r7, r3
 8008654:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008658:	9100      	str	r1, [sp, #0]
 800865a:	2830      	cmp	r0, #48	; 0x30
 800865c:	d0f8      	beq.n	8008650 <__gethex+0x3c>
 800865e:	f7ff ffc3 	bl	80085e8 <__hexdig_fun>
 8008662:	4604      	mov	r4, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d13a      	bne.n	80086de <__gethex+0xca>
 8008668:	9901      	ldr	r1, [sp, #4]
 800866a:	4652      	mov	r2, sl
 800866c:	4638      	mov	r0, r7
 800866e:	f001 faa7 	bl	8009bc0 <strncmp>
 8008672:	4605      	mov	r5, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d168      	bne.n	800874a <__gethex+0x136>
 8008678:	f817 000a 	ldrb.w	r0, [r7, sl]
 800867c:	eb07 060a 	add.w	r6, r7, sl
 8008680:	f7ff ffb2 	bl	80085e8 <__hexdig_fun>
 8008684:	2800      	cmp	r0, #0
 8008686:	d062      	beq.n	800874e <__gethex+0x13a>
 8008688:	4633      	mov	r3, r6
 800868a:	7818      	ldrb	r0, [r3, #0]
 800868c:	2830      	cmp	r0, #48	; 0x30
 800868e:	461f      	mov	r7, r3
 8008690:	f103 0301 	add.w	r3, r3, #1
 8008694:	d0f9      	beq.n	800868a <__gethex+0x76>
 8008696:	f7ff ffa7 	bl	80085e8 <__hexdig_fun>
 800869a:	2301      	movs	r3, #1
 800869c:	fab0 f480 	clz	r4, r0
 80086a0:	0964      	lsrs	r4, r4, #5
 80086a2:	4635      	mov	r5, r6
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	463a      	mov	r2, r7
 80086a8:	4616      	mov	r6, r2
 80086aa:	3201      	adds	r2, #1
 80086ac:	7830      	ldrb	r0, [r6, #0]
 80086ae:	f7ff ff9b 	bl	80085e8 <__hexdig_fun>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1f8      	bne.n	80086a8 <__gethex+0x94>
 80086b6:	9901      	ldr	r1, [sp, #4]
 80086b8:	4652      	mov	r2, sl
 80086ba:	4630      	mov	r0, r6
 80086bc:	f001 fa80 	bl	8009bc0 <strncmp>
 80086c0:	b980      	cbnz	r0, 80086e4 <__gethex+0xd0>
 80086c2:	b94d      	cbnz	r5, 80086d8 <__gethex+0xc4>
 80086c4:	eb06 050a 	add.w	r5, r6, sl
 80086c8:	462a      	mov	r2, r5
 80086ca:	4616      	mov	r6, r2
 80086cc:	3201      	adds	r2, #1
 80086ce:	7830      	ldrb	r0, [r6, #0]
 80086d0:	f7ff ff8a 	bl	80085e8 <__hexdig_fun>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1f8      	bne.n	80086ca <__gethex+0xb6>
 80086d8:	1bad      	subs	r5, r5, r6
 80086da:	00ad      	lsls	r5, r5, #2
 80086dc:	e004      	b.n	80086e8 <__gethex+0xd4>
 80086de:	2400      	movs	r4, #0
 80086e0:	4625      	mov	r5, r4
 80086e2:	e7e0      	b.n	80086a6 <__gethex+0x92>
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	d1f7      	bne.n	80086d8 <__gethex+0xc4>
 80086e8:	7833      	ldrb	r3, [r6, #0]
 80086ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086ee:	2b50      	cmp	r3, #80	; 0x50
 80086f0:	d13b      	bne.n	800876a <__gethex+0x156>
 80086f2:	7873      	ldrb	r3, [r6, #1]
 80086f4:	2b2b      	cmp	r3, #43	; 0x2b
 80086f6:	d02c      	beq.n	8008752 <__gethex+0x13e>
 80086f8:	2b2d      	cmp	r3, #45	; 0x2d
 80086fa:	d02e      	beq.n	800875a <__gethex+0x146>
 80086fc:	1c71      	adds	r1, r6, #1
 80086fe:	f04f 0900 	mov.w	r9, #0
 8008702:	7808      	ldrb	r0, [r1, #0]
 8008704:	f7ff ff70 	bl	80085e8 <__hexdig_fun>
 8008708:	1e43      	subs	r3, r0, #1
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b18      	cmp	r3, #24
 800870e:	d82c      	bhi.n	800876a <__gethex+0x156>
 8008710:	f1a0 0210 	sub.w	r2, r0, #16
 8008714:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008718:	f7ff ff66 	bl	80085e8 <__hexdig_fun>
 800871c:	1e43      	subs	r3, r0, #1
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b18      	cmp	r3, #24
 8008722:	d91d      	bls.n	8008760 <__gethex+0x14c>
 8008724:	f1b9 0f00 	cmp.w	r9, #0
 8008728:	d000      	beq.n	800872c <__gethex+0x118>
 800872a:	4252      	negs	r2, r2
 800872c:	4415      	add	r5, r2
 800872e:	f8cb 1000 	str.w	r1, [fp]
 8008732:	b1e4      	cbz	r4, 800876e <__gethex+0x15a>
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf14      	ite	ne
 800873a:	2700      	movne	r7, #0
 800873c:	2706      	moveq	r7, #6
 800873e:	4638      	mov	r0, r7
 8008740:	b009      	add	sp, #36	; 0x24
 8008742:	ecbd 8b02 	vpop	{d8}
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	463e      	mov	r6, r7
 800874c:	4625      	mov	r5, r4
 800874e:	2401      	movs	r4, #1
 8008750:	e7ca      	b.n	80086e8 <__gethex+0xd4>
 8008752:	f04f 0900 	mov.w	r9, #0
 8008756:	1cb1      	adds	r1, r6, #2
 8008758:	e7d3      	b.n	8008702 <__gethex+0xee>
 800875a:	f04f 0901 	mov.w	r9, #1
 800875e:	e7fa      	b.n	8008756 <__gethex+0x142>
 8008760:	230a      	movs	r3, #10
 8008762:	fb03 0202 	mla	r2, r3, r2, r0
 8008766:	3a10      	subs	r2, #16
 8008768:	e7d4      	b.n	8008714 <__gethex+0x100>
 800876a:	4631      	mov	r1, r6
 800876c:	e7df      	b.n	800872e <__gethex+0x11a>
 800876e:	1bf3      	subs	r3, r6, r7
 8008770:	3b01      	subs	r3, #1
 8008772:	4621      	mov	r1, r4
 8008774:	2b07      	cmp	r3, #7
 8008776:	dc0b      	bgt.n	8008790 <__gethex+0x17c>
 8008778:	ee18 0a10 	vmov	r0, s16
 800877c:	f000 fa86 	bl	8008c8c <_Balloc>
 8008780:	4604      	mov	r4, r0
 8008782:	b940      	cbnz	r0, 8008796 <__gethex+0x182>
 8008784:	4b65      	ldr	r3, [pc, #404]	; (800891c <__gethex+0x308>)
 8008786:	4602      	mov	r2, r0
 8008788:	21de      	movs	r1, #222	; 0xde
 800878a:	4865      	ldr	r0, [pc, #404]	; (8008920 <__gethex+0x30c>)
 800878c:	f001 faf8 	bl	8009d80 <__assert_func>
 8008790:	3101      	adds	r1, #1
 8008792:	105b      	asrs	r3, r3, #1
 8008794:	e7ee      	b.n	8008774 <__gethex+0x160>
 8008796:	f100 0914 	add.w	r9, r0, #20
 800879a:	f04f 0b00 	mov.w	fp, #0
 800879e:	f1ca 0301 	rsb	r3, sl, #1
 80087a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80087a6:	f8cd b000 	str.w	fp, [sp]
 80087aa:	9306      	str	r3, [sp, #24]
 80087ac:	42b7      	cmp	r7, r6
 80087ae:	d340      	bcc.n	8008832 <__gethex+0x21e>
 80087b0:	9802      	ldr	r0, [sp, #8]
 80087b2:	9b00      	ldr	r3, [sp, #0]
 80087b4:	f840 3b04 	str.w	r3, [r0], #4
 80087b8:	eba0 0009 	sub.w	r0, r0, r9
 80087bc:	1080      	asrs	r0, r0, #2
 80087be:	0146      	lsls	r6, r0, #5
 80087c0:	6120      	str	r0, [r4, #16]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fb58 	bl	8008e78 <__hi0bits>
 80087c8:	1a30      	subs	r0, r6, r0
 80087ca:	f8d8 6000 	ldr.w	r6, [r8]
 80087ce:	42b0      	cmp	r0, r6
 80087d0:	dd63      	ble.n	800889a <__gethex+0x286>
 80087d2:	1b87      	subs	r7, r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fef2 	bl	80095c0 <__any_on>
 80087dc:	4682      	mov	sl, r0
 80087de:	b1a8      	cbz	r0, 800880c <__gethex+0x1f8>
 80087e0:	1e7b      	subs	r3, r7, #1
 80087e2:	1159      	asrs	r1, r3, #5
 80087e4:	f003 021f 	and.w	r2, r3, #31
 80087e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80087ec:	f04f 0a01 	mov.w	sl, #1
 80087f0:	fa0a f202 	lsl.w	r2, sl, r2
 80087f4:	420a      	tst	r2, r1
 80087f6:	d009      	beq.n	800880c <__gethex+0x1f8>
 80087f8:	4553      	cmp	r3, sl
 80087fa:	dd05      	ble.n	8008808 <__gethex+0x1f4>
 80087fc:	1eb9      	subs	r1, r7, #2
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fede 	bl	80095c0 <__any_on>
 8008804:	2800      	cmp	r0, #0
 8008806:	d145      	bne.n	8008894 <__gethex+0x280>
 8008808:	f04f 0a02 	mov.w	sl, #2
 800880c:	4639      	mov	r1, r7
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff fe98 	bl	8008544 <rshift>
 8008814:	443d      	add	r5, r7
 8008816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800881a:	42ab      	cmp	r3, r5
 800881c:	da4c      	bge.n	80088b8 <__gethex+0x2a4>
 800881e:	ee18 0a10 	vmov	r0, s16
 8008822:	4621      	mov	r1, r4
 8008824:	f000 fa72 	bl	8008d0c <_Bfree>
 8008828:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800882a:	2300      	movs	r3, #0
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	27a3      	movs	r7, #163	; 0xa3
 8008830:	e785      	b.n	800873e <__gethex+0x12a>
 8008832:	1e73      	subs	r3, r6, #1
 8008834:	9a05      	ldr	r2, [sp, #20]
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800883c:	4293      	cmp	r3, r2
 800883e:	d019      	beq.n	8008874 <__gethex+0x260>
 8008840:	f1bb 0f20 	cmp.w	fp, #32
 8008844:	d107      	bne.n	8008856 <__gethex+0x242>
 8008846:	9b02      	ldr	r3, [sp, #8]
 8008848:	9a00      	ldr	r2, [sp, #0]
 800884a:	f843 2b04 	str.w	r2, [r3], #4
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	2300      	movs	r3, #0
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	469b      	mov	fp, r3
 8008856:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800885a:	f7ff fec5 	bl	80085e8 <__hexdig_fun>
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	f000 000f 	and.w	r0, r0, #15
 8008864:	fa00 f00b 	lsl.w	r0, r0, fp
 8008868:	4303      	orrs	r3, r0
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f10b 0b04 	add.w	fp, fp, #4
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	e00d      	b.n	8008890 <__gethex+0x27c>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	4413      	add	r3, r2
 800887a:	42bb      	cmp	r3, r7
 800887c:	d3e0      	bcc.n	8008840 <__gethex+0x22c>
 800887e:	4618      	mov	r0, r3
 8008880:	9901      	ldr	r1, [sp, #4]
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	4652      	mov	r2, sl
 8008886:	f001 f99b 	bl	8009bc0 <strncmp>
 800888a:	9b07      	ldr	r3, [sp, #28]
 800888c:	2800      	cmp	r0, #0
 800888e:	d1d7      	bne.n	8008840 <__gethex+0x22c>
 8008890:	461e      	mov	r6, r3
 8008892:	e78b      	b.n	80087ac <__gethex+0x198>
 8008894:	f04f 0a03 	mov.w	sl, #3
 8008898:	e7b8      	b.n	800880c <__gethex+0x1f8>
 800889a:	da0a      	bge.n	80088b2 <__gethex+0x29e>
 800889c:	1a37      	subs	r7, r6, r0
 800889e:	4621      	mov	r1, r4
 80088a0:	ee18 0a10 	vmov	r0, s16
 80088a4:	463a      	mov	r2, r7
 80088a6:	f000 fc4d 	bl	8009144 <__lshift>
 80088aa:	1bed      	subs	r5, r5, r7
 80088ac:	4604      	mov	r4, r0
 80088ae:	f100 0914 	add.w	r9, r0, #20
 80088b2:	f04f 0a00 	mov.w	sl, #0
 80088b6:	e7ae      	b.n	8008816 <__gethex+0x202>
 80088b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80088bc:	42a8      	cmp	r0, r5
 80088be:	dd72      	ble.n	80089a6 <__gethex+0x392>
 80088c0:	1b45      	subs	r5, r0, r5
 80088c2:	42ae      	cmp	r6, r5
 80088c4:	dc36      	bgt.n	8008934 <__gethex+0x320>
 80088c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d02a      	beq.n	8008924 <__gethex+0x310>
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d02c      	beq.n	800892c <__gethex+0x318>
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d115      	bne.n	8008902 <__gethex+0x2ee>
 80088d6:	42ae      	cmp	r6, r5
 80088d8:	d113      	bne.n	8008902 <__gethex+0x2ee>
 80088da:	2e01      	cmp	r6, #1
 80088dc:	d10b      	bne.n	80088f6 <__gethex+0x2e2>
 80088de:	9a04      	ldr	r2, [sp, #16]
 80088e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	2301      	movs	r3, #1
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	f8c9 3000 	str.w	r3, [r9]
 80088ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088f0:	2762      	movs	r7, #98	; 0x62
 80088f2:	601c      	str	r4, [r3, #0]
 80088f4:	e723      	b.n	800873e <__gethex+0x12a>
 80088f6:	1e71      	subs	r1, r6, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fe61 	bl	80095c0 <__any_on>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d1ed      	bne.n	80088de <__gethex+0x2ca>
 8008902:	ee18 0a10 	vmov	r0, s16
 8008906:	4621      	mov	r1, r4
 8008908:	f000 fa00 	bl	8008d0c <_Bfree>
 800890c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800890e:	2300      	movs	r3, #0
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	2750      	movs	r7, #80	; 0x50
 8008914:	e713      	b.n	800873e <__gethex+0x12a>
 8008916:	bf00      	nop
 8008918:	0800a950 	.word	0x0800a950
 800891c:	0800a8d4 	.word	0x0800a8d4
 8008920:	0800a8e5 	.word	0x0800a8e5
 8008924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1eb      	bne.n	8008902 <__gethex+0x2ee>
 800892a:	e7d8      	b.n	80088de <__gethex+0x2ca>
 800892c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1d5      	bne.n	80088de <__gethex+0x2ca>
 8008932:	e7e6      	b.n	8008902 <__gethex+0x2ee>
 8008934:	1e6f      	subs	r7, r5, #1
 8008936:	f1ba 0f00 	cmp.w	sl, #0
 800893a:	d131      	bne.n	80089a0 <__gethex+0x38c>
 800893c:	b127      	cbz	r7, 8008948 <__gethex+0x334>
 800893e:	4639      	mov	r1, r7
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fe3d 	bl	80095c0 <__any_on>
 8008946:	4682      	mov	sl, r0
 8008948:	117b      	asrs	r3, r7, #5
 800894a:	2101      	movs	r1, #1
 800894c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008950:	f007 071f 	and.w	r7, r7, #31
 8008954:	fa01 f707 	lsl.w	r7, r1, r7
 8008958:	421f      	tst	r7, r3
 800895a:	4629      	mov	r1, r5
 800895c:	4620      	mov	r0, r4
 800895e:	bf18      	it	ne
 8008960:	f04a 0a02 	orrne.w	sl, sl, #2
 8008964:	1b76      	subs	r6, r6, r5
 8008966:	f7ff fded 	bl	8008544 <rshift>
 800896a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800896e:	2702      	movs	r7, #2
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	d048      	beq.n	8008a08 <__gethex+0x3f4>
 8008976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d015      	beq.n	80089aa <__gethex+0x396>
 800897e:	2b03      	cmp	r3, #3
 8008980:	d017      	beq.n	80089b2 <__gethex+0x39e>
 8008982:	2b01      	cmp	r3, #1
 8008984:	d109      	bne.n	800899a <__gethex+0x386>
 8008986:	f01a 0f02 	tst.w	sl, #2
 800898a:	d006      	beq.n	800899a <__gethex+0x386>
 800898c:	f8d9 0000 	ldr.w	r0, [r9]
 8008990:	ea4a 0a00 	orr.w	sl, sl, r0
 8008994:	f01a 0f01 	tst.w	sl, #1
 8008998:	d10e      	bne.n	80089b8 <__gethex+0x3a4>
 800899a:	f047 0710 	orr.w	r7, r7, #16
 800899e:	e033      	b.n	8008a08 <__gethex+0x3f4>
 80089a0:	f04f 0a01 	mov.w	sl, #1
 80089a4:	e7d0      	b.n	8008948 <__gethex+0x334>
 80089a6:	2701      	movs	r7, #1
 80089a8:	e7e2      	b.n	8008970 <__gethex+0x35c>
 80089aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ac:	f1c3 0301 	rsb	r3, r3, #1
 80089b0:	9315      	str	r3, [sp, #84]	; 0x54
 80089b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <__gethex+0x386>
 80089b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089bc:	f104 0314 	add.w	r3, r4, #20
 80089c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089c8:	f04f 0c00 	mov.w	ip, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80089d6:	d01c      	beq.n	8008a12 <__gethex+0x3fe>
 80089d8:	3201      	adds	r2, #1
 80089da:	6002      	str	r2, [r0, #0]
 80089dc:	2f02      	cmp	r7, #2
 80089de:	f104 0314 	add.w	r3, r4, #20
 80089e2:	d13f      	bne.n	8008a64 <__gethex+0x450>
 80089e4:	f8d8 2000 	ldr.w	r2, [r8]
 80089e8:	3a01      	subs	r2, #1
 80089ea:	42b2      	cmp	r2, r6
 80089ec:	d10a      	bne.n	8008a04 <__gethex+0x3f0>
 80089ee:	1171      	asrs	r1, r6, #5
 80089f0:	2201      	movs	r2, #1
 80089f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089f6:	f006 061f 	and.w	r6, r6, #31
 80089fa:	fa02 f606 	lsl.w	r6, r2, r6
 80089fe:	421e      	tst	r6, r3
 8008a00:	bf18      	it	ne
 8008a02:	4617      	movne	r7, r2
 8008a04:	f047 0720 	orr.w	r7, r7, #32
 8008a08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a0a:	601c      	str	r4, [r3, #0]
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	601d      	str	r5, [r3, #0]
 8008a10:	e695      	b.n	800873e <__gethex+0x12a>
 8008a12:	4299      	cmp	r1, r3
 8008a14:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a18:	d8d8      	bhi.n	80089cc <__gethex+0x3b8>
 8008a1a:	68a3      	ldr	r3, [r4, #8]
 8008a1c:	459b      	cmp	fp, r3
 8008a1e:	db19      	blt.n	8008a54 <__gethex+0x440>
 8008a20:	6861      	ldr	r1, [r4, #4]
 8008a22:	ee18 0a10 	vmov	r0, s16
 8008a26:	3101      	adds	r1, #1
 8008a28:	f000 f930 	bl	8008c8c <_Balloc>
 8008a2c:	4681      	mov	r9, r0
 8008a2e:	b918      	cbnz	r0, 8008a38 <__gethex+0x424>
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <__gethex+0x488>)
 8008a32:	4602      	mov	r2, r0
 8008a34:	2184      	movs	r1, #132	; 0x84
 8008a36:	e6a8      	b.n	800878a <__gethex+0x176>
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	3202      	adds	r2, #2
 8008a3c:	f104 010c 	add.w	r1, r4, #12
 8008a40:	0092      	lsls	r2, r2, #2
 8008a42:	300c      	adds	r0, #12
 8008a44:	f7fc ff3a 	bl	80058bc <memcpy>
 8008a48:	4621      	mov	r1, r4
 8008a4a:	ee18 0a10 	vmov	r0, s16
 8008a4e:	f000 f95d 	bl	8008d0c <_Bfree>
 8008a52:	464c      	mov	r4, r9
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a5c:	6122      	str	r2, [r4, #16]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	615a      	str	r2, [r3, #20]
 8008a62:	e7bb      	b.n	80089dc <__gethex+0x3c8>
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	455a      	cmp	r2, fp
 8008a68:	dd0b      	ble.n	8008a82 <__gethex+0x46e>
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff fd69 	bl	8008544 <rshift>
 8008a72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a76:	3501      	adds	r5, #1
 8008a78:	42ab      	cmp	r3, r5
 8008a7a:	f6ff aed0 	blt.w	800881e <__gethex+0x20a>
 8008a7e:	2701      	movs	r7, #1
 8008a80:	e7c0      	b.n	8008a04 <__gethex+0x3f0>
 8008a82:	f016 061f 	ands.w	r6, r6, #31
 8008a86:	d0fa      	beq.n	8008a7e <__gethex+0x46a>
 8008a88:	449a      	add	sl, r3
 8008a8a:	f1c6 0620 	rsb	r6, r6, #32
 8008a8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008a92:	f000 f9f1 	bl	8008e78 <__hi0bits>
 8008a96:	42b0      	cmp	r0, r6
 8008a98:	dbe7      	blt.n	8008a6a <__gethex+0x456>
 8008a9a:	e7f0      	b.n	8008a7e <__gethex+0x46a>
 8008a9c:	0800a8d4 	.word	0x0800a8d4

08008aa0 <L_shift>:
 8008aa0:	f1c2 0208 	rsb	r2, r2, #8
 8008aa4:	0092      	lsls	r2, r2, #2
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	f1c2 0620 	rsb	r6, r2, #32
 8008aac:	6843      	ldr	r3, [r0, #4]
 8008aae:	6804      	ldr	r4, [r0, #0]
 8008ab0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ab4:	432c      	orrs	r4, r5
 8008ab6:	40d3      	lsrs	r3, r2
 8008ab8:	6004      	str	r4, [r0, #0]
 8008aba:	f840 3f04 	str.w	r3, [r0, #4]!
 8008abe:	4288      	cmp	r0, r1
 8008ac0:	d3f4      	bcc.n	8008aac <L_shift+0xc>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}

08008ac4 <__match>:
 8008ac4:	b530      	push	{r4, r5, lr}
 8008ac6:	6803      	ldr	r3, [r0, #0]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ace:	b914      	cbnz	r4, 8008ad6 <__match+0x12>
 8008ad0:	6003      	str	r3, [r0, #0]
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	bd30      	pop	{r4, r5, pc}
 8008ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ada:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ade:	2d19      	cmp	r5, #25
 8008ae0:	bf98      	it	ls
 8008ae2:	3220      	addls	r2, #32
 8008ae4:	42a2      	cmp	r2, r4
 8008ae6:	d0f0      	beq.n	8008aca <__match+0x6>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e7f3      	b.n	8008ad4 <__match+0x10>

08008aec <__hexnan>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	6801      	ldr	r1, [r0, #0]
 8008af4:	115e      	asrs	r6, r3, #5
 8008af6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008afa:	f013 031f 	ands.w	r3, r3, #31
 8008afe:	b087      	sub	sp, #28
 8008b00:	bf18      	it	ne
 8008b02:	3604      	addne	r6, #4
 8008b04:	2500      	movs	r5, #0
 8008b06:	1f37      	subs	r7, r6, #4
 8008b08:	4682      	mov	sl, r0
 8008b0a:	4690      	mov	r8, r2
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b12:	46b9      	mov	r9, r7
 8008b14:	463c      	mov	r4, r7
 8008b16:	9502      	str	r5, [sp, #8]
 8008b18:	46ab      	mov	fp, r5
 8008b1a:	784a      	ldrb	r2, [r1, #1]
 8008b1c:	1c4b      	adds	r3, r1, #1
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	b342      	cbz	r2, 8008b74 <__hexnan+0x88>
 8008b22:	4610      	mov	r0, r2
 8008b24:	9105      	str	r1, [sp, #20]
 8008b26:	9204      	str	r2, [sp, #16]
 8008b28:	f7ff fd5e 	bl	80085e8 <__hexdig_fun>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d14f      	bne.n	8008bd0 <__hexnan+0xe4>
 8008b30:	9a04      	ldr	r2, [sp, #16]
 8008b32:	9905      	ldr	r1, [sp, #20]
 8008b34:	2a20      	cmp	r2, #32
 8008b36:	d818      	bhi.n	8008b6a <__hexnan+0x7e>
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	459b      	cmp	fp, r3
 8008b3c:	dd13      	ble.n	8008b66 <__hexnan+0x7a>
 8008b3e:	454c      	cmp	r4, r9
 8008b40:	d206      	bcs.n	8008b50 <__hexnan+0x64>
 8008b42:	2d07      	cmp	r5, #7
 8008b44:	dc04      	bgt.n	8008b50 <__hexnan+0x64>
 8008b46:	462a      	mov	r2, r5
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f7ff ffa8 	bl	8008aa0 <L_shift>
 8008b50:	4544      	cmp	r4, r8
 8008b52:	d950      	bls.n	8008bf6 <__hexnan+0x10a>
 8008b54:	2300      	movs	r3, #0
 8008b56:	f1a4 0904 	sub.w	r9, r4, #4
 8008b5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b5e:	f8cd b008 	str.w	fp, [sp, #8]
 8008b62:	464c      	mov	r4, r9
 8008b64:	461d      	mov	r5, r3
 8008b66:	9903      	ldr	r1, [sp, #12]
 8008b68:	e7d7      	b.n	8008b1a <__hexnan+0x2e>
 8008b6a:	2a29      	cmp	r2, #41	; 0x29
 8008b6c:	d156      	bne.n	8008c1c <__hexnan+0x130>
 8008b6e:	3102      	adds	r1, #2
 8008b70:	f8ca 1000 	str.w	r1, [sl]
 8008b74:	f1bb 0f00 	cmp.w	fp, #0
 8008b78:	d050      	beq.n	8008c1c <__hexnan+0x130>
 8008b7a:	454c      	cmp	r4, r9
 8008b7c:	d206      	bcs.n	8008b8c <__hexnan+0xa0>
 8008b7e:	2d07      	cmp	r5, #7
 8008b80:	dc04      	bgt.n	8008b8c <__hexnan+0xa0>
 8008b82:	462a      	mov	r2, r5
 8008b84:	4649      	mov	r1, r9
 8008b86:	4620      	mov	r0, r4
 8008b88:	f7ff ff8a 	bl	8008aa0 <L_shift>
 8008b8c:	4544      	cmp	r4, r8
 8008b8e:	d934      	bls.n	8008bfa <__hexnan+0x10e>
 8008b90:	f1a8 0204 	sub.w	r2, r8, #4
 8008b94:	4623      	mov	r3, r4
 8008b96:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b9e:	429f      	cmp	r7, r3
 8008ba0:	d2f9      	bcs.n	8008b96 <__hexnan+0xaa>
 8008ba2:	1b3b      	subs	r3, r7, r4
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	3304      	adds	r3, #4
 8008baa:	3401      	adds	r4, #1
 8008bac:	3e03      	subs	r6, #3
 8008bae:	42b4      	cmp	r4, r6
 8008bb0:	bf88      	it	hi
 8008bb2:	2304      	movhi	r3, #4
 8008bb4:	4443      	add	r3, r8
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f843 2b04 	str.w	r2, [r3], #4
 8008bbc:	429f      	cmp	r7, r3
 8008bbe:	d2fb      	bcs.n	8008bb8 <__hexnan+0xcc>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	b91b      	cbnz	r3, 8008bcc <__hexnan+0xe0>
 8008bc4:	4547      	cmp	r7, r8
 8008bc6:	d127      	bne.n	8008c18 <__hexnan+0x12c>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	2005      	movs	r0, #5
 8008bce:	e026      	b.n	8008c1e <__hexnan+0x132>
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	2d08      	cmp	r5, #8
 8008bd4:	f10b 0b01 	add.w	fp, fp, #1
 8008bd8:	dd06      	ble.n	8008be8 <__hexnan+0xfc>
 8008bda:	4544      	cmp	r4, r8
 8008bdc:	d9c3      	bls.n	8008b66 <__hexnan+0x7a>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008be4:	2501      	movs	r5, #1
 8008be6:	3c04      	subs	r4, #4
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	f000 000f 	and.w	r0, r0, #15
 8008bee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008bf2:	6022      	str	r2, [r4, #0]
 8008bf4:	e7b7      	b.n	8008b66 <__hexnan+0x7a>
 8008bf6:	2508      	movs	r5, #8
 8008bf8:	e7b5      	b.n	8008b66 <__hexnan+0x7a>
 8008bfa:	9b01      	ldr	r3, [sp, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0df      	beq.n	8008bc0 <__hexnan+0xd4>
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c04:	f1c3 0320 	rsb	r3, r3, #32
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c10:	401a      	ands	r2, r3
 8008c12:	f846 2c04 	str.w	r2, [r6, #-4]
 8008c16:	e7d3      	b.n	8008bc0 <__hexnan+0xd4>
 8008c18:	3f04      	subs	r7, #4
 8008c1a:	e7d1      	b.n	8008bc0 <__hexnan+0xd4>
 8008c1c:	2004      	movs	r0, #4
 8008c1e:	b007      	add	sp, #28
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c24 <_localeconv_r>:
 8008c24:	4800      	ldr	r0, [pc, #0]	; (8008c28 <_localeconv_r+0x4>)
 8008c26:	4770      	bx	lr
 8008c28:	20000168 	.word	0x20000168

08008c2c <_lseek_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	; (8008c4c <_lseek_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f001 fa8a 	bl	800a154 <_lseek>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_lseek_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_lseek_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	200044e0 	.word	0x200044e0

08008c50 <__ascii_mbtowc>:
 8008c50:	b082      	sub	sp, #8
 8008c52:	b901      	cbnz	r1, 8008c56 <__ascii_mbtowc+0x6>
 8008c54:	a901      	add	r1, sp, #4
 8008c56:	b142      	cbz	r2, 8008c6a <__ascii_mbtowc+0x1a>
 8008c58:	b14b      	cbz	r3, 8008c6e <__ascii_mbtowc+0x1e>
 8008c5a:	7813      	ldrb	r3, [r2, #0]
 8008c5c:	600b      	str	r3, [r1, #0]
 8008c5e:	7812      	ldrb	r2, [r2, #0]
 8008c60:	1e10      	subs	r0, r2, #0
 8008c62:	bf18      	it	ne
 8008c64:	2001      	movne	r0, #1
 8008c66:	b002      	add	sp, #8
 8008c68:	4770      	bx	lr
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	e7fb      	b.n	8008c66 <__ascii_mbtowc+0x16>
 8008c6e:	f06f 0001 	mvn.w	r0, #1
 8008c72:	e7f8      	b.n	8008c66 <__ascii_mbtowc+0x16>

08008c74 <__malloc_lock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__malloc_lock+0x8>)
 8008c76:	f7f9 b928 	b.w	8001eca <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	200004c8 	.word	0x200004c8

08008c80 <__malloc_unlock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__malloc_unlock+0x8>)
 8008c82:	f7f9 b936 	b.w	8001ef2 <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	200004c8 	.word	0x200004c8

08008c8c <_Balloc>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	b976      	cbnz	r6, 8008cb4 <_Balloc+0x28>
 8008c96:	2010      	movs	r0, #16
 8008c98:	f7fc fe08 	bl	80058ac <malloc>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6260      	str	r0, [r4, #36]	; 0x24
 8008ca0:	b920      	cbnz	r0, 8008cac <_Balloc+0x20>
 8008ca2:	4b18      	ldr	r3, [pc, #96]	; (8008d04 <_Balloc+0x78>)
 8008ca4:	4818      	ldr	r0, [pc, #96]	; (8008d08 <_Balloc+0x7c>)
 8008ca6:	2166      	movs	r1, #102	; 0x66
 8008ca8:	f001 f86a 	bl	8009d80 <__assert_func>
 8008cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cb0:	6006      	str	r6, [r0, #0]
 8008cb2:	60c6      	str	r6, [r0, #12]
 8008cb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cb6:	68f3      	ldr	r3, [r6, #12]
 8008cb8:	b183      	cbz	r3, 8008cdc <_Balloc+0x50>
 8008cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cc2:	b9b8      	cbnz	r0, 8008cf4 <_Balloc+0x68>
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	fa01 f605 	lsl.w	r6, r1, r5
 8008cca:	1d72      	adds	r2, r6, #5
 8008ccc:	0092      	lsls	r2, r2, #2
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fc97 	bl	8009602 <_calloc_r>
 8008cd4:	b160      	cbz	r0, 8008cf0 <_Balloc+0x64>
 8008cd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cda:	e00e      	b.n	8008cfa <_Balloc+0x6e>
 8008cdc:	2221      	movs	r2, #33	; 0x21
 8008cde:	2104      	movs	r1, #4
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fc8e 	bl	8009602 <_calloc_r>
 8008ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce8:	60f0      	str	r0, [r6, #12]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e4      	bne.n	8008cba <_Balloc+0x2e>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	6802      	ldr	r2, [r0, #0]
 8008cf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d00:	e7f7      	b.n	8008cf2 <_Balloc+0x66>
 8008d02:	bf00      	nop
 8008d04:	0800a85e 	.word	0x0800a85e
 8008d08:	0800a964 	.word	0x0800a964

08008d0c <_Bfree>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d10:	4605      	mov	r5, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b976      	cbnz	r6, 8008d34 <_Bfree+0x28>
 8008d16:	2010      	movs	r0, #16
 8008d18:	f7fc fdc8 	bl	80058ac <malloc>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6268      	str	r0, [r5, #36]	; 0x24
 8008d20:	b920      	cbnz	r0, 8008d2c <_Bfree+0x20>
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <_Bfree+0x3c>)
 8008d24:	4809      	ldr	r0, [pc, #36]	; (8008d4c <_Bfree+0x40>)
 8008d26:	218a      	movs	r1, #138	; 0x8a
 8008d28:	f001 f82a 	bl	8009d80 <__assert_func>
 8008d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d30:	6006      	str	r6, [r0, #0]
 8008d32:	60c6      	str	r6, [r0, #12]
 8008d34:	b13c      	cbz	r4, 8008d46 <_Bfree+0x3a>
 8008d36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d38:	6862      	ldr	r2, [r4, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d40:	6021      	str	r1, [r4, #0]
 8008d42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	0800a85e 	.word	0x0800a85e
 8008d4c:	0800a964 	.word	0x0800a964

08008d50 <__multadd>:
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	690e      	ldr	r6, [r1, #16]
 8008d56:	4607      	mov	r7, r0
 8008d58:	4698      	mov	r8, r3
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	f101 0014 	add.w	r0, r1, #20
 8008d60:	2300      	movs	r3, #0
 8008d62:	6805      	ldr	r5, [r0, #0]
 8008d64:	b2a9      	uxth	r1, r5
 8008d66:	fb02 8101 	mla	r1, r2, r1, r8
 8008d6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d6e:	0c2d      	lsrs	r5, r5, #16
 8008d70:	fb02 c505 	mla	r5, r2, r5, ip
 8008d74:	b289      	uxth	r1, r1
 8008d76:	3301      	adds	r3, #1
 8008d78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d7c:	429e      	cmp	r6, r3
 8008d7e:	f840 1b04 	str.w	r1, [r0], #4
 8008d82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d86:	dcec      	bgt.n	8008d62 <__multadd+0x12>
 8008d88:	f1b8 0f00 	cmp.w	r8, #0
 8008d8c:	d022      	beq.n	8008dd4 <__multadd+0x84>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	42b3      	cmp	r3, r6
 8008d92:	dc19      	bgt.n	8008dc8 <__multadd+0x78>
 8008d94:	6861      	ldr	r1, [r4, #4]
 8008d96:	4638      	mov	r0, r7
 8008d98:	3101      	adds	r1, #1
 8008d9a:	f7ff ff77 	bl	8008c8c <_Balloc>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__multadd+0x5e>
 8008da2:	4602      	mov	r2, r0
 8008da4:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <__multadd+0x8c>)
 8008da6:	480e      	ldr	r0, [pc, #56]	; (8008de0 <__multadd+0x90>)
 8008da8:	21b5      	movs	r1, #181	; 0xb5
 8008daa:	f000 ffe9 	bl	8009d80 <__assert_func>
 8008dae:	6922      	ldr	r2, [r4, #16]
 8008db0:	3202      	adds	r2, #2
 8008db2:	f104 010c 	add.w	r1, r4, #12
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	300c      	adds	r0, #12
 8008dba:	f7fc fd7f 	bl	80058bc <memcpy>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ffa3 	bl	8008d0c <_Bfree>
 8008dc6:	462c      	mov	r4, r5
 8008dc8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008dcc:	3601      	adds	r6, #1
 8008dce:	f8c3 8014 	str.w	r8, [r3, #20]
 8008dd2:	6126      	str	r6, [r4, #16]
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dda:	bf00      	nop
 8008ddc:	0800a8d4 	.word	0x0800a8d4
 8008de0:	0800a964 	.word	0x0800a964

08008de4 <__s2b>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	4615      	mov	r5, r2
 8008dec:	461f      	mov	r7, r3
 8008dee:	2209      	movs	r2, #9
 8008df0:	3308      	adds	r3, #8
 8008df2:	4606      	mov	r6, r0
 8008df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008df8:	2100      	movs	r1, #0
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	db09      	blt.n	8008e14 <__s2b+0x30>
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7ff ff43 	bl	8008c8c <_Balloc>
 8008e06:	b940      	cbnz	r0, 8008e1a <__s2b+0x36>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <__s2b+0x8c>)
 8008e0c:	4819      	ldr	r0, [pc, #100]	; (8008e74 <__s2b+0x90>)
 8008e0e:	21ce      	movs	r1, #206	; 0xce
 8008e10:	f000 ffb6 	bl	8009d80 <__assert_func>
 8008e14:	0052      	lsls	r2, r2, #1
 8008e16:	3101      	adds	r1, #1
 8008e18:	e7f0      	b.n	8008dfc <__s2b+0x18>
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	6143      	str	r3, [r0, #20]
 8008e1e:	2d09      	cmp	r5, #9
 8008e20:	f04f 0301 	mov.w	r3, #1
 8008e24:	6103      	str	r3, [r0, #16]
 8008e26:	dd16      	ble.n	8008e56 <__s2b+0x72>
 8008e28:	f104 0909 	add.w	r9, r4, #9
 8008e2c:	46c8      	mov	r8, r9
 8008e2e:	442c      	add	r4, r5
 8008e30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e34:	4601      	mov	r1, r0
 8008e36:	3b30      	subs	r3, #48	; 0x30
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ff88 	bl	8008d50 <__multadd>
 8008e40:	45a0      	cmp	r8, r4
 8008e42:	d1f5      	bne.n	8008e30 <__s2b+0x4c>
 8008e44:	f1a5 0408 	sub.w	r4, r5, #8
 8008e48:	444c      	add	r4, r9
 8008e4a:	1b2d      	subs	r5, r5, r4
 8008e4c:	1963      	adds	r3, r4, r5
 8008e4e:	42bb      	cmp	r3, r7
 8008e50:	db04      	blt.n	8008e5c <__s2b+0x78>
 8008e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e56:	340a      	adds	r4, #10
 8008e58:	2509      	movs	r5, #9
 8008e5a:	e7f6      	b.n	8008e4a <__s2b+0x66>
 8008e5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e60:	4601      	mov	r1, r0
 8008e62:	3b30      	subs	r3, #48	; 0x30
 8008e64:	220a      	movs	r2, #10
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ff72 	bl	8008d50 <__multadd>
 8008e6c:	e7ee      	b.n	8008e4c <__s2b+0x68>
 8008e6e:	bf00      	nop
 8008e70:	0800a8d4 	.word	0x0800a8d4
 8008e74:	0800a964 	.word	0x0800a964

08008e78 <__hi0bits>:
 8008e78:	0c03      	lsrs	r3, r0, #16
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	b9d3      	cbnz	r3, 8008eb4 <__hi0bits+0x3c>
 8008e7e:	0400      	lsls	r0, r0, #16
 8008e80:	2310      	movs	r3, #16
 8008e82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e86:	bf04      	itt	eq
 8008e88:	0200      	lsleq	r0, r0, #8
 8008e8a:	3308      	addeq	r3, #8
 8008e8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e90:	bf04      	itt	eq
 8008e92:	0100      	lsleq	r0, r0, #4
 8008e94:	3304      	addeq	r3, #4
 8008e96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e9a:	bf04      	itt	eq
 8008e9c:	0080      	lsleq	r0, r0, #2
 8008e9e:	3302      	addeq	r3, #2
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	db05      	blt.n	8008eb0 <__hi0bits+0x38>
 8008ea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ea8:	f103 0301 	add.w	r3, r3, #1
 8008eac:	bf08      	it	eq
 8008eae:	2320      	moveq	r3, #32
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	4770      	bx	lr
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e7e4      	b.n	8008e82 <__hi0bits+0xa>

08008eb8 <__lo0bits>:
 8008eb8:	6803      	ldr	r3, [r0, #0]
 8008eba:	f013 0207 	ands.w	r2, r3, #7
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	d00b      	beq.n	8008eda <__lo0bits+0x22>
 8008ec2:	07da      	lsls	r2, r3, #31
 8008ec4:	d424      	bmi.n	8008f10 <__lo0bits+0x58>
 8008ec6:	0798      	lsls	r0, r3, #30
 8008ec8:	bf49      	itett	mi
 8008eca:	085b      	lsrmi	r3, r3, #1
 8008ecc:	089b      	lsrpl	r3, r3, #2
 8008ece:	2001      	movmi	r0, #1
 8008ed0:	600b      	strmi	r3, [r1, #0]
 8008ed2:	bf5c      	itt	pl
 8008ed4:	600b      	strpl	r3, [r1, #0]
 8008ed6:	2002      	movpl	r0, #2
 8008ed8:	4770      	bx	lr
 8008eda:	b298      	uxth	r0, r3
 8008edc:	b9b0      	cbnz	r0, 8008f0c <__lo0bits+0x54>
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ee6:	bf04      	itt	eq
 8008ee8:	0a1b      	lsreq	r3, r3, #8
 8008eea:	3008      	addeq	r0, #8
 8008eec:	071a      	lsls	r2, r3, #28
 8008eee:	bf04      	itt	eq
 8008ef0:	091b      	lsreq	r3, r3, #4
 8008ef2:	3004      	addeq	r0, #4
 8008ef4:	079a      	lsls	r2, r3, #30
 8008ef6:	bf04      	itt	eq
 8008ef8:	089b      	lsreq	r3, r3, #2
 8008efa:	3002      	addeq	r0, #2
 8008efc:	07da      	lsls	r2, r3, #31
 8008efe:	d403      	bmi.n	8008f08 <__lo0bits+0x50>
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	f100 0001 	add.w	r0, r0, #1
 8008f06:	d005      	beq.n	8008f14 <__lo0bits+0x5c>
 8008f08:	600b      	str	r3, [r1, #0]
 8008f0a:	4770      	bx	lr
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	e7e8      	b.n	8008ee2 <__lo0bits+0x2a>
 8008f10:	2000      	movs	r0, #0
 8008f12:	4770      	bx	lr
 8008f14:	2020      	movs	r0, #32
 8008f16:	4770      	bx	lr

08008f18 <__i2b>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	f7ff feb5 	bl	8008c8c <_Balloc>
 8008f22:	4602      	mov	r2, r0
 8008f24:	b928      	cbnz	r0, 8008f32 <__i2b+0x1a>
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <__i2b+0x24>)
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <__i2b+0x28>)
 8008f2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f2e:	f000 ff27 	bl	8009d80 <__assert_func>
 8008f32:	2301      	movs	r3, #1
 8008f34:	6144      	str	r4, [r0, #20]
 8008f36:	6103      	str	r3, [r0, #16]
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800a8d4 	.word	0x0800a8d4
 8008f40:	0800a964 	.word	0x0800a964

08008f44 <__multiply>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4614      	mov	r4, r2
 8008f4a:	690a      	ldr	r2, [r1, #16]
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	bfb8      	it	lt
 8008f52:	460b      	movlt	r3, r1
 8008f54:	460d      	mov	r5, r1
 8008f56:	bfbc      	itt	lt
 8008f58:	4625      	movlt	r5, r4
 8008f5a:	461c      	movlt	r4, r3
 8008f5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f64:	68ab      	ldr	r3, [r5, #8]
 8008f66:	6869      	ldr	r1, [r5, #4]
 8008f68:	eb0a 0709 	add.w	r7, sl, r9
 8008f6c:	42bb      	cmp	r3, r7
 8008f6e:	b085      	sub	sp, #20
 8008f70:	bfb8      	it	lt
 8008f72:	3101      	addlt	r1, #1
 8008f74:	f7ff fe8a 	bl	8008c8c <_Balloc>
 8008f78:	b930      	cbnz	r0, 8008f88 <__multiply+0x44>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b42      	ldr	r3, [pc, #264]	; (8009088 <__multiply+0x144>)
 8008f7e:	4843      	ldr	r0, [pc, #268]	; (800908c <__multiply+0x148>)
 8008f80:	f240 115d 	movw	r1, #349	; 0x15d
 8008f84:	f000 fefc 	bl	8009d80 <__assert_func>
 8008f88:	f100 0614 	add.w	r6, r0, #20
 8008f8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f90:	4633      	mov	r3, r6
 8008f92:	2200      	movs	r2, #0
 8008f94:	4543      	cmp	r3, r8
 8008f96:	d31e      	bcc.n	8008fd6 <__multiply+0x92>
 8008f98:	f105 0c14 	add.w	ip, r5, #20
 8008f9c:	f104 0314 	add.w	r3, r4, #20
 8008fa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fa8:	9202      	str	r2, [sp, #8]
 8008faa:	ebac 0205 	sub.w	r2, ip, r5
 8008fae:	3a15      	subs	r2, #21
 8008fb0:	f022 0203 	bic.w	r2, r2, #3
 8008fb4:	3204      	adds	r2, #4
 8008fb6:	f105 0115 	add.w	r1, r5, #21
 8008fba:	458c      	cmp	ip, r1
 8008fbc:	bf38      	it	cc
 8008fbe:	2204      	movcc	r2, #4
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9a02      	ldr	r2, [sp, #8]
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d808      	bhi.n	8008fdc <__multiply+0x98>
 8008fca:	2f00      	cmp	r7, #0
 8008fcc:	dc55      	bgt.n	800907a <__multiply+0x136>
 8008fce:	6107      	str	r7, [r0, #16]
 8008fd0:	b005      	add	sp, #20
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	f843 2b04 	str.w	r2, [r3], #4
 8008fda:	e7db      	b.n	8008f94 <__multiply+0x50>
 8008fdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	d020      	beq.n	8009028 <__multiply+0xe4>
 8008fe6:	f105 0e14 	add.w	lr, r5, #20
 8008fea:	46b1      	mov	r9, r6
 8008fec:	2200      	movs	r2, #0
 8008fee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ff2:	f8d9 b000 	ldr.w	fp, [r9]
 8008ff6:	b2a1      	uxth	r1, r4
 8008ff8:	fa1f fb8b 	uxth.w	fp, fp
 8008ffc:	fb0a b101 	mla	r1, sl, r1, fp
 8009000:	4411      	add	r1, r2
 8009002:	f8d9 2000 	ldr.w	r2, [r9]
 8009006:	0c24      	lsrs	r4, r4, #16
 8009008:	0c12      	lsrs	r2, r2, #16
 800900a:	fb0a 2404 	mla	r4, sl, r4, r2
 800900e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009012:	b289      	uxth	r1, r1
 8009014:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009018:	45f4      	cmp	ip, lr
 800901a:	f849 1b04 	str.w	r1, [r9], #4
 800901e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009022:	d8e4      	bhi.n	8008fee <__multiply+0xaa>
 8009024:	9901      	ldr	r1, [sp, #4]
 8009026:	5072      	str	r2, [r6, r1]
 8009028:	9a03      	ldr	r2, [sp, #12]
 800902a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800902e:	3304      	adds	r3, #4
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	d01f      	beq.n	8009076 <__multiply+0x132>
 8009036:	6834      	ldr	r4, [r6, #0]
 8009038:	f105 0114 	add.w	r1, r5, #20
 800903c:	46b6      	mov	lr, r6
 800903e:	f04f 0a00 	mov.w	sl, #0
 8009042:	880a      	ldrh	r2, [r1, #0]
 8009044:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009048:	fb09 b202 	mla	r2, r9, r2, fp
 800904c:	4492      	add	sl, r2
 800904e:	b2a4      	uxth	r4, r4
 8009050:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009054:	f84e 4b04 	str.w	r4, [lr], #4
 8009058:	f851 4b04 	ldr.w	r4, [r1], #4
 800905c:	f8be 2000 	ldrh.w	r2, [lr]
 8009060:	0c24      	lsrs	r4, r4, #16
 8009062:	fb09 2404 	mla	r4, r9, r4, r2
 8009066:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800906a:	458c      	cmp	ip, r1
 800906c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009070:	d8e7      	bhi.n	8009042 <__multiply+0xfe>
 8009072:	9a01      	ldr	r2, [sp, #4]
 8009074:	50b4      	str	r4, [r6, r2]
 8009076:	3604      	adds	r6, #4
 8009078:	e7a3      	b.n	8008fc2 <__multiply+0x7e>
 800907a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1a5      	bne.n	8008fce <__multiply+0x8a>
 8009082:	3f01      	subs	r7, #1
 8009084:	e7a1      	b.n	8008fca <__multiply+0x86>
 8009086:	bf00      	nop
 8009088:	0800a8d4 	.word	0x0800a8d4
 800908c:	0800a964 	.word	0x0800a964

08009090 <__pow5mult>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4615      	mov	r5, r2
 8009096:	f012 0203 	ands.w	r2, r2, #3
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	d007      	beq.n	80090b0 <__pow5mult+0x20>
 80090a0:	4c25      	ldr	r4, [pc, #148]	; (8009138 <__pow5mult+0xa8>)
 80090a2:	3a01      	subs	r2, #1
 80090a4:	2300      	movs	r3, #0
 80090a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090aa:	f7ff fe51 	bl	8008d50 <__multadd>
 80090ae:	4607      	mov	r7, r0
 80090b0:	10ad      	asrs	r5, r5, #2
 80090b2:	d03d      	beq.n	8009130 <__pow5mult+0xa0>
 80090b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b6:	b97c      	cbnz	r4, 80090d8 <__pow5mult+0x48>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f7fc fbf7 	bl	80058ac <malloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	6270      	str	r0, [r6, #36]	; 0x24
 80090c2:	b928      	cbnz	r0, 80090d0 <__pow5mult+0x40>
 80090c4:	4b1d      	ldr	r3, [pc, #116]	; (800913c <__pow5mult+0xac>)
 80090c6:	481e      	ldr	r0, [pc, #120]	; (8009140 <__pow5mult+0xb0>)
 80090c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090cc:	f000 fe58 	bl	8009d80 <__assert_func>
 80090d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d4:	6004      	str	r4, [r0, #0]
 80090d6:	60c4      	str	r4, [r0, #12]
 80090d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090e0:	b94c      	cbnz	r4, 80090f6 <__pow5mult+0x66>
 80090e2:	f240 2171 	movw	r1, #625	; 0x271
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff16 	bl	8008f18 <__i2b>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80090f2:	4604      	mov	r4, r0
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	07eb      	lsls	r3, r5, #31
 80090fc:	d50a      	bpl.n	8009114 <__pow5mult+0x84>
 80090fe:	4639      	mov	r1, r7
 8009100:	4622      	mov	r2, r4
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ff1e 	bl	8008f44 <__multiply>
 8009108:	4639      	mov	r1, r7
 800910a:	4680      	mov	r8, r0
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff fdfd 	bl	8008d0c <_Bfree>
 8009112:	4647      	mov	r7, r8
 8009114:	106d      	asrs	r5, r5, #1
 8009116:	d00b      	beq.n	8009130 <__pow5mult+0xa0>
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	b938      	cbnz	r0, 800912c <__pow5mult+0x9c>
 800911c:	4622      	mov	r2, r4
 800911e:	4621      	mov	r1, r4
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ff0f 	bl	8008f44 <__multiply>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	f8c0 9000 	str.w	r9, [r0]
 800912c:	4604      	mov	r4, r0
 800912e:	e7e4      	b.n	80090fa <__pow5mult+0x6a>
 8009130:	4638      	mov	r0, r7
 8009132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009136:	bf00      	nop
 8009138:	0800aab8 	.word	0x0800aab8
 800913c:	0800a85e 	.word	0x0800a85e
 8009140:	0800a964 	.word	0x0800a964

08009144 <__lshift>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	6849      	ldr	r1, [r1, #4]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	4607      	mov	r7, r0
 8009156:	4691      	mov	r9, r2
 8009158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800915c:	f108 0601 	add.w	r6, r8, #1
 8009160:	42b3      	cmp	r3, r6
 8009162:	db0b      	blt.n	800917c <__lshift+0x38>
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff fd91 	bl	8008c8c <_Balloc>
 800916a:	4605      	mov	r5, r0
 800916c:	b948      	cbnz	r0, 8009182 <__lshift+0x3e>
 800916e:	4602      	mov	r2, r0
 8009170:	4b28      	ldr	r3, [pc, #160]	; (8009214 <__lshift+0xd0>)
 8009172:	4829      	ldr	r0, [pc, #164]	; (8009218 <__lshift+0xd4>)
 8009174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009178:	f000 fe02 	bl	8009d80 <__assert_func>
 800917c:	3101      	adds	r1, #1
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	e7ee      	b.n	8009160 <__lshift+0x1c>
 8009182:	2300      	movs	r3, #0
 8009184:	f100 0114 	add.w	r1, r0, #20
 8009188:	f100 0210 	add.w	r2, r0, #16
 800918c:	4618      	mov	r0, r3
 800918e:	4553      	cmp	r3, sl
 8009190:	db33      	blt.n	80091fa <__lshift+0xb6>
 8009192:	6920      	ldr	r0, [r4, #16]
 8009194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009198:	f104 0314 	add.w	r3, r4, #20
 800919c:	f019 091f 	ands.w	r9, r9, #31
 80091a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091a8:	d02b      	beq.n	8009202 <__lshift+0xbe>
 80091aa:	f1c9 0e20 	rsb	lr, r9, #32
 80091ae:	468a      	mov	sl, r1
 80091b0:	2200      	movs	r2, #0
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	fa00 f009 	lsl.w	r0, r0, r9
 80091b8:	4302      	orrs	r2, r0
 80091ba:	f84a 2b04 	str.w	r2, [sl], #4
 80091be:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c2:	459c      	cmp	ip, r3
 80091c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091c8:	d8f3      	bhi.n	80091b2 <__lshift+0x6e>
 80091ca:	ebac 0304 	sub.w	r3, ip, r4
 80091ce:	3b15      	subs	r3, #21
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3304      	adds	r3, #4
 80091d6:	f104 0015 	add.w	r0, r4, #21
 80091da:	4584      	cmp	ip, r0
 80091dc:	bf38      	it	cc
 80091de:	2304      	movcc	r3, #4
 80091e0:	50ca      	str	r2, [r1, r3]
 80091e2:	b10a      	cbz	r2, 80091e8 <__lshift+0xa4>
 80091e4:	f108 0602 	add.w	r6, r8, #2
 80091e8:	3e01      	subs	r6, #1
 80091ea:	4638      	mov	r0, r7
 80091ec:	612e      	str	r6, [r5, #16]
 80091ee:	4621      	mov	r1, r4
 80091f0:	f7ff fd8c 	bl	8008d0c <_Bfree>
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80091fe:	3301      	adds	r3, #1
 8009200:	e7c5      	b.n	800918e <__lshift+0x4a>
 8009202:	3904      	subs	r1, #4
 8009204:	f853 2b04 	ldr.w	r2, [r3], #4
 8009208:	f841 2f04 	str.w	r2, [r1, #4]!
 800920c:	459c      	cmp	ip, r3
 800920e:	d8f9      	bhi.n	8009204 <__lshift+0xc0>
 8009210:	e7ea      	b.n	80091e8 <__lshift+0xa4>
 8009212:	bf00      	nop
 8009214:	0800a8d4 	.word	0x0800a8d4
 8009218:	0800a964 	.word	0x0800a964

0800921c <__mcmp>:
 800921c:	b530      	push	{r4, r5, lr}
 800921e:	6902      	ldr	r2, [r0, #16]
 8009220:	690c      	ldr	r4, [r1, #16]
 8009222:	1b12      	subs	r2, r2, r4
 8009224:	d10e      	bne.n	8009244 <__mcmp+0x28>
 8009226:	f100 0314 	add.w	r3, r0, #20
 800922a:	3114      	adds	r1, #20
 800922c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800923c:	42a5      	cmp	r5, r4
 800923e:	d003      	beq.n	8009248 <__mcmp+0x2c>
 8009240:	d305      	bcc.n	800924e <__mcmp+0x32>
 8009242:	2201      	movs	r2, #1
 8009244:	4610      	mov	r0, r2
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	4283      	cmp	r3, r0
 800924a:	d3f3      	bcc.n	8009234 <__mcmp+0x18>
 800924c:	e7fa      	b.n	8009244 <__mcmp+0x28>
 800924e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009252:	e7f7      	b.n	8009244 <__mcmp+0x28>

08009254 <__mdiff>:
 8009254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	460c      	mov	r4, r1
 800925a:	4606      	mov	r6, r0
 800925c:	4611      	mov	r1, r2
 800925e:	4620      	mov	r0, r4
 8009260:	4617      	mov	r7, r2
 8009262:	f7ff ffdb 	bl	800921c <__mcmp>
 8009266:	1e05      	subs	r5, r0, #0
 8009268:	d110      	bne.n	800928c <__mdiff+0x38>
 800926a:	4629      	mov	r1, r5
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff fd0d 	bl	8008c8c <_Balloc>
 8009272:	b930      	cbnz	r0, 8009282 <__mdiff+0x2e>
 8009274:	4b39      	ldr	r3, [pc, #228]	; (800935c <__mdiff+0x108>)
 8009276:	4602      	mov	r2, r0
 8009278:	f240 2132 	movw	r1, #562	; 0x232
 800927c:	4838      	ldr	r0, [pc, #224]	; (8009360 <__mdiff+0x10c>)
 800927e:	f000 fd7f 	bl	8009d80 <__assert_func>
 8009282:	2301      	movs	r3, #1
 8009284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	bfa4      	itt	ge
 800928e:	463b      	movge	r3, r7
 8009290:	4627      	movge	r7, r4
 8009292:	4630      	mov	r0, r6
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	bfa6      	itte	ge
 8009298:	461c      	movge	r4, r3
 800929a:	2500      	movge	r5, #0
 800929c:	2501      	movlt	r5, #1
 800929e:	f7ff fcf5 	bl	8008c8c <_Balloc>
 80092a2:	b920      	cbnz	r0, 80092ae <__mdiff+0x5a>
 80092a4:	4b2d      	ldr	r3, [pc, #180]	; (800935c <__mdiff+0x108>)
 80092a6:	4602      	mov	r2, r0
 80092a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092ac:	e7e6      	b.n	800927c <__mdiff+0x28>
 80092ae:	693e      	ldr	r6, [r7, #16]
 80092b0:	60c5      	str	r5, [r0, #12]
 80092b2:	6925      	ldr	r5, [r4, #16]
 80092b4:	f107 0114 	add.w	r1, r7, #20
 80092b8:	f104 0914 	add.w	r9, r4, #20
 80092bc:	f100 0e14 	add.w	lr, r0, #20
 80092c0:	f107 0210 	add.w	r2, r7, #16
 80092c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092cc:	46f2      	mov	sl, lr
 80092ce:	2700      	movs	r7, #0
 80092d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80092d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092d8:	fa1f f883 	uxth.w	r8, r3
 80092dc:	fa17 f78b 	uxtah	r7, r7, fp
 80092e0:	0c1b      	lsrs	r3, r3, #16
 80092e2:	eba7 0808 	sub.w	r8, r7, r8
 80092e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ee:	fa1f f888 	uxth.w	r8, r8
 80092f2:	141f      	asrs	r7, r3, #16
 80092f4:	454d      	cmp	r5, r9
 80092f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092fa:	f84a 3b04 	str.w	r3, [sl], #4
 80092fe:	d8e7      	bhi.n	80092d0 <__mdiff+0x7c>
 8009300:	1b2b      	subs	r3, r5, r4
 8009302:	3b15      	subs	r3, #21
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	3304      	adds	r3, #4
 800930a:	3415      	adds	r4, #21
 800930c:	42a5      	cmp	r5, r4
 800930e:	bf38      	it	cc
 8009310:	2304      	movcc	r3, #4
 8009312:	4419      	add	r1, r3
 8009314:	4473      	add	r3, lr
 8009316:	469e      	mov	lr, r3
 8009318:	460d      	mov	r5, r1
 800931a:	4565      	cmp	r5, ip
 800931c:	d30e      	bcc.n	800933c <__mdiff+0xe8>
 800931e:	f10c 0203 	add.w	r2, ip, #3
 8009322:	1a52      	subs	r2, r2, r1
 8009324:	f022 0203 	bic.w	r2, r2, #3
 8009328:	3903      	subs	r1, #3
 800932a:	458c      	cmp	ip, r1
 800932c:	bf38      	it	cc
 800932e:	2200      	movcc	r2, #0
 8009330:	441a      	add	r2, r3
 8009332:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009336:	b17b      	cbz	r3, 8009358 <__mdiff+0x104>
 8009338:	6106      	str	r6, [r0, #16]
 800933a:	e7a5      	b.n	8009288 <__mdiff+0x34>
 800933c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009340:	fa17 f488 	uxtah	r4, r7, r8
 8009344:	1422      	asrs	r2, r4, #16
 8009346:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800934a:	b2a4      	uxth	r4, r4
 800934c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009350:	f84e 4b04 	str.w	r4, [lr], #4
 8009354:	1417      	asrs	r7, r2, #16
 8009356:	e7e0      	b.n	800931a <__mdiff+0xc6>
 8009358:	3e01      	subs	r6, #1
 800935a:	e7ea      	b.n	8009332 <__mdiff+0xde>
 800935c:	0800a8d4 	.word	0x0800a8d4
 8009360:	0800a964 	.word	0x0800a964

08009364 <__ulp>:
 8009364:	b082      	sub	sp, #8
 8009366:	ed8d 0b00 	vstr	d0, [sp]
 800936a:	9b01      	ldr	r3, [sp, #4]
 800936c:	4912      	ldr	r1, [pc, #72]	; (80093b8 <__ulp+0x54>)
 800936e:	4019      	ands	r1, r3
 8009370:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009374:	2900      	cmp	r1, #0
 8009376:	dd05      	ble.n	8009384 <__ulp+0x20>
 8009378:	2200      	movs	r2, #0
 800937a:	460b      	mov	r3, r1
 800937c:	ec43 2b10 	vmov	d0, r2, r3
 8009380:	b002      	add	sp, #8
 8009382:	4770      	bx	lr
 8009384:	4249      	negs	r1, r1
 8009386:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800938a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	da04      	bge.n	80093a2 <__ulp+0x3e>
 8009398:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800939c:	fa41 f300 	asr.w	r3, r1, r0
 80093a0:	e7ec      	b.n	800937c <__ulp+0x18>
 80093a2:	f1a0 0114 	sub.w	r1, r0, #20
 80093a6:	291e      	cmp	r1, #30
 80093a8:	bfda      	itte	le
 80093aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80093ae:	fa20 f101 	lsrle.w	r1, r0, r1
 80093b2:	2101      	movgt	r1, #1
 80093b4:	460a      	mov	r2, r1
 80093b6:	e7e1      	b.n	800937c <__ulp+0x18>
 80093b8:	7ff00000 	.word	0x7ff00000

080093bc <__b2d>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	6905      	ldr	r5, [r0, #16]
 80093c0:	f100 0714 	add.w	r7, r0, #20
 80093c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80093c8:	1f2e      	subs	r6, r5, #4
 80093ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fd52 	bl	8008e78 <__hi0bits>
 80093d4:	f1c0 0320 	rsb	r3, r0, #32
 80093d8:	280a      	cmp	r0, #10
 80093da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009458 <__b2d+0x9c>
 80093de:	600b      	str	r3, [r1, #0]
 80093e0:	dc14      	bgt.n	800940c <__b2d+0x50>
 80093e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80093e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80093ea:	42b7      	cmp	r7, r6
 80093ec:	ea41 030c 	orr.w	r3, r1, ip
 80093f0:	bf34      	ite	cc
 80093f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093f6:	2100      	movcs	r1, #0
 80093f8:	3015      	adds	r0, #21
 80093fa:	fa04 f000 	lsl.w	r0, r4, r0
 80093fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8009402:	ea40 0201 	orr.w	r2, r0, r1
 8009406:	ec43 2b10 	vmov	d0, r2, r3
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940c:	42b7      	cmp	r7, r6
 800940e:	bf3a      	itte	cc
 8009410:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009414:	f1a5 0608 	subcc.w	r6, r5, #8
 8009418:	2100      	movcs	r1, #0
 800941a:	380b      	subs	r0, #11
 800941c:	d017      	beq.n	800944e <__b2d+0x92>
 800941e:	f1c0 0c20 	rsb	ip, r0, #32
 8009422:	fa04 f500 	lsl.w	r5, r4, r0
 8009426:	42be      	cmp	r6, r7
 8009428:	fa21 f40c 	lsr.w	r4, r1, ip
 800942c:	ea45 0504 	orr.w	r5, r5, r4
 8009430:	bf8c      	ite	hi
 8009432:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009436:	2400      	movls	r4, #0
 8009438:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800943c:	fa01 f000 	lsl.w	r0, r1, r0
 8009440:	fa24 f40c 	lsr.w	r4, r4, ip
 8009444:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009448:	ea40 0204 	orr.w	r2, r0, r4
 800944c:	e7db      	b.n	8009406 <__b2d+0x4a>
 800944e:	ea44 030c 	orr.w	r3, r4, ip
 8009452:	460a      	mov	r2, r1
 8009454:	e7d7      	b.n	8009406 <__b2d+0x4a>
 8009456:	bf00      	nop
 8009458:	3ff00000 	.word	0x3ff00000

0800945c <__d2b>:
 800945c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009460:	4689      	mov	r9, r1
 8009462:	2101      	movs	r1, #1
 8009464:	ec57 6b10 	vmov	r6, r7, d0
 8009468:	4690      	mov	r8, r2
 800946a:	f7ff fc0f 	bl	8008c8c <_Balloc>
 800946e:	4604      	mov	r4, r0
 8009470:	b930      	cbnz	r0, 8009480 <__d2b+0x24>
 8009472:	4602      	mov	r2, r0
 8009474:	4b25      	ldr	r3, [pc, #148]	; (800950c <__d2b+0xb0>)
 8009476:	4826      	ldr	r0, [pc, #152]	; (8009510 <__d2b+0xb4>)
 8009478:	f240 310a 	movw	r1, #778	; 0x30a
 800947c:	f000 fc80 	bl	8009d80 <__assert_func>
 8009480:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009484:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009488:	bb35      	cbnz	r5, 80094d8 <__d2b+0x7c>
 800948a:	2e00      	cmp	r6, #0
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	d028      	beq.n	80094e2 <__d2b+0x86>
 8009490:	4668      	mov	r0, sp
 8009492:	9600      	str	r6, [sp, #0]
 8009494:	f7ff fd10 	bl	8008eb8 <__lo0bits>
 8009498:	9900      	ldr	r1, [sp, #0]
 800949a:	b300      	cbz	r0, 80094de <__d2b+0x82>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	f1c0 0320 	rsb	r3, r0, #32
 80094a2:	fa02 f303 	lsl.w	r3, r2, r3
 80094a6:	430b      	orrs	r3, r1
 80094a8:	40c2      	lsrs	r2, r0
 80094aa:	6163      	str	r3, [r4, #20]
 80094ac:	9201      	str	r2, [sp, #4]
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	61a3      	str	r3, [r4, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bf14      	ite	ne
 80094b6:	2202      	movne	r2, #2
 80094b8:	2201      	moveq	r2, #1
 80094ba:	6122      	str	r2, [r4, #16]
 80094bc:	b1d5      	cbz	r5, 80094f4 <__d2b+0x98>
 80094be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094c2:	4405      	add	r5, r0
 80094c4:	f8c9 5000 	str.w	r5, [r9]
 80094c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094cc:	f8c8 0000 	str.w	r0, [r8]
 80094d0:	4620      	mov	r0, r4
 80094d2:	b003      	add	sp, #12
 80094d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094dc:	e7d5      	b.n	800948a <__d2b+0x2e>
 80094de:	6161      	str	r1, [r4, #20]
 80094e0:	e7e5      	b.n	80094ae <__d2b+0x52>
 80094e2:	a801      	add	r0, sp, #4
 80094e4:	f7ff fce8 	bl	8008eb8 <__lo0bits>
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	6163      	str	r3, [r4, #20]
 80094ec:	2201      	movs	r2, #1
 80094ee:	6122      	str	r2, [r4, #16]
 80094f0:	3020      	adds	r0, #32
 80094f2:	e7e3      	b.n	80094bc <__d2b+0x60>
 80094f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094fc:	f8c9 0000 	str.w	r0, [r9]
 8009500:	6918      	ldr	r0, [r3, #16]
 8009502:	f7ff fcb9 	bl	8008e78 <__hi0bits>
 8009506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800950a:	e7df      	b.n	80094cc <__d2b+0x70>
 800950c:	0800a8d4 	.word	0x0800a8d4
 8009510:	0800a964 	.word	0x0800a964

08009514 <__ratio>:
 8009514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	4688      	mov	r8, r1
 800951a:	4669      	mov	r1, sp
 800951c:	4681      	mov	r9, r0
 800951e:	f7ff ff4d 	bl	80093bc <__b2d>
 8009522:	a901      	add	r1, sp, #4
 8009524:	4640      	mov	r0, r8
 8009526:	ec55 4b10 	vmov	r4, r5, d0
 800952a:	f7ff ff47 	bl	80093bc <__b2d>
 800952e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009532:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009536:	eba3 0c02 	sub.w	ip, r3, r2
 800953a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009544:	ec51 0b10 	vmov	r0, r1, d0
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfd6      	itet	le
 800954c:	460a      	movle	r2, r1
 800954e:	462a      	movgt	r2, r5
 8009550:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009554:	468b      	mov	fp, r1
 8009556:	462f      	mov	r7, r5
 8009558:	bfd4      	ite	le
 800955a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800955e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009562:	4620      	mov	r0, r4
 8009564:	ee10 2a10 	vmov	r2, s0
 8009568:	465b      	mov	r3, fp
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 f96e 	bl	800084c <__aeabi_ddiv>
 8009570:	ec41 0b10 	vmov	d0, r0, r1
 8009574:	b003      	add	sp, #12
 8009576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800957a <__copybits>:
 800957a:	3901      	subs	r1, #1
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	1149      	asrs	r1, r1, #5
 8009580:	6914      	ldr	r4, [r2, #16]
 8009582:	3101      	adds	r1, #1
 8009584:	f102 0314 	add.w	r3, r2, #20
 8009588:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800958c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009590:	1f05      	subs	r5, r0, #4
 8009592:	42a3      	cmp	r3, r4
 8009594:	d30c      	bcc.n	80095b0 <__copybits+0x36>
 8009596:	1aa3      	subs	r3, r4, r2
 8009598:	3b11      	subs	r3, #17
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	3211      	adds	r2, #17
 80095a0:	42a2      	cmp	r2, r4
 80095a2:	bf88      	it	hi
 80095a4:	2300      	movhi	r3, #0
 80095a6:	4418      	add	r0, r3
 80095a8:	2300      	movs	r3, #0
 80095aa:	4288      	cmp	r0, r1
 80095ac:	d305      	bcc.n	80095ba <__copybits+0x40>
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80095b4:	f845 6f04 	str.w	r6, [r5, #4]!
 80095b8:	e7eb      	b.n	8009592 <__copybits+0x18>
 80095ba:	f840 3b04 	str.w	r3, [r0], #4
 80095be:	e7f4      	b.n	80095aa <__copybits+0x30>

080095c0 <__any_on>:
 80095c0:	f100 0214 	add.w	r2, r0, #20
 80095c4:	6900      	ldr	r0, [r0, #16]
 80095c6:	114b      	asrs	r3, r1, #5
 80095c8:	4298      	cmp	r0, r3
 80095ca:	b510      	push	{r4, lr}
 80095cc:	db11      	blt.n	80095f2 <__any_on+0x32>
 80095ce:	dd0a      	ble.n	80095e6 <__any_on+0x26>
 80095d0:	f011 011f 	ands.w	r1, r1, #31
 80095d4:	d007      	beq.n	80095e6 <__any_on+0x26>
 80095d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095da:	fa24 f001 	lsr.w	r0, r4, r1
 80095de:	fa00 f101 	lsl.w	r1, r0, r1
 80095e2:	428c      	cmp	r4, r1
 80095e4:	d10b      	bne.n	80095fe <__any_on+0x3e>
 80095e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d803      	bhi.n	80095f6 <__any_on+0x36>
 80095ee:	2000      	movs	r0, #0
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	4603      	mov	r3, r0
 80095f4:	e7f7      	b.n	80095e6 <__any_on+0x26>
 80095f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d0f5      	beq.n	80095ea <__any_on+0x2a>
 80095fe:	2001      	movs	r0, #1
 8009600:	e7f6      	b.n	80095f0 <__any_on+0x30>

08009602 <_calloc_r>:
 8009602:	b513      	push	{r0, r1, r4, lr}
 8009604:	434a      	muls	r2, r1
 8009606:	4611      	mov	r1, r2
 8009608:	9201      	str	r2, [sp, #4]
 800960a:	f7fc f9bd 	bl	8005988 <_malloc_r>
 800960e:	4604      	mov	r4, r0
 8009610:	b118      	cbz	r0, 800961a <_calloc_r+0x18>
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	2100      	movs	r1, #0
 8009616:	f7fc f95f 	bl	80058d8 <memset>
 800961a:	4620      	mov	r0, r4
 800961c:	b002      	add	sp, #8
 800961e:	bd10      	pop	{r4, pc}

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	429e      	cmp	r6, r3
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	461f      	mov	r7, r3
 8009630:	d838      	bhi.n	80096a4 <__ssputs_r+0x84>
 8009632:	898a      	ldrh	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009638:	d032      	beq.n	80096a0 <__ssputs_r+0x80>
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eba5 0901 	sub.w	r9, r5, r1
 8009642:	6965      	ldr	r5, [r4, #20]
 8009644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	3301      	adds	r3, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d531      	bpl.n	80096c0 <__ssputs_r+0xa0>
 800965c:	4629      	mov	r1, r5
 800965e:	f7fc f993 	bl	8005988 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b950      	cbnz	r0, 800967c <__ssputs_r+0x5c>
 8009666:	230c      	movs	r3, #12
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f7fc f91c 	bl	80058bc <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x86>
 80096a4:	463e      	mov	r6, r7
 80096a6:	4632      	mov	r2, r6
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 fbfc 	bl	8009ea8 <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	1b9b      	subs	r3, r3, r6
 80096b6:	4432      	add	r2, r6
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7db      	b.n	8009678 <__ssputs_r+0x58>
 80096c0:	462a      	mov	r2, r5
 80096c2:	f000 fc0b 	bl	8009edc <_realloc_r>
 80096c6:	4606      	mov	r6, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e1      	bne.n	8009690 <__ssputs_r+0x70>
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7fc f90a 	bl	80058e8 <_free_r>
 80096d4:	e7c7      	b.n	8009666 <__ssputs_r+0x46>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d50e      	bpl.n	800970a <_svfiprintf_r+0x32>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b963      	cbnz	r3, 800970a <_svfiprintf_r+0x32>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f7fc f949 	bl	8005988 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b920      	cbnz	r0, 8009706 <_svfiprintf_r+0x2e>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009704:	e0d1      	b.n	80098aa <_svfiprintf_r+0x1d2>
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c4 <_svfiprintf_r+0x1ec>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x5c>
 8009730:	2a25      	cmp	r2, #37	; 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x50>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7a>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6d 	bl	8009620 <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80aa 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	; 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a2 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4851      	ldr	r0, [pc, #324]	; (80098c4 <_svfiprintf_r+0x1ec>)
 800977e:	f7f6 fd2f 	bl	80001e0 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xe6>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	; 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xf6>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94e      	bls.n	8009856 <_svfiprintf_r+0x17e>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x110>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x110>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0x9c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	; 0x2e
 80097ec:	d10c      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	; 0x2a
 80097f2:	d135      	bne.n	8009860 <_svfiprintf_r+0x188>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb8      	it	lt
 8009800:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d4 <_svfiprintf_r+0x1fc>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fce5 	bl	80001e0 <memchr>
 8009816:	b140      	cbz	r0, 800982a <_svfiprintf_r+0x152>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	fa03 f000 	lsl.w	r0, r3, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4303      	orrs	r3, r0
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcd3 	bl	80001e0 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d038      	beq.n	80098b0 <_svfiprintf_r+0x1d8>
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <_svfiprintf_r+0x1f4>)
 8009840:	bb1b      	cbnz	r3, 800988a <_svfiprintf_r+0x1b2>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4433      	add	r3, r6
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	e767      	b.n	8009726 <_svfiprintf_r+0x4e>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a5      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	; 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_svfiprintf_r+0x1a8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c5      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c3      	b.n	8009808 <_svfiprintf_r+0x130>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_svfiprintf_r+0x194>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4638      	mov	r0, r7
 8009896:	f7fc f971 	bl	8005b7c <_printf_float>
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	4606      	mov	r6, r0
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af2c 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	b01d      	add	sp, #116	; 0x74
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7fc fc02 	bl	80060c4 <_printf_i>
 80098c0:	e7eb      	b.n	800989a <_svfiprintf_r+0x1c2>
 80098c2:	bf00      	nop
 80098c4:	0800aac4 	.word	0x0800aac4
 80098c8:	0800aace 	.word	0x0800aace
 80098cc:	08005b7d 	.word	0x08005b7d
 80098d0:	08009621 	.word	0x08009621
 80098d4:	0800aaca 	.word	0x0800aaca

080098d8 <__sfputc_r>:
 80098d8:	6893      	ldr	r3, [r2, #8]
 80098da:	3b01      	subs	r3, #1
 80098dc:	2b00      	cmp	r3, #0
 80098de:	b410      	push	{r4}
 80098e0:	6093      	str	r3, [r2, #8]
 80098e2:	da08      	bge.n	80098f6 <__sfputc_r+0x1e>
 80098e4:	6994      	ldr	r4, [r2, #24]
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	db01      	blt.n	80098ee <__sfputc_r+0x16>
 80098ea:	290a      	cmp	r1, #10
 80098ec:	d103      	bne.n	80098f6 <__sfputc_r+0x1e>
 80098ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f2:	f000 b977 	b.w	8009be4 <__swbuf_r>
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	1c58      	adds	r0, r3, #1
 80098fa:	6010      	str	r0, [r2, #0]
 80098fc:	7019      	strb	r1, [r3, #0]
 80098fe:	4608      	mov	r0, r1
 8009900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009904:	4770      	bx	lr

08009906 <__sfputs_r>:
 8009906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009908:	4606      	mov	r6, r0
 800990a:	460f      	mov	r7, r1
 800990c:	4614      	mov	r4, r2
 800990e:	18d5      	adds	r5, r2, r3
 8009910:	42ac      	cmp	r4, r5
 8009912:	d101      	bne.n	8009918 <__sfputs_r+0x12>
 8009914:	2000      	movs	r0, #0
 8009916:	e007      	b.n	8009928 <__sfputs_r+0x22>
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	463a      	mov	r2, r7
 800991e:	4630      	mov	r0, r6
 8009920:	f7ff ffda 	bl	80098d8 <__sfputc_r>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d1f3      	bne.n	8009910 <__sfputs_r+0xa>
 8009928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800992c <_vfiprintf_r>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	460d      	mov	r5, r1
 8009932:	b09d      	sub	sp, #116	; 0x74
 8009934:	4614      	mov	r4, r2
 8009936:	4698      	mov	r8, r3
 8009938:	4606      	mov	r6, r0
 800993a:	b118      	cbz	r0, 8009944 <_vfiprintf_r+0x18>
 800993c:	6983      	ldr	r3, [r0, #24]
 800993e:	b90b      	cbnz	r3, 8009944 <_vfiprintf_r+0x18>
 8009940:	f7fb fef2 	bl	8005728 <__sinit>
 8009944:	4b89      	ldr	r3, [pc, #548]	; (8009b6c <_vfiprintf_r+0x240>)
 8009946:	429d      	cmp	r5, r3
 8009948:	d11b      	bne.n	8009982 <_vfiprintf_r+0x56>
 800994a:	6875      	ldr	r5, [r6, #4]
 800994c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800994e:	07d9      	lsls	r1, r3, #31
 8009950:	d405      	bmi.n	800995e <_vfiprintf_r+0x32>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	059a      	lsls	r2, r3, #22
 8009956:	d402      	bmi.n	800995e <_vfiprintf_r+0x32>
 8009958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800995a:	f7f8 fab6 	bl	8001eca <__retarget_lock_acquire_recursive>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	071b      	lsls	r3, r3, #28
 8009962:	d501      	bpl.n	8009968 <_vfiprintf_r+0x3c>
 8009964:	692b      	ldr	r3, [r5, #16]
 8009966:	b9eb      	cbnz	r3, 80099a4 <_vfiprintf_r+0x78>
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f000 f99a 	bl	8009ca4 <__swsetup_r>
 8009970:	b1c0      	cbz	r0, 80099a4 <_vfiprintf_r+0x78>
 8009972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009974:	07dc      	lsls	r4, r3, #31
 8009976:	d50e      	bpl.n	8009996 <_vfiprintf_r+0x6a>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800997c:	b01d      	add	sp, #116	; 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	4b7b      	ldr	r3, [pc, #492]	; (8009b70 <_vfiprintf_r+0x244>)
 8009984:	429d      	cmp	r5, r3
 8009986:	d101      	bne.n	800998c <_vfiprintf_r+0x60>
 8009988:	68b5      	ldr	r5, [r6, #8]
 800998a:	e7df      	b.n	800994c <_vfiprintf_r+0x20>
 800998c:	4b79      	ldr	r3, [pc, #484]	; (8009b74 <_vfiprintf_r+0x248>)
 800998e:	429d      	cmp	r5, r3
 8009990:	bf08      	it	eq
 8009992:	68f5      	ldreq	r5, [r6, #12]
 8009994:	e7da      	b.n	800994c <_vfiprintf_r+0x20>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	0598      	lsls	r0, r3, #22
 800999a:	d4ed      	bmi.n	8009978 <_vfiprintf_r+0x4c>
 800999c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800999e:	f7f8 faa8 	bl	8001ef2 <__retarget_lock_release_recursive>
 80099a2:	e7e9      	b.n	8009978 <_vfiprintf_r+0x4c>
 80099a4:	2300      	movs	r3, #0
 80099a6:	9309      	str	r3, [sp, #36]	; 0x24
 80099a8:	2320      	movs	r3, #32
 80099aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b2:	2330      	movs	r3, #48	; 0x30
 80099b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b78 <_vfiprintf_r+0x24c>
 80099b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099bc:	f04f 0901 	mov.w	r9, #1
 80099c0:	4623      	mov	r3, r4
 80099c2:	469a      	mov	sl, r3
 80099c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c8:	b10a      	cbz	r2, 80099ce <_vfiprintf_r+0xa2>
 80099ca:	2a25      	cmp	r2, #37	; 0x25
 80099cc:	d1f9      	bne.n	80099c2 <_vfiprintf_r+0x96>
 80099ce:	ebba 0b04 	subs.w	fp, sl, r4
 80099d2:	d00b      	beq.n	80099ec <_vfiprintf_r+0xc0>
 80099d4:	465b      	mov	r3, fp
 80099d6:	4622      	mov	r2, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ff93 	bl	8009906 <__sfputs_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	f000 80aa 	beq.w	8009b3a <_vfiprintf_r+0x20e>
 80099e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e8:	445a      	add	r2, fp
 80099ea:	9209      	str	r2, [sp, #36]	; 0x24
 80099ec:	f89a 3000 	ldrb.w	r3, [sl]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 80a2 	beq.w	8009b3a <_vfiprintf_r+0x20e>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a00:	f10a 0a01 	add.w	sl, sl, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	9307      	str	r3, [sp, #28]
 8009a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a0e:	4654      	mov	r4, sl
 8009a10:	2205      	movs	r2, #5
 8009a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a16:	4858      	ldr	r0, [pc, #352]	; (8009b78 <_vfiprintf_r+0x24c>)
 8009a18:	f7f6 fbe2 	bl	80001e0 <memchr>
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	b9d8      	cbnz	r0, 8009a58 <_vfiprintf_r+0x12c>
 8009a20:	06d1      	lsls	r1, r2, #27
 8009a22:	bf44      	itt	mi
 8009a24:	2320      	movmi	r3, #32
 8009a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2a:	0713      	lsls	r3, r2, #28
 8009a2c:	bf44      	itt	mi
 8009a2e:	232b      	movmi	r3, #43	; 0x2b
 8009a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a34:	f89a 3000 	ldrb.w	r3, [sl]
 8009a38:	2b2a      	cmp	r3, #42	; 0x2a
 8009a3a:	d015      	beq.n	8009a68 <_vfiprintf_r+0x13c>
 8009a3c:	9a07      	ldr	r2, [sp, #28]
 8009a3e:	4654      	mov	r4, sl
 8009a40:	2000      	movs	r0, #0
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4621      	mov	r1, r4
 8009a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4c:	3b30      	subs	r3, #48	; 0x30
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d94e      	bls.n	8009af0 <_vfiprintf_r+0x1c4>
 8009a52:	b1b0      	cbz	r0, 8009a82 <_vfiprintf_r+0x156>
 8009a54:	9207      	str	r2, [sp, #28]
 8009a56:	e014      	b.n	8009a82 <_vfiprintf_r+0x156>
 8009a58:	eba0 0308 	sub.w	r3, r0, r8
 8009a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a60:	4313      	orrs	r3, r2
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	46a2      	mov	sl, r4
 8009a66:	e7d2      	b.n	8009a0e <_vfiprintf_r+0xe2>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	1d19      	adds	r1, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bfbb      	ittet	lt
 8009a74:	425b      	neglt	r3, r3
 8009a76:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7a:	9307      	strge	r3, [sp, #28]
 8009a7c:	9307      	strlt	r3, [sp, #28]
 8009a7e:	bfb8      	it	lt
 8009a80:	9204      	strlt	r2, [sp, #16]
 8009a82:	7823      	ldrb	r3, [r4, #0]
 8009a84:	2b2e      	cmp	r3, #46	; 0x2e
 8009a86:	d10c      	bne.n	8009aa2 <_vfiprintf_r+0x176>
 8009a88:	7863      	ldrb	r3, [r4, #1]
 8009a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8c:	d135      	bne.n	8009afa <_vfiprintf_r+0x1ce>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	9203      	str	r2, [sp, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfb8      	it	lt
 8009a9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a9e:	3402      	adds	r4, #2
 8009aa0:	9305      	str	r3, [sp, #20]
 8009aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b88 <_vfiprintf_r+0x25c>
 8009aa6:	7821      	ldrb	r1, [r4, #0]
 8009aa8:	2203      	movs	r2, #3
 8009aaa:	4650      	mov	r0, sl
 8009aac:	f7f6 fb98 	bl	80001e0 <memchr>
 8009ab0:	b140      	cbz	r0, 8009ac4 <_vfiprintf_r+0x198>
 8009ab2:	2340      	movs	r3, #64	; 0x40
 8009ab4:	eba0 000a 	sub.w	r0, r0, sl
 8009ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	4303      	orrs	r3, r0
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac8:	482c      	ldr	r0, [pc, #176]	; (8009b7c <_vfiprintf_r+0x250>)
 8009aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ace:	2206      	movs	r2, #6
 8009ad0:	f7f6 fb86 	bl	80001e0 <memchr>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d03f      	beq.n	8009b58 <_vfiprintf_r+0x22c>
 8009ad8:	4b29      	ldr	r3, [pc, #164]	; (8009b80 <_vfiprintf_r+0x254>)
 8009ada:	bb1b      	cbnz	r3, 8009b24 <_vfiprintf_r+0x1f8>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	3307      	adds	r3, #7
 8009ae0:	f023 0307 	bic.w	r3, r3, #7
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	9303      	str	r3, [sp, #12]
 8009ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aea:	443b      	add	r3, r7
 8009aec:	9309      	str	r3, [sp, #36]	; 0x24
 8009aee:	e767      	b.n	80099c0 <_vfiprintf_r+0x94>
 8009af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009af4:	460c      	mov	r4, r1
 8009af6:	2001      	movs	r0, #1
 8009af8:	e7a5      	b.n	8009a46 <_vfiprintf_r+0x11a>
 8009afa:	2300      	movs	r3, #0
 8009afc:	3401      	adds	r4, #1
 8009afe:	9305      	str	r3, [sp, #20]
 8009b00:	4619      	mov	r1, r3
 8009b02:	f04f 0c0a 	mov.w	ip, #10
 8009b06:	4620      	mov	r0, r4
 8009b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b0c:	3a30      	subs	r2, #48	; 0x30
 8009b0e:	2a09      	cmp	r2, #9
 8009b10:	d903      	bls.n	8009b1a <_vfiprintf_r+0x1ee>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0c5      	beq.n	8009aa2 <_vfiprintf_r+0x176>
 8009b16:	9105      	str	r1, [sp, #20]
 8009b18:	e7c3      	b.n	8009aa2 <_vfiprintf_r+0x176>
 8009b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b1e:	4604      	mov	r4, r0
 8009b20:	2301      	movs	r3, #1
 8009b22:	e7f0      	b.n	8009b06 <_vfiprintf_r+0x1da>
 8009b24:	ab03      	add	r3, sp, #12
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	462a      	mov	r2, r5
 8009b2a:	4b16      	ldr	r3, [pc, #88]	; (8009b84 <_vfiprintf_r+0x258>)
 8009b2c:	a904      	add	r1, sp, #16
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7fc f824 	bl	8005b7c <_printf_float>
 8009b34:	4607      	mov	r7, r0
 8009b36:	1c78      	adds	r0, r7, #1
 8009b38:	d1d6      	bne.n	8009ae8 <_vfiprintf_r+0x1bc>
 8009b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3c:	07d9      	lsls	r1, r3, #31
 8009b3e:	d405      	bmi.n	8009b4c <_vfiprintf_r+0x220>
 8009b40:	89ab      	ldrh	r3, [r5, #12]
 8009b42:	059a      	lsls	r2, r3, #22
 8009b44:	d402      	bmi.n	8009b4c <_vfiprintf_r+0x220>
 8009b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b48:	f7f8 f9d3 	bl	8001ef2 <__retarget_lock_release_recursive>
 8009b4c:	89ab      	ldrh	r3, [r5, #12]
 8009b4e:	065b      	lsls	r3, r3, #25
 8009b50:	f53f af12 	bmi.w	8009978 <_vfiprintf_r+0x4c>
 8009b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b56:	e711      	b.n	800997c <_vfiprintf_r+0x50>
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	462a      	mov	r2, r5
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <_vfiprintf_r+0x258>)
 8009b60:	a904      	add	r1, sp, #16
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7fc faae 	bl	80060c4 <_printf_i>
 8009b68:	e7e4      	b.n	8009b34 <_vfiprintf_r+0x208>
 8009b6a:	bf00      	nop
 8009b6c:	0800a67c 	.word	0x0800a67c
 8009b70:	0800a69c 	.word	0x0800a69c
 8009b74:	0800a65c 	.word	0x0800a65c
 8009b78:	0800aac4 	.word	0x0800aac4
 8009b7c:	0800aace 	.word	0x0800aace
 8009b80:	08005b7d 	.word	0x08005b7d
 8009b84:	08009907 	.word	0x08009907
 8009b88:	0800aaca 	.word	0x0800aaca

08009b8c <_read_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d07      	ldr	r5, [pc, #28]	; (8009bac <_read_r+0x20>)
 8009b90:	4604      	mov	r4, r0
 8009b92:	4608      	mov	r0, r1
 8009b94:	4611      	mov	r1, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	602a      	str	r2, [r5, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f000 fa82 	bl	800a0a4 <_read>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_read_r+0x1e>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_read_r+0x1e>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	200044e0 	.word	0x200044e0

08009bb0 <nan>:
 8009bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009bb8 <nan+0x8>
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	7ff80000 	.word	0x7ff80000

08009bc0 <strncmp>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	b16a      	cbz	r2, 8009be0 <strncmp+0x20>
 8009bc4:	3901      	subs	r1, #1
 8009bc6:	1884      	adds	r4, r0, r2
 8009bc8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009bcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d103      	bne.n	8009bdc <strncmp+0x1c>
 8009bd4:	42a0      	cmp	r0, r4
 8009bd6:	d001      	beq.n	8009bdc <strncmp+0x1c>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f5      	bne.n	8009bc8 <strncmp+0x8>
 8009bdc:	1a98      	subs	r0, r3, r2
 8009bde:	bd10      	pop	{r4, pc}
 8009be0:	4610      	mov	r0, r2
 8009be2:	e7fc      	b.n	8009bde <strncmp+0x1e>

08009be4 <__swbuf_r>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	460e      	mov	r6, r1
 8009be8:	4614      	mov	r4, r2
 8009bea:	4605      	mov	r5, r0
 8009bec:	b118      	cbz	r0, 8009bf6 <__swbuf_r+0x12>
 8009bee:	6983      	ldr	r3, [r0, #24]
 8009bf0:	b90b      	cbnz	r3, 8009bf6 <__swbuf_r+0x12>
 8009bf2:	f7fb fd99 	bl	8005728 <__sinit>
 8009bf6:	4b21      	ldr	r3, [pc, #132]	; (8009c7c <__swbuf_r+0x98>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d12b      	bne.n	8009c54 <__swbuf_r+0x70>
 8009bfc:	686c      	ldr	r4, [r5, #4]
 8009bfe:	69a3      	ldr	r3, [r4, #24]
 8009c00:	60a3      	str	r3, [r4, #8]
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	071a      	lsls	r2, r3, #28
 8009c06:	d52f      	bpl.n	8009c68 <__swbuf_r+0x84>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	b36b      	cbz	r3, 8009c68 <__swbuf_r+0x84>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	1ac0      	subs	r0, r0, r3
 8009c12:	6963      	ldr	r3, [r4, #20]
 8009c14:	b2f6      	uxtb	r6, r6
 8009c16:	4283      	cmp	r3, r0
 8009c18:	4637      	mov	r7, r6
 8009c1a:	dc04      	bgt.n	8009c26 <__swbuf_r+0x42>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7fe fc54 	bl	80084cc <_fflush_r>
 8009c24:	bb30      	cbnz	r0, 8009c74 <__swbuf_r+0x90>
 8009c26:	68a3      	ldr	r3, [r4, #8]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	60a3      	str	r3, [r4, #8]
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	701e      	strb	r6, [r3, #0]
 8009c34:	6963      	ldr	r3, [r4, #20]
 8009c36:	3001      	adds	r0, #1
 8009c38:	4283      	cmp	r3, r0
 8009c3a:	d004      	beq.n	8009c46 <__swbuf_r+0x62>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	07db      	lsls	r3, r3, #31
 8009c40:	d506      	bpl.n	8009c50 <__swbuf_r+0x6c>
 8009c42:	2e0a      	cmp	r6, #10
 8009c44:	d104      	bne.n	8009c50 <__swbuf_r+0x6c>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7fe fc3f 	bl	80084cc <_fflush_r>
 8009c4e:	b988      	cbnz	r0, 8009c74 <__swbuf_r+0x90>
 8009c50:	4638      	mov	r0, r7
 8009c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c54:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <__swbuf_r+0x9c>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d101      	bne.n	8009c5e <__swbuf_r+0x7a>
 8009c5a:	68ac      	ldr	r4, [r5, #8]
 8009c5c:	e7cf      	b.n	8009bfe <__swbuf_r+0x1a>
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <__swbuf_r+0xa0>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	bf08      	it	eq
 8009c64:	68ec      	ldreq	r4, [r5, #12]
 8009c66:	e7ca      	b.n	8009bfe <__swbuf_r+0x1a>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f81a 	bl	8009ca4 <__swsetup_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d0cb      	beq.n	8009c0c <__swbuf_r+0x28>
 8009c74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c78:	e7ea      	b.n	8009c50 <__swbuf_r+0x6c>
 8009c7a:	bf00      	nop
 8009c7c:	0800a67c 	.word	0x0800a67c
 8009c80:	0800a69c 	.word	0x0800a69c
 8009c84:	0800a65c 	.word	0x0800a65c

08009c88 <__ascii_wctomb>:
 8009c88:	b149      	cbz	r1, 8009c9e <__ascii_wctomb+0x16>
 8009c8a:	2aff      	cmp	r2, #255	; 0xff
 8009c8c:	bf85      	ittet	hi
 8009c8e:	238a      	movhi	r3, #138	; 0x8a
 8009c90:	6003      	strhi	r3, [r0, #0]
 8009c92:	700a      	strbls	r2, [r1, #0]
 8009c94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009c98:	bf98      	it	ls
 8009c9a:	2001      	movls	r0, #1
 8009c9c:	4770      	bx	lr
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4770      	bx	lr
	...

08009ca4 <__swsetup_r>:
 8009ca4:	4b32      	ldr	r3, [pc, #200]	; (8009d70 <__swsetup_r+0xcc>)
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	681d      	ldr	r5, [r3, #0]
 8009caa:	4606      	mov	r6, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	b125      	cbz	r5, 8009cba <__swsetup_r+0x16>
 8009cb0:	69ab      	ldr	r3, [r5, #24]
 8009cb2:	b913      	cbnz	r3, 8009cba <__swsetup_r+0x16>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7fb fd37 	bl	8005728 <__sinit>
 8009cba:	4b2e      	ldr	r3, [pc, #184]	; (8009d74 <__swsetup_r+0xd0>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d10f      	bne.n	8009ce0 <__swsetup_r+0x3c>
 8009cc0:	686c      	ldr	r4, [r5, #4]
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc8:	0719      	lsls	r1, r3, #28
 8009cca:	d42c      	bmi.n	8009d26 <__swsetup_r+0x82>
 8009ccc:	06dd      	lsls	r5, r3, #27
 8009cce:	d411      	bmi.n	8009cf4 <__swsetup_r+0x50>
 8009cd0:	2309      	movs	r3, #9
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cde:	e03e      	b.n	8009d5e <__swsetup_r+0xba>
 8009ce0:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <__swsetup_r+0xd4>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d101      	bne.n	8009cea <__swsetup_r+0x46>
 8009ce6:	68ac      	ldr	r4, [r5, #8]
 8009ce8:	e7eb      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <__swsetup_r+0xd8>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	bf08      	it	eq
 8009cf0:	68ec      	ldreq	r4, [r5, #12]
 8009cf2:	e7e6      	b.n	8009cc2 <__swsetup_r+0x1e>
 8009cf4:	0758      	lsls	r0, r3, #29
 8009cf6:	d512      	bpl.n	8009d1e <__swsetup_r+0x7a>
 8009cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfa:	b141      	cbz	r1, 8009d0e <__swsetup_r+0x6a>
 8009cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__swsetup_r+0x66>
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7fb fdef 	bl	80058e8 <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b94b      	cbnz	r3, 8009d3e <__swsetup_r+0x9a>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d34:	d003      	beq.n	8009d3e <__swsetup_r+0x9a>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 f875 	bl	8009e28 <__smakebuf_r>
 8009d3e:	89a0      	ldrh	r0, [r4, #12]
 8009d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d44:	f010 0301 	ands.w	r3, r0, #1
 8009d48:	d00a      	beq.n	8009d60 <__swsetup_r+0xbc>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6963      	ldr	r3, [r4, #20]
 8009d50:	425b      	negs	r3, r3
 8009d52:	61a3      	str	r3, [r4, #24]
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b943      	cbnz	r3, 8009d6a <__swsetup_r+0xc6>
 8009d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d5c:	d1ba      	bne.n	8009cd4 <__swsetup_r+0x30>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	0781      	lsls	r1, r0, #30
 8009d62:	bf58      	it	pl
 8009d64:	6963      	ldrpl	r3, [r4, #20]
 8009d66:	60a3      	str	r3, [r4, #8]
 8009d68:	e7f4      	b.n	8009d54 <__swsetup_r+0xb0>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e7f7      	b.n	8009d5e <__swsetup_r+0xba>
 8009d6e:	bf00      	nop
 8009d70:	20000010 	.word	0x20000010
 8009d74:	0800a67c 	.word	0x0800a67c
 8009d78:	0800a69c 	.word	0x0800a69c
 8009d7c:	0800a65c 	.word	0x0800a65c

08009d80 <__assert_func>:
 8009d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d82:	4614      	mov	r4, r2
 8009d84:	461a      	mov	r2, r3
 8009d86:	4b09      	ldr	r3, [pc, #36]	; (8009dac <__assert_func+0x2c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	68d8      	ldr	r0, [r3, #12]
 8009d8e:	b14c      	cbz	r4, 8009da4 <__assert_func+0x24>
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <__assert_func+0x30>)
 8009d92:	9100      	str	r1, [sp, #0]
 8009d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d98:	4906      	ldr	r1, [pc, #24]	; (8009db4 <__assert_func+0x34>)
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	f000 f80e 	bl	8009dbc <fiprintf>
 8009da0:	f000 f8c2 	bl	8009f28 <abort>
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <__assert_func+0x38>)
 8009da6:	461c      	mov	r4, r3
 8009da8:	e7f3      	b.n	8009d92 <__assert_func+0x12>
 8009daa:	bf00      	nop
 8009dac:	20000010 	.word	0x20000010
 8009db0:	0800aad5 	.word	0x0800aad5
 8009db4:	0800aae2 	.word	0x0800aae2
 8009db8:	0800ab10 	.word	0x0800ab10

08009dbc <fiprintf>:
 8009dbc:	b40e      	push	{r1, r2, r3}
 8009dbe:	b503      	push	{r0, r1, lr}
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <fiprintf+0x20>)
 8009dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	f7ff fdad 	bl	800992c <_vfiprintf_r>
 8009dd2:	b002      	add	sp, #8
 8009dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd8:	b003      	add	sp, #12
 8009dda:	4770      	bx	lr
 8009ddc:	20000010 	.word	0x20000010

08009de0 <__swhatbuf_r>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	460e      	mov	r6, r1
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2900      	cmp	r1, #0
 8009dea:	b096      	sub	sp, #88	; 0x58
 8009dec:	4614      	mov	r4, r2
 8009dee:	461d      	mov	r5, r3
 8009df0:	da07      	bge.n	8009e02 <__swhatbuf_r+0x22>
 8009df2:	2300      	movs	r3, #0
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	89b3      	ldrh	r3, [r6, #12]
 8009df8:	061a      	lsls	r2, r3, #24
 8009dfa:	d410      	bmi.n	8009e1e <__swhatbuf_r+0x3e>
 8009dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e00:	e00e      	b.n	8009e20 <__swhatbuf_r+0x40>
 8009e02:	466a      	mov	r2, sp
 8009e04:	f000 f898 	bl	8009f38 <_fstat_r>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	dbf2      	blt.n	8009df2 <__swhatbuf_r+0x12>
 8009e0c:	9a01      	ldr	r2, [sp, #4]
 8009e0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e16:	425a      	negs	r2, r3
 8009e18:	415a      	adcs	r2, r3
 8009e1a:	602a      	str	r2, [r5, #0]
 8009e1c:	e7ee      	b.n	8009dfc <__swhatbuf_r+0x1c>
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	2000      	movs	r0, #0
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	b016      	add	sp, #88	; 0x58
 8009e26:	bd70      	pop	{r4, r5, r6, pc}

08009e28 <__smakebuf_r>:
 8009e28:	898b      	ldrh	r3, [r1, #12]
 8009e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e2c:	079d      	lsls	r5, r3, #30
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	d507      	bpl.n	8009e44 <__smakebuf_r+0x1c>
 8009e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	6163      	str	r3, [r4, #20]
 8009e40:	b002      	add	sp, #8
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	ab01      	add	r3, sp, #4
 8009e46:	466a      	mov	r2, sp
 8009e48:	f7ff ffca 	bl	8009de0 <__swhatbuf_r>
 8009e4c:	9900      	ldr	r1, [sp, #0]
 8009e4e:	4605      	mov	r5, r0
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7fb fd99 	bl	8005988 <_malloc_r>
 8009e56:	b948      	cbnz	r0, 8009e6c <__smakebuf_r+0x44>
 8009e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d4ef      	bmi.n	8009e40 <__smakebuf_r+0x18>
 8009e60:	f023 0303 	bic.w	r3, r3, #3
 8009e64:	f043 0302 	orr.w	r3, r3, #2
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	e7e3      	b.n	8009e34 <__smakebuf_r+0xc>
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <__smakebuf_r+0x7c>)
 8009e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	9b00      	ldr	r3, [sp, #0]
 8009e7c:	6163      	str	r3, [r4, #20]
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	6120      	str	r0, [r4, #16]
 8009e82:	b15b      	cbz	r3, 8009e9c <__smakebuf_r+0x74>
 8009e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f867 	bl	8009f5c <_isatty_r>
 8009e8e:	b128      	cbz	r0, 8009e9c <__smakebuf_r+0x74>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	89a0      	ldrh	r0, [r4, #12]
 8009e9e:	4305      	orrs	r5, r0
 8009ea0:	81a5      	strh	r5, [r4, #12]
 8009ea2:	e7cd      	b.n	8009e40 <__smakebuf_r+0x18>
 8009ea4:	080056c1 	.word	0x080056c1

08009ea8 <memmove>:
 8009ea8:	4288      	cmp	r0, r1
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	eb01 0402 	add.w	r4, r1, r2
 8009eb0:	d902      	bls.n	8009eb8 <memmove+0x10>
 8009eb2:	4284      	cmp	r4, r0
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	d807      	bhi.n	8009ec8 <memmove+0x20>
 8009eb8:	1e43      	subs	r3, r0, #1
 8009eba:	42a1      	cmp	r1, r4
 8009ebc:	d008      	beq.n	8009ed0 <memmove+0x28>
 8009ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ec6:	e7f8      	b.n	8009eba <memmove+0x12>
 8009ec8:	4402      	add	r2, r0
 8009eca:	4601      	mov	r1, r0
 8009ecc:	428a      	cmp	r2, r1
 8009ece:	d100      	bne.n	8009ed2 <memmove+0x2a>
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eda:	e7f7      	b.n	8009ecc <memmove+0x24>

08009edc <_realloc_r>:
 8009edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ede:	4607      	mov	r7, r0
 8009ee0:	4614      	mov	r4, r2
 8009ee2:	460e      	mov	r6, r1
 8009ee4:	b921      	cbnz	r1, 8009ef0 <_realloc_r+0x14>
 8009ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009eea:	4611      	mov	r1, r2
 8009eec:	f7fb bd4c 	b.w	8005988 <_malloc_r>
 8009ef0:	b922      	cbnz	r2, 8009efc <_realloc_r+0x20>
 8009ef2:	f7fb fcf9 	bl	80058e8 <_free_r>
 8009ef6:	4625      	mov	r5, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009efc:	f000 f83e 	bl	8009f7c <_malloc_usable_size_r>
 8009f00:	42a0      	cmp	r0, r4
 8009f02:	d20f      	bcs.n	8009f24 <_realloc_r+0x48>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7fb fd3e 	bl	8005988 <_malloc_r>
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d0f2      	beq.n	8009ef8 <_realloc_r+0x1c>
 8009f12:	4631      	mov	r1, r6
 8009f14:	4622      	mov	r2, r4
 8009f16:	f7fb fcd1 	bl	80058bc <memcpy>
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f7fb fce3 	bl	80058e8 <_free_r>
 8009f22:	e7e9      	b.n	8009ef8 <_realloc_r+0x1c>
 8009f24:	4635      	mov	r5, r6
 8009f26:	e7e7      	b.n	8009ef8 <_realloc_r+0x1c>

08009f28 <abort>:
 8009f28:	b508      	push	{r3, lr}
 8009f2a:	2006      	movs	r0, #6
 8009f2c:	f000 f856 	bl	8009fdc <raise>
 8009f30:	2001      	movs	r0, #1
 8009f32:	f000 fb29 	bl	800a588 <_exit>
	...

08009f38 <_fstat_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	; (8009f58 <_fstat_r+0x20>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f000 f992 	bl	800a26e <_fstat>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	d102      	bne.n	8009f54 <_fstat_r+0x1c>
 8009f4e:	682b      	ldr	r3, [r5, #0]
 8009f50:	b103      	cbz	r3, 8009f54 <_fstat_r+0x1c>
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	bf00      	nop
 8009f58:	200044e0 	.word	0x200044e0

08009f5c <_isatty_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d06      	ldr	r5, [pc, #24]	; (8009f78 <_isatty_r+0x1c>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f000 faf2 	bl	800a550 <_isatty>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_isatty_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_isatty_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	200044e0 	.word	0x200044e0

08009f7c <_malloc_usable_size_r>:
 8009f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f80:	1f18      	subs	r0, r3, #4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfbc      	itt	lt
 8009f86:	580b      	ldrlt	r3, [r1, r0]
 8009f88:	18c0      	addlt	r0, r0, r3
 8009f8a:	4770      	bx	lr

08009f8c <_raise_r>:
 8009f8c:	291f      	cmp	r1, #31
 8009f8e:	b538      	push	{r3, r4, r5, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	d904      	bls.n	8009fa0 <_raise_r+0x14>
 8009f96:	2316      	movs	r3, #22
 8009f98:	6003      	str	r3, [r0, #0]
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fa2:	b112      	cbz	r2, 8009faa <_raise_r+0x1e>
 8009fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fa8:	b94b      	cbnz	r3, 8009fbe <_raise_r+0x32>
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f830 	bl	800a010 <_getpid_r>
 8009fb0:	462a      	mov	r2, r5
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fba:	f000 b817 	b.w	8009fec <_kill_r>
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d00a      	beq.n	8009fd8 <_raise_r+0x4c>
 8009fc2:	1c59      	adds	r1, r3, #1
 8009fc4:	d103      	bne.n	8009fce <_raise_r+0x42>
 8009fc6:	2316      	movs	r3, #22
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	2001      	movs	r0, #1
 8009fcc:	e7e7      	b.n	8009f9e <_raise_r+0x12>
 8009fce:	2400      	movs	r4, #0
 8009fd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	4798      	blx	r3
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e7e0      	b.n	8009f9e <_raise_r+0x12>

08009fdc <raise>:
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <raise+0xc>)
 8009fde:	4601      	mov	r1, r0
 8009fe0:	6818      	ldr	r0, [r3, #0]
 8009fe2:	f7ff bfd3 	b.w	8009f8c <_raise_r>
 8009fe6:	bf00      	nop
 8009fe8:	20000010 	.word	0x20000010

08009fec <_kill_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_kill_r+0x20>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	f000 fae3 	bl	800a5c4 <_kill>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d102      	bne.n	800a008 <_kill_r+0x1c>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b103      	cbz	r3, 800a008 <_kill_r+0x1c>
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	200044e0 	.word	0x200044e0

0800a010 <_getpid_r>:
 800a010:	f000 b90a 	b.w	800a228 <_getpid>

0800a014 <findslot>:
 800a014:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <findslot+0x2c>)
 800a016:	b510      	push	{r4, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	b118      	cbz	r0, 800a026 <findslot+0x12>
 800a01e:	6983      	ldr	r3, [r0, #24]
 800a020:	b90b      	cbnz	r3, 800a026 <findslot+0x12>
 800a022:	f7fb fb81 	bl	8005728 <__sinit>
 800a026:	2c13      	cmp	r4, #19
 800a028:	d807      	bhi.n	800a03a <findslot+0x26>
 800a02a:	4806      	ldr	r0, [pc, #24]	; (800a044 <findslot+0x30>)
 800a02c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a030:	3201      	adds	r2, #1
 800a032:	d002      	beq.n	800a03a <findslot+0x26>
 800a034:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	2000      	movs	r0, #0
 800a03c:	e7fc      	b.n	800a038 <findslot+0x24>
 800a03e:	bf00      	nop
 800a040:	20000010 	.word	0x20000010
 800a044:	20004234 	.word	0x20004234

0800a048 <checkerror>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	4604      	mov	r4, r0
 800a04e:	d109      	bne.n	800a064 <checkerror+0x1c>
 800a050:	f7fb fb0c 	bl	800566c <__errno>
 800a054:	2613      	movs	r6, #19
 800a056:	4605      	mov	r5, r0
 800a058:	2700      	movs	r7, #0
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	beab      	bkpt	0x00ab
 800a060:	4606      	mov	r6, r0
 800a062:	602e      	str	r6, [r5, #0]
 800a064:	4620      	mov	r0, r4
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a068 <error>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	4604      	mov	r4, r0
 800a06c:	f7fb fafe 	bl	800566c <__errno>
 800a070:	2613      	movs	r6, #19
 800a072:	4605      	mov	r5, r0
 800a074:	2700      	movs	r7, #0
 800a076:	4630      	mov	r0, r6
 800a078:	4639      	mov	r1, r7
 800a07a:	beab      	bkpt	0x00ab
 800a07c:	4606      	mov	r6, r0
 800a07e:	602e      	str	r6, [r5, #0]
 800a080:	4620      	mov	r0, r4
 800a082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a084 <_swiread>:
 800a084:	b530      	push	{r4, r5, lr}
 800a086:	b085      	sub	sp, #20
 800a088:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a08c:	9203      	str	r2, [sp, #12]
 800a08e:	2406      	movs	r4, #6
 800a090:	ad01      	add	r5, sp, #4
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	beab      	bkpt	0x00ab
 800a098:	4604      	mov	r4, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff ffd4 	bl	800a048 <checkerror>
 800a0a0:	b005      	add	sp, #20
 800a0a2:	bd30      	pop	{r4, r5, pc}

0800a0a4 <_read>:
 800a0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	9101      	str	r1, [sp, #4]
 800a0aa:	f7ff ffb3 	bl	800a014 <findslot>
 800a0ae:	9901      	ldr	r1, [sp, #4]
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	b938      	cbnz	r0, 800a0c4 <_read+0x20>
 800a0b4:	f7fb fada 	bl	800566c <__errno>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	6003      	str	r3, [r0, #0]
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c0:	b003      	add	sp, #12
 800a0c2:	bd30      	pop	{r4, r5, pc}
 800a0c4:	6800      	ldr	r0, [r0, #0]
 800a0c6:	462a      	mov	r2, r5
 800a0c8:	f7ff ffdc 	bl	800a084 <_swiread>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d0f7      	beq.n	800a0c0 <_read+0x1c>
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	1a2a      	subs	r2, r5, r0
 800a0d4:	4413      	add	r3, r2
 800a0d6:	6063      	str	r3, [r4, #4]
 800a0d8:	4610      	mov	r0, r2
 800a0da:	e7f1      	b.n	800a0c0 <_read+0x1c>

0800a0dc <_swilseek>:
 800a0dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0de:	460c      	mov	r4, r1
 800a0e0:	4616      	mov	r6, r2
 800a0e2:	f7ff ff97 	bl	800a014 <findslot>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b940      	cbnz	r0, 800a0fc <_swilseek+0x20>
 800a0ea:	f7fb fabf 	bl	800566c <__errno>
 800a0ee:	2309      	movs	r3, #9
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	b003      	add	sp, #12
 800a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fc:	2e02      	cmp	r6, #2
 800a0fe:	d903      	bls.n	800a108 <_swilseek+0x2c>
 800a100:	f7fb fab4 	bl	800566c <__errno>
 800a104:	2316      	movs	r3, #22
 800a106:	e7f3      	b.n	800a0f0 <_swilseek+0x14>
 800a108:	2e01      	cmp	r6, #1
 800a10a:	d112      	bne.n	800a132 <_swilseek+0x56>
 800a10c:	6843      	ldr	r3, [r0, #4]
 800a10e:	18e4      	adds	r4, r4, r3
 800a110:	d4f6      	bmi.n	800a100 <_swilseek+0x24>
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	260a      	movs	r6, #10
 800a116:	e9cd 3400 	strd	r3, r4, [sp]
 800a11a:	466f      	mov	r7, sp
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	beab      	bkpt	0x00ab
 800a122:	4606      	mov	r6, r0
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff ff8f 	bl	800a048 <checkerror>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	dbe1      	blt.n	800a0f2 <_swilseek+0x16>
 800a12e:	606c      	str	r4, [r5, #4]
 800a130:	e7e1      	b.n	800a0f6 <_swilseek+0x1a>
 800a132:	2e02      	cmp	r6, #2
 800a134:	d1ed      	bne.n	800a112 <_swilseek+0x36>
 800a136:	6803      	ldr	r3, [r0, #0]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	260c      	movs	r6, #12
 800a13c:	466f      	mov	r7, sp
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	beab      	bkpt	0x00ab
 800a144:	4606      	mov	r6, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ff7e 	bl	800a048 <checkerror>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d0d0      	beq.n	800a0f2 <_swilseek+0x16>
 800a150:	4404      	add	r4, r0
 800a152:	e7de      	b.n	800a112 <_swilseek+0x36>

0800a154 <_lseek>:
 800a154:	f7ff bfc2 	b.w	800a0dc <_swilseek>

0800a158 <_swiwrite>:
 800a158:	b530      	push	{r4, r5, lr}
 800a15a:	b085      	sub	sp, #20
 800a15c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a160:	9203      	str	r2, [sp, #12]
 800a162:	2405      	movs	r4, #5
 800a164:	ad01      	add	r5, sp, #4
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	beab      	bkpt	0x00ab
 800a16c:	4604      	mov	r4, r0
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff ff6a 	bl	800a048 <checkerror>
 800a174:	b005      	add	sp, #20
 800a176:	bd30      	pop	{r4, r5, pc}

0800a178 <_write>:
 800a178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a17a:	4615      	mov	r5, r2
 800a17c:	9101      	str	r1, [sp, #4]
 800a17e:	f7ff ff49 	bl	800a014 <findslot>
 800a182:	9901      	ldr	r1, [sp, #4]
 800a184:	4604      	mov	r4, r0
 800a186:	b930      	cbnz	r0, 800a196 <_write+0x1e>
 800a188:	f7fb fa70 	bl	800566c <__errno>
 800a18c:	2309      	movs	r3, #9
 800a18e:	6003      	str	r3, [r0, #0]
 800a190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a194:	e012      	b.n	800a1bc <_write+0x44>
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	462a      	mov	r2, r5
 800a19a:	f7ff ffdd 	bl	800a158 <_swiwrite>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	dbf6      	blt.n	800a190 <_write+0x18>
 800a1a2:	6862      	ldr	r2, [r4, #4]
 800a1a4:	1a2b      	subs	r3, r5, r0
 800a1a6:	441a      	add	r2, r3
 800a1a8:	42a8      	cmp	r0, r5
 800a1aa:	6062      	str	r2, [r4, #4]
 800a1ac:	d105      	bne.n	800a1ba <_write+0x42>
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	b003      	add	sp, #12
 800a1b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b6:	f7ff bf57 	b.w	800a068 <error>
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	b003      	add	sp, #12
 800a1be:	bd30      	pop	{r4, r5, pc}

0800a1c0 <_swiclose>:
 800a1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c2:	2402      	movs	r4, #2
 800a1c4:	9001      	str	r0, [sp, #4]
 800a1c6:	ad01      	add	r5, sp, #4
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	beab      	bkpt	0x00ab
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff ff39 	bl	800a048 <checkerror>
 800a1d6:	b003      	add	sp, #12
 800a1d8:	bd30      	pop	{r4, r5, pc}
	...

0800a1dc <_close>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4605      	mov	r5, r0
 800a1e0:	f7ff ff18 	bl	800a014 <findslot>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	b930      	cbnz	r0, 800a1f6 <_close+0x1a>
 800a1e8:	f7fb fa40 	bl	800566c <__errno>
 800a1ec:	2309      	movs	r3, #9
 800a1ee:	6003      	str	r3, [r0, #0]
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	3d01      	subs	r5, #1
 800a1f8:	2d01      	cmp	r5, #1
 800a1fa:	d809      	bhi.n	800a210 <_close+0x34>
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <_close+0x48>)
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	429a      	cmp	r2, r3
 800a204:	d104      	bne.n	800a210 <_close+0x34>
 800a206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a20a:	6003      	str	r3, [r0, #0]
 800a20c:	2000      	movs	r0, #0
 800a20e:	e7f1      	b.n	800a1f4 <_close+0x18>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	f7ff ffd5 	bl	800a1c0 <_swiclose>
 800a216:	2800      	cmp	r0, #0
 800a218:	d1ec      	bne.n	800a1f4 <_close+0x18>
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	e7e8      	b.n	800a1f4 <_close+0x18>
 800a222:	bf00      	nop
 800a224:	20004234 	.word	0x20004234

0800a228 <_getpid>:
 800a228:	2001      	movs	r0, #1
 800a22a:	4770      	bx	lr

0800a22c <_swistat>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	f7ff fef0 	bl	800a014 <findslot>
 800a234:	4605      	mov	r5, r0
 800a236:	b930      	cbnz	r0, 800a246 <_swistat+0x1a>
 800a238:	f7fb fa18 	bl	800566c <__errno>
 800a23c:	2309      	movs	r3, #9
 800a23e:	6003      	str	r3, [r0, #0]
 800a240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a244:	bd70      	pop	{r4, r5, r6, pc}
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a24c:	6063      	str	r3, [r4, #4]
 800a24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a252:	64a3      	str	r3, [r4, #72]	; 0x48
 800a254:	260c      	movs	r6, #12
 800a256:	4630      	mov	r0, r6
 800a258:	4629      	mov	r1, r5
 800a25a:	beab      	bkpt	0x00ab
 800a25c:	4605      	mov	r5, r0
 800a25e:	4628      	mov	r0, r5
 800a260:	f7ff fef2 	bl	800a048 <checkerror>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	bf1c      	itt	ne
 800a268:	6120      	strne	r0, [r4, #16]
 800a26a:	2000      	movne	r0, #0
 800a26c:	e7ea      	b.n	800a244 <_swistat+0x18>

0800a26e <_fstat>:
 800a26e:	460b      	mov	r3, r1
 800a270:	b510      	push	{r4, lr}
 800a272:	2100      	movs	r1, #0
 800a274:	4604      	mov	r4, r0
 800a276:	2258      	movs	r2, #88	; 0x58
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fb fb2d 	bl	80058d8 <memset>
 800a27e:	4601      	mov	r1, r0
 800a280:	4620      	mov	r0, r4
 800a282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a286:	f7ff bfd1 	b.w	800a22c <_swistat>

0800a28a <_stat>:
 800a28a:	b538      	push	{r3, r4, r5, lr}
 800a28c:	460d      	mov	r5, r1
 800a28e:	4604      	mov	r4, r0
 800a290:	2258      	movs	r2, #88	; 0x58
 800a292:	2100      	movs	r1, #0
 800a294:	4628      	mov	r0, r5
 800a296:	f7fb fb1f 	bl	80058d8 <memset>
 800a29a:	4620      	mov	r0, r4
 800a29c:	2100      	movs	r1, #0
 800a29e:	f000 f811 	bl	800a2c4 <_swiopen>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	d00b      	beq.n	800a2c0 <_stat+0x36>
 800a2a8:	686b      	ldr	r3, [r5, #4]
 800a2aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2ae:	606b      	str	r3, [r5, #4]
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7ff ffbb 	bl	800a22c <_swistat>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f7ff ff8f 	bl	800a1dc <_close>
 800a2be:	462c      	mov	r4, r5
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}

0800a2c4 <_swiopen>:
 800a2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	4b2a      	ldr	r3, [pc, #168]	; (800a374 <_swiopen+0xb0>)
 800a2ca:	b097      	sub	sp, #92	; 0x5c
 800a2cc:	4681      	mov	r9, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	461e      	mov	r6, r3
 800a2d4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800a2d8:	1c61      	adds	r1, r4, #1
 800a2da:	d037      	beq.n	800a34c <_swiopen+0x88>
 800a2dc:	3501      	adds	r5, #1
 800a2de:	2d14      	cmp	r5, #20
 800a2e0:	d1f8      	bne.n	800a2d4 <_swiopen+0x10>
 800a2e2:	f7fb f9c3 	bl	800566c <__errno>
 800a2e6:	2318      	movs	r3, #24
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a2ee:	e03d      	b.n	800a36c <_swiopen+0xa8>
 800a2f0:	f3c7 4400 	ubfx	r4, r7, #16, #1
 800a2f4:	f240 6301 	movw	r3, #1537	; 0x601
 800a2f8:	07ba      	lsls	r2, r7, #30
 800a2fa:	bf48      	it	mi
 800a2fc:	f044 0402 	orrmi.w	r4, r4, #2
 800a300:	421f      	tst	r7, r3
 800a302:	bf18      	it	ne
 800a304:	f044 0404 	orrne.w	r4, r4, #4
 800a308:	073b      	lsls	r3, r7, #28
 800a30a:	bf48      	it	mi
 800a30c:	f024 0404 	bicmi.w	r4, r4, #4
 800a310:	4648      	mov	r0, r9
 800a312:	bf48      	it	mi
 800a314:	f044 0408 	orrmi.w	r4, r4, #8
 800a318:	f8cd 9000 	str.w	r9, [sp]
 800a31c:	f7f5 ff58 	bl	80001d0 <strlen>
 800a320:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800a324:	2401      	movs	r4, #1
 800a326:	4620      	mov	r0, r4
 800a328:	4641      	mov	r1, r8
 800a32a:	beab      	bkpt	0x00ab
 800a32c:	4604      	mov	r4, r0
 800a32e:	2c00      	cmp	r4, #0
 800a330:	db07      	blt.n	800a342 <_swiopen+0x7e>
 800a332:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 800a336:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 800a33a:	2300      	movs	r3, #0
 800a33c:	6073      	str	r3, [r6, #4]
 800a33e:	462c      	mov	r4, r5
 800a340:	e014      	b.n	800a36c <_swiopen+0xa8>
 800a342:	4620      	mov	r0, r4
 800a344:	f7ff fe90 	bl	800a068 <error>
 800a348:	4604      	mov	r4, r0
 800a34a:	e00f      	b.n	800a36c <_swiopen+0xa8>
 800a34c:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 800a350:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a354:	46e8      	mov	r8, sp
 800a356:	d1cb      	bne.n	800a2f0 <_swiopen+0x2c>
 800a358:	4641      	mov	r1, r8
 800a35a:	4648      	mov	r0, r9
 800a35c:	f7ff ff95 	bl	800a28a <_stat>
 800a360:	3001      	adds	r0, #1
 800a362:	d0c5      	beq.n	800a2f0 <_swiopen+0x2c>
 800a364:	f7fb f982 	bl	800566c <__errno>
 800a368:	2311      	movs	r3, #17
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	4620      	mov	r0, r4
 800a36e:	b017      	add	sp, #92	; 0x5c
 800a370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a374:	20004234 	.word	0x20004234

0800a378 <_get_semihosting_exts>:
 800a378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a37c:	4606      	mov	r6, r0
 800a37e:	460f      	mov	r7, r1
 800a380:	482a      	ldr	r0, [pc, #168]	; (800a42c <_get_semihosting_exts+0xb4>)
 800a382:	2100      	movs	r1, #0
 800a384:	4615      	mov	r5, r2
 800a386:	f7ff ff9d 	bl	800a2c4 <_swiopen>
 800a38a:	462a      	mov	r2, r5
 800a38c:	4604      	mov	r4, r0
 800a38e:	2100      	movs	r1, #0
 800a390:	4630      	mov	r0, r6
 800a392:	f7fb faa1 	bl	80058d8 <memset>
 800a396:	1c63      	adds	r3, r4, #1
 800a398:	d016      	beq.n	800a3c8 <_get_semihosting_exts+0x50>
 800a39a:	4620      	mov	r0, r4
 800a39c:	f7ff fe3a 	bl	800a014 <findslot>
 800a3a0:	f04f 090c 	mov.w	r9, #12
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4648      	mov	r0, r9
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	beab      	bkpt	0x00ab
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	f7ff fe4a 	bl	800a048 <checkerror>
 800a3b4:	2803      	cmp	r0, #3
 800a3b6:	dd02      	ble.n	800a3be <_get_semihosting_exts+0x46>
 800a3b8:	1ec3      	subs	r3, r0, #3
 800a3ba:	42ab      	cmp	r3, r5
 800a3bc:	dc08      	bgt.n	800a3d0 <_get_semihosting_exts+0x58>
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff ff0c 	bl	800a1dc <_close>
 800a3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	b003      	add	sp, #12
 800a3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3d0:	2204      	movs	r2, #4
 800a3d2:	eb0d 0102 	add.w	r1, sp, r2
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7ff fe64 	bl	800a0a4 <_read>
 800a3dc:	2803      	cmp	r0, #3
 800a3de:	ddee      	ble.n	800a3be <_get_semihosting_exts+0x46>
 800a3e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a3e4:	2b53      	cmp	r3, #83	; 0x53
 800a3e6:	d1ea      	bne.n	800a3be <_get_semihosting_exts+0x46>
 800a3e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3ec:	2b48      	cmp	r3, #72	; 0x48
 800a3ee:	d1e6      	bne.n	800a3be <_get_semihosting_exts+0x46>
 800a3f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3f4:	2b46      	cmp	r3, #70	; 0x46
 800a3f6:	d1e2      	bne.n	800a3be <_get_semihosting_exts+0x46>
 800a3f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a3fc:	2b42      	cmp	r3, #66	; 0x42
 800a3fe:	d1de      	bne.n	800a3be <_get_semihosting_exts+0x46>
 800a400:	2201      	movs	r2, #1
 800a402:	4639      	mov	r1, r7
 800a404:	4620      	mov	r0, r4
 800a406:	f7ff fe69 	bl	800a0dc <_swilseek>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	dbd7      	blt.n	800a3be <_get_semihosting_exts+0x46>
 800a40e:	462a      	mov	r2, r5
 800a410:	4631      	mov	r1, r6
 800a412:	4620      	mov	r0, r4
 800a414:	f7ff fe46 	bl	800a0a4 <_read>
 800a418:	4605      	mov	r5, r0
 800a41a:	4620      	mov	r0, r4
 800a41c:	f7ff fede 	bl	800a1dc <_close>
 800a420:	4628      	mov	r0, r5
 800a422:	f7ff fe11 	bl	800a048 <checkerror>
 800a426:	4604      	mov	r4, r0
 800a428:	e7ce      	b.n	800a3c8 <_get_semihosting_exts+0x50>
 800a42a:	bf00      	nop
 800a42c:	0800ab11 	.word	0x0800ab11

0800a430 <initialise_semihosting_exts>:
 800a430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a432:	4d0a      	ldr	r5, [pc, #40]	; (800a45c <initialise_semihosting_exts+0x2c>)
 800a434:	4c0a      	ldr	r4, [pc, #40]	; (800a460 <initialise_semihosting_exts+0x30>)
 800a436:	2100      	movs	r1, #0
 800a438:	2201      	movs	r2, #1
 800a43a:	a801      	add	r0, sp, #4
 800a43c:	6029      	str	r1, [r5, #0]
 800a43e:	6022      	str	r2, [r4, #0]
 800a440:	f7ff ff9a 	bl	800a378 <_get_semihosting_exts>
 800a444:	2800      	cmp	r0, #0
 800a446:	dd07      	ble.n	800a458 <initialise_semihosting_exts+0x28>
 800a448:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a44c:	f003 0201 	and.w	r2, r3, #1
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	b003      	add	sp, #12
 800a45a:	bd30      	pop	{r4, r5, pc}
 800a45c:	200001e4 	.word	0x200001e4
 800a460:	200001e8 	.word	0x200001e8

0800a464 <_has_ext_exit_extended>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4c04      	ldr	r4, [pc, #16]	; (800a478 <_has_ext_exit_extended+0x14>)
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	da01      	bge.n	800a472 <_has_ext_exit_extended+0xe>
 800a46e:	f7ff ffdf 	bl	800a430 <initialise_semihosting_exts>
 800a472:	6820      	ldr	r0, [r4, #0]
 800a474:	bd10      	pop	{r4, pc}
 800a476:	bf00      	nop
 800a478:	200001e4 	.word	0x200001e4

0800a47c <_has_ext_stdout_stderr>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4c04      	ldr	r4, [pc, #16]	; (800a490 <_has_ext_stdout_stderr+0x14>)
 800a480:	6822      	ldr	r2, [r4, #0]
 800a482:	2a00      	cmp	r2, #0
 800a484:	da01      	bge.n	800a48a <_has_ext_stdout_stderr+0xe>
 800a486:	f7ff ffd3 	bl	800a430 <initialise_semihosting_exts>
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	bd10      	pop	{r4, pc}
 800a48e:	bf00      	nop
 800a490:	200001e8 	.word	0x200001e8

0800a494 <initialise_monitor_handles>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b085      	sub	sp, #20
 800a49a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a54c <initialise_monitor_handles+0xb8>
 800a49e:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	2400      	movs	r4, #0
 800a4a6:	9303      	str	r3, [sp, #12]
 800a4a8:	f10d 0804 	add.w	r8, sp, #4
 800a4ac:	9402      	str	r4, [sp, #8]
 800a4ae:	2501      	movs	r5, #1
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	beab      	bkpt	0x00ab
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	4e20      	ldr	r6, [pc, #128]	; (800a53c <initialise_monitor_handles+0xa8>)
 800a4ba:	4a21      	ldr	r2, [pc, #132]	; (800a540 <initialise_monitor_handles+0xac>)
 800a4bc:	6035      	str	r5, [r6, #0]
 800a4be:	4623      	mov	r3, r4
 800a4c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	2b14      	cmp	r3, #20
 800a4ce:	d1fa      	bne.n	800a4c6 <initialise_monitor_handles+0x32>
 800a4d0:	f7ff ffd4 	bl	800a47c <_has_ext_stdout_stderr>
 800a4d4:	4d1b      	ldr	r5, [pc, #108]	; (800a544 <initialise_monitor_handles+0xb0>)
 800a4d6:	b1d0      	cbz	r0, 800a50e <initialise_monitor_handles+0x7a>
 800a4d8:	f04f 0a03 	mov.w	sl, #3
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4e2:	2701      	movs	r7, #1
 800a4e4:	f8cd a00c 	str.w	sl, [sp, #12]
 800a4e8:	9302      	str	r3, [sp, #8]
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	4641      	mov	r1, r8
 800a4ee:	beab      	bkpt	0x00ab
 800a4f0:	4683      	mov	fp, r0
 800a4f2:	4b15      	ldr	r3, [pc, #84]	; (800a548 <initialise_monitor_handles+0xb4>)
 800a4f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4f8:	f8c3 b000 	str.w	fp, [r3]
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	f8cd a00c 	str.w	sl, [sp, #12]
 800a502:	9302      	str	r3, [sp, #8]
 800a504:	4638      	mov	r0, r7
 800a506:	4641      	mov	r1, r8
 800a508:	beab      	bkpt	0x00ab
 800a50a:	4607      	mov	r7, r0
 800a50c:	602f      	str	r7, [r5, #0]
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	bf02      	ittt	eq
 800a514:	4b0c      	ldreq	r3, [pc, #48]	; (800a548 <initialise_monitor_handles+0xb4>)
 800a516:	681b      	ldreq	r3, [r3, #0]
 800a518:	602b      	streq	r3, [r5, #0]
 800a51a:	6833      	ldr	r3, [r6, #0]
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	2600      	movs	r6, #0
 800a520:	6066      	str	r6, [r4, #4]
 800a522:	f7ff ffab 	bl	800a47c <_has_ext_stdout_stderr>
 800a526:	b130      	cbz	r0, 800a536 <initialise_monitor_handles+0xa2>
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <initialise_monitor_handles+0xb4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a536:	b005      	add	sp, #20
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	2000422c 	.word	0x2000422c
 800a540:	20004234 	.word	0x20004234
 800a544:	20004228 	.word	0x20004228
 800a548:	20004230 	.word	0x20004230
 800a54c:	0800ab27 	.word	0x0800ab27

0800a550 <_isatty>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	f7ff fd5f 	bl	800a014 <findslot>
 800a556:	2509      	movs	r5, #9
 800a558:	4604      	mov	r4, r0
 800a55a:	b920      	cbnz	r0, 800a566 <_isatty+0x16>
 800a55c:	f7fb f886 	bl	800566c <__errno>
 800a560:	6005      	str	r5, [r0, #0]
 800a562:	4620      	mov	r0, r4
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	4628      	mov	r0, r5
 800a568:	4621      	mov	r1, r4
 800a56a:	beab      	bkpt	0x00ab
 800a56c:	4604      	mov	r4, r0
 800a56e:	2c01      	cmp	r4, #1
 800a570:	d0f7      	beq.n	800a562 <_isatty+0x12>
 800a572:	f7fb f87b 	bl	800566c <__errno>
 800a576:	2400      	movs	r4, #0
 800a578:	4605      	mov	r5, r0
 800a57a:	2613      	movs	r6, #19
 800a57c:	4630      	mov	r0, r6
 800a57e:	4621      	mov	r1, r4
 800a580:	beab      	bkpt	0x00ab
 800a582:	4606      	mov	r6, r0
 800a584:	602e      	str	r6, [r5, #0]
 800a586:	e7ec      	b.n	800a562 <_isatty+0x12>

0800a588 <_exit>:
 800a588:	4601      	mov	r1, r0
 800a58a:	b508      	push	{r3, lr}
 800a58c:	4a02      	ldr	r2, [pc, #8]	; (800a598 <_exit+0x10>)
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a592:	f000 f803 	bl	800a59c <_kill_shared>
 800a596:	bf00      	nop
 800a598:	00020026 	.word	0x00020026

0800a59c <_kill_shared>:
 800a59c:	b507      	push	{r0, r1, r2, lr}
 800a59e:	e9cd 2100 	strd	r2, r1, [sp]
 800a5a2:	f7ff ff5f 	bl	800a464 <_has_ext_exit_extended>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	bf14      	ite	ne
 800a5aa:	2420      	movne	r4, #32
 800a5ac:	2418      	moveq	r4, #24
 800a5ae:	f7ff ff59 	bl	800a464 <_has_ext_exit_extended>
 800a5b2:	b120      	cbz	r0, 800a5be <_kill_shared+0x22>
 800a5b4:	466d      	mov	r5, sp
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	beab      	bkpt	0x00ab
 800a5bc:	4604      	mov	r4, r0
 800a5be:	9d00      	ldr	r5, [sp, #0]
 800a5c0:	e7f9      	b.n	800a5b6 <_kill_shared+0x1a>
	...

0800a5c4 <_kill>:
 800a5c4:	2906      	cmp	r1, #6
 800a5c6:	b508      	push	{r3, lr}
 800a5c8:	bf0c      	ite	eq
 800a5ca:	4a02      	ldreq	r2, [pc, #8]	; (800a5d4 <_kill+0x10>)
 800a5cc:	4a02      	ldrne	r2, [pc, #8]	; (800a5d8 <_kill+0x14>)
 800a5ce:	f7ff ffe5 	bl	800a59c <_kill_shared>
 800a5d2:	bf00      	nop
 800a5d4:	00020023 	.word	0x00020023
 800a5d8:	00020026 	.word	0x00020026

0800a5dc <_init>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr

0800a5e8 <_fini>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	bf00      	nop
 800a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ee:	bc08      	pop	{r3}
 800a5f0:	469e      	mov	lr, r3
 800a5f2:	4770      	bx	lr
